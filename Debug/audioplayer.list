
audioplayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005cb4  08005cb4  00015cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d74  08005d74  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005d74  08005d74  00015d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d7c  08005d7c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d7c  08005d7c  00015d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d80  08005d80  00015d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00012fe8  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001305c  2001305c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016ec2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f4e  00000000  00000000  00036f66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001560  00000000  00000000  00039eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001450  00000000  00000000  0003b418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000232a9  00000000  00000000  0003c868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001890a  00000000  00000000  0005fb11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d69df  00000000  00000000  0007841b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014edfa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ef4  00000000  00000000  0014ee4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c9c 	.word	0x08005c9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005c9c 	.word	0x08005c9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <task1>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void task1(void * pvParameters){
 8000584:	b580      	push	{r7, lr}
 8000586:	b0c2      	sub	sp, #264	; 0x108
 8000588:	af00      	add	r7, sp, #0
 800058a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800058e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000592:	6018      	str	r0, [r3, #0]
	char buf[256];
	while(1){
		sprintf(buf,"Test message from task 1.\n\r");
 8000594:	f107 0308 	add.w	r3, r7, #8
 8000598:	490b      	ldr	r1, [pc, #44]	; (80005c8 <task1+0x44>)
 800059a:	4618      	mov	r0, r3
 800059c:	f004 ff1e 	bl	80053dc <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff fe13 	bl	80001d0 <strlen>
 80005aa:	4603      	mov	r3, r0
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	f107 0108 	add.w	r1, r7, #8
 80005b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b6:	4805      	ldr	r0, [pc, #20]	; (80005cc <task1+0x48>)
 80005b8:	f002 f839 	bl	800262e <HAL_UART_Transmit>
		vTaskDelay(1000);
 80005bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c0:	f003 fa48 	bl	8003a54 <vTaskDelay>
		sprintf(buf,"Test message from task 1.\n\r");
 80005c4:	e7e6      	b.n	8000594 <task1+0x10>
 80005c6:	bf00      	nop
 80005c8:	08005cb4 	.word	0x08005cb4
 80005cc:	2000013c 	.word	0x2000013c

080005d0 <task2>:
	}
	return;
};

void task2(void * pvParameters){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b0c2      	sub	sp, #264	; 0x108
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80005da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80005de:	6018      	str	r0, [r3, #0]
	char buf[256];
	while(1){
		sprintf(buf,"Test message from task 2.\n\r");
 80005e0:	f107 0308 	add.w	r3, r7, #8
 80005e4:	490b      	ldr	r1, [pc, #44]	; (8000614 <task2+0x44>)
 80005e6:	4618      	mov	r0, r3
 80005e8:	f004 fef8 	bl	80053dc <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fded 	bl	80001d0 <strlen>
 80005f6:	4603      	mov	r3, r0
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	f107 0108 	add.w	r1, r7, #8
 80005fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000602:	4805      	ldr	r0, [pc, #20]	; (8000618 <task2+0x48>)
 8000604:	f002 f813 	bl	800262e <HAL_UART_Transmit>
		vTaskDelay(1000);
 8000608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060c:	f003 fa22 	bl	8003a54 <vTaskDelay>
		sprintf(buf,"Test message from task 2.\n\r");
 8000610:	e7e6      	b.n	80005e0 <task2+0x10>
 8000612:	bf00      	nop
 8000614:	08005cd0 	.word	0x08005cd0
 8000618:	2000013c 	.word	0x2000013c

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 fbdb 	bl	8000ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f829 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 f913 	bl	8000854 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062e:	f000 f8e7 	bl	8000800 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000632:	f000 f881 	bl	8000738 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000636:	f000 f8ad 	bl	8000794 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // Start task here
  xTaskCreate(task1, "task1", STACK_SIZE, (void *) NULL, 1, NULL);
 800063a:	2300      	movs	r3, #0
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	2301      	movs	r3, #1
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2300      	movs	r3, #0
 8000644:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000648:	4908      	ldr	r1, [pc, #32]	; (800066c <main+0x50>)
 800064a:	4809      	ldr	r0, [pc, #36]	; (8000670 <main+0x54>)
 800064c:	f003 f8c4 	bl	80037d8 <xTaskCreate>
  xTaskCreate(task2, "task2", STACK_SIZE, (void *) NULL, 1, NULL);
 8000650:	2300      	movs	r3, #0
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	2301      	movs	r3, #1
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2300      	movs	r3, #0
 800065a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800065e:	4905      	ldr	r1, [pc, #20]	; (8000674 <main+0x58>)
 8000660:	4805      	ldr	r0, [pc, #20]	; (8000678 <main+0x5c>)
 8000662:	f003 f8b9 	bl	80037d8 <xTaskCreate>

  // Start scheduler here
  vTaskStartScheduler();
 8000666:	f003 fa29 	bl	8003abc <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066a:	e7fe      	b.n	800066a <main+0x4e>
 800066c:	08005cec 	.word	0x08005cec
 8000670:	08000585 	.word	0x08000585
 8000674:	08005cf4 	.word	0x08005cf4
 8000678:	080005d1 	.word	0x080005d1

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	; 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f004 fe9e 	bl	80053cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <SystemClock_Config+0xb4>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a21      	ldr	r2, [pc, #132]	; (8000730 <SystemClock_Config+0xb4>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <SystemClock_Config+0xb4>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <SystemClock_Config+0xb8>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a1b      	ldr	r2, [pc, #108]	; (8000734 <SystemClock_Config+0xb8>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b19      	ldr	r3, [pc, #100]	; (8000734 <SystemClock_Config+0xb8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 0320 	add.w	r3, r7, #32
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 ff91 	bl	8001614 <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006f8:	f000 f956 	bl	80009a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	230f      	movs	r3, #15
 80006fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000700:	2300      	movs	r3, #0
 8000702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f001 f9f4 	bl	8001b04 <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000722:	f000 f941 	bl	80009a8 <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3750      	adds	r7, #80	; 0x50
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_I2C1_Init+0x50>)
 800073e:	4a13      	ldr	r2, [pc, #76]	; (800078c <MX_I2C1_Init+0x54>)
 8000740:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_I2C1_Init+0x50>)
 8000744:	4a12      	ldr	r2, [pc, #72]	; (8000790 <MX_I2C1_Init+0x58>)
 8000746:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_I2C1_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_I2C1_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_I2C1_Init+0x50>)
 8000756:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800075a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <MX_I2C1_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_I2C1_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <MX_I2C1_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_I2C1_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_I2C1_Init+0x50>)
 8000776:	f000 fe09 	bl	800138c <HAL_I2C_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000780:	f000 f912 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000090 	.word	0x20000090
 800078c:	40005400 	.word	0x40005400
 8000790:	000186a0 	.word	0x000186a0

08000794 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000798:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_SPI1_Init+0x64>)
 800079a:	4a18      	ldr	r2, [pc, #96]	; (80007fc <MX_SPI1_Init+0x68>)
 800079c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800079e:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007e0:	220a      	movs	r2, #10
 80007e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007e6:	f001 fb9f 	bl	8001f28 <HAL_SPI_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007f0:	f000 f8da 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200000e4 	.word	0x200000e4
 80007fc:	40013000 	.word	0x40013000

08000800 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_USART2_UART_Init+0x4c>)
 8000806:	4a12      	ldr	r2, [pc, #72]	; (8000850 <MX_USART2_UART_Init+0x50>)
 8000808:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <MX_USART2_UART_Init+0x4c>)
 800080c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000810:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_USART2_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_USART2_UART_Init+0x4c>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_USART2_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_USART2_UART_Init+0x4c>)
 8000826:	220c      	movs	r2, #12
 8000828:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_USART2_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_USART2_UART_Init+0x4c>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_USART2_UART_Init+0x4c>)
 8000838:	f001 feac 	bl	8002594 <HAL_UART_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000842:	f000 f8b1 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	2000013c 	.word	0x2000013c
 8000850:	40004400 	.word	0x40004400

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	4b30      	ldr	r3, [pc, #192]	; (8000930 <MX_GPIO_Init+0xdc>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a2f      	ldr	r2, [pc, #188]	; (8000930 <MX_GPIO_Init+0xdc>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b2d      	ldr	r3, [pc, #180]	; (8000930 <MX_GPIO_Init+0xdc>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b29      	ldr	r3, [pc, #164]	; (8000930 <MX_GPIO_Init+0xdc>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a28      	ldr	r2, [pc, #160]	; (8000930 <MX_GPIO_Init+0xdc>)
 8000890:	f043 0308 	orr.w	r3, r3, #8
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b26      	ldr	r3, [pc, #152]	; (8000930 <MX_GPIO_Init+0xdc>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0308 	and.w	r3, r3, #8
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	4b22      	ldr	r3, [pc, #136]	; (8000930 <MX_GPIO_Init+0xdc>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a21      	ldr	r2, [pc, #132]	; (8000930 <MX_GPIO_Init+0xdc>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_GPIO_Init+0xdc>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PD1 PD2 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80008be:	23fe      	movs	r3, #254	; 0xfe
 80008c0:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	4619      	mov	r1, r3
 80008d2:	4818      	ldr	r0, [pc, #96]	; (8000934 <MX_GPIO_Init+0xe0>)
 80008d4:	f000 fba6 	bl	8001024 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	2105      	movs	r1, #5
 80008dc:	2007      	movs	r0, #7
 80008de:	f000 fb77 	bl	8000fd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80008e2:	2007      	movs	r0, #7
 80008e4:	f000 fb90 	bl	8001008 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2105      	movs	r1, #5
 80008ec:	2008      	movs	r0, #8
 80008ee:	f000 fb6f 	bl	8000fd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80008f2:	2008      	movs	r0, #8
 80008f4:	f000 fb88 	bl	8001008 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2105      	movs	r1, #5
 80008fc:	2009      	movs	r0, #9
 80008fe:	f000 fb67 	bl	8000fd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000902:	2009      	movs	r0, #9
 8000904:	f000 fb80 	bl	8001008 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000908:	2200      	movs	r2, #0
 800090a:	2105      	movs	r1, #5
 800090c:	200a      	movs	r0, #10
 800090e:	f000 fb5f 	bl	8000fd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000912:	200a      	movs	r0, #10
 8000914:	f000 fb78 	bl	8001008 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	2105      	movs	r1, #5
 800091c:	2017      	movs	r0, #23
 800091e:	f000 fb57 	bl	8000fd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000922:	2017      	movs	r0, #23
 8000924:	f000 fb70 	bl	8001008 <HAL_NVIC_EnableIRQ>

}
 8000928:	bf00      	nop
 800092a:	3720      	adds	r7, #32
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800
 8000934:	40020c00 	.word	0x40020c00

08000938 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000938:	b580      	push	{r7, lr}
 800093a:	b0c2      	sub	sp, #264	; 0x108
 800093c:	af00      	add	r7, sp, #0
 800093e:	4602      	mov	r2, r0
 8000940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000944:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8000948:	801a      	strh	r2, [r3, #0]
	char buf[256];
	sprintf(buf,"Button pressed!!!\n\r");
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	490b      	ldr	r1, [pc, #44]	; (800097c <HAL_GPIO_EXTI_Callback+0x44>)
 8000950:	4618      	mov	r0, r3
 8000952:	f004 fd43 	bl	80053dc <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fc38 	bl	80001d0 <strlen>
 8000960:	4603      	mov	r3, r0
 8000962:	b29a      	uxth	r2, r3
 8000964:	f107 0108 	add.w	r1, r7, #8
 8000968:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <HAL_GPIO_EXTI_Callback+0x48>)
 800096e:	f001 fe5e 	bl	800262e <HAL_UART_Transmit>
	return;
 8000972:	bf00      	nop
}
 8000974:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	08005cfc 	.word	0x08005cfc
 8000980:	2000013c 	.word	0x2000013c

08000984 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d101      	bne.n	800099a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000996:	f000 fa43 	bl	8000e20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40001400 	.word	0x40001400

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <Error_Handler+0x8>
	...

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <HAL_MspInit+0x4c>)
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a08      	ldr	r2, [pc, #32]	; (8000a00 <HAL_MspInit+0x4c>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800

08000a04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a19      	ldr	r2, [pc, #100]	; (8000a88 <HAL_I2C_MspInit+0x84>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d12b      	bne.n	8000a7e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <HAL_I2C_MspInit+0x88>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a17      	ldr	r2, [pc, #92]	; (8000a8c <HAL_I2C_MspInit+0x88>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_I2C_MspInit+0x88>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a42:	23c0      	movs	r3, #192	; 0xc0
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a46:	2312      	movs	r3, #18
 8000a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a52:	2304      	movs	r3, #4
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480c      	ldr	r0, [pc, #48]	; (8000a90 <HAL_I2C_MspInit+0x8c>)
 8000a5e:	f000 fae1 	bl	8001024 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_I2C_MspInit+0x88>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	4a08      	ldr	r2, [pc, #32]	; (8000a8c <HAL_I2C_MspInit+0x88>)
 8000a6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a70:	6413      	str	r3, [r2, #64]	; 0x40
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_I2C_MspInit+0x88>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a7e:	bf00      	nop
 8000a80:	3728      	adds	r7, #40	; 0x28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40005400 	.word	0x40005400
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020400 	.word	0x40020400

08000a94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	; 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a19      	ldr	r2, [pc, #100]	; (8000b18 <HAL_SPI_MspInit+0x84>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d12b      	bne.n	8000b0e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <HAL_SPI_MspInit+0x88>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	4a17      	ldr	r2, [pc, #92]	; (8000b1c <HAL_SPI_MspInit+0x88>)
 8000ac0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <HAL_SPI_MspInit+0x88>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <HAL_SPI_MspInit+0x88>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a10      	ldr	r2, [pc, #64]	; (8000b1c <HAL_SPI_MspInit+0x88>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <HAL_SPI_MspInit+0x88>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000aee:	23e0      	movs	r3, #224	; 0xe0
 8000af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000afe:	2305      	movs	r3, #5
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	; (8000b20 <HAL_SPI_MspInit+0x8c>)
 8000b0a:	f000 fa8b 	bl	8001024 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b0e:	bf00      	nop
 8000b10:	3728      	adds	r7, #40	; 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40013000 	.word	0x40013000
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000

08000b24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <HAL_UART_MspInit+0x84>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d12b      	bne.n	8000b9e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_UART_MspInit+0x88>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	4a17      	ldr	r2, [pc, #92]	; (8000bac <HAL_UART_MspInit+0x88>)
 8000b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b54:	6413      	str	r3, [r2, #64]	; 0x40
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_UART_MspInit+0x88>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <HAL_UART_MspInit+0x88>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a10      	ldr	r2, [pc, #64]	; (8000bac <HAL_UART_MspInit+0x88>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <HAL_UART_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b7e:	230c      	movs	r3, #12
 8000b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b8e:	2307      	movs	r3, #7
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <HAL_UART_MspInit+0x8c>)
 8000b9a:	f000 fa43 	bl	8001024 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	3728      	adds	r7, #40	; 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40004400 	.word	0x40004400
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020000 	.word	0x40020000

08000bb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08c      	sub	sp, #48	; 0x30
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	2037      	movs	r0, #55	; 0x37
 8000bca:	f000 fa01 	bl	8000fd0 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000bce:	2037      	movs	r0, #55	; 0x37
 8000bd0:	f000 fa1a 	bl	8001008 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <HAL_InitTick+0xa0>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	4a1d      	ldr	r2, [pc, #116]	; (8000c54 <HAL_InitTick+0xa0>)
 8000bde:	f043 0320 	orr.w	r3, r3, #32
 8000be2:	6413      	str	r3, [r2, #64]	; 0x40
 8000be4:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <HAL_InitTick+0xa0>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	f003 0320 	and.w	r3, r3, #32
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bf0:	f107 0210 	add.w	r2, r7, #16
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 f962 	bl	8001ec4 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c00:	f001 f938 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 8000c04:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c08:	4a13      	ldr	r2, [pc, #76]	; (8000c58 <HAL_InitTick+0xa4>)
 8000c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0e:	0c9b      	lsrs	r3, r3, #18
 8000c10:	3b01      	subs	r3, #1
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_InitTick+0xa8>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <HAL_InitTick+0xac>)
 8000c18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <HAL_InitTick+0xa8>)
 8000c1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c20:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000c22:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <HAL_InitTick+0xa8>)
 8000c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c26:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <HAL_InitTick+0xa8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <HAL_InitTick+0xa8>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000c34:	4809      	ldr	r0, [pc, #36]	; (8000c5c <HAL_InitTick+0xa8>)
 8000c36:	f001 fa00 	bl	800203a <HAL_TIM_Base_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d104      	bne.n	8000c4a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000c40:	4806      	ldr	r0, [pc, #24]	; (8000c5c <HAL_InitTick+0xa8>)
 8000c42:	f001 fa53 	bl	80020ec <HAL_TIM_Base_Start_IT>
 8000c46:	4603      	mov	r3, r0
 8000c48:	e000      	b.n	8000c4c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3730      	adds	r7, #48	; 0x30
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40023800 	.word	0x40023800
 8000c58:	431bde83 	.word	0x431bde83
 8000c5c:	20000180 	.word	0x20000180
 8000c60:	40001400 	.word	0x40001400

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <NMI_Handler+0x4>

08000c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <HardFault_Handler+0x4>

08000c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <MemManage_Handler+0x4>

08000c76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <BusFault_Handler+0x4>

08000c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <UsageFault_Handler+0x4>

08000c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000c94:	2002      	movs	r0, #2
 8000c96:	f000 fb61 	bl	800135c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000ca2:	2004      	movs	r0, #4
 8000ca4:	f000 fb5a 	bl	800135c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}

08000cac <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000cb0:	2008      	movs	r0, #8
 8000cb2:	f000 fb53 	bl	800135c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000cbe:	2010      	movs	r0, #16
 8000cc0:	f000 fb4c 	bl	800135c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000ccc:	2020      	movs	r0, #32
 8000cce:	f000 fb45 	bl	800135c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000cd2:	2040      	movs	r0, #64	; 0x40
 8000cd4:	f000 fb42 	bl	800135c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000cd8:	2080      	movs	r0, #128	; 0x80
 8000cda:	f000 fb3f 	bl	800135c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <TIM7_IRQHandler+0x10>)
 8000cea:	f001 fa6f 	bl	80021cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000180 	.word	0x20000180

08000cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d00:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <_sbrk+0x5c>)
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <_sbrk+0x60>)
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <_sbrk+0x64>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <_sbrk+0x68>)
 8000d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d207      	bcs.n	8000d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d28:	f004 fb18 	bl	800535c <__errno>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	220c      	movs	r2, #12
 8000d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d36:	e009      	b.n	8000d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <_sbrk+0x64>)
 8000d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20020000 	.word	0x20020000
 8000d58:	00000400 	.word	0x00000400
 8000d5c:	200001c8 	.word	0x200001c8
 8000d60:	20013060 	.word	0x20013060

08000d64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <SystemInit+0x20>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <SystemInit+0x20>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d8c:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d8e:	490e      	ldr	r1, [pc, #56]	; (8000dc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d90:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000da4:	4c0b      	ldr	r4, [pc, #44]	; (8000dd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000db2:	f7ff ffd7 	bl	8000d64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000db6:	f004 fad7 	bl	8005368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dba:	f7ff fc2f 	bl	800061c <main>
  bx  lr    
 8000dbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000dcc:	08005d84 	.word	0x08005d84
  ldr r2, =_sbss
 8000dd0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000dd4:	2001305c 	.word	0x2001305c

08000dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC_IRQHandler>
	...

08000ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <HAL_Init+0x40>)
 8000de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <HAL_Init+0x40>)
 8000df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_Init+0x40>)
 8000dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 f8d8 	bl	8000fba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0a:	200f      	movs	r0, #15
 8000e0c:	f7ff fed2 	bl	8000bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f7ff fdd0 	bl	80009b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023c00 	.word	0x40023c00

08000e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008
 8000e44:	200001cc 	.word	0x200001cc

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	200001cc 	.word	0x200001cc

08000e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e92:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	60d3      	str	r3, [r2, #12]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	f003 0307 	and.w	r3, r3, #7
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db0b      	blt.n	8000eee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	f003 021f 	and.w	r2, r3, #31
 8000edc:	4907      	ldr	r1, [pc, #28]	; (8000efc <__NVIC_EnableIRQ+0x38>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	095b      	lsrs	r3, r3, #5
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000e100 	.word	0xe000e100

08000f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	db0a      	blt.n	8000f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	490c      	ldr	r1, [pc, #48]	; (8000f4c <__NVIC_SetPriority+0x4c>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	0112      	lsls	r2, r2, #4
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	440b      	add	r3, r1
 8000f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f28:	e00a      	b.n	8000f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4908      	ldr	r1, [pc, #32]	; (8000f50 <__NVIC_SetPriority+0x50>)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	3b04      	subs	r3, #4
 8000f38:	0112      	lsls	r2, r2, #4
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	761a      	strb	r2, [r3, #24]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000e100 	.word	0xe000e100
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f1c3 0307 	rsb	r3, r3, #7
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	bf28      	it	cs
 8000f72:	2304      	movcs	r3, #4
 8000f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	2b06      	cmp	r3, #6
 8000f7c:	d902      	bls.n	8000f84 <NVIC_EncodePriority+0x30>
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3b03      	subs	r3, #3
 8000f82:	e000      	b.n	8000f86 <NVIC_EncodePriority+0x32>
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43da      	mvns	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	401a      	ands	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa6:	43d9      	mvns	r1, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	4313      	orrs	r3, r2
         );
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3724      	adds	r7, #36	; 0x24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ff4c 	bl	8000e60 <__NVIC_SetPriorityGrouping>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe2:	f7ff ff61 	bl	8000ea8 <__NVIC_GetPriorityGrouping>
 8000fe6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	68b9      	ldr	r1, [r7, #8]
 8000fec:	6978      	ldr	r0, [r7, #20]
 8000fee:	f7ff ffb1 	bl	8000f54 <NVIC_EncodePriority>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ff80 	bl	8000f00 <__NVIC_SetPriority>
}
 8001000:	bf00      	nop
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ff54 	bl	8000ec4 <__NVIC_EnableIRQ>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
 800103e:	e16b      	b.n	8001318 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001040:	2201      	movs	r2, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	429a      	cmp	r2, r3
 800105a:	f040 815a 	bne.w	8001312 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	2b01      	cmp	r3, #1
 8001068:	d005      	beq.n	8001076 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001072:	2b02      	cmp	r3, #2
 8001074:	d130      	bne.n	80010d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	2203      	movs	r2, #3
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	68da      	ldr	r2, [r3, #12]
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ac:	2201      	movs	r2, #1
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	091b      	lsrs	r3, r3, #4
 80010c2:	f003 0201 	and.w	r2, r3, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	d017      	beq.n	8001114 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d123      	bne.n	8001168 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	08da      	lsrs	r2, r3, #3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3208      	adds	r2, #8
 8001128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	f003 0307 	and.w	r3, r3, #7
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	220f      	movs	r2, #15
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	691a      	ldr	r2, [r3, #16]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	08da      	lsrs	r2, r3, #3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3208      	adds	r2, #8
 8001162:	69b9      	ldr	r1, [r7, #24]
 8001164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	2203      	movs	r2, #3
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0203 	and.w	r2, r3, #3
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f000 80b4 	beq.w	8001312 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b60      	ldr	r3, [pc, #384]	; (8001330 <HAL_GPIO_Init+0x30c>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	4a5f      	ldr	r2, [pc, #380]	; (8001330 <HAL_GPIO_Init+0x30c>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ba:	4b5d      	ldr	r3, [pc, #372]	; (8001330 <HAL_GPIO_Init+0x30c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011c6:	4a5b      	ldr	r2, [pc, #364]	; (8001334 <HAL_GPIO_Init+0x310>)
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	089b      	lsrs	r3, r3, #2
 80011cc:	3302      	adds	r3, #2
 80011ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	220f      	movs	r2, #15
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a52      	ldr	r2, [pc, #328]	; (8001338 <HAL_GPIO_Init+0x314>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d02b      	beq.n	800124a <HAL_GPIO_Init+0x226>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a51      	ldr	r2, [pc, #324]	; (800133c <HAL_GPIO_Init+0x318>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d025      	beq.n	8001246 <HAL_GPIO_Init+0x222>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a50      	ldr	r2, [pc, #320]	; (8001340 <HAL_GPIO_Init+0x31c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d01f      	beq.n	8001242 <HAL_GPIO_Init+0x21e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4f      	ldr	r2, [pc, #316]	; (8001344 <HAL_GPIO_Init+0x320>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d019      	beq.n	800123e <HAL_GPIO_Init+0x21a>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4e      	ldr	r2, [pc, #312]	; (8001348 <HAL_GPIO_Init+0x324>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d013      	beq.n	800123a <HAL_GPIO_Init+0x216>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4d      	ldr	r2, [pc, #308]	; (800134c <HAL_GPIO_Init+0x328>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d00d      	beq.n	8001236 <HAL_GPIO_Init+0x212>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4c      	ldr	r2, [pc, #304]	; (8001350 <HAL_GPIO_Init+0x32c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d007      	beq.n	8001232 <HAL_GPIO_Init+0x20e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4b      	ldr	r2, [pc, #300]	; (8001354 <HAL_GPIO_Init+0x330>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d101      	bne.n	800122e <HAL_GPIO_Init+0x20a>
 800122a:	2307      	movs	r3, #7
 800122c:	e00e      	b.n	800124c <HAL_GPIO_Init+0x228>
 800122e:	2308      	movs	r3, #8
 8001230:	e00c      	b.n	800124c <HAL_GPIO_Init+0x228>
 8001232:	2306      	movs	r3, #6
 8001234:	e00a      	b.n	800124c <HAL_GPIO_Init+0x228>
 8001236:	2305      	movs	r3, #5
 8001238:	e008      	b.n	800124c <HAL_GPIO_Init+0x228>
 800123a:	2304      	movs	r3, #4
 800123c:	e006      	b.n	800124c <HAL_GPIO_Init+0x228>
 800123e:	2303      	movs	r3, #3
 8001240:	e004      	b.n	800124c <HAL_GPIO_Init+0x228>
 8001242:	2302      	movs	r3, #2
 8001244:	e002      	b.n	800124c <HAL_GPIO_Init+0x228>
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <HAL_GPIO_Init+0x228>
 800124a:	2300      	movs	r3, #0
 800124c:	69fa      	ldr	r2, [r7, #28]
 800124e:	f002 0203 	and.w	r2, r2, #3
 8001252:	0092      	lsls	r2, r2, #2
 8001254:	4093      	lsls	r3, r2
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800125c:	4935      	ldr	r1, [pc, #212]	; (8001334 <HAL_GPIO_Init+0x310>)
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	089b      	lsrs	r3, r3, #2
 8001262:	3302      	adds	r3, #2
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800126a:	4b3b      	ldr	r3, [pc, #236]	; (8001358 <HAL_GPIO_Init+0x334>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800128e:	4a32      	ldr	r2, [pc, #200]	; (8001358 <HAL_GPIO_Init+0x334>)
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001294:	4b30      	ldr	r3, [pc, #192]	; (8001358 <HAL_GPIO_Init+0x334>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b8:	4a27      	ldr	r2, [pc, #156]	; (8001358 <HAL_GPIO_Init+0x334>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012be:	4b26      	ldr	r3, [pc, #152]	; (8001358 <HAL_GPIO_Init+0x334>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012e2:	4a1d      	ldr	r2, [pc, #116]	; (8001358 <HAL_GPIO_Init+0x334>)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <HAL_GPIO_Init+0x334>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800130c:	4a12      	ldr	r2, [pc, #72]	; (8001358 <HAL_GPIO_Init+0x334>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3301      	adds	r3, #1
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	2b0f      	cmp	r3, #15
 800131c:	f67f ae90 	bls.w	8001040 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3724      	adds	r7, #36	; 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800
 8001334:	40013800 	.word	0x40013800
 8001338:	40020000 	.word	0x40020000
 800133c:	40020400 	.word	0x40020400
 8001340:	40020800 	.word	0x40020800
 8001344:	40020c00 	.word	0x40020c00
 8001348:	40021000 	.word	0x40021000
 800134c:	40021400 	.word	0x40021400
 8001350:	40021800 	.word	0x40021800
 8001354:	40021c00 	.word	0x40021c00
 8001358:	40013c00 	.word	0x40013c00

0800135c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001366:	4b08      	ldr	r3, [pc, #32]	; (8001388 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001368:	695a      	ldr	r2, [r3, #20]
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	4013      	ands	r3, r2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d006      	beq.n	8001380 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001372:	4a05      	ldr	r2, [pc, #20]	; (8001388 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001378:	88fb      	ldrh	r3, [r7, #6]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fadc 	bl	8000938 <HAL_GPIO_EXTI_Callback>
  }
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40013c00 	.word	0x40013c00

0800138c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e12b      	b.n	80015f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d106      	bne.n	80013b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff fb26 	bl	8000a04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2224      	movs	r2, #36	; 0x24
 80013bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0201 	bic.w	r2, r2, #1
 80013ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013f0:	f000 fd40 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 80013f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	4a81      	ldr	r2, [pc, #516]	; (8001600 <HAL_I2C_Init+0x274>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d807      	bhi.n	8001410 <HAL_I2C_Init+0x84>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4a80      	ldr	r2, [pc, #512]	; (8001604 <HAL_I2C_Init+0x278>)
 8001404:	4293      	cmp	r3, r2
 8001406:	bf94      	ite	ls
 8001408:	2301      	movls	r3, #1
 800140a:	2300      	movhi	r3, #0
 800140c:	b2db      	uxtb	r3, r3
 800140e:	e006      	b.n	800141e <HAL_I2C_Init+0x92>
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4a7d      	ldr	r2, [pc, #500]	; (8001608 <HAL_I2C_Init+0x27c>)
 8001414:	4293      	cmp	r3, r2
 8001416:	bf94      	ite	ls
 8001418:	2301      	movls	r3, #1
 800141a:	2300      	movhi	r3, #0
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e0e7      	b.n	80015f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4a78      	ldr	r2, [pc, #480]	; (800160c <HAL_I2C_Init+0x280>)
 800142a:	fba2 2303 	umull	r2, r3, r2, r3
 800142e:	0c9b      	lsrs	r3, r3, #18
 8001430:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	430a      	orrs	r2, r1
 8001444:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	4a6a      	ldr	r2, [pc, #424]	; (8001600 <HAL_I2C_Init+0x274>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d802      	bhi.n	8001460 <HAL_I2C_Init+0xd4>
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	3301      	adds	r3, #1
 800145e:	e009      	b.n	8001474 <HAL_I2C_Init+0xe8>
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001466:	fb02 f303 	mul.w	r3, r2, r3
 800146a:	4a69      	ldr	r2, [pc, #420]	; (8001610 <HAL_I2C_Init+0x284>)
 800146c:	fba2 2303 	umull	r2, r3, r2, r3
 8001470:	099b      	lsrs	r3, r3, #6
 8001472:	3301      	adds	r3, #1
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6812      	ldr	r2, [r2, #0]
 8001478:	430b      	orrs	r3, r1
 800147a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001486:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	495c      	ldr	r1, [pc, #368]	; (8001600 <HAL_I2C_Init+0x274>)
 8001490:	428b      	cmp	r3, r1
 8001492:	d819      	bhi.n	80014c8 <HAL_I2C_Init+0x13c>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	1e59      	subs	r1, r3, #1
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	fbb1 f3f3 	udiv	r3, r1, r3
 80014a2:	1c59      	adds	r1, r3, #1
 80014a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80014a8:	400b      	ands	r3, r1
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00a      	beq.n	80014c4 <HAL_I2C_Init+0x138>
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	1e59      	subs	r1, r3, #1
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80014bc:	3301      	adds	r3, #1
 80014be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c2:	e051      	b.n	8001568 <HAL_I2C_Init+0x1dc>
 80014c4:	2304      	movs	r3, #4
 80014c6:	e04f      	b.n	8001568 <HAL_I2C_Init+0x1dc>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d111      	bne.n	80014f4 <HAL_I2C_Init+0x168>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	1e58      	subs	r0, r3, #1
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6859      	ldr	r1, [r3, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	440b      	add	r3, r1
 80014de:	fbb0 f3f3 	udiv	r3, r0, r3
 80014e2:	3301      	adds	r3, #1
 80014e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	bf0c      	ite	eq
 80014ec:	2301      	moveq	r3, #1
 80014ee:	2300      	movne	r3, #0
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	e012      	b.n	800151a <HAL_I2C_Init+0x18e>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	1e58      	subs	r0, r3, #1
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6859      	ldr	r1, [r3, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	0099      	lsls	r1, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	fbb0 f3f3 	udiv	r3, r0, r3
 800150a:	3301      	adds	r3, #1
 800150c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001510:	2b00      	cmp	r3, #0
 8001512:	bf0c      	ite	eq
 8001514:	2301      	moveq	r3, #1
 8001516:	2300      	movne	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_I2C_Init+0x196>
 800151e:	2301      	movs	r3, #1
 8001520:	e022      	b.n	8001568 <HAL_I2C_Init+0x1dc>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10e      	bne.n	8001548 <HAL_I2C_Init+0x1bc>
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	1e58      	subs	r0, r3, #1
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6859      	ldr	r1, [r3, #4]
 8001532:	460b      	mov	r3, r1
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	440b      	add	r3, r1
 8001538:	fbb0 f3f3 	udiv	r3, r0, r3
 800153c:	3301      	adds	r3, #1
 800153e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001546:	e00f      	b.n	8001568 <HAL_I2C_Init+0x1dc>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	1e58      	subs	r0, r3, #1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6859      	ldr	r1, [r3, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	0099      	lsls	r1, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	fbb0 f3f3 	udiv	r3, r0, r3
 800155e:	3301      	adds	r3, #1
 8001560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001564:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	6809      	ldr	r1, [r1, #0]
 800156c:	4313      	orrs	r3, r2
 800156e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69da      	ldr	r2, [r3, #28]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001596:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6911      	ldr	r1, [r2, #16]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	68d2      	ldr	r2, [r2, #12]
 80015a2:	4311      	orrs	r1, r2
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6812      	ldr	r2, [r2, #0]
 80015a8:	430b      	orrs	r3, r1
 80015aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695a      	ldr	r2, [r3, #20]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0201 	orr.w	r2, r2, #1
 80015d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2220      	movs	r2, #32
 80015e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	000186a0 	.word	0x000186a0
 8001604:	001e847f 	.word	0x001e847f
 8001608:	003d08ff 	.word	0x003d08ff
 800160c:	431bde83 	.word	0x431bde83
 8001610:	10624dd3 	.word	0x10624dd3

08001614 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e267      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d075      	beq.n	800171e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001632:	4b88      	ldr	r3, [pc, #544]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b04      	cmp	r3, #4
 800163c:	d00c      	beq.n	8001658 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800163e:	4b85      	ldr	r3, [pc, #532]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001646:	2b08      	cmp	r3, #8
 8001648:	d112      	bne.n	8001670 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800164a:	4b82      	ldr	r3, [pc, #520]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001656:	d10b      	bne.n	8001670 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001658:	4b7e      	ldr	r3, [pc, #504]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d05b      	beq.n	800171c <HAL_RCC_OscConfig+0x108>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d157      	bne.n	800171c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e242      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001678:	d106      	bne.n	8001688 <HAL_RCC_OscConfig+0x74>
 800167a:	4b76      	ldr	r3, [pc, #472]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a75      	ldr	r2, [pc, #468]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 8001680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e01d      	b.n	80016c4 <HAL_RCC_OscConfig+0xb0>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001690:	d10c      	bne.n	80016ac <HAL_RCC_OscConfig+0x98>
 8001692:	4b70      	ldr	r3, [pc, #448]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a6f      	ldr	r2, [pc, #444]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 8001698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	4b6d      	ldr	r3, [pc, #436]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a6c      	ldr	r2, [pc, #432]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 80016a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	e00b      	b.n	80016c4 <HAL_RCC_OscConfig+0xb0>
 80016ac:	4b69      	ldr	r3, [pc, #420]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a68      	ldr	r2, [pc, #416]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 80016b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b66      	ldr	r3, [pc, #408]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a65      	ldr	r2, [pc, #404]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 80016be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d013      	beq.n	80016f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff fbbc 	bl	8000e48 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff fbb8 	bl	8000e48 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	; 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e207      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	4b5b      	ldr	r3, [pc, #364]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0xc0>
 80016f2:	e014      	b.n	800171e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fba8 	bl	8000e48 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016fc:	f7ff fba4 	bl	8000e48 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b64      	cmp	r3, #100	; 0x64
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e1f3      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170e:	4b51      	ldr	r3, [pc, #324]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0xe8>
 800171a:	e000      	b.n	800171e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d063      	beq.n	80017f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800172a:	4b4a      	ldr	r3, [pc, #296]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00b      	beq.n	800174e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001736:	4b47      	ldr	r3, [pc, #284]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800173e:	2b08      	cmp	r3, #8
 8001740:	d11c      	bne.n	800177c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001742:	4b44      	ldr	r3, [pc, #272]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d116      	bne.n	800177c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800174e:	4b41      	ldr	r3, [pc, #260]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d005      	beq.n	8001766 <HAL_RCC_OscConfig+0x152>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d001      	beq.n	8001766 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e1c7      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001766:	4b3b      	ldr	r3, [pc, #236]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	4937      	ldr	r1, [pc, #220]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 8001776:	4313      	orrs	r3, r2
 8001778:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177a:	e03a      	b.n	80017f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d020      	beq.n	80017c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001784:	4b34      	ldr	r3, [pc, #208]	; (8001858 <HAL_RCC_OscConfig+0x244>)
 8001786:	2201      	movs	r2, #1
 8001788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178a:	f7ff fb5d 	bl	8000e48 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001792:	f7ff fb59 	bl	8000e48 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e1a8      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a4:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f0      	beq.n	8001792 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b0:	4b28      	ldr	r3, [pc, #160]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4925      	ldr	r1, [pc, #148]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	600b      	str	r3, [r1, #0]
 80017c4:	e015      	b.n	80017f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c6:	4b24      	ldr	r3, [pc, #144]	; (8001858 <HAL_RCC_OscConfig+0x244>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff fb3c 	bl	8000e48 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017d4:	f7ff fb38 	bl	8000e48 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e187      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e6:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d036      	beq.n	800186c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d016      	beq.n	8001834 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_RCC_OscConfig+0x248>)
 8001808:	2201      	movs	r2, #1
 800180a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180c:	f7ff fb1c 	bl	8000e48 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001814:	f7ff fb18 	bl	8000e48 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e167      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 8001828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0x200>
 8001832:	e01b      	b.n	800186c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_RCC_OscConfig+0x248>)
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183a:	f7ff fb05 	bl	8000e48 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001840:	e00e      	b.n	8001860 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001842:	f7ff fb01 	bl	8000e48 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d907      	bls.n	8001860 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e150      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
 8001854:	40023800 	.word	0x40023800
 8001858:	42470000 	.word	0x42470000
 800185c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001860:	4b88      	ldr	r3, [pc, #544]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1ea      	bne.n	8001842 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 8097 	beq.w	80019a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187e:	4b81      	ldr	r3, [pc, #516]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10f      	bne.n	80018aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	4b7d      	ldr	r3, [pc, #500]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	4a7c      	ldr	r2, [pc, #496]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001898:	6413      	str	r3, [r2, #64]	; 0x40
 800189a:	4b7a      	ldr	r3, [pc, #488]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018a6:	2301      	movs	r3, #1
 80018a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018aa:	4b77      	ldr	r3, [pc, #476]	; (8001a88 <HAL_RCC_OscConfig+0x474>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d118      	bne.n	80018e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018b6:	4b74      	ldr	r3, [pc, #464]	; (8001a88 <HAL_RCC_OscConfig+0x474>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a73      	ldr	r2, [pc, #460]	; (8001a88 <HAL_RCC_OscConfig+0x474>)
 80018bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018c2:	f7ff fac1 	bl	8000e48 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ca:	f7ff fabd 	bl	8000e48 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e10c      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018dc:	4b6a      	ldr	r3, [pc, #424]	; (8001a88 <HAL_RCC_OscConfig+0x474>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d106      	bne.n	80018fe <HAL_RCC_OscConfig+0x2ea>
 80018f0:	4b64      	ldr	r3, [pc, #400]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 80018f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f4:	4a63      	ldr	r2, [pc, #396]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6713      	str	r3, [r2, #112]	; 0x70
 80018fc:	e01c      	b.n	8001938 <HAL_RCC_OscConfig+0x324>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b05      	cmp	r3, #5
 8001904:	d10c      	bne.n	8001920 <HAL_RCC_OscConfig+0x30c>
 8001906:	4b5f      	ldr	r3, [pc, #380]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190a:	4a5e      	ldr	r2, [pc, #376]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	6713      	str	r3, [r2, #112]	; 0x70
 8001912:	4b5c      	ldr	r3, [pc, #368]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001916:	4a5b      	ldr	r2, [pc, #364]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6713      	str	r3, [r2, #112]	; 0x70
 800191e:	e00b      	b.n	8001938 <HAL_RCC_OscConfig+0x324>
 8001920:	4b58      	ldr	r3, [pc, #352]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001924:	4a57      	ldr	r2, [pc, #348]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001926:	f023 0301 	bic.w	r3, r3, #1
 800192a:	6713      	str	r3, [r2, #112]	; 0x70
 800192c:	4b55      	ldr	r3, [pc, #340]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 800192e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001930:	4a54      	ldr	r2, [pc, #336]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001932:	f023 0304 	bic.w	r3, r3, #4
 8001936:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d015      	beq.n	800196c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001940:	f7ff fa82 	bl	8000e48 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001946:	e00a      	b.n	800195e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001948:	f7ff fa7e 	bl	8000e48 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f241 3288 	movw	r2, #5000	; 0x1388
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e0cb      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195e:	4b49      	ldr	r3, [pc, #292]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0ee      	beq.n	8001948 <HAL_RCC_OscConfig+0x334>
 800196a:	e014      	b.n	8001996 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196c:	f7ff fa6c 	bl	8000e48 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001972:	e00a      	b.n	800198a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001974:	f7ff fa68 	bl	8000e48 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001982:	4293      	cmp	r3, r2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e0b5      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198a:	4b3e      	ldr	r3, [pc, #248]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1ee      	bne.n	8001974 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001996:	7dfb      	ldrb	r3, [r7, #23]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d105      	bne.n	80019a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800199c:	4b39      	ldr	r3, [pc, #228]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	4a38      	ldr	r2, [pc, #224]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 80019a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 80a1 	beq.w	8001af4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019b2:	4b34      	ldr	r3, [pc, #208]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d05c      	beq.n	8001a78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d141      	bne.n	8001a4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c6:	4b31      	ldr	r3, [pc, #196]	; (8001a8c <HAL_RCC_OscConfig+0x478>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff fa3c 	bl	8000e48 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d4:	f7ff fa38 	bl	8000e48 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e087      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e6:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69da      	ldr	r2, [r3, #28]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	019b      	lsls	r3, r3, #6
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a08:	085b      	lsrs	r3, r3, #1
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	041b      	lsls	r3, r3, #16
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a14:	061b      	lsls	r3, r3, #24
 8001a16:	491b      	ldr	r1, [pc, #108]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <HAL_RCC_OscConfig+0x478>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a22:	f7ff fa11 	bl	8000e48 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a2a:	f7ff fa0d 	bl	8000e48 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e05c      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x416>
 8001a48:	e054      	b.n	8001af4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <HAL_RCC_OscConfig+0x478>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a50:	f7ff f9fa 	bl	8000e48 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff f9f6 	bl	8000e48 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e045      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x444>
 8001a76:	e03d      	b.n	8001af4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d107      	bne.n	8001a90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e038      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40007000 	.word	0x40007000
 8001a8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a90:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <HAL_RCC_OscConfig+0x4ec>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d028      	beq.n	8001af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d121      	bne.n	8001af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d11a      	bne.n	8001af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ac6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d111      	bne.n	8001af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad6:	085b      	lsrs	r3, r3, #1
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d001      	beq.n	8001af4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800

08001b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0cc      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b18:	4b68      	ldr	r3, [pc, #416]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d90c      	bls.n	8001b40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b26:	4b65      	ldr	r3, [pc, #404]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2e:	4b63      	ldr	r3, [pc, #396]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0b8      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d020      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b58:	4b59      	ldr	r3, [pc, #356]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	4a58      	ldr	r2, [pc, #352]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b70:	4b53      	ldr	r3, [pc, #332]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	4a52      	ldr	r2, [pc, #328]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b7c:	4b50      	ldr	r3, [pc, #320]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	494d      	ldr	r1, [pc, #308]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d044      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d119      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e07f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d003      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d107      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc2:	4b3f      	ldr	r3, [pc, #252]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d109      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e06f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd2:	4b3b      	ldr	r3, [pc, #236]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e067      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001be2:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f023 0203 	bic.w	r2, r3, #3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4934      	ldr	r1, [pc, #208]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bf4:	f7ff f928 	bl	8000e48 <HAL_GetTick>
 8001bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bfc:	f7ff f924 	bl	8000e48 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e04f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c12:	4b2b      	ldr	r3, [pc, #172]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 020c 	and.w	r2, r3, #12
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d1eb      	bne.n	8001bfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c24:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d20c      	bcs.n	8001c4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c32:	4b22      	ldr	r3, [pc, #136]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3a:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e032      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4916      	ldr	r1, [pc, #88]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d009      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c76:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	490e      	ldr	r1, [pc, #56]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c8a:	f000 f821 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	490a      	ldr	r1, [pc, #40]	; (8001cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9c:	5ccb      	ldrb	r3, [r1, r3]
 8001c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca2:	4a09      	ldr	r2, [pc, #36]	; (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_RCC_ClockConfig+0x1c8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe ff82 	bl	8000bb4 <HAL_InitTick>

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40023c00 	.word	0x40023c00
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	08005d28 	.word	0x08005d28
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	20000004 	.word	0x20000004

08001cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cd4:	b090      	sub	sp, #64	; 0x40
 8001cd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	637b      	str	r3, [r7, #52]	; 0x34
 8001cdc:	2300      	movs	r3, #0
 8001cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ce8:	4b59      	ldr	r3, [pc, #356]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 030c 	and.w	r3, r3, #12
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d00d      	beq.n	8001d10 <HAL_RCC_GetSysClockFreq+0x40>
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	f200 80a1 	bhi.w	8001e3c <HAL_RCC_GetSysClockFreq+0x16c>
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <HAL_RCC_GetSysClockFreq+0x34>
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d003      	beq.n	8001d0a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d02:	e09b      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d04:	4b53      	ldr	r3, [pc, #332]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d06:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001d08:	e09b      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d0a:	4b53      	ldr	r3, [pc, #332]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d0e:	e098      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d10:	4b4f      	ldr	r3, [pc, #316]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d18:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d1a:	4b4d      	ldr	r3, [pc, #308]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d028      	beq.n	8001d78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d26:	4b4a      	ldr	r3, [pc, #296]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	099b      	lsrs	r3, r3, #6
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	623b      	str	r3, [r7, #32]
 8001d30:	627a      	str	r2, [r7, #36]	; 0x24
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4b47      	ldr	r3, [pc, #284]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d3c:	fb03 f201 	mul.w	r2, r3, r1
 8001d40:	2300      	movs	r3, #0
 8001d42:	fb00 f303 	mul.w	r3, r0, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	4a43      	ldr	r2, [pc, #268]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d4a:	fba0 1202 	umull	r1, r2, r0, r2
 8001d4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d50:	460a      	mov	r2, r1
 8001d52:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d56:	4413      	add	r3, r2
 8001d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	61bb      	str	r3, [r7, #24]
 8001d60:	61fa      	str	r2, [r7, #28]
 8001d62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d6a:	f7fe fa89 	bl	8000280 <__aeabi_uldivmod>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4613      	mov	r3, r2
 8001d74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d76:	e053      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d78:	4b35      	ldr	r3, [pc, #212]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	099b      	lsrs	r3, r3, #6
 8001d7e:	2200      	movs	r2, #0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	617a      	str	r2, [r7, #20]
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d8a:	f04f 0b00 	mov.w	fp, #0
 8001d8e:	4652      	mov	r2, sl
 8001d90:	465b      	mov	r3, fp
 8001d92:	f04f 0000 	mov.w	r0, #0
 8001d96:	f04f 0100 	mov.w	r1, #0
 8001d9a:	0159      	lsls	r1, r3, #5
 8001d9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001da0:	0150      	lsls	r0, r2, #5
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	ebb2 080a 	subs.w	r8, r2, sl
 8001daa:	eb63 090b 	sbc.w	r9, r3, fp
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	f04f 0300 	mov.w	r3, #0
 8001db6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001dba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001dbe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001dc2:	ebb2 0408 	subs.w	r4, r2, r8
 8001dc6:	eb63 0509 	sbc.w	r5, r3, r9
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	00eb      	lsls	r3, r5, #3
 8001dd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dd8:	00e2      	lsls	r2, r4, #3
 8001dda:	4614      	mov	r4, r2
 8001ddc:	461d      	mov	r5, r3
 8001dde:	eb14 030a 	adds.w	r3, r4, sl
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	eb45 030b 	adc.w	r3, r5, fp
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001df6:	4629      	mov	r1, r5
 8001df8:	028b      	lsls	r3, r1, #10
 8001dfa:	4621      	mov	r1, r4
 8001dfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e00:	4621      	mov	r1, r4
 8001e02:	028a      	lsls	r2, r1, #10
 8001e04:	4610      	mov	r0, r2
 8001e06:	4619      	mov	r1, r3
 8001e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	60fa      	str	r2, [r7, #12]
 8001e10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e14:	f7fe fa34 	bl	8000280 <__aeabi_uldivmod>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e20:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	0c1b      	lsrs	r3, r3, #16
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001e30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e3a:	e002      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e3c:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e3e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3740      	adds	r7, #64	; 0x40
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800
 8001e54:	00f42400 	.word	0x00f42400
 8001e58:	017d7840 	.word	0x017d7840

08001e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e60:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e62:	681b      	ldr	r3, [r3, #0]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000000 	.word	0x20000000

08001e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e78:	f7ff fff0 	bl	8001e5c <HAL_RCC_GetHCLKFreq>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	0a9b      	lsrs	r3, r3, #10
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	4903      	ldr	r1, [pc, #12]	; (8001e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e8a:	5ccb      	ldrb	r3, [r1, r3]
 8001e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40023800 	.word	0x40023800
 8001e98:	08005d38 	.word	0x08005d38

08001e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ea0:	f7ff ffdc 	bl	8001e5c <HAL_RCC_GetHCLKFreq>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	0b5b      	lsrs	r3, r3, #13
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	4903      	ldr	r1, [pc, #12]	; (8001ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eb2:	5ccb      	ldrb	r3, [r1, r3]
 8001eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	08005d38 	.word	0x08005d38

08001ec4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ed4:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_RCC_GetClockConfig+0x5c>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0203 	and.w	r2, r3, #3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <HAL_RCC_GetClockConfig+0x5c>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <HAL_RCC_GetClockConfig+0x5c>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_RCC_GetClockConfig+0x5c>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	08db      	lsrs	r3, r3, #3
 8001efe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f06:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <HAL_RCC_GetClockConfig+0x60>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0207 	and.w	r2, r3, #7
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	601a      	str	r2, [r3, #0]
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40023c00 	.word	0x40023c00

08001f28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e07b      	b.n	8002032 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d108      	bne.n	8001f54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f4a:	d009      	beq.n	8001f60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	61da      	str	r2, [r3, #28]
 8001f52:	e005      	b.n	8001f60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d106      	bne.n	8001f80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7fe fd8a 	bl	8000a94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2202      	movs	r2, #2
 8001f84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe4:	ea42 0103 	orr.w	r1, r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	0c1b      	lsrs	r3, r3, #16
 8001ffe:	f003 0104 	and.w	r1, r3, #4
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	f003 0210 	and.w	r2, r3, #16
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	69da      	ldr	r2, [r3, #28]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002020:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e041      	b.n	80020d0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d106      	bne.n	8002066 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f839 	bl	80020d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2202      	movs	r2, #2
 800206a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3304      	adds	r3, #4
 8002076:	4619      	mov	r1, r3
 8002078:	4610      	mov	r0, r2
 800207a:	f000 f9d7 	bl	800242c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d001      	beq.n	8002104 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e04e      	b.n	80021a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2202      	movs	r2, #2
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 0201 	orr.w	r2, r2, #1
 800211a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a23      	ldr	r2, [pc, #140]	; (80021b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d022      	beq.n	800216c <HAL_TIM_Base_Start_IT+0x80>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800212e:	d01d      	beq.n	800216c <HAL_TIM_Base_Start_IT+0x80>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a1f      	ldr	r2, [pc, #124]	; (80021b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d018      	beq.n	800216c <HAL_TIM_Base_Start_IT+0x80>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a1e      	ldr	r2, [pc, #120]	; (80021b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d013      	beq.n	800216c <HAL_TIM_Base_Start_IT+0x80>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a1c      	ldr	r2, [pc, #112]	; (80021bc <HAL_TIM_Base_Start_IT+0xd0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d00e      	beq.n	800216c <HAL_TIM_Base_Start_IT+0x80>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a1b      	ldr	r2, [pc, #108]	; (80021c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d009      	beq.n	800216c <HAL_TIM_Base_Start_IT+0x80>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a19      	ldr	r2, [pc, #100]	; (80021c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d004      	beq.n	800216c <HAL_TIM_Base_Start_IT+0x80>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a18      	ldr	r2, [pc, #96]	; (80021c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d111      	bne.n	8002190 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2b06      	cmp	r3, #6
 800217c:	d010      	beq.n	80021a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f042 0201 	orr.w	r2, r2, #1
 800218c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800218e:	e007      	b.n	80021a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0201 	orr.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40010000 	.word	0x40010000
 80021b4:	40000400 	.word	0x40000400
 80021b8:	40000800 	.word	0x40000800
 80021bc:	40000c00 	.word	0x40000c00
 80021c0:	40010400 	.word	0x40010400
 80021c4:	40014000 	.word	0x40014000
 80021c8:	40001800 	.word	0x40001800

080021cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d122      	bne.n	8002228 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d11b      	bne.n	8002228 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f06f 0202 	mvn.w	r2, #2
 80021f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f8ee 	bl	80023f0 <HAL_TIM_IC_CaptureCallback>
 8002214:	e005      	b.n	8002222 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f8e0 	bl	80023dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f8f1 	bl	8002404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b04      	cmp	r3, #4
 8002234:	d122      	bne.n	800227c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b04      	cmp	r3, #4
 8002242:	d11b      	bne.n	800227c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0204 	mvn.w	r2, #4
 800224c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2202      	movs	r2, #2
 8002252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f8c4 	bl	80023f0 <HAL_TIM_IC_CaptureCallback>
 8002268:	e005      	b.n	8002276 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f8b6 	bl	80023dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f8c7 	bl	8002404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b08      	cmp	r3, #8
 8002288:	d122      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b08      	cmp	r3, #8
 8002296:	d11b      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0208 	mvn.w	r2, #8
 80022a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2204      	movs	r2, #4
 80022a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f89a 	bl	80023f0 <HAL_TIM_IC_CaptureCallback>
 80022bc:	e005      	b.n	80022ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f88c 	bl	80023dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f89d 	bl	8002404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f003 0310 	and.w	r3, r3, #16
 80022da:	2b10      	cmp	r3, #16
 80022dc:	d122      	bne.n	8002324 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f003 0310 	and.w	r3, r3, #16
 80022e8:	2b10      	cmp	r3, #16
 80022ea:	d11b      	bne.n	8002324 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0210 	mvn.w	r2, #16
 80022f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2208      	movs	r2, #8
 80022fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f870 	bl	80023f0 <HAL_TIM_IC_CaptureCallback>
 8002310:	e005      	b.n	800231e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f862 	bl	80023dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f873 	bl	8002404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b01      	cmp	r3, #1
 8002330:	d10e      	bne.n	8002350 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b01      	cmp	r3, #1
 800233e:	d107      	bne.n	8002350 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0201 	mvn.w	r2, #1
 8002348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7fe fb1a 	bl	8000984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235a:	2b80      	cmp	r3, #128	; 0x80
 800235c:	d10e      	bne.n	800237c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002368:	2b80      	cmp	r3, #128	; 0x80
 800236a:	d107      	bne.n	800237c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f902 	bl	8002580 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002386:	2b40      	cmp	r3, #64	; 0x40
 8002388:	d10e      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002394:	2b40      	cmp	r3, #64	; 0x40
 8002396:	d107      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f838 	bl	8002418 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0320 	and.w	r3, r3, #32
 80023b2:	2b20      	cmp	r3, #32
 80023b4:	d10e      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0320 	and.w	r3, r3, #32
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d107      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0220 	mvn.w	r2, #32
 80023cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f8cc 	bl	800256c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a40      	ldr	r2, [pc, #256]	; (8002540 <TIM_Base_SetConfig+0x114>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d013      	beq.n	800246c <TIM_Base_SetConfig+0x40>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244a:	d00f      	beq.n	800246c <TIM_Base_SetConfig+0x40>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a3d      	ldr	r2, [pc, #244]	; (8002544 <TIM_Base_SetConfig+0x118>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d00b      	beq.n	800246c <TIM_Base_SetConfig+0x40>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a3c      	ldr	r2, [pc, #240]	; (8002548 <TIM_Base_SetConfig+0x11c>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d007      	beq.n	800246c <TIM_Base_SetConfig+0x40>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a3b      	ldr	r2, [pc, #236]	; (800254c <TIM_Base_SetConfig+0x120>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d003      	beq.n	800246c <TIM_Base_SetConfig+0x40>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a3a      	ldr	r2, [pc, #232]	; (8002550 <TIM_Base_SetConfig+0x124>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d108      	bne.n	800247e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a2f      	ldr	r2, [pc, #188]	; (8002540 <TIM_Base_SetConfig+0x114>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d02b      	beq.n	80024de <TIM_Base_SetConfig+0xb2>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800248c:	d027      	beq.n	80024de <TIM_Base_SetConfig+0xb2>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a2c      	ldr	r2, [pc, #176]	; (8002544 <TIM_Base_SetConfig+0x118>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d023      	beq.n	80024de <TIM_Base_SetConfig+0xb2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a2b      	ldr	r2, [pc, #172]	; (8002548 <TIM_Base_SetConfig+0x11c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d01f      	beq.n	80024de <TIM_Base_SetConfig+0xb2>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a2a      	ldr	r2, [pc, #168]	; (800254c <TIM_Base_SetConfig+0x120>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d01b      	beq.n	80024de <TIM_Base_SetConfig+0xb2>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a29      	ldr	r2, [pc, #164]	; (8002550 <TIM_Base_SetConfig+0x124>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d017      	beq.n	80024de <TIM_Base_SetConfig+0xb2>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a28      	ldr	r2, [pc, #160]	; (8002554 <TIM_Base_SetConfig+0x128>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d013      	beq.n	80024de <TIM_Base_SetConfig+0xb2>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a27      	ldr	r2, [pc, #156]	; (8002558 <TIM_Base_SetConfig+0x12c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00f      	beq.n	80024de <TIM_Base_SetConfig+0xb2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a26      	ldr	r2, [pc, #152]	; (800255c <TIM_Base_SetConfig+0x130>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d00b      	beq.n	80024de <TIM_Base_SetConfig+0xb2>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a25      	ldr	r2, [pc, #148]	; (8002560 <TIM_Base_SetConfig+0x134>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d007      	beq.n	80024de <TIM_Base_SetConfig+0xb2>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a24      	ldr	r2, [pc, #144]	; (8002564 <TIM_Base_SetConfig+0x138>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d003      	beq.n	80024de <TIM_Base_SetConfig+0xb2>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a23      	ldr	r2, [pc, #140]	; (8002568 <TIM_Base_SetConfig+0x13c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d108      	bne.n	80024f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <TIM_Base_SetConfig+0x114>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d003      	beq.n	8002524 <TIM_Base_SetConfig+0xf8>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a0c      	ldr	r2, [pc, #48]	; (8002550 <TIM_Base_SetConfig+0x124>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d103      	bne.n	800252c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	615a      	str	r2, [r3, #20]
}
 8002532:	bf00      	nop
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40010000 	.word	0x40010000
 8002544:	40000400 	.word	0x40000400
 8002548:	40000800 	.word	0x40000800
 800254c:	40000c00 	.word	0x40000c00
 8002550:	40010400 	.word	0x40010400
 8002554:	40014000 	.word	0x40014000
 8002558:	40014400 	.word	0x40014400
 800255c:	40014800 	.word	0x40014800
 8002560:	40001800 	.word	0x40001800
 8002564:	40001c00 	.word	0x40001c00
 8002568:	40002000 	.word	0x40002000

0800256c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e03f      	b.n	8002626 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d106      	bne.n	80025c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7fe fab2 	bl	8000b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2224      	movs	r2, #36	; 0x24
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f929 	bl	8002830 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	695a      	ldr	r2, [r3, #20]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800260c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2220      	movs	r2, #32
 8002620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b08a      	sub	sp, #40	; 0x28
 8002632:	af02      	add	r7, sp, #8
 8002634:	60f8      	str	r0, [r7, #12]
 8002636:	60b9      	str	r1, [r7, #8]
 8002638:	603b      	str	r3, [r7, #0]
 800263a:	4613      	mov	r3, r2
 800263c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b20      	cmp	r3, #32
 800264c:	d17c      	bne.n	8002748 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <HAL_UART_Transmit+0x2c>
 8002654:	88fb      	ldrh	r3, [r7, #6]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e075      	b.n	800274a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_UART_Transmit+0x3e>
 8002668:	2302      	movs	r3, #2
 800266a:	e06e      	b.n	800274a <HAL_UART_Transmit+0x11c>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2221      	movs	r2, #33	; 0x21
 800267e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002682:	f7fe fbe1 	bl	8000e48 <HAL_GetTick>
 8002686:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	88fa      	ldrh	r2, [r7, #6]
 800268c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	88fa      	ldrh	r2, [r7, #6]
 8002692:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800269c:	d108      	bne.n	80026b0 <HAL_UART_Transmit+0x82>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d104      	bne.n	80026b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	61bb      	str	r3, [r7, #24]
 80026ae:	e003      	b.n	80026b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80026c0:	e02a      	b.n	8002718 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2200      	movs	r2, #0
 80026ca:	2180      	movs	r1, #128	; 0x80
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 f840 	bl	8002752 <UART_WaitOnFlagUntilTimeout>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e036      	b.n	800274a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10b      	bne.n	80026fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	3302      	adds	r3, #2
 80026f6:	61bb      	str	r3, [r7, #24]
 80026f8:	e007      	b.n	800270a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	781a      	ldrb	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	3301      	adds	r3, #1
 8002708:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800270e:	b29b      	uxth	r3, r3
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800271c:	b29b      	uxth	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1cf      	bne.n	80026c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2200      	movs	r2, #0
 800272a:	2140      	movs	r1, #64	; 0x40
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 f810 	bl	8002752 <UART_WaitOnFlagUntilTimeout>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e006      	b.n	800274a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2220      	movs	r2, #32
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	e000      	b.n	800274a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002748:	2302      	movs	r3, #2
  }
}
 800274a:	4618      	mov	r0, r3
 800274c:	3720      	adds	r7, #32
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b090      	sub	sp, #64	; 0x40
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	603b      	str	r3, [r7, #0]
 800275e:	4613      	mov	r3, r2
 8002760:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002762:	e050      	b.n	8002806 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800276a:	d04c      	beq.n	8002806 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800276c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800276e:	2b00      	cmp	r3, #0
 8002770:	d007      	beq.n	8002782 <UART_WaitOnFlagUntilTimeout+0x30>
 8002772:	f7fe fb69 	bl	8000e48 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800277e:	429a      	cmp	r2, r3
 8002780:	d241      	bcs.n	8002806 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	330c      	adds	r3, #12
 8002788:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800278a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278c:	e853 3f00 	ldrex	r3, [r3]
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002798:	63fb      	str	r3, [r7, #60]	; 0x3c
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	330c      	adds	r3, #12
 80027a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027a2:	637a      	str	r2, [r7, #52]	; 0x34
 80027a4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027aa:	e841 2300 	strex	r3, r2, [r1]
 80027ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80027b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1e5      	bne.n	8002782 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	3314      	adds	r3, #20
 80027bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	e853 3f00 	ldrex	r3, [r3]
 80027c4:	613b      	str	r3, [r7, #16]
   return(result);
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	3314      	adds	r3, #20
 80027d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027d6:	623a      	str	r2, [r7, #32]
 80027d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027da:	69f9      	ldr	r1, [r7, #28]
 80027dc:	6a3a      	ldr	r2, [r7, #32]
 80027de:	e841 2300 	strex	r3, r2, [r1]
 80027e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1e5      	bne.n	80027b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2220      	movs	r2, #32
 80027ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2220      	movs	r2, #32
 80027f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e00f      	b.n	8002826 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4013      	ands	r3, r2
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	429a      	cmp	r2, r3
 8002814:	bf0c      	ite	eq
 8002816:	2301      	moveq	r3, #1
 8002818:	2300      	movne	r3, #0
 800281a:	b2db      	uxtb	r3, r3
 800281c:	461a      	mov	r2, r3
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	429a      	cmp	r2, r3
 8002822:	d09f      	beq.n	8002764 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3740      	adds	r7, #64	; 0x40
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002834:	b0c0      	sub	sp, #256	; 0x100
 8002836:	af00      	add	r7, sp, #0
 8002838:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800283c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800284c:	68d9      	ldr	r1, [r3, #12]
 800284e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	ea40 0301 	orr.w	r3, r0, r1
 8002858:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800285a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	431a      	orrs	r2, r3
 8002868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	431a      	orrs	r2, r3
 8002870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800287c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002888:	f021 010c 	bic.w	r1, r1, #12
 800288c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002896:	430b      	orrs	r3, r1
 8002898:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800289a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80028a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028aa:	6999      	ldr	r1, [r3, #24]
 80028ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	ea40 0301 	orr.w	r3, r0, r1
 80028b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	4b8f      	ldr	r3, [pc, #572]	; (8002afc <UART_SetConfig+0x2cc>)
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d005      	beq.n	80028d0 <UART_SetConfig+0xa0>
 80028c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	4b8d      	ldr	r3, [pc, #564]	; (8002b00 <UART_SetConfig+0x2d0>)
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d104      	bne.n	80028da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028d0:	f7ff fae4 	bl	8001e9c <HAL_RCC_GetPCLK2Freq>
 80028d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80028d8:	e003      	b.n	80028e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028da:	f7ff facb 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 80028de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028ec:	f040 810c 	bne.w	8002b08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028f4:	2200      	movs	r2, #0
 80028f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80028fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80028fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002902:	4622      	mov	r2, r4
 8002904:	462b      	mov	r3, r5
 8002906:	1891      	adds	r1, r2, r2
 8002908:	65b9      	str	r1, [r7, #88]	; 0x58
 800290a:	415b      	adcs	r3, r3
 800290c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800290e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002912:	4621      	mov	r1, r4
 8002914:	eb12 0801 	adds.w	r8, r2, r1
 8002918:	4629      	mov	r1, r5
 800291a:	eb43 0901 	adc.w	r9, r3, r1
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800292a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800292e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002932:	4690      	mov	r8, r2
 8002934:	4699      	mov	r9, r3
 8002936:	4623      	mov	r3, r4
 8002938:	eb18 0303 	adds.w	r3, r8, r3
 800293c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002940:	462b      	mov	r3, r5
 8002942:	eb49 0303 	adc.w	r3, r9, r3
 8002946:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800294a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002956:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800295a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800295e:	460b      	mov	r3, r1
 8002960:	18db      	adds	r3, r3, r3
 8002962:	653b      	str	r3, [r7, #80]	; 0x50
 8002964:	4613      	mov	r3, r2
 8002966:	eb42 0303 	adc.w	r3, r2, r3
 800296a:	657b      	str	r3, [r7, #84]	; 0x54
 800296c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002970:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002974:	f7fd fc84 	bl	8000280 <__aeabi_uldivmod>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4b61      	ldr	r3, [pc, #388]	; (8002b04 <UART_SetConfig+0x2d4>)
 800297e:	fba3 2302 	umull	r2, r3, r3, r2
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	011c      	lsls	r4, r3, #4
 8002986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800298a:	2200      	movs	r2, #0
 800298c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002990:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002994:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002998:	4642      	mov	r2, r8
 800299a:	464b      	mov	r3, r9
 800299c:	1891      	adds	r1, r2, r2
 800299e:	64b9      	str	r1, [r7, #72]	; 0x48
 80029a0:	415b      	adcs	r3, r3
 80029a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029a8:	4641      	mov	r1, r8
 80029aa:	eb12 0a01 	adds.w	sl, r2, r1
 80029ae:	4649      	mov	r1, r9
 80029b0:	eb43 0b01 	adc.w	fp, r3, r1
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029c8:	4692      	mov	sl, r2
 80029ca:	469b      	mov	fp, r3
 80029cc:	4643      	mov	r3, r8
 80029ce:	eb1a 0303 	adds.w	r3, sl, r3
 80029d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80029d6:	464b      	mov	r3, r9
 80029d8:	eb4b 0303 	adc.w	r3, fp, r3
 80029dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80029e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80029f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80029f4:	460b      	mov	r3, r1
 80029f6:	18db      	adds	r3, r3, r3
 80029f8:	643b      	str	r3, [r7, #64]	; 0x40
 80029fa:	4613      	mov	r3, r2
 80029fc:	eb42 0303 	adc.w	r3, r2, r3
 8002a00:	647b      	str	r3, [r7, #68]	; 0x44
 8002a02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a0a:	f7fd fc39 	bl	8000280 <__aeabi_uldivmod>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4611      	mov	r1, r2
 8002a14:	4b3b      	ldr	r3, [pc, #236]	; (8002b04 <UART_SetConfig+0x2d4>)
 8002a16:	fba3 2301 	umull	r2, r3, r3, r1
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	2264      	movs	r2, #100	; 0x64
 8002a1e:	fb02 f303 	mul.w	r3, r2, r3
 8002a22:	1acb      	subs	r3, r1, r3
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a2a:	4b36      	ldr	r3, [pc, #216]	; (8002b04 <UART_SetConfig+0x2d4>)
 8002a2c:	fba3 2302 	umull	r2, r3, r3, r2
 8002a30:	095b      	lsrs	r3, r3, #5
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a38:	441c      	add	r4, r3
 8002a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002a48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002a4c:	4642      	mov	r2, r8
 8002a4e:	464b      	mov	r3, r9
 8002a50:	1891      	adds	r1, r2, r2
 8002a52:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a54:	415b      	adcs	r3, r3
 8002a56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a5c:	4641      	mov	r1, r8
 8002a5e:	1851      	adds	r1, r2, r1
 8002a60:	6339      	str	r1, [r7, #48]	; 0x30
 8002a62:	4649      	mov	r1, r9
 8002a64:	414b      	adcs	r3, r1
 8002a66:	637b      	str	r3, [r7, #52]	; 0x34
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002a74:	4659      	mov	r1, fp
 8002a76:	00cb      	lsls	r3, r1, #3
 8002a78:	4651      	mov	r1, sl
 8002a7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a7e:	4651      	mov	r1, sl
 8002a80:	00ca      	lsls	r2, r1, #3
 8002a82:	4610      	mov	r0, r2
 8002a84:	4619      	mov	r1, r3
 8002a86:	4603      	mov	r3, r0
 8002a88:	4642      	mov	r2, r8
 8002a8a:	189b      	adds	r3, r3, r2
 8002a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a90:	464b      	mov	r3, r9
 8002a92:	460a      	mov	r2, r1
 8002a94:	eb42 0303 	adc.w	r3, r2, r3
 8002a98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002aa8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002aac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	18db      	adds	r3, r3, r3
 8002ab4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	eb42 0303 	adc.w	r3, r2, r3
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002abe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ac2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002ac6:	f7fd fbdb 	bl	8000280 <__aeabi_uldivmod>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <UART_SetConfig+0x2d4>)
 8002ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ad4:	095b      	lsrs	r3, r3, #5
 8002ad6:	2164      	movs	r1, #100	; 0x64
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	3332      	adds	r3, #50	; 0x32
 8002ae2:	4a08      	ldr	r2, [pc, #32]	; (8002b04 <UART_SetConfig+0x2d4>)
 8002ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	f003 0207 	and.w	r2, r3, #7
 8002aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4422      	add	r2, r4
 8002af6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002af8:	e105      	b.n	8002d06 <UART_SetConfig+0x4d6>
 8002afa:	bf00      	nop
 8002afc:	40011000 	.word	0x40011000
 8002b00:	40011400 	.word	0x40011400
 8002b04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002b16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002b1a:	4642      	mov	r2, r8
 8002b1c:	464b      	mov	r3, r9
 8002b1e:	1891      	adds	r1, r2, r2
 8002b20:	6239      	str	r1, [r7, #32]
 8002b22:	415b      	adcs	r3, r3
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
 8002b26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b2a:	4641      	mov	r1, r8
 8002b2c:	1854      	adds	r4, r2, r1
 8002b2e:	4649      	mov	r1, r9
 8002b30:	eb43 0501 	adc.w	r5, r3, r1
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	00eb      	lsls	r3, r5, #3
 8002b3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b42:	00e2      	lsls	r2, r4, #3
 8002b44:	4614      	mov	r4, r2
 8002b46:	461d      	mov	r5, r3
 8002b48:	4643      	mov	r3, r8
 8002b4a:	18e3      	adds	r3, r4, r3
 8002b4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b50:	464b      	mov	r3, r9
 8002b52:	eb45 0303 	adc.w	r3, r5, r3
 8002b56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b76:	4629      	mov	r1, r5
 8002b78:	008b      	lsls	r3, r1, #2
 8002b7a:	4621      	mov	r1, r4
 8002b7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b80:	4621      	mov	r1, r4
 8002b82:	008a      	lsls	r2, r1, #2
 8002b84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002b88:	f7fd fb7a 	bl	8000280 <__aeabi_uldivmod>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4b60      	ldr	r3, [pc, #384]	; (8002d14 <UART_SetConfig+0x4e4>)
 8002b92:	fba3 2302 	umull	r2, r3, r3, r2
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	011c      	lsls	r4, r3, #4
 8002b9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ba4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ba8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002bac:	4642      	mov	r2, r8
 8002bae:	464b      	mov	r3, r9
 8002bb0:	1891      	adds	r1, r2, r2
 8002bb2:	61b9      	str	r1, [r7, #24]
 8002bb4:	415b      	adcs	r3, r3
 8002bb6:	61fb      	str	r3, [r7, #28]
 8002bb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bbc:	4641      	mov	r1, r8
 8002bbe:	1851      	adds	r1, r2, r1
 8002bc0:	6139      	str	r1, [r7, #16]
 8002bc2:	4649      	mov	r1, r9
 8002bc4:	414b      	adcs	r3, r1
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bd4:	4659      	mov	r1, fp
 8002bd6:	00cb      	lsls	r3, r1, #3
 8002bd8:	4651      	mov	r1, sl
 8002bda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bde:	4651      	mov	r1, sl
 8002be0:	00ca      	lsls	r2, r1, #3
 8002be2:	4610      	mov	r0, r2
 8002be4:	4619      	mov	r1, r3
 8002be6:	4603      	mov	r3, r0
 8002be8:	4642      	mov	r2, r8
 8002bea:	189b      	adds	r3, r3, r2
 8002bec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bf0:	464b      	mov	r3, r9
 8002bf2:	460a      	mov	r2, r1
 8002bf4:	eb42 0303 	adc.w	r3, r2, r3
 8002bf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002c14:	4649      	mov	r1, r9
 8002c16:	008b      	lsls	r3, r1, #2
 8002c18:	4641      	mov	r1, r8
 8002c1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c1e:	4641      	mov	r1, r8
 8002c20:	008a      	lsls	r2, r1, #2
 8002c22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002c26:	f7fd fb2b 	bl	8000280 <__aeabi_uldivmod>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4b39      	ldr	r3, [pc, #228]	; (8002d14 <UART_SetConfig+0x4e4>)
 8002c30:	fba3 1302 	umull	r1, r3, r3, r2
 8002c34:	095b      	lsrs	r3, r3, #5
 8002c36:	2164      	movs	r1, #100	; 0x64
 8002c38:	fb01 f303 	mul.w	r3, r1, r3
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	3332      	adds	r3, #50	; 0x32
 8002c42:	4a34      	ldr	r2, [pc, #208]	; (8002d14 <UART_SetConfig+0x4e4>)
 8002c44:	fba2 2303 	umull	r2, r3, r2, r3
 8002c48:	095b      	lsrs	r3, r3, #5
 8002c4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c4e:	441c      	add	r4, r3
 8002c50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c54:	2200      	movs	r2, #0
 8002c56:	673b      	str	r3, [r7, #112]	; 0x70
 8002c58:	677a      	str	r2, [r7, #116]	; 0x74
 8002c5a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002c5e:	4642      	mov	r2, r8
 8002c60:	464b      	mov	r3, r9
 8002c62:	1891      	adds	r1, r2, r2
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	415b      	adcs	r3, r3
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c6e:	4641      	mov	r1, r8
 8002c70:	1851      	adds	r1, r2, r1
 8002c72:	6039      	str	r1, [r7, #0]
 8002c74:	4649      	mov	r1, r9
 8002c76:	414b      	adcs	r3, r1
 8002c78:	607b      	str	r3, [r7, #4]
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c86:	4659      	mov	r1, fp
 8002c88:	00cb      	lsls	r3, r1, #3
 8002c8a:	4651      	mov	r1, sl
 8002c8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c90:	4651      	mov	r1, sl
 8002c92:	00ca      	lsls	r2, r1, #3
 8002c94:	4610      	mov	r0, r2
 8002c96:	4619      	mov	r1, r3
 8002c98:	4603      	mov	r3, r0
 8002c9a:	4642      	mov	r2, r8
 8002c9c:	189b      	adds	r3, r3, r2
 8002c9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ca0:	464b      	mov	r3, r9
 8002ca2:	460a      	mov	r2, r1
 8002ca4:	eb42 0303 	adc.w	r3, r2, r3
 8002ca8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	663b      	str	r3, [r7, #96]	; 0x60
 8002cb4:	667a      	str	r2, [r7, #100]	; 0x64
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002cc2:	4649      	mov	r1, r9
 8002cc4:	008b      	lsls	r3, r1, #2
 8002cc6:	4641      	mov	r1, r8
 8002cc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ccc:	4641      	mov	r1, r8
 8002cce:	008a      	lsls	r2, r1, #2
 8002cd0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002cd4:	f7fd fad4 	bl	8000280 <__aeabi_uldivmod>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <UART_SetConfig+0x4e4>)
 8002cde:	fba3 1302 	umull	r1, r3, r3, r2
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	2164      	movs	r1, #100	; 0x64
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	3332      	adds	r3, #50	; 0x32
 8002cf0:	4a08      	ldr	r2, [pc, #32]	; (8002d14 <UART_SetConfig+0x4e4>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	f003 020f 	and.w	r2, r3, #15
 8002cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4422      	add	r2, r4
 8002d04:	609a      	str	r2, [r3, #8]
}
 8002d06:	bf00      	nop
 8002d08:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d12:	bf00      	nop
 8002d14:	51eb851f 	.word	0x51eb851f

08002d18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f103 0208 	add.w	r2, r3, #8
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f103 0208 	add.w	r2, r3, #8
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f103 0208 	add.w	r2, r3, #8
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d72:	b480      	push	{r7}
 8002d74:	b085      	sub	sp, #20
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	601a      	str	r2, [r3, #0]
}
 8002dae:	bf00      	nop
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b085      	sub	sp, #20
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd0:	d103      	bne.n	8002dda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	e00c      	b.n	8002df4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3308      	adds	r3, #8
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	e002      	b.n	8002de8 <vListInsert+0x2e>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d2f6      	bcs.n	8002de2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	601a      	str	r2, [r3, #0]
}
 8002e20:	bf00      	nop
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6892      	ldr	r2, [r2, #8]
 8002e42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6852      	ldr	r2, [r2, #4]
 8002e4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d103      	bne.n	8002e60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	1e5a      	subs	r2, r3, #1
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10a      	bne.n	8002eaa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002ea6:	bf00      	nop
 8002ea8:	e7fe      	b.n	8002ea8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002eaa:	f001 ff5b 	bl	8004d64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb6:	68f9      	ldr	r1, [r7, #12]
 8002eb8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002eba:	fb01 f303 	mul.w	r3, r1, r3
 8002ebe:	441a      	add	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eda:	3b01      	subs	r3, #1
 8002edc:	68f9      	ldr	r1, [r7, #12]
 8002ede:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ee0:	fb01 f303 	mul.w	r3, r1, r3
 8002ee4:	441a      	add	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	22ff      	movs	r2, #255	; 0xff
 8002eee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	22ff      	movs	r2, #255	; 0xff
 8002ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d114      	bne.n	8002f2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d01a      	beq.n	8002f3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3310      	adds	r3, #16
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f001 f841 	bl	8003f94 <xTaskRemoveFromEventList>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d012      	beq.n	8002f3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002f18:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <xQueueGenericReset+0xcc>)
 8002f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	f3bf 8f6f 	isb	sy
 8002f28:	e009      	b.n	8002f3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	3310      	adds	r3, #16
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff fef2 	bl	8002d18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	3324      	adds	r3, #36	; 0x24
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff feed 	bl	8002d18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002f3e:	f001 ff41 	bl	8004dc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002f42:	2301      	movs	r3, #1
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	e000ed04 	.word	0xe000ed04

08002f50 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08a      	sub	sp, #40	; 0x28
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10a      	bne.n	8002f7a <xQueueGenericCreate+0x2a>
	__asm volatile
 8002f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f68:	f383 8811 	msr	BASEPRI, r3
 8002f6c:	f3bf 8f6f 	isb	sy
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	613b      	str	r3, [r7, #16]
}
 8002f76:	bf00      	nop
 8002f78:	e7fe      	b.n	8002f78 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d102      	bne.n	8002f86 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61fb      	str	r3, [r7, #28]
 8002f84:	e004      	b.n	8002f90 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	fb02 f303 	mul.w	r3, r2, r3
 8002f8e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	3350      	adds	r3, #80	; 0x50
 8002f94:	4618      	mov	r0, r3
 8002f96:	f002 f807 	bl	8004fa8 <pvPortMalloc>
 8002f9a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00d      	beq.n	8002fbe <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	3350      	adds	r3, #80	; 0x50
 8002faa:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002fac:	79fa      	ldrb	r2, [r7, #7]
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	68b9      	ldr	r1, [r7, #8]
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 f805 	bl	8002fc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002fbe:	69bb      	ldr	r3, [r7, #24]
	}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3720      	adds	r7, #32
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
 8002fd4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d103      	bne.n	8002fe4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	e002      	b.n	8002fea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	69b8      	ldr	r0, [r7, #24]
 8002ffa:	f7ff ff41 	bl	8002e80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	78fa      	ldrb	r2, [r7, #3]
 8003002:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003006:	bf00      	nop
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08e      	sub	sp, #56	; 0x38
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
 800301c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800301e:	2300      	movs	r3, #0
 8003020:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10a      	bne.n	8003042 <xQueueGenericSend+0x32>
	__asm volatile
 800302c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003030:	f383 8811 	msr	BASEPRI, r3
 8003034:	f3bf 8f6f 	isb	sy
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800303e:	bf00      	nop
 8003040:	e7fe      	b.n	8003040 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d103      	bne.n	8003050 <xQueueGenericSend+0x40>
 8003048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <xQueueGenericSend+0x44>
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <xQueueGenericSend+0x46>
 8003054:	2300      	movs	r3, #0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10a      	bne.n	8003070 <xQueueGenericSend+0x60>
	__asm volatile
 800305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800306c:	bf00      	nop
 800306e:	e7fe      	b.n	800306e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2b02      	cmp	r3, #2
 8003074:	d103      	bne.n	800307e <xQueueGenericSend+0x6e>
 8003076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <xQueueGenericSend+0x72>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <xQueueGenericSend+0x74>
 8003082:	2300      	movs	r3, #0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10a      	bne.n	800309e <xQueueGenericSend+0x8e>
	__asm volatile
 8003088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308c:	f383 8811 	msr	BASEPRI, r3
 8003090:	f3bf 8f6f 	isb	sy
 8003094:	f3bf 8f4f 	dsb	sy
 8003098:	623b      	str	r3, [r7, #32]
}
 800309a:	bf00      	nop
 800309c:	e7fe      	b.n	800309c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800309e:	f001 f915 	bl	80042cc <xTaskGetSchedulerState>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d102      	bne.n	80030ae <xQueueGenericSend+0x9e>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <xQueueGenericSend+0xa2>
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <xQueueGenericSend+0xa4>
 80030b2:	2300      	movs	r3, #0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10a      	bne.n	80030ce <xQueueGenericSend+0xbe>
	__asm volatile
 80030b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030bc:	f383 8811 	msr	BASEPRI, r3
 80030c0:	f3bf 8f6f 	isb	sy
 80030c4:	f3bf 8f4f 	dsb	sy
 80030c8:	61fb      	str	r3, [r7, #28]
}
 80030ca:	bf00      	nop
 80030cc:	e7fe      	b.n	80030cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030ce:	f001 fe49 	bl	8004d64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030da:	429a      	cmp	r2, r3
 80030dc:	d302      	bcc.n	80030e4 <xQueueGenericSend+0xd4>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d129      	bne.n	8003138 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	68b9      	ldr	r1, [r7, #8]
 80030e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030ea:	f000 fa07 	bl	80034fc <prvCopyDataToQueue>
 80030ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d010      	beq.n	800311a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fa:	3324      	adds	r3, #36	; 0x24
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 ff49 	bl	8003f94 <xTaskRemoveFromEventList>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d013      	beq.n	8003130 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003108:	4b3f      	ldr	r3, [pc, #252]	; (8003208 <xQueueGenericSend+0x1f8>)
 800310a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	e00a      	b.n	8003130 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311c:	2b00      	cmp	r3, #0
 800311e:	d007      	beq.n	8003130 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003120:	4b39      	ldr	r3, [pc, #228]	; (8003208 <xQueueGenericSend+0x1f8>)
 8003122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003130:	f001 fe48 	bl	8004dc4 <vPortExitCritical>
				return pdPASS;
 8003134:	2301      	movs	r3, #1
 8003136:	e063      	b.n	8003200 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d103      	bne.n	8003146 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800313e:	f001 fe41 	bl	8004dc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003142:	2300      	movs	r3, #0
 8003144:	e05c      	b.n	8003200 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003148:	2b00      	cmp	r3, #0
 800314a:	d106      	bne.n	800315a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800314c:	f107 0314 	add.w	r3, r7, #20
 8003150:	4618      	mov	r0, r3
 8003152:	f000 ff81 	bl	8004058 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003156:	2301      	movs	r3, #1
 8003158:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800315a:	f001 fe33 	bl	8004dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800315e:	f000 fcfb 	bl	8003b58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003162:	f001 fdff 	bl	8004d64 <vPortEnterCritical>
 8003166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003168:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800316c:	b25b      	sxtb	r3, r3
 800316e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003172:	d103      	bne.n	800317c <xQueueGenericSend+0x16c>
 8003174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003182:	b25b      	sxtb	r3, r3
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003188:	d103      	bne.n	8003192 <xQueueGenericSend+0x182>
 800318a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003192:	f001 fe17 	bl	8004dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003196:	1d3a      	adds	r2, r7, #4
 8003198:	f107 0314 	add.w	r3, r7, #20
 800319c:	4611      	mov	r1, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 ff70 	bl	8004084 <xTaskCheckForTimeOut>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d124      	bne.n	80031f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80031aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031ac:	f000 fa9e 	bl	80036ec <prvIsQueueFull>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d018      	beq.n	80031e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80031b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b8:	3310      	adds	r3, #16
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	4611      	mov	r1, r2
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 fe98 	bl	8003ef4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80031c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031c6:	f000 fa29 	bl	800361c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80031ca:	f000 fcd3 	bl	8003b74 <xTaskResumeAll>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f47f af7c 	bne.w	80030ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80031d6:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <xQueueGenericSend+0x1f8>)
 80031d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	e772      	b.n	80030ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80031e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031ea:	f000 fa17 	bl	800361c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031ee:	f000 fcc1 	bl	8003b74 <xTaskResumeAll>
 80031f2:	e76c      	b.n	80030ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80031f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031f6:	f000 fa11 	bl	800361c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031fa:	f000 fcbb 	bl	8003b74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80031fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003200:	4618      	mov	r0, r3
 8003202:	3738      	adds	r7, #56	; 0x38
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	e000ed04 	.word	0xe000ed04

0800320c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08e      	sub	sp, #56	; 0x38
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800321e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10a      	bne.n	800323a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003228:	f383 8811 	msr	BASEPRI, r3
 800322c:	f3bf 8f6f 	isb	sy
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003236:	bf00      	nop
 8003238:	e7fe      	b.n	8003238 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d103      	bne.n	8003248 <xQueueGenericSendFromISR+0x3c>
 8003240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <xQueueGenericSendFromISR+0x40>
 8003248:	2301      	movs	r3, #1
 800324a:	e000      	b.n	800324e <xQueueGenericSendFromISR+0x42>
 800324c:	2300      	movs	r3, #0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10a      	bne.n	8003268 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003256:	f383 8811 	msr	BASEPRI, r3
 800325a:	f3bf 8f6f 	isb	sy
 800325e:	f3bf 8f4f 	dsb	sy
 8003262:	623b      	str	r3, [r7, #32]
}
 8003264:	bf00      	nop
 8003266:	e7fe      	b.n	8003266 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2b02      	cmp	r3, #2
 800326c:	d103      	bne.n	8003276 <xQueueGenericSendFromISR+0x6a>
 800326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <xQueueGenericSendFromISR+0x6e>
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <xQueueGenericSendFromISR+0x70>
 800327a:	2300      	movs	r3, #0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10a      	bne.n	8003296 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003284:	f383 8811 	msr	BASEPRI, r3
 8003288:	f3bf 8f6f 	isb	sy
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	61fb      	str	r3, [r7, #28]
}
 8003292:	bf00      	nop
 8003294:	e7fe      	b.n	8003294 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003296:	f001 fe47 	bl	8004f28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800329a:	f3ef 8211 	mrs	r2, BASEPRI
 800329e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a2:	f383 8811 	msr	BASEPRI, r3
 80032a6:	f3bf 8f6f 	isb	sy
 80032aa:	f3bf 8f4f 	dsb	sy
 80032ae:	61ba      	str	r2, [r7, #24]
 80032b0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80032b2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80032b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032be:	429a      	cmp	r2, r3
 80032c0:	d302      	bcc.n	80032c8 <xQueueGenericSendFromISR+0xbc>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d12c      	bne.n	8003322 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80032c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	68b9      	ldr	r1, [r7, #8]
 80032d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032d8:	f000 f910 	bl	80034fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80032dc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80032e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032e4:	d112      	bne.n	800330c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d016      	beq.n	800331c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f0:	3324      	adds	r3, #36	; 0x24
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fe4e 	bl	8003f94 <xTaskRemoveFromEventList>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00e      	beq.n	800331c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00b      	beq.n	800331c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	e007      	b.n	800331c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800330c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003310:	3301      	adds	r3, #1
 8003312:	b2db      	uxtb	r3, r3
 8003314:	b25a      	sxtb	r2, r3
 8003316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800331c:	2301      	movs	r3, #1
 800331e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003320:	e001      	b.n	8003326 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003322:	2300      	movs	r3, #0
 8003324:	637b      	str	r3, [r7, #52]	; 0x34
 8003326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003328:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003330:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003334:	4618      	mov	r0, r3
 8003336:	3738      	adds	r7, #56	; 0x38
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b08c      	sub	sp, #48	; 0x30
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003348:	2300      	movs	r3, #0
 800334a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10a      	bne.n	800336c <xQueueReceive+0x30>
	__asm volatile
 8003356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335a:	f383 8811 	msr	BASEPRI, r3
 800335e:	f3bf 8f6f 	isb	sy
 8003362:	f3bf 8f4f 	dsb	sy
 8003366:	623b      	str	r3, [r7, #32]
}
 8003368:	bf00      	nop
 800336a:	e7fe      	b.n	800336a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d103      	bne.n	800337a <xQueueReceive+0x3e>
 8003372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <xQueueReceive+0x42>
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <xQueueReceive+0x44>
 800337e:	2300      	movs	r3, #0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10a      	bne.n	800339a <xQueueReceive+0x5e>
	__asm volatile
 8003384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003388:	f383 8811 	msr	BASEPRI, r3
 800338c:	f3bf 8f6f 	isb	sy
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	61fb      	str	r3, [r7, #28]
}
 8003396:	bf00      	nop
 8003398:	e7fe      	b.n	8003398 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800339a:	f000 ff97 	bl	80042cc <xTaskGetSchedulerState>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d102      	bne.n	80033aa <xQueueReceive+0x6e>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <xQueueReceive+0x72>
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <xQueueReceive+0x74>
 80033ae:	2300      	movs	r3, #0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10a      	bne.n	80033ca <xQueueReceive+0x8e>
	__asm volatile
 80033b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b8:	f383 8811 	msr	BASEPRI, r3
 80033bc:	f3bf 8f6f 	isb	sy
 80033c0:	f3bf 8f4f 	dsb	sy
 80033c4:	61bb      	str	r3, [r7, #24]
}
 80033c6:	bf00      	nop
 80033c8:	e7fe      	b.n	80033c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033ca:	f001 fccb 	bl	8004d64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d01f      	beq.n	800341a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033de:	f000 f8f7 	bl	80035d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	1e5a      	subs	r2, r3, #1
 80033e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00f      	beq.n	8003412 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f4:	3310      	adds	r3, #16
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 fdcc 	bl	8003f94 <xTaskRemoveFromEventList>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d007      	beq.n	8003412 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003402:	4b3d      	ldr	r3, [pc, #244]	; (80034f8 <xQueueReceive+0x1bc>)
 8003404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	f3bf 8f4f 	dsb	sy
 800340e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003412:	f001 fcd7 	bl	8004dc4 <vPortExitCritical>
				return pdPASS;
 8003416:	2301      	movs	r3, #1
 8003418:	e069      	b.n	80034ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d103      	bne.n	8003428 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003420:	f001 fcd0 	bl	8004dc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003424:	2300      	movs	r3, #0
 8003426:	e062      	b.n	80034ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800342e:	f107 0310 	add.w	r3, r7, #16
 8003432:	4618      	mov	r0, r3
 8003434:	f000 fe10 	bl	8004058 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003438:	2301      	movs	r3, #1
 800343a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800343c:	f001 fcc2 	bl	8004dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003440:	f000 fb8a 	bl	8003b58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003444:	f001 fc8e 	bl	8004d64 <vPortEnterCritical>
 8003448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800344e:	b25b      	sxtb	r3, r3
 8003450:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003454:	d103      	bne.n	800345e <xQueueReceive+0x122>
 8003456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800345e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003460:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003464:	b25b      	sxtb	r3, r3
 8003466:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800346a:	d103      	bne.n	8003474 <xQueueReceive+0x138>
 800346c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003474:	f001 fca6 	bl	8004dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003478:	1d3a      	adds	r2, r7, #4
 800347a:	f107 0310 	add.w	r3, r7, #16
 800347e:	4611      	mov	r1, r2
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fdff 	bl	8004084 <xTaskCheckForTimeOut>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d123      	bne.n	80034d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800348c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800348e:	f000 f917 	bl	80036c0 <prvIsQueueEmpty>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d017      	beq.n	80034c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349a:	3324      	adds	r3, #36	; 0x24
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	4611      	mov	r1, r2
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 fd27 	bl	8003ef4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80034a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034a8:	f000 f8b8 	bl	800361c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80034ac:	f000 fb62 	bl	8003b74 <xTaskResumeAll>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d189      	bne.n	80033ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80034b6:	4b10      	ldr	r3, [pc, #64]	; (80034f8 <xQueueReceive+0x1bc>)
 80034b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	f3bf 8f4f 	dsb	sy
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	e780      	b.n	80033ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80034c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034ca:	f000 f8a7 	bl	800361c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034ce:	f000 fb51 	bl	8003b74 <xTaskResumeAll>
 80034d2:	e77a      	b.n	80033ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80034d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034d6:	f000 f8a1 	bl	800361c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034da:	f000 fb4b 	bl	8003b74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034e0:	f000 f8ee 	bl	80036c0 <prvIsQueueEmpty>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f43f af6f 	beq.w	80033ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80034ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3730      	adds	r7, #48	; 0x30
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	e000ed04 	.word	0xe000ed04

080034fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003510:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10d      	bne.n	8003536 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d14d      	bne.n	80035be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	4618      	mov	r0, r3
 8003528:	f000 feee 	bl	8004308 <xTaskPriorityDisinherit>
 800352c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	609a      	str	r2, [r3, #8]
 8003534:	e043      	b.n	80035be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d119      	bne.n	8003570 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6858      	ldr	r0, [r3, #4]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	461a      	mov	r2, r3
 8003546:	68b9      	ldr	r1, [r7, #8]
 8003548:	f001 ff32 	bl	80053b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	441a      	add	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	429a      	cmp	r2, r3
 8003564:	d32b      	bcc.n	80035be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	605a      	str	r2, [r3, #4]
 800356e:	e026      	b.n	80035be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	68d8      	ldr	r0, [r3, #12]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	461a      	mov	r2, r3
 800357a:	68b9      	ldr	r1, [r7, #8]
 800357c:	f001 ff18 	bl	80053b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	68da      	ldr	r2, [r3, #12]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	425b      	negs	r3, r3
 800358a:	441a      	add	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	429a      	cmp	r2, r3
 800359a:	d207      	bcs.n	80035ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	425b      	negs	r3, r3
 80035a6:	441a      	add	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d105      	bne.n	80035be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80035c6:	697b      	ldr	r3, [r7, #20]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d018      	beq.n	8003614 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	441a      	add	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d303      	bcc.n	8003604 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68d9      	ldr	r1, [r3, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	461a      	mov	r2, r3
 800360e:	6838      	ldr	r0, [r7, #0]
 8003610:	f001 fece 	bl	80053b0 <memcpy>
	}
}
 8003614:	bf00      	nop
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003624:	f001 fb9e 	bl	8004d64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800362e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003630:	e011      	b.n	8003656 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	2b00      	cmp	r3, #0
 8003638:	d012      	beq.n	8003660 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3324      	adds	r3, #36	; 0x24
 800363e:	4618      	mov	r0, r3
 8003640:	f000 fca8 	bl	8003f94 <xTaskRemoveFromEventList>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800364a:	f000 fd7d 	bl	8004148 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800364e:	7bfb      	ldrb	r3, [r7, #15]
 8003650:	3b01      	subs	r3, #1
 8003652:	b2db      	uxtb	r3, r3
 8003654:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800365a:	2b00      	cmp	r3, #0
 800365c:	dce9      	bgt.n	8003632 <prvUnlockQueue+0x16>
 800365e:	e000      	b.n	8003662 <prvUnlockQueue+0x46>
					break;
 8003660:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	22ff      	movs	r2, #255	; 0xff
 8003666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800366a:	f001 fbab 	bl	8004dc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800366e:	f001 fb79 	bl	8004d64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003678:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800367a:	e011      	b.n	80036a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d012      	beq.n	80036aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3310      	adds	r3, #16
 8003688:	4618      	mov	r0, r3
 800368a:	f000 fc83 	bl	8003f94 <xTaskRemoveFromEventList>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003694:	f000 fd58 	bl	8004148 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003698:	7bbb      	ldrb	r3, [r7, #14]
 800369a:	3b01      	subs	r3, #1
 800369c:	b2db      	uxtb	r3, r3
 800369e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	dce9      	bgt.n	800367c <prvUnlockQueue+0x60>
 80036a8:	e000      	b.n	80036ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80036aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	22ff      	movs	r2, #255	; 0xff
 80036b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80036b4:	f001 fb86 	bl	8004dc4 <vPortExitCritical>
}
 80036b8:	bf00      	nop
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036c8:	f001 fb4c 	bl	8004d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80036d4:	2301      	movs	r3, #1
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	e001      	b.n	80036de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80036da:	2300      	movs	r3, #0
 80036dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036de:	f001 fb71 	bl	8004dc4 <vPortExitCritical>

	return xReturn;
 80036e2:	68fb      	ldr	r3, [r7, #12]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036f4:	f001 fb36 	bl	8004d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003700:	429a      	cmp	r2, r3
 8003702:	d102      	bne.n	800370a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003704:	2301      	movs	r3, #1
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	e001      	b.n	800370e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800370e:	f001 fb59 	bl	8004dc4 <vPortExitCritical>

	return xReturn;
 8003712:	68fb      	ldr	r3, [r7, #12]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	e014      	b.n	8003756 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800372c:	4a0f      	ldr	r2, [pc, #60]	; (800376c <vQueueAddToRegistry+0x50>)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10b      	bne.n	8003750 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003738:	490c      	ldr	r1, [pc, #48]	; (800376c <vQueueAddToRegistry+0x50>)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003742:	4a0a      	ldr	r2, [pc, #40]	; (800376c <vQueueAddToRegistry+0x50>)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	4413      	add	r3, r2
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800374e:	e006      	b.n	800375e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	3301      	adds	r3, #1
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2b07      	cmp	r3, #7
 800375a:	d9e7      	bls.n	800372c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800375c:	bf00      	nop
 800375e:	bf00      	nop
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	200001d0 	.word	0x200001d0

08003770 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003780:	f001 faf0 	bl	8004d64 <vPortEnterCritical>
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800378a:	b25b      	sxtb	r3, r3
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003790:	d103      	bne.n	800379a <vQueueWaitForMessageRestricted+0x2a>
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037a0:	b25b      	sxtb	r3, r3
 80037a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037a6:	d103      	bne.n	80037b0 <vQueueWaitForMessageRestricted+0x40>
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037b0:	f001 fb08 	bl	8004dc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d106      	bne.n	80037ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	3324      	adds	r3, #36	; 0x24
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	68b9      	ldr	r1, [r7, #8]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 fbb9 	bl	8003f3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80037ca:	6978      	ldr	r0, [r7, #20]
 80037cc:	f7ff ff26 	bl	800361c <prvUnlockQueue>
	}
 80037d0:	bf00      	nop
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08c      	sub	sp, #48	; 0x30
 80037dc:	af04      	add	r7, sp, #16
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	4613      	mov	r3, r2
 80037e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80037e8:	88fb      	ldrh	r3, [r7, #6]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4618      	mov	r0, r3
 80037ee:	f001 fbdb 	bl	8004fa8 <pvPortMalloc>
 80037f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00e      	beq.n	8003818 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80037fa:	2058      	movs	r0, #88	; 0x58
 80037fc:	f001 fbd4 	bl	8004fa8 <pvPortMalloc>
 8003800:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	631a      	str	r2, [r3, #48]	; 0x30
 800380e:	e005      	b.n	800381c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003810:	6978      	ldr	r0, [r7, #20]
 8003812:	f001 fc8d 	bl	8005130 <vPortFree>
 8003816:	e001      	b.n	800381c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003818:	2300      	movs	r3, #0
 800381a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d013      	beq.n	800384a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003822:	88fa      	ldrh	r2, [r7, #6]
 8003824:	2300      	movs	r3, #0
 8003826:	9303      	str	r3, [sp, #12]
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	9302      	str	r3, [sp, #8]
 800382c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382e:	9301      	str	r3, [sp, #4]
 8003830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f80e 	bl	800385a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800383e:	69f8      	ldr	r0, [r7, #28]
 8003840:	f000 f89a 	bl	8003978 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003844:	2301      	movs	r3, #1
 8003846:	61bb      	str	r3, [r7, #24]
 8003848:	e002      	b.n	8003850 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800384a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800384e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003850:	69bb      	ldr	r3, [r7, #24]
	}
 8003852:	4618      	mov	r0, r3
 8003854:	3720      	adds	r7, #32
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b088      	sub	sp, #32
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	607a      	str	r2, [r7, #4]
 8003866:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	461a      	mov	r2, r3
 8003872:	21a5      	movs	r1, #165	; 0xa5
 8003874:	f001 fdaa 	bl	80053cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003882:	3b01      	subs	r3, #1
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	f023 0307 	bic.w	r3, r3, #7
 8003890:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <prvInitialiseNewTask+0x58>
	__asm volatile
 800389c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	617b      	str	r3, [r7, #20]
}
 80038ae:	bf00      	nop
 80038b0:	e7fe      	b.n	80038b0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d01f      	beq.n	80038f8 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038b8:	2300      	movs	r3, #0
 80038ba:	61fb      	str	r3, [r7, #28]
 80038bc:	e012      	b.n	80038e4 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	4413      	add	r3, r2
 80038c4:	7819      	ldrb	r1, [r3, #0]
 80038c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	4413      	add	r3, r2
 80038cc:	3334      	adds	r3, #52	; 0x34
 80038ce:	460a      	mov	r2, r1
 80038d0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	4413      	add	r3, r2
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d006      	beq.n	80038ec <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	3301      	adds	r3, #1
 80038e2:	61fb      	str	r3, [r7, #28]
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	2b09      	cmp	r3, #9
 80038e8:	d9e9      	bls.n	80038be <prvInitialiseNewTask+0x64>
 80038ea:	e000      	b.n	80038ee <prvInitialiseNewTask+0x94>
			{
				break;
 80038ec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80038ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80038f6:	e003      	b.n	8003900 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80038f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003902:	2b0f      	cmp	r3, #15
 8003904:	d901      	bls.n	800390a <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003906:	230f      	movs	r3, #15
 8003908:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800390a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800390e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003914:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8003916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003918:	2200      	movs	r2, #0
 800391a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391e:	3304      	adds	r3, #4
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff fa19 	bl	8002d58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003928:	3318      	adds	r3, #24
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff fa14 	bl	8002d58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003934:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003938:	f1c3 0210 	rsb	r2, r3, #16
 800393c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003944:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003948:	2200      	movs	r2, #0
 800394a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800394c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	68f9      	ldr	r1, [r7, #12]
 8003958:	69b8      	ldr	r0, [r7, #24]
 800395a:	f001 f8d3 	bl	8004b04 <pxPortInitialiseStack>
 800395e:	4602      	mov	r2, r0
 8003960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003962:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800396a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800396e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003970:	bf00      	nop
 8003972:	3720      	adds	r7, #32
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003980:	f001 f9f0 	bl	8004d64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003984:	4b2c      	ldr	r3, [pc, #176]	; (8003a38 <prvAddNewTaskToReadyList+0xc0>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	3301      	adds	r3, #1
 800398a:	4a2b      	ldr	r2, [pc, #172]	; (8003a38 <prvAddNewTaskToReadyList+0xc0>)
 800398c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800398e:	4b2b      	ldr	r3, [pc, #172]	; (8003a3c <prvAddNewTaskToReadyList+0xc4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d109      	bne.n	80039aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003996:	4a29      	ldr	r2, [pc, #164]	; (8003a3c <prvAddNewTaskToReadyList+0xc4>)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800399c:	4b26      	ldr	r3, [pc, #152]	; (8003a38 <prvAddNewTaskToReadyList+0xc0>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d110      	bne.n	80039c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80039a4:	f000 fbf4 	bl	8004190 <prvInitialiseTaskLists>
 80039a8:	e00d      	b.n	80039c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80039aa:	4b25      	ldr	r3, [pc, #148]	; (8003a40 <prvAddNewTaskToReadyList+0xc8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d109      	bne.n	80039c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039b2:	4b22      	ldr	r3, [pc, #136]	; (8003a3c <prvAddNewTaskToReadyList+0xc4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	429a      	cmp	r2, r3
 80039be:	d802      	bhi.n	80039c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80039c0:	4a1e      	ldr	r2, [pc, #120]	; (8003a3c <prvAddNewTaskToReadyList+0xc4>)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80039c6:	4b1f      	ldr	r3, [pc, #124]	; (8003a44 <prvAddNewTaskToReadyList+0xcc>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	3301      	adds	r3, #1
 80039cc:	4a1d      	ldr	r2, [pc, #116]	; (8003a44 <prvAddNewTaskToReadyList+0xcc>)
 80039ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80039d0:	4b1c      	ldr	r3, [pc, #112]	; (8003a44 <prvAddNewTaskToReadyList+0xcc>)
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039dc:	2201      	movs	r2, #1
 80039de:	409a      	lsls	r2, r3
 80039e0:	4b19      	ldr	r3, [pc, #100]	; (8003a48 <prvAddNewTaskToReadyList+0xd0>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	4a18      	ldr	r2, [pc, #96]	; (8003a48 <prvAddNewTaskToReadyList+0xd0>)
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4a15      	ldr	r2, [pc, #84]	; (8003a4c <prvAddNewTaskToReadyList+0xd4>)
 80039f8:	441a      	add	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3304      	adds	r3, #4
 80039fe:	4619      	mov	r1, r3
 8003a00:	4610      	mov	r0, r2
 8003a02:	f7ff f9b6 	bl	8002d72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a06:	f001 f9dd 	bl	8004dc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a0a:	4b0d      	ldr	r3, [pc, #52]	; (8003a40 <prvAddNewTaskToReadyList+0xc8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00e      	beq.n	8003a30 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a12:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <prvAddNewTaskToReadyList+0xc4>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d207      	bcs.n	8003a30 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a20:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <prvAddNewTaskToReadyList+0xd8>)
 8003a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a30:	bf00      	nop
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	200003c4 	.word	0x200003c4
 8003a3c:	20000210 	.word	0x20000210
 8003a40:	200003d0 	.word	0x200003d0
 8003a44:	200003e0 	.word	0x200003e0
 8003a48:	200003cc 	.word	0x200003cc
 8003a4c:	20000214 	.word	0x20000214
 8003a50:	e000ed04 	.word	0xe000ed04

08003a54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d017      	beq.n	8003a96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a66:	4b13      	ldr	r3, [pc, #76]	; (8003ab4 <vTaskDelay+0x60>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <vTaskDelay+0x30>
	__asm volatile
 8003a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	60bb      	str	r3, [r7, #8]
}
 8003a80:	bf00      	nop
 8003a82:	e7fe      	b.n	8003a82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a84:	f000 f868 	bl	8003b58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a88:	2100      	movs	r1, #0
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fcc2 	bl	8004414 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a90:	f000 f870 	bl	8003b74 <xTaskResumeAll>
 8003a94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d107      	bne.n	8003aac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003a9c:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <vTaskDelay+0x64>)
 8003a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003aac:	bf00      	nop
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	200003ec 	.word	0x200003ec
 8003ab8:	e000ed04 	.word	0xe000ed04

08003abc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003ac2:	4b1f      	ldr	r3, [pc, #124]	; (8003b40 <vTaskStartScheduler+0x84>)
 8003ac4:	9301      	str	r3, [sp, #4]
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	2300      	movs	r3, #0
 8003acc:	2282      	movs	r2, #130	; 0x82
 8003ace:	491d      	ldr	r1, [pc, #116]	; (8003b44 <vTaskStartScheduler+0x88>)
 8003ad0:	481d      	ldr	r0, [pc, #116]	; (8003b48 <vTaskStartScheduler+0x8c>)
 8003ad2:	f7ff fe81 	bl	80037d8 <xTaskCreate>
 8003ad6:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d102      	bne.n	8003ae4 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8003ade:	f000 fcff 	bl	80044e0 <xTimerCreateTimerTask>
 8003ae2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d116      	bne.n	8003b18 <vTaskStartScheduler+0x5c>
	__asm volatile
 8003aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	60bb      	str	r3, [r7, #8]
}
 8003afc:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003afe:	4b13      	ldr	r3, [pc, #76]	; (8003b4c <vTaskStartScheduler+0x90>)
 8003b00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b06:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <vTaskStartScheduler+0x94>)
 8003b08:	2201      	movs	r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b0c:	4b11      	ldr	r3, [pc, #68]	; (8003b54 <vTaskStartScheduler+0x98>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b12:	f001 f885 	bl	8004c20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b16:	e00e      	b.n	8003b36 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b1e:	d10a      	bne.n	8003b36 <vTaskStartScheduler+0x7a>
	__asm volatile
 8003b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b24:	f383 8811 	msr	BASEPRI, r3
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	607b      	str	r3, [r7, #4]
}
 8003b32:	bf00      	nop
 8003b34:	e7fe      	b.n	8003b34 <vTaskStartScheduler+0x78>
}
 8003b36:	bf00      	nop
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	200003e8 	.word	0x200003e8
 8003b44:	08005d10 	.word	0x08005d10
 8003b48:	08004161 	.word	0x08004161
 8003b4c:	200003e4 	.word	0x200003e4
 8003b50:	200003d0 	.word	0x200003d0
 8003b54:	200003c8 	.word	0x200003c8

08003b58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003b5c:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <vTaskSuspendAll+0x18>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3301      	adds	r3, #1
 8003b62:	4a03      	ldr	r2, [pc, #12]	; (8003b70 <vTaskSuspendAll+0x18>)
 8003b64:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003b66:	bf00      	nop
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	200003ec 	.word	0x200003ec

08003b74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b82:	4b41      	ldr	r3, [pc, #260]	; (8003c88 <xTaskResumeAll+0x114>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10a      	bne.n	8003ba0 <xTaskResumeAll+0x2c>
	__asm volatile
 8003b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8e:	f383 8811 	msr	BASEPRI, r3
 8003b92:	f3bf 8f6f 	isb	sy
 8003b96:	f3bf 8f4f 	dsb	sy
 8003b9a:	603b      	str	r3, [r7, #0]
}
 8003b9c:	bf00      	nop
 8003b9e:	e7fe      	b.n	8003b9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ba0:	f001 f8e0 	bl	8004d64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ba4:	4b38      	ldr	r3, [pc, #224]	; (8003c88 <xTaskResumeAll+0x114>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	4a37      	ldr	r2, [pc, #220]	; (8003c88 <xTaskResumeAll+0x114>)
 8003bac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bae:	4b36      	ldr	r3, [pc, #216]	; (8003c88 <xTaskResumeAll+0x114>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d161      	bne.n	8003c7a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003bb6:	4b35      	ldr	r3, [pc, #212]	; (8003c8c <xTaskResumeAll+0x118>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d05d      	beq.n	8003c7a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bbe:	e02e      	b.n	8003c1e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bc0:	4b33      	ldr	r3, [pc, #204]	; (8003c90 <xTaskResumeAll+0x11c>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	3318      	adds	r3, #24
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff f92d 	bl	8002e2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7ff f928 	bl	8002e2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	2201      	movs	r2, #1
 8003be2:	409a      	lsls	r2, r3
 8003be4:	4b2b      	ldr	r3, [pc, #172]	; (8003c94 <xTaskResumeAll+0x120>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	4a2a      	ldr	r2, [pc, #168]	; (8003c94 <xTaskResumeAll+0x120>)
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4a27      	ldr	r2, [pc, #156]	; (8003c98 <xTaskResumeAll+0x124>)
 8003bfc:	441a      	add	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	3304      	adds	r3, #4
 8003c02:	4619      	mov	r1, r3
 8003c04:	4610      	mov	r0, r2
 8003c06:	f7ff f8b4 	bl	8002d72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0e:	4b23      	ldr	r3, [pc, #140]	; (8003c9c <xTaskResumeAll+0x128>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d302      	bcc.n	8003c1e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003c18:	4b21      	ldr	r3, [pc, #132]	; (8003ca0 <xTaskResumeAll+0x12c>)
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c1e:	4b1c      	ldr	r3, [pc, #112]	; (8003c90 <xTaskResumeAll+0x11c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1cc      	bne.n	8003bc0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c2c:	f000 fb2e 	bl	800428c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003c30:	4b1c      	ldr	r3, [pc, #112]	; (8003ca4 <xTaskResumeAll+0x130>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d010      	beq.n	8003c5e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c3c:	f000 f846 	bl	8003ccc <xTaskIncrementTick>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003c46:	4b16      	ldr	r3, [pc, #88]	; (8003ca0 <xTaskResumeAll+0x12c>)
 8003c48:	2201      	movs	r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1f1      	bne.n	8003c3c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003c58:	4b12      	ldr	r3, [pc, #72]	; (8003ca4 <xTaskResumeAll+0x130>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c5e:	4b10      	ldr	r3, [pc, #64]	; (8003ca0 <xTaskResumeAll+0x12c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d009      	beq.n	8003c7a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c66:	2301      	movs	r3, #1
 8003c68:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ca8 <xTaskResumeAll+0x134>)
 8003c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	f3bf 8f4f 	dsb	sy
 8003c76:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c7a:	f001 f8a3 	bl	8004dc4 <vPortExitCritical>

	return xAlreadyYielded;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	200003ec 	.word	0x200003ec
 8003c8c:	200003c4 	.word	0x200003c4
 8003c90:	20000384 	.word	0x20000384
 8003c94:	200003cc 	.word	0x200003cc
 8003c98:	20000214 	.word	0x20000214
 8003c9c:	20000210 	.word	0x20000210
 8003ca0:	200003d8 	.word	0x200003d8
 8003ca4:	200003d4 	.word	0x200003d4
 8003ca8:	e000ed04 	.word	0xe000ed04

08003cac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003cb2:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <xTaskGetTickCount+0x1c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003cb8:	687b      	ldr	r3, [r7, #4]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	200003c8 	.word	0x200003c8

08003ccc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cd6:	4b4e      	ldr	r3, [pc, #312]	; (8003e10 <xTaskIncrementTick+0x144>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f040 8088 	bne.w	8003df0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ce0:	4b4c      	ldr	r3, [pc, #304]	; (8003e14 <xTaskIncrementTick+0x148>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ce8:	4a4a      	ldr	r2, [pc, #296]	; (8003e14 <xTaskIncrementTick+0x148>)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d120      	bne.n	8003d36 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003cf4:	4b48      	ldr	r3, [pc, #288]	; (8003e18 <xTaskIncrementTick+0x14c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <xTaskIncrementTick+0x48>
	__asm volatile
 8003cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	603b      	str	r3, [r7, #0]
}
 8003d10:	bf00      	nop
 8003d12:	e7fe      	b.n	8003d12 <xTaskIncrementTick+0x46>
 8003d14:	4b40      	ldr	r3, [pc, #256]	; (8003e18 <xTaskIncrementTick+0x14c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	4b40      	ldr	r3, [pc, #256]	; (8003e1c <xTaskIncrementTick+0x150>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a3e      	ldr	r2, [pc, #248]	; (8003e18 <xTaskIncrementTick+0x14c>)
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	4a3e      	ldr	r2, [pc, #248]	; (8003e1c <xTaskIncrementTick+0x150>)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	4b3d      	ldr	r3, [pc, #244]	; (8003e20 <xTaskIncrementTick+0x154>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	4a3c      	ldr	r2, [pc, #240]	; (8003e20 <xTaskIncrementTick+0x154>)
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	f000 faab 	bl	800428c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d36:	4b3b      	ldr	r3, [pc, #236]	; (8003e24 <xTaskIncrementTick+0x158>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d348      	bcc.n	8003dd2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d40:	4b35      	ldr	r3, [pc, #212]	; (8003e18 <xTaskIncrementTick+0x14c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d104      	bne.n	8003d54 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d4a:	4b36      	ldr	r3, [pc, #216]	; (8003e24 <xTaskIncrementTick+0x158>)
 8003d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d50:	601a      	str	r2, [r3, #0]
					break;
 8003d52:	e03e      	b.n	8003dd2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d54:	4b30      	ldr	r3, [pc, #192]	; (8003e18 <xTaskIncrementTick+0x14c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d203      	bcs.n	8003d74 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d6c:	4a2d      	ldr	r2, [pc, #180]	; (8003e24 <xTaskIncrementTick+0x158>)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d72:	e02e      	b.n	8003dd2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	3304      	adds	r3, #4
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff f857 	bl	8002e2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d004      	beq.n	8003d90 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	3318      	adds	r3, #24
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff f84e 	bl	8002e2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	2201      	movs	r2, #1
 8003d96:	409a      	lsls	r2, r3
 8003d98:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <xTaskIncrementTick+0x15c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	4a22      	ldr	r2, [pc, #136]	; (8003e28 <xTaskIncrementTick+0x15c>)
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da6:	4613      	mov	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4a1f      	ldr	r2, [pc, #124]	; (8003e2c <xTaskIncrementTick+0x160>)
 8003db0:	441a      	add	r2, r3
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	3304      	adds	r3, #4
 8003db6:	4619      	mov	r1, r3
 8003db8:	4610      	mov	r0, r2
 8003dba:	f7fe ffda 	bl	8002d72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc2:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <xTaskIncrementTick+0x164>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d3b9      	bcc.n	8003d40 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dd0:	e7b6      	b.n	8003d40 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003dd2:	4b17      	ldr	r3, [pc, #92]	; (8003e30 <xTaskIncrementTick+0x164>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd8:	4914      	ldr	r1, [pc, #80]	; (8003e2c <xTaskIncrementTick+0x160>)
 8003dda:	4613      	mov	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4413      	add	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	440b      	add	r3, r1
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d907      	bls.n	8003dfa <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003dea:	2301      	movs	r3, #1
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	e004      	b.n	8003dfa <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003df0:	4b10      	ldr	r3, [pc, #64]	; (8003e34 <xTaskIncrementTick+0x168>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3301      	adds	r3, #1
 8003df6:	4a0f      	ldr	r2, [pc, #60]	; (8003e34 <xTaskIncrementTick+0x168>)
 8003df8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003dfa:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <xTaskIncrementTick+0x16c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003e02:	2301      	movs	r3, #1
 8003e04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003e06:	697b      	ldr	r3, [r7, #20]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	200003ec 	.word	0x200003ec
 8003e14:	200003c8 	.word	0x200003c8
 8003e18:	2000037c 	.word	0x2000037c
 8003e1c:	20000380 	.word	0x20000380
 8003e20:	200003dc 	.word	0x200003dc
 8003e24:	200003e4 	.word	0x200003e4
 8003e28:	200003cc 	.word	0x200003cc
 8003e2c:	20000214 	.word	0x20000214
 8003e30:	20000210 	.word	0x20000210
 8003e34:	200003d4 	.word	0x200003d4
 8003e38:	200003d8 	.word	0x200003d8

08003e3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e42:	4b27      	ldr	r3, [pc, #156]	; (8003ee0 <vTaskSwitchContext+0xa4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e4a:	4b26      	ldr	r3, [pc, #152]	; (8003ee4 <vTaskSwitchContext+0xa8>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e50:	e03f      	b.n	8003ed2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003e52:	4b24      	ldr	r3, [pc, #144]	; (8003ee4 <vTaskSwitchContext+0xa8>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e58:	4b23      	ldr	r3, [pc, #140]	; (8003ee8 <vTaskSwitchContext+0xac>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	fab3 f383 	clz	r3, r3
 8003e64:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003e66:	7afb      	ldrb	r3, [r7, #11]
 8003e68:	f1c3 031f 	rsb	r3, r3, #31
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	491f      	ldr	r1, [pc, #124]	; (8003eec <vTaskSwitchContext+0xb0>)
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	4613      	mov	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	440b      	add	r3, r1
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10a      	bne.n	8003e98 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	607b      	str	r3, [r7, #4]
}
 8003e94:	bf00      	nop
 8003e96:	e7fe      	b.n	8003e96 <vTaskSwitchContext+0x5a>
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4a12      	ldr	r2, [pc, #72]	; (8003eec <vTaskSwitchContext+0xb0>)
 8003ea4:	4413      	add	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	605a      	str	r2, [r3, #4]
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	3308      	adds	r3, #8
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d104      	bne.n	8003ec8 <vTaskSwitchContext+0x8c>
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	605a      	str	r2, [r3, #4]
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	4a08      	ldr	r2, [pc, #32]	; (8003ef0 <vTaskSwitchContext+0xb4>)
 8003ed0:	6013      	str	r3, [r2, #0]
}
 8003ed2:	bf00      	nop
 8003ed4:	371c      	adds	r7, #28
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	200003ec 	.word	0x200003ec
 8003ee4:	200003d8 	.word	0x200003d8
 8003ee8:	200003cc 	.word	0x200003cc
 8003eec:	20000214 	.word	0x20000214
 8003ef0:	20000210 	.word	0x20000210

08003ef4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10a      	bne.n	8003f1a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	60fb      	str	r3, [r7, #12]
}
 8003f16:	bf00      	nop
 8003f18:	e7fe      	b.n	8003f18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f1a:	4b07      	ldr	r3, [pc, #28]	; (8003f38 <vTaskPlaceOnEventList+0x44>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3318      	adds	r3, #24
 8003f20:	4619      	mov	r1, r3
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fe ff49 	bl	8002dba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f28:	2101      	movs	r1, #1
 8003f2a:	6838      	ldr	r0, [r7, #0]
 8003f2c:	f000 fa72 	bl	8004414 <prvAddCurrentTaskToDelayedList>
}
 8003f30:	bf00      	nop
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	20000210 	.word	0x20000210

08003f3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10a      	bne.n	8003f64 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f52:	f383 8811 	msr	BASEPRI, r3
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	617b      	str	r3, [r7, #20]
}
 8003f60:	bf00      	nop
 8003f62:	e7fe      	b.n	8003f62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f64:	4b0a      	ldr	r3, [pc, #40]	; (8003f90 <vTaskPlaceOnEventListRestricted+0x54>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3318      	adds	r3, #24
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f7fe ff00 	bl	8002d72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003f78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f7c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	68b8      	ldr	r0, [r7, #8]
 8003f82:	f000 fa47 	bl	8004414 <prvAddCurrentTaskToDelayedList>
	}
 8003f86:	bf00      	nop
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000210 	.word	0x20000210

08003f94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10a      	bne.n	8003fc0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fae:	f383 8811 	msr	BASEPRI, r3
 8003fb2:	f3bf 8f6f 	isb	sy
 8003fb6:	f3bf 8f4f 	dsb	sy
 8003fba:	60fb      	str	r3, [r7, #12]
}
 8003fbc:	bf00      	nop
 8003fbe:	e7fe      	b.n	8003fbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	3318      	adds	r3, #24
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fe ff31 	bl	8002e2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fca:	4b1d      	ldr	r3, [pc, #116]	; (8004040 <xTaskRemoveFromEventList+0xac>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d11c      	bne.n	800400c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fe ff28 	bl	8002e2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	409a      	lsls	r2, r3
 8003fe4:	4b17      	ldr	r3, [pc, #92]	; (8004044 <xTaskRemoveFromEventList+0xb0>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	4a16      	ldr	r2, [pc, #88]	; (8004044 <xTaskRemoveFromEventList+0xb0>)
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4a13      	ldr	r2, [pc, #76]	; (8004048 <xTaskRemoveFromEventList+0xb4>)
 8003ffc:	441a      	add	r2, r3
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	3304      	adds	r3, #4
 8004002:	4619      	mov	r1, r3
 8004004:	4610      	mov	r0, r2
 8004006:	f7fe feb4 	bl	8002d72 <vListInsertEnd>
 800400a:	e005      	b.n	8004018 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	3318      	adds	r3, #24
 8004010:	4619      	mov	r1, r3
 8004012:	480e      	ldr	r0, [pc, #56]	; (800404c <xTaskRemoveFromEventList+0xb8>)
 8004014:	f7fe fead 	bl	8002d72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800401c:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <xTaskRemoveFromEventList+0xbc>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	429a      	cmp	r2, r3
 8004024:	d905      	bls.n	8004032 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004026:	2301      	movs	r3, #1
 8004028:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800402a:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <xTaskRemoveFromEventList+0xc0>)
 800402c:	2201      	movs	r2, #1
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	e001      	b.n	8004036 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004032:	2300      	movs	r3, #0
 8004034:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004036:	697b      	ldr	r3, [r7, #20]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	200003ec 	.word	0x200003ec
 8004044:	200003cc 	.word	0x200003cc
 8004048:	20000214 	.word	0x20000214
 800404c:	20000384 	.word	0x20000384
 8004050:	20000210 	.word	0x20000210
 8004054:	200003d8 	.word	0x200003d8

08004058 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004060:	4b06      	ldr	r3, [pc, #24]	; (800407c <vTaskInternalSetTimeOutState+0x24>)
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004068:	4b05      	ldr	r3, [pc, #20]	; (8004080 <vTaskInternalSetTimeOutState+0x28>)
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	605a      	str	r2, [r3, #4]
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	200003dc 	.word	0x200003dc
 8004080:	200003c8 	.word	0x200003c8

08004084 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10a      	bne.n	80040aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	613b      	str	r3, [r7, #16]
}
 80040a6:	bf00      	nop
 80040a8:	e7fe      	b.n	80040a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10a      	bne.n	80040c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80040b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	60fb      	str	r3, [r7, #12]
}
 80040c2:	bf00      	nop
 80040c4:	e7fe      	b.n	80040c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80040c6:	f000 fe4d 	bl	8004d64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80040ca:	4b1d      	ldr	r3, [pc, #116]	; (8004140 <xTaskCheckForTimeOut+0xbc>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040e2:	d102      	bne.n	80040ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80040e4:	2300      	movs	r3, #0
 80040e6:	61fb      	str	r3, [r7, #28]
 80040e8:	e023      	b.n	8004132 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	4b15      	ldr	r3, [pc, #84]	; (8004144 <xTaskCheckForTimeOut+0xc0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d007      	beq.n	8004106 <xTaskCheckForTimeOut+0x82>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d302      	bcc.n	8004106 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004100:	2301      	movs	r3, #1
 8004102:	61fb      	str	r3, [r7, #28]
 8004104:	e015      	b.n	8004132 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	429a      	cmp	r2, r3
 800410e:	d20b      	bcs.n	8004128 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	1ad2      	subs	r2, r2, r3
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7ff ff9b 	bl	8004058 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004122:	2300      	movs	r3, #0
 8004124:	61fb      	str	r3, [r7, #28]
 8004126:	e004      	b.n	8004132 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800412e:	2301      	movs	r3, #1
 8004130:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004132:	f000 fe47 	bl	8004dc4 <vPortExitCritical>

	return xReturn;
 8004136:	69fb      	ldr	r3, [r7, #28]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3720      	adds	r7, #32
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	200003c8 	.word	0x200003c8
 8004144:	200003dc 	.word	0x200003dc

08004148 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800414c:	4b03      	ldr	r3, [pc, #12]	; (800415c <vTaskMissedYield+0x14>)
 800414e:	2201      	movs	r2, #1
 8004150:	601a      	str	r2, [r3, #0]
}
 8004152:	bf00      	nop
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	200003d8 	.word	0x200003d8

08004160 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004168:	f000 f852 	bl	8004210 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800416c:	4b06      	ldr	r3, [pc, #24]	; (8004188 <prvIdleTask+0x28>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d9f9      	bls.n	8004168 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004174:	4b05      	ldr	r3, [pc, #20]	; (800418c <prvIdleTask+0x2c>)
 8004176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004184:	e7f0      	b.n	8004168 <prvIdleTask+0x8>
 8004186:	bf00      	nop
 8004188:	20000214 	.word	0x20000214
 800418c:	e000ed04 	.word	0xe000ed04

08004190 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004196:	2300      	movs	r3, #0
 8004198:	607b      	str	r3, [r7, #4]
 800419a:	e00c      	b.n	80041b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	4613      	mov	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4a12      	ldr	r2, [pc, #72]	; (80041f0 <prvInitialiseTaskLists+0x60>)
 80041a8:	4413      	add	r3, r2
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fe fdb4 	bl	8002d18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3301      	adds	r3, #1
 80041b4:	607b      	str	r3, [r7, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b0f      	cmp	r3, #15
 80041ba:	d9ef      	bls.n	800419c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80041bc:	480d      	ldr	r0, [pc, #52]	; (80041f4 <prvInitialiseTaskLists+0x64>)
 80041be:	f7fe fdab 	bl	8002d18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80041c2:	480d      	ldr	r0, [pc, #52]	; (80041f8 <prvInitialiseTaskLists+0x68>)
 80041c4:	f7fe fda8 	bl	8002d18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80041c8:	480c      	ldr	r0, [pc, #48]	; (80041fc <prvInitialiseTaskLists+0x6c>)
 80041ca:	f7fe fda5 	bl	8002d18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80041ce:	480c      	ldr	r0, [pc, #48]	; (8004200 <prvInitialiseTaskLists+0x70>)
 80041d0:	f7fe fda2 	bl	8002d18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80041d4:	480b      	ldr	r0, [pc, #44]	; (8004204 <prvInitialiseTaskLists+0x74>)
 80041d6:	f7fe fd9f 	bl	8002d18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80041da:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <prvInitialiseTaskLists+0x78>)
 80041dc:	4a05      	ldr	r2, [pc, #20]	; (80041f4 <prvInitialiseTaskLists+0x64>)
 80041de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041e0:	4b0a      	ldr	r3, [pc, #40]	; (800420c <prvInitialiseTaskLists+0x7c>)
 80041e2:	4a05      	ldr	r2, [pc, #20]	; (80041f8 <prvInitialiseTaskLists+0x68>)
 80041e4:	601a      	str	r2, [r3, #0]
}
 80041e6:	bf00      	nop
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	20000214 	.word	0x20000214
 80041f4:	20000354 	.word	0x20000354
 80041f8:	20000368 	.word	0x20000368
 80041fc:	20000384 	.word	0x20000384
 8004200:	20000398 	.word	0x20000398
 8004204:	200003b0 	.word	0x200003b0
 8004208:	2000037c 	.word	0x2000037c
 800420c:	20000380 	.word	0x20000380

08004210 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004216:	e019      	b.n	800424c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004218:	f000 fda4 	bl	8004d64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800421c:	4b10      	ldr	r3, [pc, #64]	; (8004260 <prvCheckTasksWaitingTermination+0x50>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3304      	adds	r3, #4
 8004228:	4618      	mov	r0, r3
 800422a:	f7fe fdff 	bl	8002e2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800422e:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <prvCheckTasksWaitingTermination+0x54>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	3b01      	subs	r3, #1
 8004234:	4a0b      	ldr	r2, [pc, #44]	; (8004264 <prvCheckTasksWaitingTermination+0x54>)
 8004236:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004238:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <prvCheckTasksWaitingTermination+0x58>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	3b01      	subs	r3, #1
 800423e:	4a0a      	ldr	r2, [pc, #40]	; (8004268 <prvCheckTasksWaitingTermination+0x58>)
 8004240:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004242:	f000 fdbf 	bl	8004dc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f810 	bl	800426c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800424c:	4b06      	ldr	r3, [pc, #24]	; (8004268 <prvCheckTasksWaitingTermination+0x58>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e1      	bne.n	8004218 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004254:	bf00      	nop
 8004256:	bf00      	nop
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	20000398 	.word	0x20000398
 8004264:	200003c4 	.word	0x200003c4
 8004268:	200003ac 	.word	0x200003ac

0800426c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004278:	4618      	mov	r0, r3
 800427a:	f000 ff59 	bl	8005130 <vPortFree>
			vPortFree( pxTCB );
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 ff56 	bl	8005130 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004284:	bf00      	nop
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004292:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <prvResetNextTaskUnblockTime+0x38>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d104      	bne.n	80042a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800429c:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <prvResetNextTaskUnblockTime+0x3c>)
 800429e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80042a4:	e008      	b.n	80042b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042a6:	4b07      	ldr	r3, [pc, #28]	; (80042c4 <prvResetNextTaskUnblockTime+0x38>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	4a04      	ldr	r2, [pc, #16]	; (80042c8 <prvResetNextTaskUnblockTime+0x3c>)
 80042b6:	6013      	str	r3, [r2, #0]
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	2000037c 	.word	0x2000037c
 80042c8:	200003e4 	.word	0x200003e4

080042cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042d2:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <xTaskGetSchedulerState+0x34>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d102      	bne.n	80042e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042da:	2301      	movs	r3, #1
 80042dc:	607b      	str	r3, [r7, #4]
 80042de:	e008      	b.n	80042f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042e0:	4b08      	ldr	r3, [pc, #32]	; (8004304 <xTaskGetSchedulerState+0x38>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d102      	bne.n	80042ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042e8:	2302      	movs	r3, #2
 80042ea:	607b      	str	r3, [r7, #4]
 80042ec:	e001      	b.n	80042f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042ee:	2300      	movs	r3, #0
 80042f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042f2:	687b      	ldr	r3, [r7, #4]
	}
 80042f4:	4618      	mov	r0, r3
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	200003d0 	.word	0x200003d0
 8004304:	200003ec 	.word	0x200003ec

08004308 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004314:	2300      	movs	r3, #0
 8004316:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d06e      	beq.n	80043fc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800431e:	4b3a      	ldr	r3, [pc, #232]	; (8004408 <xTaskPriorityDisinherit+0x100>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	429a      	cmp	r2, r3
 8004326:	d00a      	beq.n	800433e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	60fb      	str	r3, [r7, #12]
}
 800433a:	bf00      	nop
 800433c:	e7fe      	b.n	800433c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10a      	bne.n	800435c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434a:	f383 8811 	msr	BASEPRI, r3
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	60bb      	str	r3, [r7, #8]
}
 8004358:	bf00      	nop
 800435a:	e7fe      	b.n	800435a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004360:	1e5a      	subs	r2, r3, #1
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436e:	429a      	cmp	r2, r3
 8004370:	d044      	beq.n	80043fc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004376:	2b00      	cmp	r3, #0
 8004378:	d140      	bne.n	80043fc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	3304      	adds	r3, #4
 800437e:	4618      	mov	r0, r3
 8004380:	f7fe fd54 	bl	8002e2c <uxListRemove>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d115      	bne.n	80043b6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438e:	491f      	ldr	r1, [pc, #124]	; (800440c <xTaskPriorityDisinherit+0x104>)
 8004390:	4613      	mov	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10a      	bne.n	80043b6 <xTaskPriorityDisinherit+0xae>
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a4:	2201      	movs	r2, #1
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	43da      	mvns	r2, r3
 80043ac:	4b18      	ldr	r3, [pc, #96]	; (8004410 <xTaskPriorityDisinherit+0x108>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4013      	ands	r3, r2
 80043b2:	4a17      	ldr	r2, [pc, #92]	; (8004410 <xTaskPriorityDisinherit+0x108>)
 80043b4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c2:	f1c3 0210 	rsb	r2, r3, #16
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ce:	2201      	movs	r2, #1
 80043d0:	409a      	lsls	r2, r3
 80043d2:	4b0f      	ldr	r3, [pc, #60]	; (8004410 <xTaskPriorityDisinherit+0x108>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	4a0d      	ldr	r2, [pc, #52]	; (8004410 <xTaskPriorityDisinherit+0x108>)
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e0:	4613      	mov	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4a08      	ldr	r2, [pc, #32]	; (800440c <xTaskPriorityDisinherit+0x104>)
 80043ea:	441a      	add	r2, r3
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	3304      	adds	r3, #4
 80043f0:	4619      	mov	r1, r3
 80043f2:	4610      	mov	r0, r2
 80043f4:	f7fe fcbd 	bl	8002d72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80043f8:	2301      	movs	r3, #1
 80043fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043fc:	697b      	ldr	r3, [r7, #20]
	}
 80043fe:	4618      	mov	r0, r3
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20000210 	.word	0x20000210
 800440c:	20000214 	.word	0x20000214
 8004410:	200003cc 	.word	0x200003cc

08004414 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800441e:	4b29      	ldr	r3, [pc, #164]	; (80044c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004424:	4b28      	ldr	r3, [pc, #160]	; (80044c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3304      	adds	r3, #4
 800442a:	4618      	mov	r0, r3
 800442c:	f7fe fcfe 	bl	8002e2c <uxListRemove>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10b      	bne.n	800444e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004436:	4b24      	ldr	r3, [pc, #144]	; (80044c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	2201      	movs	r2, #1
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	43da      	mvns	r2, r3
 8004444:	4b21      	ldr	r3, [pc, #132]	; (80044cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4013      	ands	r3, r2
 800444a:	4a20      	ldr	r2, [pc, #128]	; (80044cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800444c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004454:	d10a      	bne.n	800446c <prvAddCurrentTaskToDelayedList+0x58>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d007      	beq.n	800446c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800445c:	4b1a      	ldr	r3, [pc, #104]	; (80044c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3304      	adds	r3, #4
 8004462:	4619      	mov	r1, r3
 8004464:	481a      	ldr	r0, [pc, #104]	; (80044d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004466:	f7fe fc84 	bl	8002d72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800446a:	e026      	b.n	80044ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4413      	add	r3, r2
 8004472:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004474:	4b14      	ldr	r3, [pc, #80]	; (80044c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	429a      	cmp	r2, r3
 8004482:	d209      	bcs.n	8004498 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004484:	4b13      	ldr	r3, [pc, #76]	; (80044d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	4b0f      	ldr	r3, [pc, #60]	; (80044c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3304      	adds	r3, #4
 800448e:	4619      	mov	r1, r3
 8004490:	4610      	mov	r0, r2
 8004492:	f7fe fc92 	bl	8002dba <vListInsert>
}
 8004496:	e010      	b.n	80044ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004498:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3304      	adds	r3, #4
 80044a2:	4619      	mov	r1, r3
 80044a4:	4610      	mov	r0, r2
 80044a6:	f7fe fc88 	bl	8002dba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80044aa:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d202      	bcs.n	80044ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80044b4:	4a09      	ldr	r2, [pc, #36]	; (80044dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	6013      	str	r3, [r2, #0]
}
 80044ba:	bf00      	nop
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	200003c8 	.word	0x200003c8
 80044c8:	20000210 	.word	0x20000210
 80044cc:	200003cc 	.word	0x200003cc
 80044d0:	200003b0 	.word	0x200003b0
 80044d4:	20000380 	.word	0x20000380
 80044d8:	2000037c 	.word	0x2000037c
 80044dc:	200003e4 	.word	0x200003e4

080044e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80044ea:	f000 fad5 	bl	8004a98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80044ee:	4b11      	ldr	r3, [pc, #68]	; (8004534 <xTimerCreateTimerTask+0x54>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00b      	beq.n	800450e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80044f6:	4b10      	ldr	r3, [pc, #64]	; (8004538 <xTimerCreateTimerTask+0x58>)
 80044f8:	9301      	str	r3, [sp, #4]
 80044fa:	2302      	movs	r3, #2
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	2300      	movs	r3, #0
 8004500:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004504:	490d      	ldr	r1, [pc, #52]	; (800453c <xTimerCreateTimerTask+0x5c>)
 8004506:	480e      	ldr	r0, [pc, #56]	; (8004540 <xTimerCreateTimerTask+0x60>)
 8004508:	f7ff f966 	bl	80037d8 <xTaskCreate>
 800450c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10a      	bne.n	800452a <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	603b      	str	r3, [r7, #0]
}
 8004526:	bf00      	nop
 8004528:	e7fe      	b.n	8004528 <xTimerCreateTimerTask+0x48>
	return xReturn;
 800452a:	687b      	ldr	r3, [r7, #4]
}
 800452c:	4618      	mov	r0, r3
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	20000420 	.word	0x20000420
 8004538:	20000424 	.word	0x20000424
 800453c:	08005d18 	.word	0x08005d18
 8004540:	08004679 	.word	0x08004679

08004544 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b08a      	sub	sp, #40	; 0x28
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004552:	2300      	movs	r3, #0
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10a      	bne.n	8004572 <xTimerGenericCommand+0x2e>
	__asm volatile
 800455c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	623b      	str	r3, [r7, #32]
}
 800456e:	bf00      	nop
 8004570:	e7fe      	b.n	8004570 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004572:	4b1a      	ldr	r3, [pc, #104]	; (80045dc <xTimerGenericCommand+0x98>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d02a      	beq.n	80045d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b05      	cmp	r3, #5
 800458a:	dc18      	bgt.n	80045be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800458c:	f7ff fe9e 	bl	80042cc <xTaskGetSchedulerState>
 8004590:	4603      	mov	r3, r0
 8004592:	2b02      	cmp	r3, #2
 8004594:	d109      	bne.n	80045aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004596:	4b11      	ldr	r3, [pc, #68]	; (80045dc <xTimerGenericCommand+0x98>)
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	f107 0114 	add.w	r1, r7, #20
 800459e:	2300      	movs	r3, #0
 80045a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045a2:	f7fe fd35 	bl	8003010 <xQueueGenericSend>
 80045a6:	6278      	str	r0, [r7, #36]	; 0x24
 80045a8:	e012      	b.n	80045d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80045aa:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <xTimerGenericCommand+0x98>)
 80045ac:	6818      	ldr	r0, [r3, #0]
 80045ae:	f107 0114 	add.w	r1, r7, #20
 80045b2:	2300      	movs	r3, #0
 80045b4:	2200      	movs	r2, #0
 80045b6:	f7fe fd2b 	bl	8003010 <xQueueGenericSend>
 80045ba:	6278      	str	r0, [r7, #36]	; 0x24
 80045bc:	e008      	b.n	80045d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80045be:	4b07      	ldr	r3, [pc, #28]	; (80045dc <xTimerGenericCommand+0x98>)
 80045c0:	6818      	ldr	r0, [r3, #0]
 80045c2:	f107 0114 	add.w	r1, r7, #20
 80045c6:	2300      	movs	r3, #0
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	f7fe fe1f 	bl	800320c <xQueueGenericSendFromISR>
 80045ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3728      	adds	r7, #40	; 0x28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20000420 	.word	0x20000420

080045e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af02      	add	r7, sp, #8
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045ea:	4b22      	ldr	r3, [pc, #136]	; (8004674 <prvProcessExpiredTimer+0x94>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	3304      	adds	r3, #4
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fe fc17 	bl	8002e2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d022      	beq.n	8004652 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	699a      	ldr	r2, [r3, #24]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	18d1      	adds	r1, r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	6978      	ldr	r0, [r7, #20]
 800461a:	f000 f8d1 	bl	80047c0 <prvInsertTimerInActiveList>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d01f      	beq.n	8004664 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004624:	2300      	movs	r3, #0
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	2300      	movs	r3, #0
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	2100      	movs	r1, #0
 800462e:	6978      	ldr	r0, [r7, #20]
 8004630:	f7ff ff88 	bl	8004544 <xTimerGenericCommand>
 8004634:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d113      	bne.n	8004664 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800463c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004640:	f383 8811 	msr	BASEPRI, r3
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	60fb      	str	r3, [r7, #12]
}
 800464e:	bf00      	nop
 8004650:	e7fe      	b.n	8004650 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004658:	f023 0301 	bic.w	r3, r3, #1
 800465c:	b2da      	uxtb	r2, r3
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	6978      	ldr	r0, [r7, #20]
 800466a:	4798      	blx	r3
}
 800466c:	bf00      	nop
 800466e:	3718      	adds	r7, #24
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	20000418 	.word	0x20000418

08004678 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004680:	f107 0308 	add.w	r3, r7, #8
 8004684:	4618      	mov	r0, r3
 8004686:	f000 f857 	bl	8004738 <prvGetNextExpireTime>
 800468a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4619      	mov	r1, r3
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 f803 	bl	800469c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004696:	f000 f8d5 	bl	8004844 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800469a:	e7f1      	b.n	8004680 <prvTimerTask+0x8>

0800469c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80046a6:	f7ff fa57 	bl	8003b58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046aa:	f107 0308 	add.w	r3, r7, #8
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 f866 	bl	8004780 <prvSampleTimeNow>
 80046b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d130      	bne.n	800471e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10a      	bne.n	80046d8 <prvProcessTimerOrBlockTask+0x3c>
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d806      	bhi.n	80046d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80046ca:	f7ff fa53 	bl	8003b74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80046ce:	68f9      	ldr	r1, [r7, #12]
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7ff ff85 	bl	80045e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80046d6:	e024      	b.n	8004722 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d008      	beq.n	80046f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80046de:	4b13      	ldr	r3, [pc, #76]	; (800472c <prvProcessTimerOrBlockTask+0x90>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <prvProcessTimerOrBlockTask+0x50>
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <prvProcessTimerOrBlockTask+0x52>
 80046ec:	2300      	movs	r3, #0
 80046ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80046f0:	4b0f      	ldr	r3, [pc, #60]	; (8004730 <prvProcessTimerOrBlockTask+0x94>)
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	4619      	mov	r1, r3
 80046fe:	f7ff f837 	bl	8003770 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004702:	f7ff fa37 	bl	8003b74 <xTaskResumeAll>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10a      	bne.n	8004722 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800470c:	4b09      	ldr	r3, [pc, #36]	; (8004734 <prvProcessTimerOrBlockTask+0x98>)
 800470e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	f3bf 8f6f 	isb	sy
}
 800471c:	e001      	b.n	8004722 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800471e:	f7ff fa29 	bl	8003b74 <xTaskResumeAll>
}
 8004722:	bf00      	nop
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	2000041c 	.word	0x2000041c
 8004730:	20000420 	.word	0x20000420
 8004734:	e000ed04 	.word	0xe000ed04

08004738 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004740:	4b0e      	ldr	r3, [pc, #56]	; (800477c <prvGetNextExpireTime+0x44>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <prvGetNextExpireTime+0x16>
 800474a:	2201      	movs	r2, #1
 800474c:	e000      	b.n	8004750 <prvGetNextExpireTime+0x18>
 800474e:	2200      	movs	r2, #0
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d105      	bne.n	8004768 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800475c:	4b07      	ldr	r3, [pc, #28]	; (800477c <prvGetNextExpireTime+0x44>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	e001      	b.n	800476c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800476c:	68fb      	ldr	r3, [r7, #12]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	20000418 	.word	0x20000418

08004780 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004788:	f7ff fa90 	bl	8003cac <xTaskGetTickCount>
 800478c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800478e:	4b0b      	ldr	r3, [pc, #44]	; (80047bc <prvSampleTimeNow+0x3c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	429a      	cmp	r2, r3
 8004796:	d205      	bcs.n	80047a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004798:	f000 f91a 	bl	80049d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	e002      	b.n	80047aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80047aa:	4a04      	ldr	r2, [pc, #16]	; (80047bc <prvSampleTimeNow+0x3c>)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80047b0:	68fb      	ldr	r3, [r7, #12]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	20000428 	.word	0x20000428

080047c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
 80047cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80047ce:	2300      	movs	r3, #0
 80047d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d812      	bhi.n	800480c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	1ad2      	subs	r2, r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d302      	bcc.n	80047fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80047f4:	2301      	movs	r3, #1
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	e01b      	b.n	8004832 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80047fa:	4b10      	ldr	r3, [pc, #64]	; (800483c <prvInsertTimerInActiveList+0x7c>)
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	3304      	adds	r3, #4
 8004802:	4619      	mov	r1, r3
 8004804:	4610      	mov	r0, r2
 8004806:	f7fe fad8 	bl	8002dba <vListInsert>
 800480a:	e012      	b.n	8004832 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d206      	bcs.n	8004822 <prvInsertTimerInActiveList+0x62>
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d302      	bcc.n	8004822 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800481c:	2301      	movs	r3, #1
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	e007      	b.n	8004832 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004822:	4b07      	ldr	r3, [pc, #28]	; (8004840 <prvInsertTimerInActiveList+0x80>)
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3304      	adds	r3, #4
 800482a:	4619      	mov	r1, r3
 800482c:	4610      	mov	r0, r2
 800482e:	f7fe fac4 	bl	8002dba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004832:	697b      	ldr	r3, [r7, #20]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3718      	adds	r7, #24
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	2000041c 	.word	0x2000041c
 8004840:	20000418 	.word	0x20000418

08004844 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08c      	sub	sp, #48	; 0x30
 8004848:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800484a:	e0ae      	b.n	80049aa <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	f2c0 80aa 	blt.w	80049a8 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d004      	beq.n	800486a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	3304      	adds	r3, #4
 8004864:	4618      	mov	r0, r3
 8004866:	f7fe fae1 	bl	8002e2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800486a:	1d3b      	adds	r3, r7, #4
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff ff87 	bl	8004780 <prvSampleTimeNow>
 8004872:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2b09      	cmp	r3, #9
 8004878:	f200 8097 	bhi.w	80049aa <prvProcessReceivedCommands+0x166>
 800487c:	a201      	add	r2, pc, #4	; (adr r2, 8004884 <prvProcessReceivedCommands+0x40>)
 800487e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004882:	bf00      	nop
 8004884:	080048ad 	.word	0x080048ad
 8004888:	080048ad 	.word	0x080048ad
 800488c:	080048ad 	.word	0x080048ad
 8004890:	08004921 	.word	0x08004921
 8004894:	08004935 	.word	0x08004935
 8004898:	0800497f 	.word	0x0800497f
 800489c:	080048ad 	.word	0x080048ad
 80048a0:	080048ad 	.word	0x080048ad
 80048a4:	08004921 	.word	0x08004921
 80048a8:	08004935 	.word	0x08004935
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048b2:	f043 0301 	orr.w	r3, r3, #1
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	18d1      	adds	r1, r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a3a      	ldr	r2, [r7, #32]
 80048ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048cc:	f7ff ff78 	bl	80047c0 <prvInsertTimerInActiveList>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d069      	beq.n	80049aa <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d05e      	beq.n	80049aa <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	441a      	add	r2, r3
 80048f4:	2300      	movs	r3, #0
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	2300      	movs	r3, #0
 80048fa:	2100      	movs	r1, #0
 80048fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048fe:	f7ff fe21 	bl	8004544 <xTimerGenericCommand>
 8004902:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d14f      	bne.n	80049aa <prvProcessReceivedCommands+0x166>
	__asm volatile
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	61bb      	str	r3, [r7, #24]
}
 800491c:	bf00      	nop
 800491e:	e7fe      	b.n	800491e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004926:	f023 0301 	bic.w	r3, r3, #1
 800492a:	b2da      	uxtb	r2, r3
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004932:	e03a      	b.n	80049aa <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800493a:	f043 0301 	orr.w	r3, r3, #1
 800493e:	b2da      	uxtb	r2, r3
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10a      	bne.n	800496a <prvProcessReceivedCommands+0x126>
	__asm volatile
 8004954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	617b      	str	r3, [r7, #20]
}
 8004966:	bf00      	nop
 8004968:	e7fe      	b.n	8004968 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	699a      	ldr	r2, [r3, #24]
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	18d1      	adds	r1, r2, r3
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	6a3a      	ldr	r2, [r7, #32]
 8004976:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004978:	f7ff ff22 	bl	80047c0 <prvInsertTimerInActiveList>
					break;
 800497c:	e015      	b.n	80049aa <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d103      	bne.n	8004994 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800498c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800498e:	f000 fbcf 	bl	8005130 <vPortFree>
 8004992:	e00a      	b.n	80049aa <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800499a:	f023 0301 	bic.w	r3, r3, #1
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80049a6:	e000      	b.n	80049aa <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80049a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049aa:	4b08      	ldr	r3, [pc, #32]	; (80049cc <prvProcessReceivedCommands+0x188>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f107 0108 	add.w	r1, r7, #8
 80049b2:	2200      	movs	r2, #0
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7fe fcc1 	bl	800333c <xQueueReceive>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f47f af45 	bne.w	800484c <prvProcessReceivedCommands+0x8>
	}
}
 80049c2:	bf00      	nop
 80049c4:	bf00      	nop
 80049c6:	3728      	adds	r7, #40	; 0x28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	20000420 	.word	0x20000420

080049d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049d6:	e048      	b.n	8004a6a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049d8:	4b2d      	ldr	r3, [pc, #180]	; (8004a90 <prvSwitchTimerLists+0xc0>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049e2:	4b2b      	ldr	r3, [pc, #172]	; (8004a90 <prvSwitchTimerLists+0xc0>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	3304      	adds	r3, #4
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fe fa1b 	bl	8002e2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d02e      	beq.n	8004a6a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	4413      	add	r3, r2
 8004a14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d90e      	bls.n	8004a3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a2a:	4b19      	ldr	r3, [pc, #100]	; (8004a90 <prvSwitchTimerLists+0xc0>)
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	3304      	adds	r3, #4
 8004a32:	4619      	mov	r1, r3
 8004a34:	4610      	mov	r0, r2
 8004a36:	f7fe f9c0 	bl	8002dba <vListInsert>
 8004a3a:	e016      	b.n	8004a6a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	2300      	movs	r3, #0
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	2100      	movs	r1, #0
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f7ff fd7c 	bl	8004544 <xTimerGenericCommand>
 8004a4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10a      	bne.n	8004a6a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	603b      	str	r3, [r7, #0]
}
 8004a66:	bf00      	nop
 8004a68:	e7fe      	b.n	8004a68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a6a:	4b09      	ldr	r3, [pc, #36]	; (8004a90 <prvSwitchTimerLists+0xc0>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1b1      	bne.n	80049d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a74:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <prvSwitchTimerLists+0xc0>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a7a:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <prvSwitchTimerLists+0xc4>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a04      	ldr	r2, [pc, #16]	; (8004a90 <prvSwitchTimerLists+0xc0>)
 8004a80:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a82:	4a04      	ldr	r2, [pc, #16]	; (8004a94 <prvSwitchTimerLists+0xc4>)
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	6013      	str	r3, [r2, #0]
}
 8004a88:	bf00      	nop
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	20000418 	.word	0x20000418
 8004a94:	2000041c 	.word	0x2000041c

08004a98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a9c:	f000 f962 	bl	8004d64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004aa0:	4b12      	ldr	r3, [pc, #72]	; (8004aec <prvCheckForValidListAndQueue+0x54>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d11d      	bne.n	8004ae4 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8004aa8:	4811      	ldr	r0, [pc, #68]	; (8004af0 <prvCheckForValidListAndQueue+0x58>)
 8004aaa:	f7fe f935 	bl	8002d18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004aae:	4811      	ldr	r0, [pc, #68]	; (8004af4 <prvCheckForValidListAndQueue+0x5c>)
 8004ab0:	f7fe f932 	bl	8002d18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ab4:	4b10      	ldr	r3, [pc, #64]	; (8004af8 <prvCheckForValidListAndQueue+0x60>)
 8004ab6:	4a0e      	ldr	r2, [pc, #56]	; (8004af0 <prvCheckForValidListAndQueue+0x58>)
 8004ab8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004aba:	4b10      	ldr	r3, [pc, #64]	; (8004afc <prvCheckForValidListAndQueue+0x64>)
 8004abc:	4a0d      	ldr	r2, [pc, #52]	; (8004af4 <prvCheckForValidListAndQueue+0x5c>)
 8004abe:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	210c      	movs	r1, #12
 8004ac4:	200a      	movs	r0, #10
 8004ac6:	f7fe fa43 	bl	8002f50 <xQueueGenericCreate>
 8004aca:	4603      	mov	r3, r0
 8004acc:	4a07      	ldr	r2, [pc, #28]	; (8004aec <prvCheckForValidListAndQueue+0x54>)
 8004ace:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ad0:	4b06      	ldr	r3, [pc, #24]	; (8004aec <prvCheckForValidListAndQueue+0x54>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d005      	beq.n	8004ae4 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ad8:	4b04      	ldr	r3, [pc, #16]	; (8004aec <prvCheckForValidListAndQueue+0x54>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4908      	ldr	r1, [pc, #32]	; (8004b00 <prvCheckForValidListAndQueue+0x68>)
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fe fe1c 	bl	800371c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ae4:	f000 f96e 	bl	8004dc4 <vPortExitCritical>
}
 8004ae8:	bf00      	nop
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	20000420 	.word	0x20000420
 8004af0:	200003f0 	.word	0x200003f0
 8004af4:	20000404 	.word	0x20000404
 8004af8:	20000418 	.word	0x20000418
 8004afc:	2000041c 	.word	0x2000041c
 8004b00:	08005d20 	.word	0x08005d20

08004b04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3b04      	subs	r3, #4
 8004b14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3b04      	subs	r3, #4
 8004b22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f023 0201 	bic.w	r2, r3, #1
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	3b04      	subs	r3, #4
 8004b32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b34:	4a0c      	ldr	r2, [pc, #48]	; (8004b68 <pxPortInitialiseStack+0x64>)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3b14      	subs	r3, #20
 8004b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	3b04      	subs	r3, #4
 8004b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f06f 0202 	mvn.w	r2, #2
 8004b52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3b20      	subs	r3, #32
 8004b58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	08004b6d 	.word	0x08004b6d

08004b6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b72:	2300      	movs	r3, #0
 8004b74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b76:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <prvTaskExitError+0x54>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b7e:	d00a      	beq.n	8004b96 <prvTaskExitError+0x2a>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	60fb      	str	r3, [r7, #12]
}
 8004b92:	bf00      	nop
 8004b94:	e7fe      	b.n	8004b94 <prvTaskExitError+0x28>
	__asm volatile
 8004b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9a:	f383 8811 	msr	BASEPRI, r3
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	60bb      	str	r3, [r7, #8]
}
 8004ba8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004baa:	bf00      	nop
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0fc      	beq.n	8004bac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004bb2:	bf00      	nop
 8004bb4:	bf00      	nop
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	2000000c 	.word	0x2000000c
	...

08004bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004bd0:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <pxCurrentTCBConst2>)
 8004bd2:	6819      	ldr	r1, [r3, #0]
 8004bd4:	6808      	ldr	r0, [r1, #0]
 8004bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bda:	f380 8809 	msr	PSP, r0
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f04f 0000 	mov.w	r0, #0
 8004be6:	f380 8811 	msr	BASEPRI, r0
 8004bea:	4770      	bx	lr
 8004bec:	f3af 8000 	nop.w

08004bf0 <pxCurrentTCBConst2>:
 8004bf0:	20000210 	.word	0x20000210
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004bf4:	bf00      	nop
 8004bf6:	bf00      	nop

08004bf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004bf8:	4808      	ldr	r0, [pc, #32]	; (8004c1c <prvPortStartFirstTask+0x24>)
 8004bfa:	6800      	ldr	r0, [r0, #0]
 8004bfc:	6800      	ldr	r0, [r0, #0]
 8004bfe:	f380 8808 	msr	MSP, r0
 8004c02:	f04f 0000 	mov.w	r0, #0
 8004c06:	f380 8814 	msr	CONTROL, r0
 8004c0a:	b662      	cpsie	i
 8004c0c:	b661      	cpsie	f
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	df00      	svc	0
 8004c18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c1a:	bf00      	nop
 8004c1c:	e000ed08 	.word	0xe000ed08

08004c20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c26:	4b46      	ldr	r3, [pc, #280]	; (8004d40 <xPortStartScheduler+0x120>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a46      	ldr	r2, [pc, #280]	; (8004d44 <xPortStartScheduler+0x124>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d10a      	bne.n	8004c46 <xPortStartScheduler+0x26>
	__asm volatile
 8004c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c34:	f383 8811 	msr	BASEPRI, r3
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	613b      	str	r3, [r7, #16]
}
 8004c42:	bf00      	nop
 8004c44:	e7fe      	b.n	8004c44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c46:	4b3e      	ldr	r3, [pc, #248]	; (8004d40 <xPortStartScheduler+0x120>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a3f      	ldr	r2, [pc, #252]	; (8004d48 <xPortStartScheduler+0x128>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d10a      	bne.n	8004c66 <xPortStartScheduler+0x46>
	__asm volatile
 8004c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c54:	f383 8811 	msr	BASEPRI, r3
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	60fb      	str	r3, [r7, #12]
}
 8004c62:	bf00      	nop
 8004c64:	e7fe      	b.n	8004c64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c66:	4b39      	ldr	r3, [pc, #228]	; (8004d4c <xPortStartScheduler+0x12c>)
 8004c68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	22ff      	movs	r2, #255	; 0xff
 8004c76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c80:	78fb      	ldrb	r3, [r7, #3]
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	4b31      	ldr	r3, [pc, #196]	; (8004d50 <xPortStartScheduler+0x130>)
 8004c8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c8e:	4b31      	ldr	r3, [pc, #196]	; (8004d54 <xPortStartScheduler+0x134>)
 8004c90:	2207      	movs	r2, #7
 8004c92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c94:	e009      	b.n	8004caa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004c96:	4b2f      	ldr	r3, [pc, #188]	; (8004d54 <xPortStartScheduler+0x134>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	4a2d      	ldr	r2, [pc, #180]	; (8004d54 <xPortStartScheduler+0x134>)
 8004c9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ca0:	78fb      	ldrb	r3, [r7, #3]
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004caa:	78fb      	ldrb	r3, [r7, #3]
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb2:	2b80      	cmp	r3, #128	; 0x80
 8004cb4:	d0ef      	beq.n	8004c96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cb6:	4b27      	ldr	r3, [pc, #156]	; (8004d54 <xPortStartScheduler+0x134>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f1c3 0307 	rsb	r3, r3, #7
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d00a      	beq.n	8004cd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	60bb      	str	r3, [r7, #8]
}
 8004cd4:	bf00      	nop
 8004cd6:	e7fe      	b.n	8004cd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004cd8:	4b1e      	ldr	r3, [pc, #120]	; (8004d54 <xPortStartScheduler+0x134>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	021b      	lsls	r3, r3, #8
 8004cde:	4a1d      	ldr	r2, [pc, #116]	; (8004d54 <xPortStartScheduler+0x134>)
 8004ce0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ce2:	4b1c      	ldr	r3, [pc, #112]	; (8004d54 <xPortStartScheduler+0x134>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cea:	4a1a      	ldr	r2, [pc, #104]	; (8004d54 <xPortStartScheduler+0x134>)
 8004cec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004cf6:	4b18      	ldr	r3, [pc, #96]	; (8004d58 <xPortStartScheduler+0x138>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a17      	ldr	r2, [pc, #92]	; (8004d58 <xPortStartScheduler+0x138>)
 8004cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d02:	4b15      	ldr	r3, [pc, #84]	; (8004d58 <xPortStartScheduler+0x138>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a14      	ldr	r2, [pc, #80]	; (8004d58 <xPortStartScheduler+0x138>)
 8004d08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d0e:	f000 f8dd 	bl	8004ecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d12:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <xPortStartScheduler+0x13c>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d18:	f000 f8fc 	bl	8004f14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d1c:	4b10      	ldr	r3, [pc, #64]	; (8004d60 <xPortStartScheduler+0x140>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a0f      	ldr	r2, [pc, #60]	; (8004d60 <xPortStartScheduler+0x140>)
 8004d22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d28:	f7ff ff66 	bl	8004bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d2c:	f7ff f886 	bl	8003e3c <vTaskSwitchContext>
	prvTaskExitError();
 8004d30:	f7ff ff1c 	bl	8004b6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	e000ed00 	.word	0xe000ed00
 8004d44:	410fc271 	.word	0x410fc271
 8004d48:	410fc270 	.word	0x410fc270
 8004d4c:	e000e400 	.word	0xe000e400
 8004d50:	2000042c 	.word	0x2000042c
 8004d54:	20000430 	.word	0x20000430
 8004d58:	e000ed20 	.word	0xe000ed20
 8004d5c:	2000000c 	.word	0x2000000c
 8004d60:	e000ef34 	.word	0xe000ef34

08004d64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
	__asm volatile
 8004d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	607b      	str	r3, [r7, #4]
}
 8004d7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d7e:	4b0f      	ldr	r3, [pc, #60]	; (8004dbc <vPortEnterCritical+0x58>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3301      	adds	r3, #1
 8004d84:	4a0d      	ldr	r2, [pc, #52]	; (8004dbc <vPortEnterCritical+0x58>)
 8004d86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d88:	4b0c      	ldr	r3, [pc, #48]	; (8004dbc <vPortEnterCritical+0x58>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d10f      	bne.n	8004db0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d90:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <vPortEnterCritical+0x5c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	603b      	str	r3, [r7, #0]
}
 8004dac:	bf00      	nop
 8004dae:	e7fe      	b.n	8004dae <vPortEnterCritical+0x4a>
	}
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	2000000c 	.word	0x2000000c
 8004dc0:	e000ed04 	.word	0xe000ed04

08004dc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004dca:	4b12      	ldr	r3, [pc, #72]	; (8004e14 <vPortExitCritical+0x50>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10a      	bne.n	8004de8 <vPortExitCritical+0x24>
	__asm volatile
 8004dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	607b      	str	r3, [r7, #4]
}
 8004de4:	bf00      	nop
 8004de6:	e7fe      	b.n	8004de6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004de8:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <vPortExitCritical+0x50>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3b01      	subs	r3, #1
 8004dee:	4a09      	ldr	r2, [pc, #36]	; (8004e14 <vPortExitCritical+0x50>)
 8004df0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004df2:	4b08      	ldr	r3, [pc, #32]	; (8004e14 <vPortExitCritical+0x50>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d105      	bne.n	8004e06 <vPortExitCritical+0x42>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	f383 8811 	msr	BASEPRI, r3
}
 8004e04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	2000000c 	.word	0x2000000c
	...

08004e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e20:	f3ef 8009 	mrs	r0, PSP
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	4b15      	ldr	r3, [pc, #84]	; (8004e80 <pxCurrentTCBConst>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	f01e 0f10 	tst.w	lr, #16
 8004e30:	bf08      	it	eq
 8004e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e3a:	6010      	str	r0, [r2, #0]
 8004e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e44:	f380 8811 	msr	BASEPRI, r0
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f7fe fff4 	bl	8003e3c <vTaskSwitchContext>
 8004e54:	f04f 0000 	mov.w	r0, #0
 8004e58:	f380 8811 	msr	BASEPRI, r0
 8004e5c:	bc09      	pop	{r0, r3}
 8004e5e:	6819      	ldr	r1, [r3, #0]
 8004e60:	6808      	ldr	r0, [r1, #0]
 8004e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e66:	f01e 0f10 	tst.w	lr, #16
 8004e6a:	bf08      	it	eq
 8004e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e70:	f380 8809 	msr	PSP, r0
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	f3af 8000 	nop.w

08004e80 <pxCurrentTCBConst>:
 8004e80:	20000210 	.word	0x20000210
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e84:	bf00      	nop
 8004e86:	bf00      	nop

08004e88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	607b      	str	r3, [r7, #4]
}
 8004ea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ea2:	f7fe ff13 	bl	8003ccc <xTaskIncrementTick>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004eac:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <SysTick_Handler+0x40>)
 8004eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	f383 8811 	msr	BASEPRI, r3
}
 8004ebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ec0:	bf00      	nop
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	e000ed04 	.word	0xe000ed04

08004ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ed0:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <vPortSetupTimerInterrupt+0x34>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ed6:	4b0b      	ldr	r3, [pc, #44]	; (8004f04 <vPortSetupTimerInterrupt+0x38>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004edc:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <vPortSetupTimerInterrupt+0x3c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a0a      	ldr	r2, [pc, #40]	; (8004f0c <vPortSetupTimerInterrupt+0x40>)
 8004ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee6:	099b      	lsrs	r3, r3, #6
 8004ee8:	4a09      	ldr	r2, [pc, #36]	; (8004f10 <vPortSetupTimerInterrupt+0x44>)
 8004eea:	3b01      	subs	r3, #1
 8004eec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004eee:	4b04      	ldr	r3, [pc, #16]	; (8004f00 <vPortSetupTimerInterrupt+0x34>)
 8004ef0:	2207      	movs	r2, #7
 8004ef2:	601a      	str	r2, [r3, #0]
}
 8004ef4:	bf00      	nop
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	e000e010 	.word	0xe000e010
 8004f04:	e000e018 	.word	0xe000e018
 8004f08:	20000000 	.word	0x20000000
 8004f0c:	10624dd3 	.word	0x10624dd3
 8004f10:	e000e014 	.word	0xe000e014

08004f14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f24 <vPortEnableVFP+0x10>
 8004f18:	6801      	ldr	r1, [r0, #0]
 8004f1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f1e:	6001      	str	r1, [r0, #0]
 8004f20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f22:	bf00      	nop
 8004f24:	e000ed88 	.word	0xe000ed88

08004f28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f2e:	f3ef 8305 	mrs	r3, IPSR
 8004f32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2b0f      	cmp	r3, #15
 8004f38:	d914      	bls.n	8004f64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f3a:	4a17      	ldr	r2, [pc, #92]	; (8004f98 <vPortValidateInterruptPriority+0x70>)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4413      	add	r3, r2
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f44:	4b15      	ldr	r3, [pc, #84]	; (8004f9c <vPortValidateInterruptPriority+0x74>)
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	7afa      	ldrb	r2, [r7, #11]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d20a      	bcs.n	8004f64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	607b      	str	r3, [r7, #4]
}
 8004f60:	bf00      	nop
 8004f62:	e7fe      	b.n	8004f62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f64:	4b0e      	ldr	r3, [pc, #56]	; (8004fa0 <vPortValidateInterruptPriority+0x78>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f6c:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <vPortValidateInterruptPriority+0x7c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d90a      	bls.n	8004f8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	603b      	str	r3, [r7, #0]
}
 8004f86:	bf00      	nop
 8004f88:	e7fe      	b.n	8004f88 <vPortValidateInterruptPriority+0x60>
	}
 8004f8a:	bf00      	nop
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	e000e3f0 	.word	0xe000e3f0
 8004f9c:	2000042c 	.word	0x2000042c
 8004fa0:	e000ed0c 	.word	0xe000ed0c
 8004fa4:	20000430 	.word	0x20000430

08004fa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08a      	sub	sp, #40	; 0x28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004fb4:	f7fe fdd0 	bl	8003b58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004fb8:	4b58      	ldr	r3, [pc, #352]	; (800511c <pvPortMalloc+0x174>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004fc0:	f000 f910 	bl	80051e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004fc4:	4b56      	ldr	r3, [pc, #344]	; (8005120 <pvPortMalloc+0x178>)
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f040 808e 	bne.w	80050ee <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01d      	beq.n	8005014 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004fd8:	2208      	movs	r2, #8
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4413      	add	r3, r2
 8004fde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d014      	beq.n	8005014 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f023 0307 	bic.w	r3, r3, #7
 8004ff0:	3308      	adds	r3, #8
 8004ff2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <pvPortMalloc+0x6c>
	__asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	617b      	str	r3, [r7, #20]
}
 8005010:	bf00      	nop
 8005012:	e7fe      	b.n	8005012 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d069      	beq.n	80050ee <pvPortMalloc+0x146>
 800501a:	4b42      	ldr	r3, [pc, #264]	; (8005124 <pvPortMalloc+0x17c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	429a      	cmp	r2, r3
 8005022:	d864      	bhi.n	80050ee <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005024:	4b40      	ldr	r3, [pc, #256]	; (8005128 <pvPortMalloc+0x180>)
 8005026:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005028:	4b3f      	ldr	r3, [pc, #252]	; (8005128 <pvPortMalloc+0x180>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800502e:	e004      	b.n	800503a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	429a      	cmp	r2, r3
 8005042:	d903      	bls.n	800504c <pvPortMalloc+0xa4>
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1f1      	bne.n	8005030 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800504c:	4b33      	ldr	r3, [pc, #204]	; (800511c <pvPortMalloc+0x174>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005052:	429a      	cmp	r2, r3
 8005054:	d04b      	beq.n	80050ee <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2208      	movs	r2, #8
 800505c:	4413      	add	r3, r2
 800505e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	1ad2      	subs	r2, r2, r3
 8005070:	2308      	movs	r3, #8
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	429a      	cmp	r2, r3
 8005076:	d91f      	bls.n	80050b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4413      	add	r3, r2
 800507e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <pvPortMalloc+0xf8>
	__asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	613b      	str	r3, [r7, #16]
}
 800509c:	bf00      	nop
 800509e:	e7fe      	b.n	800509e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	1ad2      	subs	r2, r2, r3
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050b2:	69b8      	ldr	r0, [r7, #24]
 80050b4:	f000 f8f8 	bl	80052a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050b8:	4b1a      	ldr	r3, [pc, #104]	; (8005124 <pvPortMalloc+0x17c>)
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	4a18      	ldr	r2, [pc, #96]	; (8005124 <pvPortMalloc+0x17c>)
 80050c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80050c6:	4b17      	ldr	r3, [pc, #92]	; (8005124 <pvPortMalloc+0x17c>)
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	4b18      	ldr	r3, [pc, #96]	; (800512c <pvPortMalloc+0x184>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d203      	bcs.n	80050da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050d2:	4b14      	ldr	r3, [pc, #80]	; (8005124 <pvPortMalloc+0x17c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a15      	ldr	r2, [pc, #84]	; (800512c <pvPortMalloc+0x184>)
 80050d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	4b10      	ldr	r3, [pc, #64]	; (8005120 <pvPortMalloc+0x178>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	431a      	orrs	r2, r3
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050ee:	f7fe fd41 	bl	8003b74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00a      	beq.n	8005112 <pvPortMalloc+0x16a>
	__asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	60fb      	str	r3, [r7, #12]
}
 800510e:	bf00      	nop
 8005110:	e7fe      	b.n	8005110 <pvPortMalloc+0x168>
	return pvReturn;
 8005112:	69fb      	ldr	r3, [r7, #28]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3728      	adds	r7, #40	; 0x28
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	2001303c 	.word	0x2001303c
 8005120:	20013048 	.word	0x20013048
 8005124:	20013040 	.word	0x20013040
 8005128:	20013034 	.word	0x20013034
 800512c:	20013044 	.word	0x20013044

08005130 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d048      	beq.n	80051d4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005142:	2308      	movs	r3, #8
 8005144:	425b      	negs	r3, r3
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4413      	add	r3, r2
 800514a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	4b21      	ldr	r3, [pc, #132]	; (80051dc <vPortFree+0xac>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4013      	ands	r3, r2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10a      	bne.n	8005174 <vPortFree+0x44>
	__asm volatile
 800515e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	60fb      	str	r3, [r7, #12]
}
 8005170:	bf00      	nop
 8005172:	e7fe      	b.n	8005172 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <vPortFree+0x62>
	__asm volatile
 800517c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005180:	f383 8811 	msr	BASEPRI, r3
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	60bb      	str	r3, [r7, #8]
}
 800518e:	bf00      	nop
 8005190:	e7fe      	b.n	8005190 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	4b11      	ldr	r3, [pc, #68]	; (80051dc <vPortFree+0xac>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4013      	ands	r3, r2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d019      	beq.n	80051d4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d115      	bne.n	80051d4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	4b0b      	ldr	r3, [pc, #44]	; (80051dc <vPortFree+0xac>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	43db      	mvns	r3, r3
 80051b2:	401a      	ands	r2, r3
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80051b8:	f7fe fcce 	bl	8003b58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	4b07      	ldr	r3, [pc, #28]	; (80051e0 <vPortFree+0xb0>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4413      	add	r3, r2
 80051c6:	4a06      	ldr	r2, [pc, #24]	; (80051e0 <vPortFree+0xb0>)
 80051c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80051ca:	6938      	ldr	r0, [r7, #16]
 80051cc:	f000 f86c 	bl	80052a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80051d0:	f7fe fcd0 	bl	8003b74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051d4:	bf00      	nop
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	20013048 	.word	0x20013048
 80051e0:	20013040 	.word	0x20013040

080051e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051ea:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80051ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80051f0:	4b27      	ldr	r3, [pc, #156]	; (8005290 <prvHeapInit+0xac>)
 80051f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00c      	beq.n	8005218 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3307      	adds	r3, #7
 8005202:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 0307 	bic.w	r3, r3, #7
 800520a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	4a1f      	ldr	r2, [pc, #124]	; (8005290 <prvHeapInit+0xac>)
 8005214:	4413      	add	r3, r2
 8005216:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800521c:	4a1d      	ldr	r2, [pc, #116]	; (8005294 <prvHeapInit+0xb0>)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005222:	4b1c      	ldr	r3, [pc, #112]	; (8005294 <prvHeapInit+0xb0>)
 8005224:	2200      	movs	r2, #0
 8005226:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	4413      	add	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005230:	2208      	movs	r2, #8
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	1a9b      	subs	r3, r3, r2
 8005236:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f023 0307 	bic.w	r3, r3, #7
 800523e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4a15      	ldr	r2, [pc, #84]	; (8005298 <prvHeapInit+0xb4>)
 8005244:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005246:	4b14      	ldr	r3, [pc, #80]	; (8005298 <prvHeapInit+0xb4>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2200      	movs	r2, #0
 800524c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800524e:	4b12      	ldr	r3, [pc, #72]	; (8005298 <prvHeapInit+0xb4>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	1ad2      	subs	r2, r2, r3
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005264:	4b0c      	ldr	r3, [pc, #48]	; (8005298 <prvHeapInit+0xb4>)
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	4a0a      	ldr	r2, [pc, #40]	; (800529c <prvHeapInit+0xb8>)
 8005272:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	4a09      	ldr	r2, [pc, #36]	; (80052a0 <prvHeapInit+0xbc>)
 800527a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800527c:	4b09      	ldr	r3, [pc, #36]	; (80052a4 <prvHeapInit+0xc0>)
 800527e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005282:	601a      	str	r2, [r3, #0]
}
 8005284:	bf00      	nop
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	20000434 	.word	0x20000434
 8005294:	20013034 	.word	0x20013034
 8005298:	2001303c 	.word	0x2001303c
 800529c:	20013044 	.word	0x20013044
 80052a0:	20013040 	.word	0x20013040
 80052a4:	20013048 	.word	0x20013048

080052a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052b0:	4b28      	ldr	r3, [pc, #160]	; (8005354 <prvInsertBlockIntoFreeList+0xac>)
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	e002      	b.n	80052bc <prvInsertBlockIntoFreeList+0x14>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	60fb      	str	r3, [r7, #12]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d8f7      	bhi.n	80052b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	4413      	add	r3, r2
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d108      	bne.n	80052ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	441a      	add	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	441a      	add	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d118      	bne.n	8005330 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	4b15      	ldr	r3, [pc, #84]	; (8005358 <prvInsertBlockIntoFreeList+0xb0>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	429a      	cmp	r2, r3
 8005308:	d00d      	beq.n	8005326 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	441a      	add	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	e008      	b.n	8005338 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005326:	4b0c      	ldr	r3, [pc, #48]	; (8005358 <prvInsertBlockIntoFreeList+0xb0>)
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	e003      	b.n	8005338 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	429a      	cmp	r2, r3
 800533e:	d002      	beq.n	8005346 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005346:	bf00      	nop
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	20013034 	.word	0x20013034
 8005358:	2001303c 	.word	0x2001303c

0800535c <__errno>:
 800535c:	4b01      	ldr	r3, [pc, #4]	; (8005364 <__errno+0x8>)
 800535e:	6818      	ldr	r0, [r3, #0]
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20000010 	.word	0x20000010

08005368 <__libc_init_array>:
 8005368:	b570      	push	{r4, r5, r6, lr}
 800536a:	4d0d      	ldr	r5, [pc, #52]	; (80053a0 <__libc_init_array+0x38>)
 800536c:	4c0d      	ldr	r4, [pc, #52]	; (80053a4 <__libc_init_array+0x3c>)
 800536e:	1b64      	subs	r4, r4, r5
 8005370:	10a4      	asrs	r4, r4, #2
 8005372:	2600      	movs	r6, #0
 8005374:	42a6      	cmp	r6, r4
 8005376:	d109      	bne.n	800538c <__libc_init_array+0x24>
 8005378:	4d0b      	ldr	r5, [pc, #44]	; (80053a8 <__libc_init_array+0x40>)
 800537a:	4c0c      	ldr	r4, [pc, #48]	; (80053ac <__libc_init_array+0x44>)
 800537c:	f000 fc8e 	bl	8005c9c <_init>
 8005380:	1b64      	subs	r4, r4, r5
 8005382:	10a4      	asrs	r4, r4, #2
 8005384:	2600      	movs	r6, #0
 8005386:	42a6      	cmp	r6, r4
 8005388:	d105      	bne.n	8005396 <__libc_init_array+0x2e>
 800538a:	bd70      	pop	{r4, r5, r6, pc}
 800538c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005390:	4798      	blx	r3
 8005392:	3601      	adds	r6, #1
 8005394:	e7ee      	b.n	8005374 <__libc_init_array+0xc>
 8005396:	f855 3b04 	ldr.w	r3, [r5], #4
 800539a:	4798      	blx	r3
 800539c:	3601      	adds	r6, #1
 800539e:	e7f2      	b.n	8005386 <__libc_init_array+0x1e>
 80053a0:	08005d7c 	.word	0x08005d7c
 80053a4:	08005d7c 	.word	0x08005d7c
 80053a8:	08005d7c 	.word	0x08005d7c
 80053ac:	08005d80 	.word	0x08005d80

080053b0 <memcpy>:
 80053b0:	440a      	add	r2, r1
 80053b2:	4291      	cmp	r1, r2
 80053b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80053b8:	d100      	bne.n	80053bc <memcpy+0xc>
 80053ba:	4770      	bx	lr
 80053bc:	b510      	push	{r4, lr}
 80053be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053c6:	4291      	cmp	r1, r2
 80053c8:	d1f9      	bne.n	80053be <memcpy+0xe>
 80053ca:	bd10      	pop	{r4, pc}

080053cc <memset>:
 80053cc:	4402      	add	r2, r0
 80053ce:	4603      	mov	r3, r0
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d100      	bne.n	80053d6 <memset+0xa>
 80053d4:	4770      	bx	lr
 80053d6:	f803 1b01 	strb.w	r1, [r3], #1
 80053da:	e7f9      	b.n	80053d0 <memset+0x4>

080053dc <siprintf>:
 80053dc:	b40e      	push	{r1, r2, r3}
 80053de:	b500      	push	{lr}
 80053e0:	b09c      	sub	sp, #112	; 0x70
 80053e2:	ab1d      	add	r3, sp, #116	; 0x74
 80053e4:	9002      	str	r0, [sp, #8]
 80053e6:	9006      	str	r0, [sp, #24]
 80053e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053ec:	4809      	ldr	r0, [pc, #36]	; (8005414 <siprintf+0x38>)
 80053ee:	9107      	str	r1, [sp, #28]
 80053f0:	9104      	str	r1, [sp, #16]
 80053f2:	4909      	ldr	r1, [pc, #36]	; (8005418 <siprintf+0x3c>)
 80053f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80053f8:	9105      	str	r1, [sp, #20]
 80053fa:	6800      	ldr	r0, [r0, #0]
 80053fc:	9301      	str	r3, [sp, #4]
 80053fe:	a902      	add	r1, sp, #8
 8005400:	f000 f868 	bl	80054d4 <_svfiprintf_r>
 8005404:	9b02      	ldr	r3, [sp, #8]
 8005406:	2200      	movs	r2, #0
 8005408:	701a      	strb	r2, [r3, #0]
 800540a:	b01c      	add	sp, #112	; 0x70
 800540c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005410:	b003      	add	sp, #12
 8005412:	4770      	bx	lr
 8005414:	20000010 	.word	0x20000010
 8005418:	ffff0208 	.word	0xffff0208

0800541c <__ssputs_r>:
 800541c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005420:	688e      	ldr	r6, [r1, #8]
 8005422:	429e      	cmp	r6, r3
 8005424:	4682      	mov	sl, r0
 8005426:	460c      	mov	r4, r1
 8005428:	4690      	mov	r8, r2
 800542a:	461f      	mov	r7, r3
 800542c:	d838      	bhi.n	80054a0 <__ssputs_r+0x84>
 800542e:	898a      	ldrh	r2, [r1, #12]
 8005430:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005434:	d032      	beq.n	800549c <__ssputs_r+0x80>
 8005436:	6825      	ldr	r5, [r4, #0]
 8005438:	6909      	ldr	r1, [r1, #16]
 800543a:	eba5 0901 	sub.w	r9, r5, r1
 800543e:	6965      	ldr	r5, [r4, #20]
 8005440:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005444:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005448:	3301      	adds	r3, #1
 800544a:	444b      	add	r3, r9
 800544c:	106d      	asrs	r5, r5, #1
 800544e:	429d      	cmp	r5, r3
 8005450:	bf38      	it	cc
 8005452:	461d      	movcc	r5, r3
 8005454:	0553      	lsls	r3, r2, #21
 8005456:	d531      	bpl.n	80054bc <__ssputs_r+0xa0>
 8005458:	4629      	mov	r1, r5
 800545a:	f000 fb55 	bl	8005b08 <_malloc_r>
 800545e:	4606      	mov	r6, r0
 8005460:	b950      	cbnz	r0, 8005478 <__ssputs_r+0x5c>
 8005462:	230c      	movs	r3, #12
 8005464:	f8ca 3000 	str.w	r3, [sl]
 8005468:	89a3      	ldrh	r3, [r4, #12]
 800546a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800546e:	81a3      	strh	r3, [r4, #12]
 8005470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005478:	6921      	ldr	r1, [r4, #16]
 800547a:	464a      	mov	r2, r9
 800547c:	f7ff ff98 	bl	80053b0 <memcpy>
 8005480:	89a3      	ldrh	r3, [r4, #12]
 8005482:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800548a:	81a3      	strh	r3, [r4, #12]
 800548c:	6126      	str	r6, [r4, #16]
 800548e:	6165      	str	r5, [r4, #20]
 8005490:	444e      	add	r6, r9
 8005492:	eba5 0509 	sub.w	r5, r5, r9
 8005496:	6026      	str	r6, [r4, #0]
 8005498:	60a5      	str	r5, [r4, #8]
 800549a:	463e      	mov	r6, r7
 800549c:	42be      	cmp	r6, r7
 800549e:	d900      	bls.n	80054a2 <__ssputs_r+0x86>
 80054a0:	463e      	mov	r6, r7
 80054a2:	6820      	ldr	r0, [r4, #0]
 80054a4:	4632      	mov	r2, r6
 80054a6:	4641      	mov	r1, r8
 80054a8:	f000 faa8 	bl	80059fc <memmove>
 80054ac:	68a3      	ldr	r3, [r4, #8]
 80054ae:	1b9b      	subs	r3, r3, r6
 80054b0:	60a3      	str	r3, [r4, #8]
 80054b2:	6823      	ldr	r3, [r4, #0]
 80054b4:	4433      	add	r3, r6
 80054b6:	6023      	str	r3, [r4, #0]
 80054b8:	2000      	movs	r0, #0
 80054ba:	e7db      	b.n	8005474 <__ssputs_r+0x58>
 80054bc:	462a      	mov	r2, r5
 80054be:	f000 fb97 	bl	8005bf0 <_realloc_r>
 80054c2:	4606      	mov	r6, r0
 80054c4:	2800      	cmp	r0, #0
 80054c6:	d1e1      	bne.n	800548c <__ssputs_r+0x70>
 80054c8:	6921      	ldr	r1, [r4, #16]
 80054ca:	4650      	mov	r0, sl
 80054cc:	f000 fab0 	bl	8005a30 <_free_r>
 80054d0:	e7c7      	b.n	8005462 <__ssputs_r+0x46>
	...

080054d4 <_svfiprintf_r>:
 80054d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d8:	4698      	mov	r8, r3
 80054da:	898b      	ldrh	r3, [r1, #12]
 80054dc:	061b      	lsls	r3, r3, #24
 80054de:	b09d      	sub	sp, #116	; 0x74
 80054e0:	4607      	mov	r7, r0
 80054e2:	460d      	mov	r5, r1
 80054e4:	4614      	mov	r4, r2
 80054e6:	d50e      	bpl.n	8005506 <_svfiprintf_r+0x32>
 80054e8:	690b      	ldr	r3, [r1, #16]
 80054ea:	b963      	cbnz	r3, 8005506 <_svfiprintf_r+0x32>
 80054ec:	2140      	movs	r1, #64	; 0x40
 80054ee:	f000 fb0b 	bl	8005b08 <_malloc_r>
 80054f2:	6028      	str	r0, [r5, #0]
 80054f4:	6128      	str	r0, [r5, #16]
 80054f6:	b920      	cbnz	r0, 8005502 <_svfiprintf_r+0x2e>
 80054f8:	230c      	movs	r3, #12
 80054fa:	603b      	str	r3, [r7, #0]
 80054fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005500:	e0d1      	b.n	80056a6 <_svfiprintf_r+0x1d2>
 8005502:	2340      	movs	r3, #64	; 0x40
 8005504:	616b      	str	r3, [r5, #20]
 8005506:	2300      	movs	r3, #0
 8005508:	9309      	str	r3, [sp, #36]	; 0x24
 800550a:	2320      	movs	r3, #32
 800550c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005510:	f8cd 800c 	str.w	r8, [sp, #12]
 8005514:	2330      	movs	r3, #48	; 0x30
 8005516:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80056c0 <_svfiprintf_r+0x1ec>
 800551a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800551e:	f04f 0901 	mov.w	r9, #1
 8005522:	4623      	mov	r3, r4
 8005524:	469a      	mov	sl, r3
 8005526:	f813 2b01 	ldrb.w	r2, [r3], #1
 800552a:	b10a      	cbz	r2, 8005530 <_svfiprintf_r+0x5c>
 800552c:	2a25      	cmp	r2, #37	; 0x25
 800552e:	d1f9      	bne.n	8005524 <_svfiprintf_r+0x50>
 8005530:	ebba 0b04 	subs.w	fp, sl, r4
 8005534:	d00b      	beq.n	800554e <_svfiprintf_r+0x7a>
 8005536:	465b      	mov	r3, fp
 8005538:	4622      	mov	r2, r4
 800553a:	4629      	mov	r1, r5
 800553c:	4638      	mov	r0, r7
 800553e:	f7ff ff6d 	bl	800541c <__ssputs_r>
 8005542:	3001      	adds	r0, #1
 8005544:	f000 80aa 	beq.w	800569c <_svfiprintf_r+0x1c8>
 8005548:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800554a:	445a      	add	r2, fp
 800554c:	9209      	str	r2, [sp, #36]	; 0x24
 800554e:	f89a 3000 	ldrb.w	r3, [sl]
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 80a2 	beq.w	800569c <_svfiprintf_r+0x1c8>
 8005558:	2300      	movs	r3, #0
 800555a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800555e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005562:	f10a 0a01 	add.w	sl, sl, #1
 8005566:	9304      	str	r3, [sp, #16]
 8005568:	9307      	str	r3, [sp, #28]
 800556a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800556e:	931a      	str	r3, [sp, #104]	; 0x68
 8005570:	4654      	mov	r4, sl
 8005572:	2205      	movs	r2, #5
 8005574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005578:	4851      	ldr	r0, [pc, #324]	; (80056c0 <_svfiprintf_r+0x1ec>)
 800557a:	f7fa fe31 	bl	80001e0 <memchr>
 800557e:	9a04      	ldr	r2, [sp, #16]
 8005580:	b9d8      	cbnz	r0, 80055ba <_svfiprintf_r+0xe6>
 8005582:	06d0      	lsls	r0, r2, #27
 8005584:	bf44      	itt	mi
 8005586:	2320      	movmi	r3, #32
 8005588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800558c:	0711      	lsls	r1, r2, #28
 800558e:	bf44      	itt	mi
 8005590:	232b      	movmi	r3, #43	; 0x2b
 8005592:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005596:	f89a 3000 	ldrb.w	r3, [sl]
 800559a:	2b2a      	cmp	r3, #42	; 0x2a
 800559c:	d015      	beq.n	80055ca <_svfiprintf_r+0xf6>
 800559e:	9a07      	ldr	r2, [sp, #28]
 80055a0:	4654      	mov	r4, sl
 80055a2:	2000      	movs	r0, #0
 80055a4:	f04f 0c0a 	mov.w	ip, #10
 80055a8:	4621      	mov	r1, r4
 80055aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055ae:	3b30      	subs	r3, #48	; 0x30
 80055b0:	2b09      	cmp	r3, #9
 80055b2:	d94e      	bls.n	8005652 <_svfiprintf_r+0x17e>
 80055b4:	b1b0      	cbz	r0, 80055e4 <_svfiprintf_r+0x110>
 80055b6:	9207      	str	r2, [sp, #28]
 80055b8:	e014      	b.n	80055e4 <_svfiprintf_r+0x110>
 80055ba:	eba0 0308 	sub.w	r3, r0, r8
 80055be:	fa09 f303 	lsl.w	r3, r9, r3
 80055c2:	4313      	orrs	r3, r2
 80055c4:	9304      	str	r3, [sp, #16]
 80055c6:	46a2      	mov	sl, r4
 80055c8:	e7d2      	b.n	8005570 <_svfiprintf_r+0x9c>
 80055ca:	9b03      	ldr	r3, [sp, #12]
 80055cc:	1d19      	adds	r1, r3, #4
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	9103      	str	r1, [sp, #12]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	bfbb      	ittet	lt
 80055d6:	425b      	neglt	r3, r3
 80055d8:	f042 0202 	orrlt.w	r2, r2, #2
 80055dc:	9307      	strge	r3, [sp, #28]
 80055de:	9307      	strlt	r3, [sp, #28]
 80055e0:	bfb8      	it	lt
 80055e2:	9204      	strlt	r2, [sp, #16]
 80055e4:	7823      	ldrb	r3, [r4, #0]
 80055e6:	2b2e      	cmp	r3, #46	; 0x2e
 80055e8:	d10c      	bne.n	8005604 <_svfiprintf_r+0x130>
 80055ea:	7863      	ldrb	r3, [r4, #1]
 80055ec:	2b2a      	cmp	r3, #42	; 0x2a
 80055ee:	d135      	bne.n	800565c <_svfiprintf_r+0x188>
 80055f0:	9b03      	ldr	r3, [sp, #12]
 80055f2:	1d1a      	adds	r2, r3, #4
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	9203      	str	r2, [sp, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	bfb8      	it	lt
 80055fc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005600:	3402      	adds	r4, #2
 8005602:	9305      	str	r3, [sp, #20]
 8005604:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80056d0 <_svfiprintf_r+0x1fc>
 8005608:	7821      	ldrb	r1, [r4, #0]
 800560a:	2203      	movs	r2, #3
 800560c:	4650      	mov	r0, sl
 800560e:	f7fa fde7 	bl	80001e0 <memchr>
 8005612:	b140      	cbz	r0, 8005626 <_svfiprintf_r+0x152>
 8005614:	2340      	movs	r3, #64	; 0x40
 8005616:	eba0 000a 	sub.w	r0, r0, sl
 800561a:	fa03 f000 	lsl.w	r0, r3, r0
 800561e:	9b04      	ldr	r3, [sp, #16]
 8005620:	4303      	orrs	r3, r0
 8005622:	3401      	adds	r4, #1
 8005624:	9304      	str	r3, [sp, #16]
 8005626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800562a:	4826      	ldr	r0, [pc, #152]	; (80056c4 <_svfiprintf_r+0x1f0>)
 800562c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005630:	2206      	movs	r2, #6
 8005632:	f7fa fdd5 	bl	80001e0 <memchr>
 8005636:	2800      	cmp	r0, #0
 8005638:	d038      	beq.n	80056ac <_svfiprintf_r+0x1d8>
 800563a:	4b23      	ldr	r3, [pc, #140]	; (80056c8 <_svfiprintf_r+0x1f4>)
 800563c:	bb1b      	cbnz	r3, 8005686 <_svfiprintf_r+0x1b2>
 800563e:	9b03      	ldr	r3, [sp, #12]
 8005640:	3307      	adds	r3, #7
 8005642:	f023 0307 	bic.w	r3, r3, #7
 8005646:	3308      	adds	r3, #8
 8005648:	9303      	str	r3, [sp, #12]
 800564a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800564c:	4433      	add	r3, r6
 800564e:	9309      	str	r3, [sp, #36]	; 0x24
 8005650:	e767      	b.n	8005522 <_svfiprintf_r+0x4e>
 8005652:	fb0c 3202 	mla	r2, ip, r2, r3
 8005656:	460c      	mov	r4, r1
 8005658:	2001      	movs	r0, #1
 800565a:	e7a5      	b.n	80055a8 <_svfiprintf_r+0xd4>
 800565c:	2300      	movs	r3, #0
 800565e:	3401      	adds	r4, #1
 8005660:	9305      	str	r3, [sp, #20]
 8005662:	4619      	mov	r1, r3
 8005664:	f04f 0c0a 	mov.w	ip, #10
 8005668:	4620      	mov	r0, r4
 800566a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800566e:	3a30      	subs	r2, #48	; 0x30
 8005670:	2a09      	cmp	r2, #9
 8005672:	d903      	bls.n	800567c <_svfiprintf_r+0x1a8>
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0c5      	beq.n	8005604 <_svfiprintf_r+0x130>
 8005678:	9105      	str	r1, [sp, #20]
 800567a:	e7c3      	b.n	8005604 <_svfiprintf_r+0x130>
 800567c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005680:	4604      	mov	r4, r0
 8005682:	2301      	movs	r3, #1
 8005684:	e7f0      	b.n	8005668 <_svfiprintf_r+0x194>
 8005686:	ab03      	add	r3, sp, #12
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	462a      	mov	r2, r5
 800568c:	4b0f      	ldr	r3, [pc, #60]	; (80056cc <_svfiprintf_r+0x1f8>)
 800568e:	a904      	add	r1, sp, #16
 8005690:	4638      	mov	r0, r7
 8005692:	f3af 8000 	nop.w
 8005696:	1c42      	adds	r2, r0, #1
 8005698:	4606      	mov	r6, r0
 800569a:	d1d6      	bne.n	800564a <_svfiprintf_r+0x176>
 800569c:	89ab      	ldrh	r3, [r5, #12]
 800569e:	065b      	lsls	r3, r3, #25
 80056a0:	f53f af2c 	bmi.w	80054fc <_svfiprintf_r+0x28>
 80056a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056a6:	b01d      	add	sp, #116	; 0x74
 80056a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ac:	ab03      	add	r3, sp, #12
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	462a      	mov	r2, r5
 80056b2:	4b06      	ldr	r3, [pc, #24]	; (80056cc <_svfiprintf_r+0x1f8>)
 80056b4:	a904      	add	r1, sp, #16
 80056b6:	4638      	mov	r0, r7
 80056b8:	f000 f87a 	bl	80057b0 <_printf_i>
 80056bc:	e7eb      	b.n	8005696 <_svfiprintf_r+0x1c2>
 80056be:	bf00      	nop
 80056c0:	08005d40 	.word	0x08005d40
 80056c4:	08005d4a 	.word	0x08005d4a
 80056c8:	00000000 	.word	0x00000000
 80056cc:	0800541d 	.word	0x0800541d
 80056d0:	08005d46 	.word	0x08005d46

080056d4 <_printf_common>:
 80056d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056d8:	4616      	mov	r6, r2
 80056da:	4699      	mov	r9, r3
 80056dc:	688a      	ldr	r2, [r1, #8]
 80056de:	690b      	ldr	r3, [r1, #16]
 80056e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056e4:	4293      	cmp	r3, r2
 80056e6:	bfb8      	it	lt
 80056e8:	4613      	movlt	r3, r2
 80056ea:	6033      	str	r3, [r6, #0]
 80056ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056f0:	4607      	mov	r7, r0
 80056f2:	460c      	mov	r4, r1
 80056f4:	b10a      	cbz	r2, 80056fa <_printf_common+0x26>
 80056f6:	3301      	adds	r3, #1
 80056f8:	6033      	str	r3, [r6, #0]
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	0699      	lsls	r1, r3, #26
 80056fe:	bf42      	ittt	mi
 8005700:	6833      	ldrmi	r3, [r6, #0]
 8005702:	3302      	addmi	r3, #2
 8005704:	6033      	strmi	r3, [r6, #0]
 8005706:	6825      	ldr	r5, [r4, #0]
 8005708:	f015 0506 	ands.w	r5, r5, #6
 800570c:	d106      	bne.n	800571c <_printf_common+0x48>
 800570e:	f104 0a19 	add.w	sl, r4, #25
 8005712:	68e3      	ldr	r3, [r4, #12]
 8005714:	6832      	ldr	r2, [r6, #0]
 8005716:	1a9b      	subs	r3, r3, r2
 8005718:	42ab      	cmp	r3, r5
 800571a:	dc26      	bgt.n	800576a <_printf_common+0x96>
 800571c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005720:	1e13      	subs	r3, r2, #0
 8005722:	6822      	ldr	r2, [r4, #0]
 8005724:	bf18      	it	ne
 8005726:	2301      	movne	r3, #1
 8005728:	0692      	lsls	r2, r2, #26
 800572a:	d42b      	bmi.n	8005784 <_printf_common+0xb0>
 800572c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005730:	4649      	mov	r1, r9
 8005732:	4638      	mov	r0, r7
 8005734:	47c0      	blx	r8
 8005736:	3001      	adds	r0, #1
 8005738:	d01e      	beq.n	8005778 <_printf_common+0xa4>
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	68e5      	ldr	r5, [r4, #12]
 800573e:	6832      	ldr	r2, [r6, #0]
 8005740:	f003 0306 	and.w	r3, r3, #6
 8005744:	2b04      	cmp	r3, #4
 8005746:	bf08      	it	eq
 8005748:	1aad      	subeq	r5, r5, r2
 800574a:	68a3      	ldr	r3, [r4, #8]
 800574c:	6922      	ldr	r2, [r4, #16]
 800574e:	bf0c      	ite	eq
 8005750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005754:	2500      	movne	r5, #0
 8005756:	4293      	cmp	r3, r2
 8005758:	bfc4      	itt	gt
 800575a:	1a9b      	subgt	r3, r3, r2
 800575c:	18ed      	addgt	r5, r5, r3
 800575e:	2600      	movs	r6, #0
 8005760:	341a      	adds	r4, #26
 8005762:	42b5      	cmp	r5, r6
 8005764:	d11a      	bne.n	800579c <_printf_common+0xc8>
 8005766:	2000      	movs	r0, #0
 8005768:	e008      	b.n	800577c <_printf_common+0xa8>
 800576a:	2301      	movs	r3, #1
 800576c:	4652      	mov	r2, sl
 800576e:	4649      	mov	r1, r9
 8005770:	4638      	mov	r0, r7
 8005772:	47c0      	blx	r8
 8005774:	3001      	adds	r0, #1
 8005776:	d103      	bne.n	8005780 <_printf_common+0xac>
 8005778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800577c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005780:	3501      	adds	r5, #1
 8005782:	e7c6      	b.n	8005712 <_printf_common+0x3e>
 8005784:	18e1      	adds	r1, r4, r3
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	2030      	movs	r0, #48	; 0x30
 800578a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800578e:	4422      	add	r2, r4
 8005790:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005794:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005798:	3302      	adds	r3, #2
 800579a:	e7c7      	b.n	800572c <_printf_common+0x58>
 800579c:	2301      	movs	r3, #1
 800579e:	4622      	mov	r2, r4
 80057a0:	4649      	mov	r1, r9
 80057a2:	4638      	mov	r0, r7
 80057a4:	47c0      	blx	r8
 80057a6:	3001      	adds	r0, #1
 80057a8:	d0e6      	beq.n	8005778 <_printf_common+0xa4>
 80057aa:	3601      	adds	r6, #1
 80057ac:	e7d9      	b.n	8005762 <_printf_common+0x8e>
	...

080057b0 <_printf_i>:
 80057b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057b4:	7e0f      	ldrb	r7, [r1, #24]
 80057b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057b8:	2f78      	cmp	r7, #120	; 0x78
 80057ba:	4691      	mov	r9, r2
 80057bc:	4680      	mov	r8, r0
 80057be:	460c      	mov	r4, r1
 80057c0:	469a      	mov	sl, r3
 80057c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057c6:	d807      	bhi.n	80057d8 <_printf_i+0x28>
 80057c8:	2f62      	cmp	r7, #98	; 0x62
 80057ca:	d80a      	bhi.n	80057e2 <_printf_i+0x32>
 80057cc:	2f00      	cmp	r7, #0
 80057ce:	f000 80d8 	beq.w	8005982 <_printf_i+0x1d2>
 80057d2:	2f58      	cmp	r7, #88	; 0x58
 80057d4:	f000 80a3 	beq.w	800591e <_printf_i+0x16e>
 80057d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057e0:	e03a      	b.n	8005858 <_printf_i+0xa8>
 80057e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057e6:	2b15      	cmp	r3, #21
 80057e8:	d8f6      	bhi.n	80057d8 <_printf_i+0x28>
 80057ea:	a101      	add	r1, pc, #4	; (adr r1, 80057f0 <_printf_i+0x40>)
 80057ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057f0:	08005849 	.word	0x08005849
 80057f4:	0800585d 	.word	0x0800585d
 80057f8:	080057d9 	.word	0x080057d9
 80057fc:	080057d9 	.word	0x080057d9
 8005800:	080057d9 	.word	0x080057d9
 8005804:	080057d9 	.word	0x080057d9
 8005808:	0800585d 	.word	0x0800585d
 800580c:	080057d9 	.word	0x080057d9
 8005810:	080057d9 	.word	0x080057d9
 8005814:	080057d9 	.word	0x080057d9
 8005818:	080057d9 	.word	0x080057d9
 800581c:	08005969 	.word	0x08005969
 8005820:	0800588d 	.word	0x0800588d
 8005824:	0800594b 	.word	0x0800594b
 8005828:	080057d9 	.word	0x080057d9
 800582c:	080057d9 	.word	0x080057d9
 8005830:	0800598b 	.word	0x0800598b
 8005834:	080057d9 	.word	0x080057d9
 8005838:	0800588d 	.word	0x0800588d
 800583c:	080057d9 	.word	0x080057d9
 8005840:	080057d9 	.word	0x080057d9
 8005844:	08005953 	.word	0x08005953
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	1d1a      	adds	r2, r3, #4
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	602a      	str	r2, [r5, #0]
 8005850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005858:	2301      	movs	r3, #1
 800585a:	e0a3      	b.n	80059a4 <_printf_i+0x1f4>
 800585c:	6820      	ldr	r0, [r4, #0]
 800585e:	6829      	ldr	r1, [r5, #0]
 8005860:	0606      	lsls	r6, r0, #24
 8005862:	f101 0304 	add.w	r3, r1, #4
 8005866:	d50a      	bpl.n	800587e <_printf_i+0xce>
 8005868:	680e      	ldr	r6, [r1, #0]
 800586a:	602b      	str	r3, [r5, #0]
 800586c:	2e00      	cmp	r6, #0
 800586e:	da03      	bge.n	8005878 <_printf_i+0xc8>
 8005870:	232d      	movs	r3, #45	; 0x2d
 8005872:	4276      	negs	r6, r6
 8005874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005878:	485e      	ldr	r0, [pc, #376]	; (80059f4 <_printf_i+0x244>)
 800587a:	230a      	movs	r3, #10
 800587c:	e019      	b.n	80058b2 <_printf_i+0x102>
 800587e:	680e      	ldr	r6, [r1, #0]
 8005880:	602b      	str	r3, [r5, #0]
 8005882:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005886:	bf18      	it	ne
 8005888:	b236      	sxthne	r6, r6
 800588a:	e7ef      	b.n	800586c <_printf_i+0xbc>
 800588c:	682b      	ldr	r3, [r5, #0]
 800588e:	6820      	ldr	r0, [r4, #0]
 8005890:	1d19      	adds	r1, r3, #4
 8005892:	6029      	str	r1, [r5, #0]
 8005894:	0601      	lsls	r1, r0, #24
 8005896:	d501      	bpl.n	800589c <_printf_i+0xec>
 8005898:	681e      	ldr	r6, [r3, #0]
 800589a:	e002      	b.n	80058a2 <_printf_i+0xf2>
 800589c:	0646      	lsls	r6, r0, #25
 800589e:	d5fb      	bpl.n	8005898 <_printf_i+0xe8>
 80058a0:	881e      	ldrh	r6, [r3, #0]
 80058a2:	4854      	ldr	r0, [pc, #336]	; (80059f4 <_printf_i+0x244>)
 80058a4:	2f6f      	cmp	r7, #111	; 0x6f
 80058a6:	bf0c      	ite	eq
 80058a8:	2308      	moveq	r3, #8
 80058aa:	230a      	movne	r3, #10
 80058ac:	2100      	movs	r1, #0
 80058ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058b2:	6865      	ldr	r5, [r4, #4]
 80058b4:	60a5      	str	r5, [r4, #8]
 80058b6:	2d00      	cmp	r5, #0
 80058b8:	bfa2      	ittt	ge
 80058ba:	6821      	ldrge	r1, [r4, #0]
 80058bc:	f021 0104 	bicge.w	r1, r1, #4
 80058c0:	6021      	strge	r1, [r4, #0]
 80058c2:	b90e      	cbnz	r6, 80058c8 <_printf_i+0x118>
 80058c4:	2d00      	cmp	r5, #0
 80058c6:	d04d      	beq.n	8005964 <_printf_i+0x1b4>
 80058c8:	4615      	mov	r5, r2
 80058ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80058ce:	fb03 6711 	mls	r7, r3, r1, r6
 80058d2:	5dc7      	ldrb	r7, [r0, r7]
 80058d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058d8:	4637      	mov	r7, r6
 80058da:	42bb      	cmp	r3, r7
 80058dc:	460e      	mov	r6, r1
 80058de:	d9f4      	bls.n	80058ca <_printf_i+0x11a>
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d10b      	bne.n	80058fc <_printf_i+0x14c>
 80058e4:	6823      	ldr	r3, [r4, #0]
 80058e6:	07de      	lsls	r6, r3, #31
 80058e8:	d508      	bpl.n	80058fc <_printf_i+0x14c>
 80058ea:	6923      	ldr	r3, [r4, #16]
 80058ec:	6861      	ldr	r1, [r4, #4]
 80058ee:	4299      	cmp	r1, r3
 80058f0:	bfde      	ittt	le
 80058f2:	2330      	movle	r3, #48	; 0x30
 80058f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80058fc:	1b52      	subs	r2, r2, r5
 80058fe:	6122      	str	r2, [r4, #16]
 8005900:	f8cd a000 	str.w	sl, [sp]
 8005904:	464b      	mov	r3, r9
 8005906:	aa03      	add	r2, sp, #12
 8005908:	4621      	mov	r1, r4
 800590a:	4640      	mov	r0, r8
 800590c:	f7ff fee2 	bl	80056d4 <_printf_common>
 8005910:	3001      	adds	r0, #1
 8005912:	d14c      	bne.n	80059ae <_printf_i+0x1fe>
 8005914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005918:	b004      	add	sp, #16
 800591a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800591e:	4835      	ldr	r0, [pc, #212]	; (80059f4 <_printf_i+0x244>)
 8005920:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005924:	6829      	ldr	r1, [r5, #0]
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	f851 6b04 	ldr.w	r6, [r1], #4
 800592c:	6029      	str	r1, [r5, #0]
 800592e:	061d      	lsls	r5, r3, #24
 8005930:	d514      	bpl.n	800595c <_printf_i+0x1ac>
 8005932:	07df      	lsls	r7, r3, #31
 8005934:	bf44      	itt	mi
 8005936:	f043 0320 	orrmi.w	r3, r3, #32
 800593a:	6023      	strmi	r3, [r4, #0]
 800593c:	b91e      	cbnz	r6, 8005946 <_printf_i+0x196>
 800593e:	6823      	ldr	r3, [r4, #0]
 8005940:	f023 0320 	bic.w	r3, r3, #32
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	2310      	movs	r3, #16
 8005948:	e7b0      	b.n	80058ac <_printf_i+0xfc>
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	f043 0320 	orr.w	r3, r3, #32
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	2378      	movs	r3, #120	; 0x78
 8005954:	4828      	ldr	r0, [pc, #160]	; (80059f8 <_printf_i+0x248>)
 8005956:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800595a:	e7e3      	b.n	8005924 <_printf_i+0x174>
 800595c:	0659      	lsls	r1, r3, #25
 800595e:	bf48      	it	mi
 8005960:	b2b6      	uxthmi	r6, r6
 8005962:	e7e6      	b.n	8005932 <_printf_i+0x182>
 8005964:	4615      	mov	r5, r2
 8005966:	e7bb      	b.n	80058e0 <_printf_i+0x130>
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	6826      	ldr	r6, [r4, #0]
 800596c:	6961      	ldr	r1, [r4, #20]
 800596e:	1d18      	adds	r0, r3, #4
 8005970:	6028      	str	r0, [r5, #0]
 8005972:	0635      	lsls	r5, r6, #24
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	d501      	bpl.n	800597c <_printf_i+0x1cc>
 8005978:	6019      	str	r1, [r3, #0]
 800597a:	e002      	b.n	8005982 <_printf_i+0x1d2>
 800597c:	0670      	lsls	r0, r6, #25
 800597e:	d5fb      	bpl.n	8005978 <_printf_i+0x1c8>
 8005980:	8019      	strh	r1, [r3, #0]
 8005982:	2300      	movs	r3, #0
 8005984:	6123      	str	r3, [r4, #16]
 8005986:	4615      	mov	r5, r2
 8005988:	e7ba      	b.n	8005900 <_printf_i+0x150>
 800598a:	682b      	ldr	r3, [r5, #0]
 800598c:	1d1a      	adds	r2, r3, #4
 800598e:	602a      	str	r2, [r5, #0]
 8005990:	681d      	ldr	r5, [r3, #0]
 8005992:	6862      	ldr	r2, [r4, #4]
 8005994:	2100      	movs	r1, #0
 8005996:	4628      	mov	r0, r5
 8005998:	f7fa fc22 	bl	80001e0 <memchr>
 800599c:	b108      	cbz	r0, 80059a2 <_printf_i+0x1f2>
 800599e:	1b40      	subs	r0, r0, r5
 80059a0:	6060      	str	r0, [r4, #4]
 80059a2:	6863      	ldr	r3, [r4, #4]
 80059a4:	6123      	str	r3, [r4, #16]
 80059a6:	2300      	movs	r3, #0
 80059a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059ac:	e7a8      	b.n	8005900 <_printf_i+0x150>
 80059ae:	6923      	ldr	r3, [r4, #16]
 80059b0:	462a      	mov	r2, r5
 80059b2:	4649      	mov	r1, r9
 80059b4:	4640      	mov	r0, r8
 80059b6:	47d0      	blx	sl
 80059b8:	3001      	adds	r0, #1
 80059ba:	d0ab      	beq.n	8005914 <_printf_i+0x164>
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	079b      	lsls	r3, r3, #30
 80059c0:	d413      	bmi.n	80059ea <_printf_i+0x23a>
 80059c2:	68e0      	ldr	r0, [r4, #12]
 80059c4:	9b03      	ldr	r3, [sp, #12]
 80059c6:	4298      	cmp	r0, r3
 80059c8:	bfb8      	it	lt
 80059ca:	4618      	movlt	r0, r3
 80059cc:	e7a4      	b.n	8005918 <_printf_i+0x168>
 80059ce:	2301      	movs	r3, #1
 80059d0:	4632      	mov	r2, r6
 80059d2:	4649      	mov	r1, r9
 80059d4:	4640      	mov	r0, r8
 80059d6:	47d0      	blx	sl
 80059d8:	3001      	adds	r0, #1
 80059da:	d09b      	beq.n	8005914 <_printf_i+0x164>
 80059dc:	3501      	adds	r5, #1
 80059de:	68e3      	ldr	r3, [r4, #12]
 80059e0:	9903      	ldr	r1, [sp, #12]
 80059e2:	1a5b      	subs	r3, r3, r1
 80059e4:	42ab      	cmp	r3, r5
 80059e6:	dcf2      	bgt.n	80059ce <_printf_i+0x21e>
 80059e8:	e7eb      	b.n	80059c2 <_printf_i+0x212>
 80059ea:	2500      	movs	r5, #0
 80059ec:	f104 0619 	add.w	r6, r4, #25
 80059f0:	e7f5      	b.n	80059de <_printf_i+0x22e>
 80059f2:	bf00      	nop
 80059f4:	08005d51 	.word	0x08005d51
 80059f8:	08005d62 	.word	0x08005d62

080059fc <memmove>:
 80059fc:	4288      	cmp	r0, r1
 80059fe:	b510      	push	{r4, lr}
 8005a00:	eb01 0402 	add.w	r4, r1, r2
 8005a04:	d902      	bls.n	8005a0c <memmove+0x10>
 8005a06:	4284      	cmp	r4, r0
 8005a08:	4623      	mov	r3, r4
 8005a0a:	d807      	bhi.n	8005a1c <memmove+0x20>
 8005a0c:	1e43      	subs	r3, r0, #1
 8005a0e:	42a1      	cmp	r1, r4
 8005a10:	d008      	beq.n	8005a24 <memmove+0x28>
 8005a12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a1a:	e7f8      	b.n	8005a0e <memmove+0x12>
 8005a1c:	4402      	add	r2, r0
 8005a1e:	4601      	mov	r1, r0
 8005a20:	428a      	cmp	r2, r1
 8005a22:	d100      	bne.n	8005a26 <memmove+0x2a>
 8005a24:	bd10      	pop	{r4, pc}
 8005a26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a2e:	e7f7      	b.n	8005a20 <memmove+0x24>

08005a30 <_free_r>:
 8005a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a32:	2900      	cmp	r1, #0
 8005a34:	d044      	beq.n	8005ac0 <_free_r+0x90>
 8005a36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a3a:	9001      	str	r0, [sp, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f1a1 0404 	sub.w	r4, r1, #4
 8005a42:	bfb8      	it	lt
 8005a44:	18e4      	addlt	r4, r4, r3
 8005a46:	f000 f913 	bl	8005c70 <__malloc_lock>
 8005a4a:	4a1e      	ldr	r2, [pc, #120]	; (8005ac4 <_free_r+0x94>)
 8005a4c:	9801      	ldr	r0, [sp, #4]
 8005a4e:	6813      	ldr	r3, [r2, #0]
 8005a50:	b933      	cbnz	r3, 8005a60 <_free_r+0x30>
 8005a52:	6063      	str	r3, [r4, #4]
 8005a54:	6014      	str	r4, [r2, #0]
 8005a56:	b003      	add	sp, #12
 8005a58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a5c:	f000 b90e 	b.w	8005c7c <__malloc_unlock>
 8005a60:	42a3      	cmp	r3, r4
 8005a62:	d908      	bls.n	8005a76 <_free_r+0x46>
 8005a64:	6825      	ldr	r5, [r4, #0]
 8005a66:	1961      	adds	r1, r4, r5
 8005a68:	428b      	cmp	r3, r1
 8005a6a:	bf01      	itttt	eq
 8005a6c:	6819      	ldreq	r1, [r3, #0]
 8005a6e:	685b      	ldreq	r3, [r3, #4]
 8005a70:	1949      	addeq	r1, r1, r5
 8005a72:	6021      	streq	r1, [r4, #0]
 8005a74:	e7ed      	b.n	8005a52 <_free_r+0x22>
 8005a76:	461a      	mov	r2, r3
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	b10b      	cbz	r3, 8005a80 <_free_r+0x50>
 8005a7c:	42a3      	cmp	r3, r4
 8005a7e:	d9fa      	bls.n	8005a76 <_free_r+0x46>
 8005a80:	6811      	ldr	r1, [r2, #0]
 8005a82:	1855      	adds	r5, r2, r1
 8005a84:	42a5      	cmp	r5, r4
 8005a86:	d10b      	bne.n	8005aa0 <_free_r+0x70>
 8005a88:	6824      	ldr	r4, [r4, #0]
 8005a8a:	4421      	add	r1, r4
 8005a8c:	1854      	adds	r4, r2, r1
 8005a8e:	42a3      	cmp	r3, r4
 8005a90:	6011      	str	r1, [r2, #0]
 8005a92:	d1e0      	bne.n	8005a56 <_free_r+0x26>
 8005a94:	681c      	ldr	r4, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	6053      	str	r3, [r2, #4]
 8005a9a:	4421      	add	r1, r4
 8005a9c:	6011      	str	r1, [r2, #0]
 8005a9e:	e7da      	b.n	8005a56 <_free_r+0x26>
 8005aa0:	d902      	bls.n	8005aa8 <_free_r+0x78>
 8005aa2:	230c      	movs	r3, #12
 8005aa4:	6003      	str	r3, [r0, #0]
 8005aa6:	e7d6      	b.n	8005a56 <_free_r+0x26>
 8005aa8:	6825      	ldr	r5, [r4, #0]
 8005aaa:	1961      	adds	r1, r4, r5
 8005aac:	428b      	cmp	r3, r1
 8005aae:	bf04      	itt	eq
 8005ab0:	6819      	ldreq	r1, [r3, #0]
 8005ab2:	685b      	ldreq	r3, [r3, #4]
 8005ab4:	6063      	str	r3, [r4, #4]
 8005ab6:	bf04      	itt	eq
 8005ab8:	1949      	addeq	r1, r1, r5
 8005aba:	6021      	streq	r1, [r4, #0]
 8005abc:	6054      	str	r4, [r2, #4]
 8005abe:	e7ca      	b.n	8005a56 <_free_r+0x26>
 8005ac0:	b003      	add	sp, #12
 8005ac2:	bd30      	pop	{r4, r5, pc}
 8005ac4:	2001304c 	.word	0x2001304c

08005ac8 <sbrk_aligned>:
 8005ac8:	b570      	push	{r4, r5, r6, lr}
 8005aca:	4e0e      	ldr	r6, [pc, #56]	; (8005b04 <sbrk_aligned+0x3c>)
 8005acc:	460c      	mov	r4, r1
 8005ace:	6831      	ldr	r1, [r6, #0]
 8005ad0:	4605      	mov	r5, r0
 8005ad2:	b911      	cbnz	r1, 8005ada <sbrk_aligned+0x12>
 8005ad4:	f000 f8bc 	bl	8005c50 <_sbrk_r>
 8005ad8:	6030      	str	r0, [r6, #0]
 8005ada:	4621      	mov	r1, r4
 8005adc:	4628      	mov	r0, r5
 8005ade:	f000 f8b7 	bl	8005c50 <_sbrk_r>
 8005ae2:	1c43      	adds	r3, r0, #1
 8005ae4:	d00a      	beq.n	8005afc <sbrk_aligned+0x34>
 8005ae6:	1cc4      	adds	r4, r0, #3
 8005ae8:	f024 0403 	bic.w	r4, r4, #3
 8005aec:	42a0      	cmp	r0, r4
 8005aee:	d007      	beq.n	8005b00 <sbrk_aligned+0x38>
 8005af0:	1a21      	subs	r1, r4, r0
 8005af2:	4628      	mov	r0, r5
 8005af4:	f000 f8ac 	bl	8005c50 <_sbrk_r>
 8005af8:	3001      	adds	r0, #1
 8005afa:	d101      	bne.n	8005b00 <sbrk_aligned+0x38>
 8005afc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005b00:	4620      	mov	r0, r4
 8005b02:	bd70      	pop	{r4, r5, r6, pc}
 8005b04:	20013050 	.word	0x20013050

08005b08 <_malloc_r>:
 8005b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b0c:	1ccd      	adds	r5, r1, #3
 8005b0e:	f025 0503 	bic.w	r5, r5, #3
 8005b12:	3508      	adds	r5, #8
 8005b14:	2d0c      	cmp	r5, #12
 8005b16:	bf38      	it	cc
 8005b18:	250c      	movcc	r5, #12
 8005b1a:	2d00      	cmp	r5, #0
 8005b1c:	4607      	mov	r7, r0
 8005b1e:	db01      	blt.n	8005b24 <_malloc_r+0x1c>
 8005b20:	42a9      	cmp	r1, r5
 8005b22:	d905      	bls.n	8005b30 <_malloc_r+0x28>
 8005b24:	230c      	movs	r3, #12
 8005b26:	603b      	str	r3, [r7, #0]
 8005b28:	2600      	movs	r6, #0
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b30:	4e2e      	ldr	r6, [pc, #184]	; (8005bec <_malloc_r+0xe4>)
 8005b32:	f000 f89d 	bl	8005c70 <__malloc_lock>
 8005b36:	6833      	ldr	r3, [r6, #0]
 8005b38:	461c      	mov	r4, r3
 8005b3a:	bb34      	cbnz	r4, 8005b8a <_malloc_r+0x82>
 8005b3c:	4629      	mov	r1, r5
 8005b3e:	4638      	mov	r0, r7
 8005b40:	f7ff ffc2 	bl	8005ac8 <sbrk_aligned>
 8005b44:	1c43      	adds	r3, r0, #1
 8005b46:	4604      	mov	r4, r0
 8005b48:	d14d      	bne.n	8005be6 <_malloc_r+0xde>
 8005b4a:	6834      	ldr	r4, [r6, #0]
 8005b4c:	4626      	mov	r6, r4
 8005b4e:	2e00      	cmp	r6, #0
 8005b50:	d140      	bne.n	8005bd4 <_malloc_r+0xcc>
 8005b52:	6823      	ldr	r3, [r4, #0]
 8005b54:	4631      	mov	r1, r6
 8005b56:	4638      	mov	r0, r7
 8005b58:	eb04 0803 	add.w	r8, r4, r3
 8005b5c:	f000 f878 	bl	8005c50 <_sbrk_r>
 8005b60:	4580      	cmp	r8, r0
 8005b62:	d13a      	bne.n	8005bda <_malloc_r+0xd2>
 8005b64:	6821      	ldr	r1, [r4, #0]
 8005b66:	3503      	adds	r5, #3
 8005b68:	1a6d      	subs	r5, r5, r1
 8005b6a:	f025 0503 	bic.w	r5, r5, #3
 8005b6e:	3508      	adds	r5, #8
 8005b70:	2d0c      	cmp	r5, #12
 8005b72:	bf38      	it	cc
 8005b74:	250c      	movcc	r5, #12
 8005b76:	4629      	mov	r1, r5
 8005b78:	4638      	mov	r0, r7
 8005b7a:	f7ff ffa5 	bl	8005ac8 <sbrk_aligned>
 8005b7e:	3001      	adds	r0, #1
 8005b80:	d02b      	beq.n	8005bda <_malloc_r+0xd2>
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	442b      	add	r3, r5
 8005b86:	6023      	str	r3, [r4, #0]
 8005b88:	e00e      	b.n	8005ba8 <_malloc_r+0xa0>
 8005b8a:	6822      	ldr	r2, [r4, #0]
 8005b8c:	1b52      	subs	r2, r2, r5
 8005b8e:	d41e      	bmi.n	8005bce <_malloc_r+0xc6>
 8005b90:	2a0b      	cmp	r2, #11
 8005b92:	d916      	bls.n	8005bc2 <_malloc_r+0xba>
 8005b94:	1961      	adds	r1, r4, r5
 8005b96:	42a3      	cmp	r3, r4
 8005b98:	6025      	str	r5, [r4, #0]
 8005b9a:	bf18      	it	ne
 8005b9c:	6059      	strne	r1, [r3, #4]
 8005b9e:	6863      	ldr	r3, [r4, #4]
 8005ba0:	bf08      	it	eq
 8005ba2:	6031      	streq	r1, [r6, #0]
 8005ba4:	5162      	str	r2, [r4, r5]
 8005ba6:	604b      	str	r3, [r1, #4]
 8005ba8:	4638      	mov	r0, r7
 8005baa:	f104 060b 	add.w	r6, r4, #11
 8005bae:	f000 f865 	bl	8005c7c <__malloc_unlock>
 8005bb2:	f026 0607 	bic.w	r6, r6, #7
 8005bb6:	1d23      	adds	r3, r4, #4
 8005bb8:	1af2      	subs	r2, r6, r3
 8005bba:	d0b6      	beq.n	8005b2a <_malloc_r+0x22>
 8005bbc:	1b9b      	subs	r3, r3, r6
 8005bbe:	50a3      	str	r3, [r4, r2]
 8005bc0:	e7b3      	b.n	8005b2a <_malloc_r+0x22>
 8005bc2:	6862      	ldr	r2, [r4, #4]
 8005bc4:	42a3      	cmp	r3, r4
 8005bc6:	bf0c      	ite	eq
 8005bc8:	6032      	streq	r2, [r6, #0]
 8005bca:	605a      	strne	r2, [r3, #4]
 8005bcc:	e7ec      	b.n	8005ba8 <_malloc_r+0xa0>
 8005bce:	4623      	mov	r3, r4
 8005bd0:	6864      	ldr	r4, [r4, #4]
 8005bd2:	e7b2      	b.n	8005b3a <_malloc_r+0x32>
 8005bd4:	4634      	mov	r4, r6
 8005bd6:	6876      	ldr	r6, [r6, #4]
 8005bd8:	e7b9      	b.n	8005b4e <_malloc_r+0x46>
 8005bda:	230c      	movs	r3, #12
 8005bdc:	603b      	str	r3, [r7, #0]
 8005bde:	4638      	mov	r0, r7
 8005be0:	f000 f84c 	bl	8005c7c <__malloc_unlock>
 8005be4:	e7a1      	b.n	8005b2a <_malloc_r+0x22>
 8005be6:	6025      	str	r5, [r4, #0]
 8005be8:	e7de      	b.n	8005ba8 <_malloc_r+0xa0>
 8005bea:	bf00      	nop
 8005bec:	2001304c 	.word	0x2001304c

08005bf0 <_realloc_r>:
 8005bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf4:	4680      	mov	r8, r0
 8005bf6:	4614      	mov	r4, r2
 8005bf8:	460e      	mov	r6, r1
 8005bfa:	b921      	cbnz	r1, 8005c06 <_realloc_r+0x16>
 8005bfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c00:	4611      	mov	r1, r2
 8005c02:	f7ff bf81 	b.w	8005b08 <_malloc_r>
 8005c06:	b92a      	cbnz	r2, 8005c14 <_realloc_r+0x24>
 8005c08:	f7ff ff12 	bl	8005a30 <_free_r>
 8005c0c:	4625      	mov	r5, r4
 8005c0e:	4628      	mov	r0, r5
 8005c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c14:	f000 f838 	bl	8005c88 <_malloc_usable_size_r>
 8005c18:	4284      	cmp	r4, r0
 8005c1a:	4607      	mov	r7, r0
 8005c1c:	d802      	bhi.n	8005c24 <_realloc_r+0x34>
 8005c1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c22:	d812      	bhi.n	8005c4a <_realloc_r+0x5a>
 8005c24:	4621      	mov	r1, r4
 8005c26:	4640      	mov	r0, r8
 8005c28:	f7ff ff6e 	bl	8005b08 <_malloc_r>
 8005c2c:	4605      	mov	r5, r0
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	d0ed      	beq.n	8005c0e <_realloc_r+0x1e>
 8005c32:	42bc      	cmp	r4, r7
 8005c34:	4622      	mov	r2, r4
 8005c36:	4631      	mov	r1, r6
 8005c38:	bf28      	it	cs
 8005c3a:	463a      	movcs	r2, r7
 8005c3c:	f7ff fbb8 	bl	80053b0 <memcpy>
 8005c40:	4631      	mov	r1, r6
 8005c42:	4640      	mov	r0, r8
 8005c44:	f7ff fef4 	bl	8005a30 <_free_r>
 8005c48:	e7e1      	b.n	8005c0e <_realloc_r+0x1e>
 8005c4a:	4635      	mov	r5, r6
 8005c4c:	e7df      	b.n	8005c0e <_realloc_r+0x1e>
	...

08005c50 <_sbrk_r>:
 8005c50:	b538      	push	{r3, r4, r5, lr}
 8005c52:	4d06      	ldr	r5, [pc, #24]	; (8005c6c <_sbrk_r+0x1c>)
 8005c54:	2300      	movs	r3, #0
 8005c56:	4604      	mov	r4, r0
 8005c58:	4608      	mov	r0, r1
 8005c5a:	602b      	str	r3, [r5, #0]
 8005c5c:	f7fb f84c 	bl	8000cf8 <_sbrk>
 8005c60:	1c43      	adds	r3, r0, #1
 8005c62:	d102      	bne.n	8005c6a <_sbrk_r+0x1a>
 8005c64:	682b      	ldr	r3, [r5, #0]
 8005c66:	b103      	cbz	r3, 8005c6a <_sbrk_r+0x1a>
 8005c68:	6023      	str	r3, [r4, #0]
 8005c6a:	bd38      	pop	{r3, r4, r5, pc}
 8005c6c:	20013054 	.word	0x20013054

08005c70 <__malloc_lock>:
 8005c70:	4801      	ldr	r0, [pc, #4]	; (8005c78 <__malloc_lock+0x8>)
 8005c72:	f000 b811 	b.w	8005c98 <__retarget_lock_acquire_recursive>
 8005c76:	bf00      	nop
 8005c78:	20013058 	.word	0x20013058

08005c7c <__malloc_unlock>:
 8005c7c:	4801      	ldr	r0, [pc, #4]	; (8005c84 <__malloc_unlock+0x8>)
 8005c7e:	f000 b80c 	b.w	8005c9a <__retarget_lock_release_recursive>
 8005c82:	bf00      	nop
 8005c84:	20013058 	.word	0x20013058

08005c88 <_malloc_usable_size_r>:
 8005c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c8c:	1f18      	subs	r0, r3, #4
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	bfbc      	itt	lt
 8005c92:	580b      	ldrlt	r3, [r1, r0]
 8005c94:	18c0      	addlt	r0, r0, r3
 8005c96:	4770      	bx	lr

08005c98 <__retarget_lock_acquire_recursive>:
 8005c98:	4770      	bx	lr

08005c9a <__retarget_lock_release_recursive>:
 8005c9a:	4770      	bx	lr

08005c9c <_init>:
 8005c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9e:	bf00      	nop
 8005ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ca2:	bc08      	pop	{r3}
 8005ca4:	469e      	mov	lr, r3
 8005ca6:	4770      	bx	lr

08005ca8 <_fini>:
 8005ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005caa:	bf00      	nop
 8005cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cae:	bc08      	pop	{r3}
 8005cb0:	469e      	mov	lr, r3
 8005cb2:	4770      	bx	lr
