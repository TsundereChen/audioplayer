
audioplayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006324  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  080064b4  080064b4  000164b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006730  08006730  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006730  08006730  00016730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006738  08006738  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006738  08006738  00016738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800673c  0800673c  0001673c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000131f0  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013280  20013280  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000177ef  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003152  00000000  00000000  000378af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d0  00000000  00000000  0003aa08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014b0  00000000  00000000  0003bfd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000234d9  00000000  00000000  0003d488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019358  00000000  00000000  00060961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6b4b  00000000  00000000  00079cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00150804  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060a4  00000000  00000000  00150854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800649c 	.word	0x0800649c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800649c 	.word	0x0800649c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <LCD_Init>:
   
   0xFF
};
//----------------------------------------------------------------------------------
void LCD_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af02      	add	r7, sp, #8
   HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, comm, sizeof(comm),10);
 800058a:	230a      	movs	r3, #10
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	231b      	movs	r3, #27
 8000590:	4a03      	ldr	r2, [pc, #12]	; (80005a0 <LCD_Init+0x1c>)
 8000592:	2178      	movs	r1, #120	; 0x78
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <LCD_Init+0x20>)
 8000596:	f001 f96d 	bl	8001874 <HAL_I2C_Master_Transmit>
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000000 	.word	0x20000000
 80005a4:	200002b4 	.word	0x200002b4

080005a8 <LCD_command>:
//----------------------------------------------------------------------------------
void  LCD_command(uint8_t cmd)
{   
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af02      	add	r7, sp, #8
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
   uint8_t cmd_arr[2] = {0,0};
 80005b2:	2300      	movs	r3, #0
 80005b4:	81bb      	strh	r3, [r7, #12]
   cmd_arr[0] = COMMAND_MODE;
 80005b6:	2300      	movs	r3, #0
 80005b8:	733b      	strb	r3, [r7, #12]
   cmd_arr[1] = cmd;
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	737b      	strb	r3, [r7, #13]
   HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, cmd_arr, sizeof(cmd_arr),10);
 80005be:	f107 020c 	add.w	r2, r7, #12
 80005c2:	230a      	movs	r3, #10
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2302      	movs	r3, #2
 80005c8:	2178      	movs	r1, #120	; 0x78
 80005ca:	4803      	ldr	r0, [pc, #12]	; (80005d8 <LCD_command+0x30>)
 80005cc:	f001 f952 	bl	8001874 <HAL_I2C_Master_Transmit>
}
 80005d0:	bf00      	nop
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200002b4 	.word	0x200002b4

080005dc <LCD_Update>:
   x_cur = 0;
   y_cur = 0;
}
//----------------------------------------------------------------------------------
void LCD_Update(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af02      	add	r7, sp, #8
   LCD_command(0x21);		      // SSD1306_COLUMNADDR
 80005e2:	2021      	movs	r0, #33	; 0x21
 80005e4:	f7ff ffe0 	bl	80005a8 <LCD_command>
   LCD_command(column_start);     // column start
 80005e8:	2000      	movs	r0, #0
 80005ea:	f7ff ffdd 	bl	80005a8 <LCD_command>
   LCD_command(column_end);       // column end
 80005ee:	207f      	movs	r0, #127	; 0x7f
 80005f0:	f7ff ffda 	bl	80005a8 <LCD_command>
   LCD_command(0x22);             // SSD1306_PAGEADDR
 80005f4:	2022      	movs	r0, #34	; 0x22
 80005f6:	f7ff ffd7 	bl	80005a8 <LCD_command>
   LCD_command(page_start);       // page start
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff ffd4 	bl	80005a8 <LCD_command>
   LCD_command(page_end);         // page end (4 pages for 32 rows OLED)
 8000600:	2003      	movs	r0, #3
 8000602:	f7ff ffd1 	bl	80005a8 <LCD_command>
   
   lcd_buff[0]= DATA_MODE;              
 8000606:	4b07      	ldr	r3, [pc, #28]	; (8000624 <LCD_Update+0x48>)
 8000608:	2240      	movs	r2, #64	; 0x40
 800060a:	701a      	strb	r2, [r3, #0]
   
   HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, lcd_buff, BUFF_SIZE,50);
 800060c:	2332      	movs	r3, #50	; 0x32
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	f240 2301 	movw	r3, #513	; 0x201
 8000614:	4a03      	ldr	r2, [pc, #12]	; (8000624 <LCD_Update+0x48>)
 8000616:	2178      	movs	r1, #120	; 0x78
 8000618:	4803      	ldr	r0, [pc, #12]	; (8000628 <LCD_Update+0x4c>)
 800061a:	f001 f92b 	bl	8001874 <HAL_I2C_Master_Transmit>
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000ac 	.word	0x200000ac
 8000628:	200002b4 	.word	0x200002b4

0800062c <LCD_Chr>:
//----------------------------------------------------------------------------------
void LCD_Chr(char ch)
{
 800062c:	b490      	push	{r4, r7}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
   uint8_t i;   
   lcd_buff_idx=(y_cur*128 + x_cur*6) + 1;    
 8000636:	4b32      	ldr	r3, [pc, #200]	; (8000700 <LCD_Chr+0xd4>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b29b      	uxth	r3, r3
 800063c:	01db      	lsls	r3, r3, #7
 800063e:	b29a      	uxth	r2, r3
 8000640:	4b30      	ldr	r3, [pc, #192]	; (8000704 <LCD_Chr+0xd8>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	b29b      	uxth	r3, r3
 8000646:	4619      	mov	r1, r3
 8000648:	0049      	lsls	r1, r1, #1
 800064a:	440b      	add	r3, r1
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	b29b      	uxth	r3, r3
 8000650:	4413      	add	r3, r2
 8000652:	b29b      	uxth	r3, r3
 8000654:	3301      	adds	r3, #1
 8000656:	b29a      	uxth	r2, r3
 8000658:	4b2b      	ldr	r3, [pc, #172]	; (8000708 <LCD_Chr+0xdc>)
 800065a:	801a      	strh	r2, [r3, #0]
   if ((ch >= 0x20)&&(ch <= 0x7F)) ch -= 32;
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	2b1f      	cmp	r3, #31
 8000660:	d907      	bls.n	8000672 <LCD_Chr+0x46>
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	db03      	blt.n	8000672 <LCD_Chr+0x46>
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	3b20      	subs	r3, #32
 800066e:	71fb      	strb	r3, [r7, #7]
 8000670:	e001      	b.n	8000676 <LCD_Chr+0x4a>
   else ch = 95;   
 8000672:	235f      	movs	r3, #95	; 0x5f
 8000674:	71fb      	strb	r3, [r7, #7]
   for (i = 0; i < 5; i++)
 8000676:	2300      	movs	r3, #0
 8000678:	73fb      	strb	r3, [r7, #15]
 800067a:	e014      	b.n	80006a6 <LCD_Chr+0x7a>
   {
        lcd_buff[lcd_buff_idx++] = font[ch][i];       
 800067c:	79fa      	ldrb	r2, [r7, #7]
 800067e:	7bf9      	ldrb	r1, [r7, #15]
 8000680:	4b21      	ldr	r3, [pc, #132]	; (8000708 <LCD_Chr+0xdc>)
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	1c58      	adds	r0, r3, #1
 8000686:	b284      	uxth	r4, r0
 8000688:	481f      	ldr	r0, [pc, #124]	; (8000708 <LCD_Chr+0xdc>)
 800068a:	8004      	strh	r4, [r0, #0]
 800068c:	461c      	mov	r4, r3
 800068e:	481f      	ldr	r0, [pc, #124]	; (800070c <LCD_Chr+0xe0>)
 8000690:	4613      	mov	r3, r2
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	4413      	add	r3, r2
 8000696:	4403      	add	r3, r0
 8000698:	440b      	add	r3, r1
 800069a:	781a      	ldrb	r2, [r3, #0]
 800069c:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <LCD_Chr+0xe4>)
 800069e:	551a      	strb	r2, [r3, r4]
   for (i = 0; i < 5; i++)
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	3301      	adds	r3, #1
 80006a4:	73fb      	strb	r3, [r7, #15]
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	2b04      	cmp	r3, #4
 80006aa:	d9e7      	bls.n	800067c <LCD_Chr+0x50>
   }
   lcd_buff[lcd_buff_idx++] = 0x00;  
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <LCD_Chr+0xdc>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	b291      	uxth	r1, r2
 80006b4:	4a14      	ldr	r2, [pc, #80]	; (8000708 <LCD_Chr+0xdc>)
 80006b6:	8011      	strh	r1, [r2, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <LCD_Chr+0xe4>)
 80006bc:	2100      	movs	r1, #0
 80006be:	5499      	strb	r1, [r3, r2]
   x_cur++;
 80006c0:	4b10      	ldr	r3, [pc, #64]	; (8000704 <LCD_Chr+0xd8>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	3301      	adds	r3, #1
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <LCD_Chr+0xd8>)
 80006ca:	701a      	strb	r2, [r3, #0]
   if (x_cur > 20)
 80006cc:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <LCD_Chr+0xd8>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b14      	cmp	r3, #20
 80006d2:	d90f      	bls.n	80006f4 <LCD_Chr+0xc8>
   {
      x_cur = 0;
 80006d4:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <LCD_Chr+0xd8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
      y_cur++;
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <LCD_Chr+0xd4>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	3301      	adds	r3, #1
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b07      	ldr	r3, [pc, #28]	; (8000700 <LCD_Chr+0xd4>)
 80006e4:	701a      	strb	r2, [r3, #0]
      if (y_cur > 3)
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <LCD_Chr+0xd4>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d902      	bls.n	80006f4 <LCD_Chr+0xc8>
      {
         y_cur = 0;
 80006ee:	4b04      	ldr	r3, [pc, #16]	; (8000700 <LCD_Chr+0xd4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]
      }
   }
}
 80006f4:	bf00      	nop
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc90      	pop	{r4, r7}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	200002b1 	.word	0x200002b1
 8000704:	200002b0 	.word	0x200002b0
 8000708:	200002ae 	.word	0x200002ae
 800070c:	08006504 	.word	0x08006504
 8000710:	200000ac 	.word	0x200000ac

08000714 <LCD_FStr>:
      }
   }
}
//----------------------------------------------------------------------------------
void LCD_FStr(const char *dataPtr, uint8_t x, uint8_t y)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	70fb      	strb	r3, [r7, #3]
 8000720:	4613      	mov	r3, r2
 8000722:	70bb      	strb	r3, [r7, #2]
   LCD_GotoXY(x,y);
 8000724:	78ba      	ldrb	r2, [r7, #2]
 8000726:	78fb      	ldrb	r3, [r7, #3]
 8000728:	4611      	mov	r1, r2
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f812 	bl	8000754 <LCD_GotoXY>
   while(*dataPtr != 0)
 8000730:	e007      	b.n	8000742 <LCD_FStr+0x2e>
   {
      LCD_Chr(*dataPtr);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff78 	bl	800062c <LCD_Chr>
      dataPtr++;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3301      	adds	r3, #1
 8000740:	607b      	str	r3, [r7, #4]
   while(*dataPtr != 0)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d1f3      	bne.n	8000732 <LCD_FStr+0x1e>
   }
}
 800074a:	bf00      	nop
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <LCD_GotoXY>:
      dataPtr++;
   }
}
////----------------------------------------------------
void LCD_GotoXY(uint8_t x,uint8_t y)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	460a      	mov	r2, r1
 800075e:	71fb      	strb	r3, [r7, #7]
 8000760:	4613      	mov	r3, r2
 8000762:	71bb      	strb	r3, [r7, #6]
   if((x < 21)&&(y < (page_end+1)))
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	2b14      	cmp	r3, #20
 8000768:	d808      	bhi.n	800077c <LCD_GotoXY+0x28>
 800076a:	79bb      	ldrb	r3, [r7, #6]
 800076c:	2b03      	cmp	r3, #3
 800076e:	d805      	bhi.n	800077c <LCD_GotoXY+0x28>
   {
      x_cur = x;
 8000770:	4a05      	ldr	r2, [pc, #20]	; (8000788 <LCD_GotoXY+0x34>)
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	7013      	strb	r3, [r2, #0]
      y_cur = y;
 8000776:	4a05      	ldr	r2, [pc, #20]	; (800078c <LCD_GotoXY+0x38>)
 8000778:	79bb      	ldrb	r3, [r7, #6]
 800077a:	7013      	strb	r3, [r2, #0]
   }
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	200002b0 	.word	0x200002b0
 800078c:	200002b1 	.word	0x200002b1

08000790 <SD_init>:
//	}
//	return;
//};


void SD_init(){
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
	// One line of LCD contains 21 character

	char buf[22];
	sprintf(buf, "Loading SD card...");
 8000796:	463b      	mov	r3, r7
 8000798:	4907      	ldr	r1, [pc, #28]	; (80007b8 <SD_init+0x28>)
 800079a:	4618      	mov	r0, r3
 800079c:	f005 fa1e 	bl	8005bdc <siprintf>
	LCD_FStr(buf, 0, 0);
 80007a0:	463b      	mov	r3, r7
 80007a2:	2200      	movs	r2, #0
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ffb4 	bl	8000714 <LCD_FStr>
	LCD_Update();
 80007ac:	f7ff ff16 	bl	80005dc <LCD_Update>
	return;
 80007b0:	bf00      	nop
};
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	080064b4 	.word	0x080064b4

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c0:	f000 fc3c 	bl	800103c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c4:	f000 f810 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c8:	f000 f8fa 	bl	80009c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007cc:	f000 f8ce 	bl	800096c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007d0:	f000 f868 	bl	80008a4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80007d4:	f000 f894 	bl	8000900 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  LCD_Init();
 80007d8:	f7ff fed4 	bl	8000584 <LCD_Init>

  // Init SD card here
  SD_init();
 80007dc:	f7ff ffd8 	bl	8000790 <SD_init>
  // Start task here
//  xTaskCreate(task1, "task1", STACK_SIZE, (void *) NULL, 1, NULL);
//  xTaskCreate(task2, "task2", STACK_SIZE, (void *) NULL, 1, NULL);

  // Start scheduler here
  vTaskStartScheduler();
 80007e0:	f003 fd70 	bl	80042c4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <main+0x28>
	...

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b094      	sub	sp, #80	; 0x50
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0320 	add.w	r3, r7, #32
 80007f2:	2230      	movs	r2, #48	; 0x30
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f005 f9e8 	bl	8005bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	4b22      	ldr	r3, [pc, #136]	; (800089c <SystemClock_Config+0xb4>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000814:	4a21      	ldr	r2, [pc, #132]	; (800089c <SystemClock_Config+0xb4>)
 8000816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081a:	6413      	str	r3, [r2, #64]	; 0x40
 800081c:	4b1f      	ldr	r3, [pc, #124]	; (800089c <SystemClock_Config+0xb4>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000828:	2300      	movs	r3, #0
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <SystemClock_Config+0xb8>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <SystemClock_Config+0xb8>)
 8000832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000836:	6013      	str	r3, [r2, #0]
 8000838:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <SystemClock_Config+0xb8>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000844:	2302      	movs	r3, #2
 8000846:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000848:	2301      	movs	r3, #1
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084c:	2310      	movs	r3, #16
 800084e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000850:	2300      	movs	r3, #0
 8000852:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000854:	f107 0320 	add.w	r3, r7, #32
 8000858:	4618      	mov	r0, r3
 800085a:	f001 fb13 	bl	8001e84 <HAL_RCC_OscConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000864:	f000 f9d6 	bl	8000c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000868:	230f      	movs	r3, #15
 800086a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800086c:	2300      	movs	r3, #0
 800086e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f001 fd76 	bl	8002374 <HAL_RCC_ClockConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800088e:	f000 f9c1 	bl	8000c14 <Error_Handler>
  }
}
 8000892:	bf00      	nop
 8000894:	3750      	adds	r7, #80	; 0x50
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800
 80008a0:	40007000 	.word	0x40007000

080008a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008aa:	4a13      	ldr	r2, [pc, #76]	; (80008f8 <MX_I2C1_Init+0x54>)
 80008ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008b0:	4a12      	ldr	r2, [pc, #72]	; (80008fc <MX_I2C1_Init+0x58>)
 80008b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008e2:	f000 fe83 	bl	80015ec <HAL_I2C_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008ec:	f000 f992 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200002b4 	.word	0x200002b4
 80008f8:	40005400 	.word	0x40005400
 80008fc:	000186a0 	.word	0x000186a0

08000900 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000904:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_SPI1_Init+0x64>)
 8000906:	4a18      	ldr	r2, [pc, #96]	; (8000968 <MX_SPI1_Init+0x68>)
 8000908:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_SPI1_Init+0x64>)
 800090c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000910:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_SPI1_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_SPI1_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_SPI1_Init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_SPI1_Init+0x64>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_SPI1_Init+0x64>)
 800092c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000930:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_SPI1_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <MX_SPI1_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_SPI1_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <MX_SPI1_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_SPI1_Init+0x64>)
 800094c:	220a      	movs	r2, #10
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_SPI1_Init+0x64>)
 8000952:	f001 ff21 	bl	8002798 <HAL_SPI_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800095c:	f000 f95a 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000308 	.word	0x20000308
 8000968:	40013000 	.word	0x40013000

0800096c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000972:	4a12      	ldr	r2, [pc, #72]	; (80009bc <MX_USART2_UART_Init+0x50>)
 8000974:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800097c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 80009a4:	f002 fa2e 	bl	8002e04 <HAL_UART_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ae:	f000 f931 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000360 	.word	0x20000360
 80009bc:	40004400 	.word	0x40004400

080009c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	4b30      	ldr	r3, [pc, #192]	; (8000a9c <MX_GPIO_Init+0xdc>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a2f      	ldr	r2, [pc, #188]	; (8000a9c <MX_GPIO_Init+0xdc>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b2d      	ldr	r3, [pc, #180]	; (8000a9c <MX_GPIO_Init+0xdc>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b29      	ldr	r3, [pc, #164]	; (8000a9c <MX_GPIO_Init+0xdc>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a28      	ldr	r2, [pc, #160]	; (8000a9c <MX_GPIO_Init+0xdc>)
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b26      	ldr	r3, [pc, #152]	; (8000a9c <MX_GPIO_Init+0xdc>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <MX_GPIO_Init+0xdc>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a21      	ldr	r2, [pc, #132]	; (8000a9c <MX_GPIO_Init+0xdc>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <MX_GPIO_Init+0xdc>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a2a:	231f      	movs	r3, #31
 8000a2c:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4818      	ldr	r0, [pc, #96]	; (8000aa0 <MX_GPIO_Init+0xe0>)
 8000a40:	f000 fc20 	bl	8001284 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	210f      	movs	r1, #15
 8000a48:	2006      	movs	r0, #6
 8000a4a:	f000 fbf1 	bl	8001230 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a4e:	2006      	movs	r0, #6
 8000a50:	f000 fc0a 	bl	8001268 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 15, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	210f      	movs	r1, #15
 8000a58:	2007      	movs	r0, #7
 8000a5a:	f000 fbe9 	bl	8001230 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a5e:	2007      	movs	r0, #7
 8000a60:	f000 fc02 	bl	8001268 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 15, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	210f      	movs	r1, #15
 8000a68:	2008      	movs	r0, #8
 8000a6a:	f000 fbe1 	bl	8001230 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000a6e:	2008      	movs	r0, #8
 8000a70:	f000 fbfa 	bl	8001268 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 15, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	210f      	movs	r1, #15
 8000a78:	2009      	movs	r0, #9
 8000a7a:	f000 fbd9 	bl	8001230 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000a7e:	2009      	movs	r0, #9
 8000a80:	f000 fbf2 	bl	8001268 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 8000a84:	2200      	movs	r2, #0
 8000a86:	210f      	movs	r1, #15
 8000a88:	200a      	movs	r0, #10
 8000a8a:	f000 fbd1 	bl	8001230 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000a8e:	200a      	movs	r0, #10
 8000a90:	f000 fbea 	bl	8001268 <HAL_NVIC_EnableIRQ>

}
 8000a94:	bf00      	nop
 8000a96:	3720      	adds	r7, #32
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020c00 	.word	0x40020c00

08000aa4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b0c4      	sub	sp, #272	; 0x110
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4602      	mov	r2, r0
 8000aac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ab0:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000ab4:	801a      	strh	r2, [r3, #0]
	char buf[256];
	int button = -1;
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	switch(GPIO_Pin){
 8000abe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ac2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	2b80      	cmp	r3, #128	; 0x80
 8000aca:	d06c      	beq.n	8000ba6 <HAL_GPIO_EXTI_Callback+0x102>
 8000acc:	2b80      	cmp	r3, #128	; 0x80
 8000ace:	f300 8085 	bgt.w	8000bdc <HAL_GPIO_EXTI_Callback+0x138>
 8000ad2:	2b20      	cmp	r3, #32
 8000ad4:	dc48      	bgt.n	8000b68 <HAL_GPIO_EXTI_Callback+0xc4>
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f340 8080 	ble.w	8000bdc <HAL_GPIO_EXTI_Callback+0x138>
 8000adc:	3b01      	subs	r3, #1
 8000ade:	2b1f      	cmp	r3, #31
 8000ae0:	d87c      	bhi.n	8000bdc <HAL_GPIO_EXTI_Callback+0x138>
 8000ae2:	a201      	add	r2, pc, #4	; (adr r2, 8000ae8 <HAL_GPIO_EXTI_Callback+0x44>)
 8000ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae8:	08000b6f 	.word	0x08000b6f
 8000aec:	08000b77 	.word	0x08000b77
 8000af0:	08000bdd 	.word	0x08000bdd
 8000af4:	08000b7f 	.word	0x08000b7f
 8000af8:	08000bdd 	.word	0x08000bdd
 8000afc:	08000bdd 	.word	0x08000bdd
 8000b00:	08000bdd 	.word	0x08000bdd
 8000b04:	08000b87 	.word	0x08000b87
 8000b08:	08000bdd 	.word	0x08000bdd
 8000b0c:	08000bdd 	.word	0x08000bdd
 8000b10:	08000bdd 	.word	0x08000bdd
 8000b14:	08000bdd 	.word	0x08000bdd
 8000b18:	08000bdd 	.word	0x08000bdd
 8000b1c:	08000bdd 	.word	0x08000bdd
 8000b20:	08000bdd 	.word	0x08000bdd
 8000b24:	08000b8f 	.word	0x08000b8f
 8000b28:	08000bdd 	.word	0x08000bdd
 8000b2c:	08000bdd 	.word	0x08000bdd
 8000b30:	08000bdd 	.word	0x08000bdd
 8000b34:	08000bdd 	.word	0x08000bdd
 8000b38:	08000bdd 	.word	0x08000bdd
 8000b3c:	08000bdd 	.word	0x08000bdd
 8000b40:	08000bdd 	.word	0x08000bdd
 8000b44:	08000bdd 	.word	0x08000bdd
 8000b48:	08000bdd 	.word	0x08000bdd
 8000b4c:	08000bdd 	.word	0x08000bdd
 8000b50:	08000bdd 	.word	0x08000bdd
 8000b54:	08000bdd 	.word	0x08000bdd
 8000b58:	08000bdd 	.word	0x08000bdd
 8000b5c:	08000bdd 	.word	0x08000bdd
 8000b60:	08000bdd 	.word	0x08000bdd
 8000b64:	08000b97 	.word	0x08000b97
 8000b68:	2b40      	cmp	r3, #64	; 0x40
 8000b6a:	d018      	beq.n	8000b9e <HAL_GPIO_EXTI_Callback+0xfa>
			break;
		case GPIO_PIN_7:
			button = 7;
			break;
		default:
			return;
 8000b6c:	e036      	b.n	8000bdc <HAL_GPIO_EXTI_Callback+0x138>
			button = 1;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8000b74:	e01b      	b.n	8000bae <HAL_GPIO_EXTI_Callback+0x10a>
			button = 1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8000b7c:	e017      	b.n	8000bae <HAL_GPIO_EXTI_Callback+0x10a>
			button = 2;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8000b84:	e013      	b.n	8000bae <HAL_GPIO_EXTI_Callback+0x10a>
			button = 3;
 8000b86:	2303      	movs	r3, #3
 8000b88:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8000b8c:	e00f      	b.n	8000bae <HAL_GPIO_EXTI_Callback+0x10a>
			button = 4;
 8000b8e:	2304      	movs	r3, #4
 8000b90:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8000b94:	e00b      	b.n	8000bae <HAL_GPIO_EXTI_Callback+0x10a>
			button = 5;
 8000b96:	2305      	movs	r3, #5
 8000b98:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8000b9c:	e007      	b.n	8000bae <HAL_GPIO_EXTI_Callback+0x10a>
			button = 6;
 8000b9e:	2306      	movs	r3, #6
 8000ba0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8000ba4:	e003      	b.n	8000bae <HAL_GPIO_EXTI_Callback+0x10a>
			button = 7;
 8000ba6:	2307      	movs	r3, #7
 8000ba8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8000bac:	bf00      	nop
			break;
	}
	sprintf(buf,"External IO button %d pressed!\n\r", button);
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000bb6:	490c      	ldr	r1, [pc, #48]	; (8000be8 <HAL_GPIO_EXTI_Callback+0x144>)
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f005 f80f 	bl	8005bdc <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fb04 	bl	80001d0 <strlen>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	f107 010c 	add.w	r1, r7, #12
 8000bd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bd4:	4805      	ldr	r0, [pc, #20]	; (8000bec <HAL_GPIO_EXTI_Callback+0x148>)
 8000bd6:	f002 f962 	bl	8002e9e <HAL_UART_Transmit>
	return;
 8000bda:	e000      	b.n	8000bde <HAL_GPIO_EXTI_Callback+0x13a>
			return;
 8000bdc:	bf00      	nop
}
 8000bde:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	080064c8 	.word	0x080064c8
 8000bec:	20000360 	.word	0x20000360

08000bf0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d101      	bne.n	8000c06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c02:	f000 fa3d 	bl	8001080 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40001400 	.word	0x40001400

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <Error_Handler+0x8>
	...

08000c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	4a0f      	ldr	r2, [pc, #60]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c34:	6453      	str	r3, [r2, #68]	; 0x44
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a08      	ldr	r2, [pc, #32]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800

08000c70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a19      	ldr	r2, [pc, #100]	; (8000cf4 <HAL_I2C_MspInit+0x84>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d12b      	bne.n	8000cea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <HAL_I2C_MspInit+0x88>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a17      	ldr	r2, [pc, #92]	; (8000cf8 <HAL_I2C_MspInit+0x88>)
 8000c9c:	f043 0302 	orr.w	r3, r3, #2
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <HAL_I2C_MspInit+0x88>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cae:	23c0      	movs	r3, #192	; 0xc0
 8000cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb2:	2312      	movs	r3, #18
 8000cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480c      	ldr	r0, [pc, #48]	; (8000cfc <HAL_I2C_MspInit+0x8c>)
 8000cca:	f000 fadb 	bl	8001284 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <HAL_I2C_MspInit+0x88>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	4a08      	ldr	r2, [pc, #32]	; (8000cf8 <HAL_I2C_MspInit+0x88>)
 8000cd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_I2C_MspInit+0x88>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cea:	bf00      	nop
 8000cec:	3728      	adds	r7, #40	; 0x28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40005400 	.word	0x40005400
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020400 	.word	0x40020400

08000d00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a19      	ldr	r2, [pc, #100]	; (8000d84 <HAL_SPI_MspInit+0x84>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d12b      	bne.n	8000d7a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <HAL_SPI_MspInit+0x88>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a17      	ldr	r2, [pc, #92]	; (8000d88 <HAL_SPI_MspInit+0x88>)
 8000d2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <HAL_SPI_MspInit+0x88>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <HAL_SPI_MspInit+0x88>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a10      	ldr	r2, [pc, #64]	; (8000d88 <HAL_SPI_MspInit+0x88>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_SPI_MspInit+0x88>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d5a:	23e0      	movs	r3, #224	; 0xe0
 8000d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d6a:	2305      	movs	r3, #5
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	4805      	ldr	r0, [pc, #20]	; (8000d8c <HAL_SPI_MspInit+0x8c>)
 8000d76:	f000 fa85 	bl	8001284 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d7a:	bf00      	nop
 8000d7c:	3728      	adds	r7, #40	; 0x28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40013000 	.word	0x40013000
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020000 	.word	0x40020000

08000d90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a19      	ldr	r2, [pc, #100]	; (8000e14 <HAL_UART_MspInit+0x84>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d12b      	bne.n	8000e0a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <HAL_UART_MspInit+0x88>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	4a17      	ldr	r2, [pc, #92]	; (8000e18 <HAL_UART_MspInit+0x88>)
 8000dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <HAL_UART_MspInit+0x88>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <HAL_UART_MspInit+0x88>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a10      	ldr	r2, [pc, #64]	; (8000e18 <HAL_UART_MspInit+0x88>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <HAL_UART_MspInit+0x88>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dea:	230c      	movs	r3, #12
 8000dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df6:	2303      	movs	r3, #3
 8000df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dfa:	2307      	movs	r3, #7
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <HAL_UART_MspInit+0x8c>)
 8000e06:	f000 fa3d 	bl	8001284 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	; 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40004400 	.word	0x40004400
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020000 	.word	0x40020000

08000e20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08c      	sub	sp, #48	; 0x30
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	2037      	movs	r0, #55	; 0x37
 8000e36:	f000 f9fb 	bl	8001230 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e3a:	2037      	movs	r0, #55	; 0x37
 8000e3c:	f000 fa14 	bl	8001268 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <HAL_InitTick+0xa0>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	4a1d      	ldr	r2, [pc, #116]	; (8000ec0 <HAL_InitTick+0xa0>)
 8000e4a:	f043 0320 	orr.w	r3, r3, #32
 8000e4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e50:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <HAL_InitTick+0xa0>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	f003 0320 	and.w	r3, r3, #32
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e5c:	f107 0210 	add.w	r2, r7, #16
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f001 fc64 	bl	8002734 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e6c:	f001 fc3a 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 8000e70:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e74:	4a13      	ldr	r2, [pc, #76]	; (8000ec4 <HAL_InitTick+0xa4>)
 8000e76:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7a:	0c9b      	lsrs	r3, r3, #18
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <HAL_InitTick+0xa8>)
 8000e82:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <HAL_InitTick+0xac>)
 8000e84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <HAL_InitTick+0xa8>)
 8000e88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e8c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000e8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <HAL_InitTick+0xa8>)
 8000e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e92:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <HAL_InitTick+0xa8>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <HAL_InitTick+0xa8>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000ea0:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <HAL_InitTick+0xa8>)
 8000ea2:	f001 fd02 	bl	80028aa <HAL_TIM_Base_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d104      	bne.n	8000eb6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000eac:	4806      	ldr	r0, [pc, #24]	; (8000ec8 <HAL_InitTick+0xa8>)
 8000eae:	f001 fd55 	bl	800295c <HAL_TIM_Base_Start_IT>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e000      	b.n	8000eb8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3730      	adds	r7, #48	; 0x30
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	431bde83 	.word	0x431bde83
 8000ec8:	200003a4 	.word	0x200003a4
 8000ecc:	40001400 	.word	0x40001400

08000ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <NMI_Handler+0x4>

08000ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <HardFault_Handler+0x4>

08000edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <MemManage_Handler+0x4>

08000ee2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <BusFault_Handler+0x4>

08000ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <UsageFault_Handler+0x4>

08000eee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000f00:	2001      	movs	r0, #1
 8000f02:	f000 fb5b 	bl	80015bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000f0e:	2002      	movs	r0, #2
 8000f10:	f000 fb54 	bl	80015bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000f1c:	2004      	movs	r0, #4
 8000f1e:	f000 fb4d 	bl	80015bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000f2a:	2008      	movs	r0, #8
 8000f2c:	f000 fb46 	bl	80015bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000f38:	2010      	movs	r0, #16
 8000f3a:	f000 fb3f 	bl	80015bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <TIM7_IRQHandler+0x10>)
 8000f4a:	f001 fd77 	bl	8002a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200003a4 	.word	0x200003a4

08000f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f60:	4a14      	ldr	r2, [pc, #80]	; (8000fb4 <_sbrk+0x5c>)
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <_sbrk+0x60>)
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d102      	bne.n	8000f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <_sbrk+0x64>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <_sbrk+0x68>)
 8000f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d207      	bcs.n	8000f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f88:	f004 fde8 	bl	8005b5c <__errno>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	220c      	movs	r2, #12
 8000f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f96:	e009      	b.n	8000fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9e:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <_sbrk+0x64>)
 8000fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20020000 	.word	0x20020000
 8000fb8:	00000400 	.word	0x00000400
 8000fbc:	200003ec 	.word	0x200003ec
 8000fc0:	20013280 	.word	0x20013280

08000fc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <SystemInit+0x20>)
 8000fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fce:	4a05      	ldr	r2, [pc, #20]	; (8000fe4 <SystemInit+0x20>)
 8000fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001020 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fee:	490e      	ldr	r1, [pc, #56]	; (8001028 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ff0:	4a0e      	ldr	r2, [pc, #56]	; (800102c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001004:	4c0b      	ldr	r4, [pc, #44]	; (8001034 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001012:	f7ff ffd7 	bl	8000fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001016:	f004 fda7 	bl	8005b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101a:	f7ff fbcf 	bl	80007bc <main>
  bx  lr    
 800101e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001020:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001028:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800102c:	08006740 	.word	0x08006740
  ldr r2, =_sbss
 8001030:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001034:	20013280 	.word	0x20013280

08001038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC_IRQHandler>
	...

0800103c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <HAL_Init+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0d      	ldr	r2, [pc, #52]	; (800107c <HAL_Init+0x40>)
 8001046:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800104a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800104c:	4b0b      	ldr	r3, [pc, #44]	; (800107c <HAL_Init+0x40>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0a      	ldr	r2, [pc, #40]	; (800107c <HAL_Init+0x40>)
 8001052:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001056:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <HAL_Init+0x40>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a07      	ldr	r2, [pc, #28]	; (800107c <HAL_Init+0x40>)
 800105e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001062:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001064:	2003      	movs	r0, #3
 8001066:	f000 f8d8 	bl	800121a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106a:	200f      	movs	r0, #15
 800106c:	f7ff fed8 	bl	8000e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001070:	f7ff fdd6 	bl	8000c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023c00 	.word	0x40023c00

08001080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_IncTick+0x20>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_IncTick+0x24>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4413      	add	r3, r2
 8001090:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <HAL_IncTick+0x24>)
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000024 	.word	0x20000024
 80010a4:	200003f0 	.word	0x200003f0

080010a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <HAL_GetTick+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	200003f0 	.word	0x200003f0

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <__NVIC_EnableIRQ+0x38>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	; (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
         );
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ff4c 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
 800123c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001242:	f7ff ff61 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001246:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	68b9      	ldr	r1, [r7, #8]
 800124c:	6978      	ldr	r0, [r7, #20]
 800124e:	f7ff ffb1 	bl	80011b4 <NVIC_EncodePriority>
 8001252:	4602      	mov	r2, r0
 8001254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001258:	4611      	mov	r1, r2
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ff80 	bl	8001160 <__NVIC_SetPriority>
}
 8001260:	bf00      	nop
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff54 	bl	8001124 <__NVIC_EnableIRQ>
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001296:	2300      	movs	r3, #0
 8001298:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
 800129e:	e16b      	b.n	8001578 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012a0:	2201      	movs	r2, #1
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	f040 815a 	bne.w	8001572 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d005      	beq.n	80012d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d130      	bne.n	8001338 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	2203      	movs	r2, #3
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	68da      	ldr	r2, [r3, #12]
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800130c:	2201      	movs	r2, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	091b      	lsrs	r3, r3, #4
 8001322:	f003 0201 	and.w	r2, r3, #1
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	2b03      	cmp	r3, #3
 8001342:	d017      	beq.n	8001374 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	2203      	movs	r2, #3
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0303 	and.w	r3, r3, #3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d123      	bne.n	80013c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	08da      	lsrs	r2, r3, #3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3208      	adds	r2, #8
 8001388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	220f      	movs	r2, #15
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	08da      	lsrs	r2, r3, #3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3208      	adds	r2, #8
 80013c2:	69b9      	ldr	r1, [r7, #24]
 80013c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	2203      	movs	r2, #3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0203 	and.w	r2, r3, #3
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 80b4 	beq.w	8001572 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b60      	ldr	r3, [pc, #384]	; (8001590 <HAL_GPIO_Init+0x30c>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	4a5f      	ldr	r2, [pc, #380]	; (8001590 <HAL_GPIO_Init+0x30c>)
 8001414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001418:	6453      	str	r3, [r2, #68]	; 0x44
 800141a:	4b5d      	ldr	r3, [pc, #372]	; (8001590 <HAL_GPIO_Init+0x30c>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001426:	4a5b      	ldr	r2, [pc, #364]	; (8001594 <HAL_GPIO_Init+0x310>)
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	3302      	adds	r3, #2
 800142e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	220f      	movs	r2, #15
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a52      	ldr	r2, [pc, #328]	; (8001598 <HAL_GPIO_Init+0x314>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d02b      	beq.n	80014aa <HAL_GPIO_Init+0x226>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a51      	ldr	r2, [pc, #324]	; (800159c <HAL_GPIO_Init+0x318>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d025      	beq.n	80014a6 <HAL_GPIO_Init+0x222>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a50      	ldr	r2, [pc, #320]	; (80015a0 <HAL_GPIO_Init+0x31c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d01f      	beq.n	80014a2 <HAL_GPIO_Init+0x21e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4f      	ldr	r2, [pc, #316]	; (80015a4 <HAL_GPIO_Init+0x320>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d019      	beq.n	800149e <HAL_GPIO_Init+0x21a>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4e      	ldr	r2, [pc, #312]	; (80015a8 <HAL_GPIO_Init+0x324>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d013      	beq.n	800149a <HAL_GPIO_Init+0x216>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4d      	ldr	r2, [pc, #308]	; (80015ac <HAL_GPIO_Init+0x328>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d00d      	beq.n	8001496 <HAL_GPIO_Init+0x212>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4c      	ldr	r2, [pc, #304]	; (80015b0 <HAL_GPIO_Init+0x32c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d007      	beq.n	8001492 <HAL_GPIO_Init+0x20e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4b      	ldr	r2, [pc, #300]	; (80015b4 <HAL_GPIO_Init+0x330>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d101      	bne.n	800148e <HAL_GPIO_Init+0x20a>
 800148a:	2307      	movs	r3, #7
 800148c:	e00e      	b.n	80014ac <HAL_GPIO_Init+0x228>
 800148e:	2308      	movs	r3, #8
 8001490:	e00c      	b.n	80014ac <HAL_GPIO_Init+0x228>
 8001492:	2306      	movs	r3, #6
 8001494:	e00a      	b.n	80014ac <HAL_GPIO_Init+0x228>
 8001496:	2305      	movs	r3, #5
 8001498:	e008      	b.n	80014ac <HAL_GPIO_Init+0x228>
 800149a:	2304      	movs	r3, #4
 800149c:	e006      	b.n	80014ac <HAL_GPIO_Init+0x228>
 800149e:	2303      	movs	r3, #3
 80014a0:	e004      	b.n	80014ac <HAL_GPIO_Init+0x228>
 80014a2:	2302      	movs	r3, #2
 80014a4:	e002      	b.n	80014ac <HAL_GPIO_Init+0x228>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <HAL_GPIO_Init+0x228>
 80014aa:	2300      	movs	r3, #0
 80014ac:	69fa      	ldr	r2, [r7, #28]
 80014ae:	f002 0203 	and.w	r2, r2, #3
 80014b2:	0092      	lsls	r2, r2, #2
 80014b4:	4093      	lsls	r3, r2
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014bc:	4935      	ldr	r1, [pc, #212]	; (8001594 <HAL_GPIO_Init+0x310>)
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	089b      	lsrs	r3, r3, #2
 80014c2:	3302      	adds	r3, #2
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ca:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <HAL_GPIO_Init+0x334>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ee:	4a32      	ldr	r2, [pc, #200]	; (80015b8 <HAL_GPIO_Init+0x334>)
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014f4:	4b30      	ldr	r3, [pc, #192]	; (80015b8 <HAL_GPIO_Init+0x334>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001518:	4a27      	ldr	r2, [pc, #156]	; (80015b8 <HAL_GPIO_Init+0x334>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800151e:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <HAL_GPIO_Init+0x334>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001542:	4a1d      	ldr	r2, [pc, #116]	; (80015b8 <HAL_GPIO_Init+0x334>)
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001548:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <HAL_GPIO_Init+0x334>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800156c:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <HAL_GPIO_Init+0x334>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3301      	adds	r3, #1
 8001576:	61fb      	str	r3, [r7, #28]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	2b0f      	cmp	r3, #15
 800157c:	f67f ae90 	bls.w	80012a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3724      	adds	r7, #36	; 0x24
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	40013800 	.word	0x40013800
 8001598:	40020000 	.word	0x40020000
 800159c:	40020400 	.word	0x40020400
 80015a0:	40020800 	.word	0x40020800
 80015a4:	40020c00 	.word	0x40020c00
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40021400 	.word	0x40021400
 80015b0:	40021800 	.word	0x40021800
 80015b4:	40021c00 	.word	0x40021c00
 80015b8:	40013c00 	.word	0x40013c00

080015bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015c8:	695a      	ldr	r2, [r3, #20]
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	4013      	ands	r3, r2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d006      	beq.n	80015e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fa62 	bl	8000aa4 <HAL_GPIO_EXTI_Callback>
  }
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40013c00 	.word	0x40013c00

080015ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e12b      	b.n	8001856 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d106      	bne.n	8001618 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fb2c 	bl	8000c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2224      	movs	r2, #36	; 0x24
 800161c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0201 	bic.w	r2, r2, #1
 800162e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800163e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800164e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001650:	f001 f848 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 8001654:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	4a81      	ldr	r2, [pc, #516]	; (8001860 <HAL_I2C_Init+0x274>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d807      	bhi.n	8001670 <HAL_I2C_Init+0x84>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4a80      	ldr	r2, [pc, #512]	; (8001864 <HAL_I2C_Init+0x278>)
 8001664:	4293      	cmp	r3, r2
 8001666:	bf94      	ite	ls
 8001668:	2301      	movls	r3, #1
 800166a:	2300      	movhi	r3, #0
 800166c:	b2db      	uxtb	r3, r3
 800166e:	e006      	b.n	800167e <HAL_I2C_Init+0x92>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4a7d      	ldr	r2, [pc, #500]	; (8001868 <HAL_I2C_Init+0x27c>)
 8001674:	4293      	cmp	r3, r2
 8001676:	bf94      	ite	ls
 8001678:	2301      	movls	r3, #1
 800167a:	2300      	movhi	r3, #0
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e0e7      	b.n	8001856 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4a78      	ldr	r2, [pc, #480]	; (800186c <HAL_I2C_Init+0x280>)
 800168a:	fba2 2303 	umull	r2, r3, r2, r3
 800168e:	0c9b      	lsrs	r3, r3, #18
 8001690:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68ba      	ldr	r2, [r7, #8]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	4a6a      	ldr	r2, [pc, #424]	; (8001860 <HAL_I2C_Init+0x274>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d802      	bhi.n	80016c0 <HAL_I2C_Init+0xd4>
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	3301      	adds	r3, #1
 80016be:	e009      	b.n	80016d4 <HAL_I2C_Init+0xe8>
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016c6:	fb02 f303 	mul.w	r3, r2, r3
 80016ca:	4a69      	ldr	r2, [pc, #420]	; (8001870 <HAL_I2C_Init+0x284>)
 80016cc:	fba2 2303 	umull	r2, r3, r2, r3
 80016d0:	099b      	lsrs	r3, r3, #6
 80016d2:	3301      	adds	r3, #1
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	430b      	orrs	r3, r1
 80016da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	495c      	ldr	r1, [pc, #368]	; (8001860 <HAL_I2C_Init+0x274>)
 80016f0:	428b      	cmp	r3, r1
 80016f2:	d819      	bhi.n	8001728 <HAL_I2C_Init+0x13c>
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	1e59      	subs	r1, r3, #1
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001702:	1c59      	adds	r1, r3, #1
 8001704:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001708:	400b      	ands	r3, r1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00a      	beq.n	8001724 <HAL_I2C_Init+0x138>
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	1e59      	subs	r1, r3, #1
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	fbb1 f3f3 	udiv	r3, r1, r3
 800171c:	3301      	adds	r3, #1
 800171e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001722:	e051      	b.n	80017c8 <HAL_I2C_Init+0x1dc>
 8001724:	2304      	movs	r3, #4
 8001726:	e04f      	b.n	80017c8 <HAL_I2C_Init+0x1dc>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d111      	bne.n	8001754 <HAL_I2C_Init+0x168>
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	1e58      	subs	r0, r3, #1
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6859      	ldr	r1, [r3, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	440b      	add	r3, r1
 800173e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001742:	3301      	adds	r3, #1
 8001744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001748:	2b00      	cmp	r3, #0
 800174a:	bf0c      	ite	eq
 800174c:	2301      	moveq	r3, #1
 800174e:	2300      	movne	r3, #0
 8001750:	b2db      	uxtb	r3, r3
 8001752:	e012      	b.n	800177a <HAL_I2C_Init+0x18e>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1e58      	subs	r0, r3, #1
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6859      	ldr	r1, [r3, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	440b      	add	r3, r1
 8001762:	0099      	lsls	r1, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	fbb0 f3f3 	udiv	r3, r0, r3
 800176a:	3301      	adds	r3, #1
 800176c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001770:	2b00      	cmp	r3, #0
 8001772:	bf0c      	ite	eq
 8001774:	2301      	moveq	r3, #1
 8001776:	2300      	movne	r3, #0
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <HAL_I2C_Init+0x196>
 800177e:	2301      	movs	r3, #1
 8001780:	e022      	b.n	80017c8 <HAL_I2C_Init+0x1dc>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10e      	bne.n	80017a8 <HAL_I2C_Init+0x1bc>
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	1e58      	subs	r0, r3, #1
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6859      	ldr	r1, [r3, #4]
 8001792:	460b      	mov	r3, r1
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	440b      	add	r3, r1
 8001798:	fbb0 f3f3 	udiv	r3, r0, r3
 800179c:	3301      	adds	r3, #1
 800179e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017a6:	e00f      	b.n	80017c8 <HAL_I2C_Init+0x1dc>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	1e58      	subs	r0, r3, #1
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6859      	ldr	r1, [r3, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	0099      	lsls	r1, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80017be:	3301      	adds	r3, #1
 80017c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	6809      	ldr	r1, [r1, #0]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69da      	ldr	r2, [r3, #28]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6911      	ldr	r1, [r2, #16]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	68d2      	ldr	r2, [r2, #12]
 8001802:	4311      	orrs	r1, r2
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	430b      	orrs	r3, r1
 800180a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695a      	ldr	r2, [r3, #20]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0201 	orr.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2220      	movs	r2, #32
 8001842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	000186a0 	.word	0x000186a0
 8001864:	001e847f 	.word	0x001e847f
 8001868:	003d08ff 	.word	0x003d08ff
 800186c:	431bde83 	.word	0x431bde83
 8001870:	10624dd3 	.word	0x10624dd3

08001874 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af02      	add	r7, sp, #8
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	607a      	str	r2, [r7, #4]
 800187e:	461a      	mov	r2, r3
 8001880:	460b      	mov	r3, r1
 8001882:	817b      	strh	r3, [r7, #10]
 8001884:	4613      	mov	r3, r2
 8001886:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001888:	f7ff fc0e 	bl	80010a8 <HAL_GetTick>
 800188c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b20      	cmp	r3, #32
 8001898:	f040 80e0 	bne.w	8001a5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	2319      	movs	r3, #25
 80018a2:	2201      	movs	r2, #1
 80018a4:	4970      	ldr	r1, [pc, #448]	; (8001a68 <HAL_I2C_Master_Transmit+0x1f4>)
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 f964 	bl	8001b74 <I2C_WaitOnFlagUntilTimeout>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80018b2:	2302      	movs	r3, #2
 80018b4:	e0d3      	b.n	8001a5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d101      	bne.n	80018c4 <HAL_I2C_Master_Transmit+0x50>
 80018c0:	2302      	movs	r3, #2
 80018c2:	e0cc      	b.n	8001a5e <HAL_I2C_Master_Transmit+0x1ea>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d007      	beq.n	80018ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f042 0201 	orr.w	r2, r2, #1
 80018e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2221      	movs	r2, #33	; 0x21
 80018fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2210      	movs	r2, #16
 8001906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	893a      	ldrh	r2, [r7, #8]
 800191a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001920:	b29a      	uxth	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4a50      	ldr	r2, [pc, #320]	; (8001a6c <HAL_I2C_Master_Transmit+0x1f8>)
 800192a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800192c:	8979      	ldrh	r1, [r7, #10]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	6a3a      	ldr	r2, [r7, #32]
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f000 f89c 	bl	8001a70 <I2C_MasterRequestWrite>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e08d      	b.n	8001a5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001958:	e066      	b.n	8001a28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	6a39      	ldr	r1, [r7, #32]
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f000 f9de 	bl	8001d20 <I2C_WaitOnTXEFlagUntilTimeout>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00d      	beq.n	8001986 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	2b04      	cmp	r3, #4
 8001970:	d107      	bne.n	8001982 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001980:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e06b      	b.n	8001a5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	781a      	ldrb	r2, [r3, #0]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	3b01      	subs	r3, #1
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ae:	3b01      	subs	r3, #1
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d11b      	bne.n	80019fc <HAL_I2C_Master_Transmit+0x188>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d017      	beq.n	80019fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d0:	781a      	ldrb	r2, [r3, #0]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	1c5a      	adds	r2, r3, #1
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	3b01      	subs	r3, #1
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f4:	3b01      	subs	r3, #1
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	6a39      	ldr	r1, [r7, #32]
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f000 f9ce 	bl	8001da2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00d      	beq.n	8001a28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	2b04      	cmp	r3, #4
 8001a12:	d107      	bne.n	8001a24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e01a      	b.n	8001a5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d194      	bne.n	800195a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2220      	movs	r2, #32
 8001a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e000      	b.n	8001a5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a5c:	2302      	movs	r3, #2
  }
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	00100002 	.word	0x00100002
 8001a6c:	ffff0000 	.word	0xffff0000

08001a70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af02      	add	r7, sp, #8
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d006      	beq.n	8001a9a <I2C_MasterRequestWrite+0x2a>
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d003      	beq.n	8001a9a <I2C_MasterRequestWrite+0x2a>
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a98:	d108      	bne.n	8001aac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	e00b      	b.n	8001ac4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	2b12      	cmp	r3, #18
 8001ab2:	d107      	bne.n	8001ac4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ac2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f000 f84f 	bl	8001b74 <I2C_WaitOnFlagUntilTimeout>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00d      	beq.n	8001af8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aea:	d103      	bne.n	8001af4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e035      	b.n	8001b64 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b00:	d108      	bne.n	8001b14 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b02:	897b      	ldrh	r3, [r7, #10]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b10:	611a      	str	r2, [r3, #16]
 8001b12:	e01b      	b.n	8001b4c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b14:	897b      	ldrh	r3, [r7, #10]
 8001b16:	11db      	asrs	r3, r3, #7
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	f003 0306 	and.w	r3, r3, #6
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	f063 030f 	orn	r3, r3, #15
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	490e      	ldr	r1, [pc, #56]	; (8001b6c <I2C_MasterRequestWrite+0xfc>)
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f000 f875 	bl	8001c22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e010      	b.n	8001b64 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b42:	897b      	ldrh	r3, [r7, #10]
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	4907      	ldr	r1, [pc, #28]	; (8001b70 <I2C_MasterRequestWrite+0x100>)
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 f865 	bl	8001c22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	00010008 	.word	0x00010008
 8001b70:	00010002 	.word	0x00010002

08001b74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	4613      	mov	r3, r2
 8001b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b84:	e025      	b.n	8001bd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b8c:	d021      	beq.n	8001bd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b8e:	f7ff fa8b 	bl	80010a8 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d302      	bcc.n	8001ba4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d116      	bne.n	8001bd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2220      	movs	r2, #32
 8001bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f043 0220 	orr.w	r2, r3, #32
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e023      	b.n	8001c1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	0c1b      	lsrs	r3, r3, #16
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d10d      	bne.n	8001bf8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	43da      	mvns	r2, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	4013      	ands	r3, r2
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	bf0c      	ite	eq
 8001bee:	2301      	moveq	r3, #1
 8001bf0:	2300      	movne	r3, #0
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	e00c      	b.n	8001c12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	4013      	ands	r3, r2
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	bf0c      	ite	eq
 8001c0a:	2301      	moveq	r3, #1
 8001c0c:	2300      	movne	r3, #0
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d0b6      	beq.n	8001b86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b084      	sub	sp, #16
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c30:	e051      	b.n	8001cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c40:	d123      	bne.n	8001c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2220      	movs	r2, #32
 8001c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f043 0204 	orr.w	r2, r3, #4
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e046      	b.n	8001d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c90:	d021      	beq.n	8001cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c92:	f7ff fa09 	bl	80010a8 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d302      	bcc.n	8001ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d116      	bne.n	8001cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f043 0220 	orr.w	r2, r3, #32
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e020      	b.n	8001d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	0c1b      	lsrs	r3, r3, #16
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d10c      	bne.n	8001cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	4013      	ands	r3, r2
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	bf14      	ite	ne
 8001cf2:	2301      	movne	r3, #1
 8001cf4:	2300      	moveq	r3, #0
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	e00b      	b.n	8001d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	43da      	mvns	r2, r3
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	4013      	ands	r3, r2
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	bf14      	ite	ne
 8001d0c:	2301      	movne	r3, #1
 8001d0e:	2300      	moveq	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d18d      	bne.n	8001c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d2c:	e02d      	b.n	8001d8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 f878 	bl	8001e24 <I2C_IsAcknowledgeFailed>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e02d      	b.n	8001d9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d44:	d021      	beq.n	8001d8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d46:	f7ff f9af 	bl	80010a8 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d302      	bcc.n	8001d5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d116      	bne.n	8001d8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2220      	movs	r2, #32
 8001d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f043 0220 	orr.w	r2, r3, #32
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e007      	b.n	8001d9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d94:	2b80      	cmp	r3, #128	; 0x80
 8001d96:	d1ca      	bne.n	8001d2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001dae:	e02d      	b.n	8001e0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 f837 	bl	8001e24 <I2C_IsAcknowledgeFailed>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e02d      	b.n	8001e1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dc6:	d021      	beq.n	8001e0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dc8:	f7ff f96e 	bl	80010a8 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d302      	bcc.n	8001dde <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d116      	bne.n	8001e0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2220      	movs	r2, #32
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	f043 0220 	orr.w	r2, r3, #32
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e007      	b.n	8001e1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d1ca      	bne.n	8001db0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e3a:	d11b      	bne.n	8001e74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	f043 0204 	orr.w	r2, r3, #4
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
	...

08001e84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e267      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d075      	beq.n	8001f8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ea2:	4b88      	ldr	r3, [pc, #544]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d00c      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eae:	4b85      	ldr	r3, [pc, #532]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d112      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eba:	4b82      	ldr	r3, [pc, #520]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ec6:	d10b      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec8:	4b7e      	ldr	r3, [pc, #504]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d05b      	beq.n	8001f8c <HAL_RCC_OscConfig+0x108>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d157      	bne.n	8001f8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e242      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee8:	d106      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x74>
 8001eea:	4b76      	ldr	r3, [pc, #472]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a75      	ldr	r2, [pc, #468]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	e01d      	b.n	8001f34 <HAL_RCC_OscConfig+0xb0>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f00:	d10c      	bne.n	8001f1c <HAL_RCC_OscConfig+0x98>
 8001f02:	4b70      	ldr	r3, [pc, #448]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a6f      	ldr	r2, [pc, #444]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	4b6d      	ldr	r3, [pc, #436]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a6c      	ldr	r2, [pc, #432]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	e00b      	b.n	8001f34 <HAL_RCC_OscConfig+0xb0>
 8001f1c:	4b69      	ldr	r3, [pc, #420]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a68      	ldr	r2, [pc, #416]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b66      	ldr	r3, [pc, #408]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a65      	ldr	r2, [pc, #404]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d013      	beq.n	8001f64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7ff f8b4 	bl	80010a8 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f44:	f7ff f8b0 	bl	80010a8 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	; 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e207      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	4b5b      	ldr	r3, [pc, #364]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0xc0>
 8001f62:	e014      	b.n	8001f8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff f8a0 	bl	80010a8 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f6c:	f7ff f89c 	bl	80010a8 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b64      	cmp	r3, #100	; 0x64
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e1f3      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7e:	4b51      	ldr	r3, [pc, #324]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0xe8>
 8001f8a:	e000      	b.n	8001f8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d063      	beq.n	8002062 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f9a:	4b4a      	ldr	r3, [pc, #296]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00b      	beq.n	8001fbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa6:	4b47      	ldr	r3, [pc, #284]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d11c      	bne.n	8001fec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fb2:	4b44      	ldr	r3, [pc, #272]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d116      	bne.n	8001fec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fbe:	4b41      	ldr	r3, [pc, #260]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x152>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d001      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e1c7      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd6:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4937      	ldr	r1, [pc, #220]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fea:	e03a      	b.n	8002062 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d020      	beq.n	8002036 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff4:	4b34      	ldr	r3, [pc, #208]	; (80020c8 <HAL_RCC_OscConfig+0x244>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffa:	f7ff f855 	bl	80010a8 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002002:	f7ff f851 	bl	80010a8 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e1a8      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002014:	4b2b      	ldr	r3, [pc, #172]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0f0      	beq.n	8002002 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002020:	4b28      	ldr	r3, [pc, #160]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4925      	ldr	r1, [pc, #148]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8002030:	4313      	orrs	r3, r2
 8002032:	600b      	str	r3, [r1, #0]
 8002034:	e015      	b.n	8002062 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002036:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <HAL_RCC_OscConfig+0x244>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203c:	f7ff f834 	bl	80010a8 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002044:	f7ff f830 	bl	80010a8 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e187      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002056:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d036      	beq.n	80020dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d016      	beq.n	80020a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002076:	4b15      	ldr	r3, [pc, #84]	; (80020cc <HAL_RCC_OscConfig+0x248>)
 8002078:	2201      	movs	r2, #1
 800207a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207c:	f7ff f814 	bl	80010a8 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002084:	f7ff f810 	bl	80010a8 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e167      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_RCC_OscConfig+0x240>)
 8002098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0x200>
 80020a2:	e01b      	b.n	80020dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a4:	4b09      	ldr	r3, [pc, #36]	; (80020cc <HAL_RCC_OscConfig+0x248>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020aa:	f7fe fffd 	bl	80010a8 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b0:	e00e      	b.n	80020d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b2:	f7fe fff9 	bl	80010a8 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d907      	bls.n	80020d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e150      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
 80020c4:	40023800 	.word	0x40023800
 80020c8:	42470000 	.word	0x42470000
 80020cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d0:	4b88      	ldr	r3, [pc, #544]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 80020d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1ea      	bne.n	80020b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 8097 	beq.w	8002218 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ee:	4b81      	ldr	r3, [pc, #516]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10f      	bne.n	800211a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	4b7d      	ldr	r3, [pc, #500]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	4a7c      	ldr	r2, [pc, #496]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002108:	6413      	str	r3, [r2, #64]	; 0x40
 800210a:	4b7a      	ldr	r3, [pc, #488]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002116:	2301      	movs	r3, #1
 8002118:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211a:	4b77      	ldr	r3, [pc, #476]	; (80022f8 <HAL_RCC_OscConfig+0x474>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002122:	2b00      	cmp	r3, #0
 8002124:	d118      	bne.n	8002158 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002126:	4b74      	ldr	r3, [pc, #464]	; (80022f8 <HAL_RCC_OscConfig+0x474>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a73      	ldr	r2, [pc, #460]	; (80022f8 <HAL_RCC_OscConfig+0x474>)
 800212c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002132:	f7fe ffb9 	bl	80010a8 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800213a:	f7fe ffb5 	bl	80010a8 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e10c      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214c:	4b6a      	ldr	r3, [pc, #424]	; (80022f8 <HAL_RCC_OscConfig+0x474>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d106      	bne.n	800216e <HAL_RCC_OscConfig+0x2ea>
 8002160:	4b64      	ldr	r3, [pc, #400]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002164:	4a63      	ldr	r2, [pc, #396]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	6713      	str	r3, [r2, #112]	; 0x70
 800216c:	e01c      	b.n	80021a8 <HAL_RCC_OscConfig+0x324>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b05      	cmp	r3, #5
 8002174:	d10c      	bne.n	8002190 <HAL_RCC_OscConfig+0x30c>
 8002176:	4b5f      	ldr	r3, [pc, #380]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217a:	4a5e      	ldr	r2, [pc, #376]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 800217c:	f043 0304 	orr.w	r3, r3, #4
 8002180:	6713      	str	r3, [r2, #112]	; 0x70
 8002182:	4b5c      	ldr	r3, [pc, #368]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002186:	4a5b      	ldr	r2, [pc, #364]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	6713      	str	r3, [r2, #112]	; 0x70
 800218e:	e00b      	b.n	80021a8 <HAL_RCC_OscConfig+0x324>
 8002190:	4b58      	ldr	r3, [pc, #352]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002194:	4a57      	ldr	r2, [pc, #348]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002196:	f023 0301 	bic.w	r3, r3, #1
 800219a:	6713      	str	r3, [r2, #112]	; 0x70
 800219c:	4b55      	ldr	r3, [pc, #340]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	4a54      	ldr	r2, [pc, #336]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 80021a2:	f023 0304 	bic.w	r3, r3, #4
 80021a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d015      	beq.n	80021dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b0:	f7fe ff7a 	bl	80010a8 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b8:	f7fe ff76 	bl	80010a8 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e0cb      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ce:	4b49      	ldr	r3, [pc, #292]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 80021d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0ee      	beq.n	80021b8 <HAL_RCC_OscConfig+0x334>
 80021da:	e014      	b.n	8002206 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021dc:	f7fe ff64 	bl	80010a8 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e4:	f7fe ff60 	bl	80010a8 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e0b5      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fa:	4b3e      	ldr	r3, [pc, #248]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1ee      	bne.n	80021e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002206:	7dfb      	ldrb	r3, [r7, #23]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d105      	bne.n	8002218 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800220c:	4b39      	ldr	r3, [pc, #228]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	4a38      	ldr	r2, [pc, #224]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002216:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 80a1 	beq.w	8002364 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002222:	4b34      	ldr	r3, [pc, #208]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b08      	cmp	r3, #8
 800222c:	d05c      	beq.n	80022e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d141      	bne.n	80022ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002236:	4b31      	ldr	r3, [pc, #196]	; (80022fc <HAL_RCC_OscConfig+0x478>)
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7fe ff34 	bl	80010a8 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002244:	f7fe ff30 	bl	80010a8 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e087      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002256:	4b27      	ldr	r3, [pc, #156]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69da      	ldr	r2, [r3, #28]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	019b      	lsls	r3, r3, #6
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	085b      	lsrs	r3, r3, #1
 800227a:	3b01      	subs	r3, #1
 800227c:	041b      	lsls	r3, r3, #16
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002284:	061b      	lsls	r3, r3, #24
 8002286:	491b      	ldr	r1, [pc, #108]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002288:	4313      	orrs	r3, r2
 800228a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800228c:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <HAL_RCC_OscConfig+0x478>)
 800228e:	2201      	movs	r2, #1
 8002290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002292:	f7fe ff09 	bl	80010a8 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800229a:	f7fe ff05 	bl	80010a8 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e05c      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0f0      	beq.n	800229a <HAL_RCC_OscConfig+0x416>
 80022b8:	e054      	b.n	8002364 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <HAL_RCC_OscConfig+0x478>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7fe fef2 	bl	80010a8 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c8:	f7fe feee 	bl	80010a8 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e045      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_OscConfig+0x470>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x444>
 80022e6:	e03d      	b.n	8002364 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d107      	bne.n	8002300 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e038      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40007000 	.word	0x40007000
 80022fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002300:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <HAL_RCC_OscConfig+0x4ec>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d028      	beq.n	8002360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002318:	429a      	cmp	r2, r3
 800231a:	d121      	bne.n	8002360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002326:	429a      	cmp	r2, r3
 8002328:	d11a      	bne.n	8002360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002330:	4013      	ands	r3, r2
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002336:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002338:	4293      	cmp	r3, r2
 800233a:	d111      	bne.n	8002360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	085b      	lsrs	r3, r3, #1
 8002348:	3b01      	subs	r3, #1
 800234a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800234c:	429a      	cmp	r2, r3
 800234e:	d107      	bne.n	8002360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800235c:	429a      	cmp	r2, r3
 800235e:	d001      	beq.n	8002364 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40023800 	.word	0x40023800

08002374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0cc      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002388:	4b68      	ldr	r3, [pc, #416]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d90c      	bls.n	80023b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002396:	4b65      	ldr	r3, [pc, #404]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800239e:	4b63      	ldr	r3, [pc, #396]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0b8      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d020      	beq.n	80023fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c8:	4b59      	ldr	r3, [pc, #356]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	4a58      	ldr	r2, [pc, #352]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023e0:	4b53      	ldr	r3, [pc, #332]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	4a52      	ldr	r2, [pc, #328]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ec:	4b50      	ldr	r3, [pc, #320]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	494d      	ldr	r1, [pc, #308]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d044      	beq.n	8002494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d107      	bne.n	8002422 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002412:	4b47      	ldr	r3, [pc, #284]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d119      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e07f      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d003      	beq.n	8002432 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800242e:	2b03      	cmp	r3, #3
 8002430:	d107      	bne.n	8002442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002432:	4b3f      	ldr	r3, [pc, #252]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d109      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e06f      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002442:	4b3b      	ldr	r3, [pc, #236]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e067      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002452:	4b37      	ldr	r3, [pc, #220]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f023 0203 	bic.w	r2, r3, #3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	4934      	ldr	r1, [pc, #208]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	4313      	orrs	r3, r2
 8002462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002464:	f7fe fe20 	bl	80010a8 <HAL_GetTick>
 8002468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	e00a      	b.n	8002482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246c:	f7fe fe1c 	bl	80010a8 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	; 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e04f      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	4b2b      	ldr	r3, [pc, #172]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 020c 	and.w	r2, r3, #12
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	429a      	cmp	r2, r3
 8002492:	d1eb      	bne.n	800246c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002494:	4b25      	ldr	r3, [pc, #148]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d20c      	bcs.n	80024bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a2:	4b22      	ldr	r3, [pc, #136]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024aa:	4b20      	ldr	r3, [pc, #128]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e032      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d008      	beq.n	80024da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c8:	4b19      	ldr	r3, [pc, #100]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	4916      	ldr	r1, [pc, #88]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d009      	beq.n	80024fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024e6:	4b12      	ldr	r3, [pc, #72]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	490e      	ldr	r1, [pc, #56]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024fa:	f000 f821 	bl	8002540 <HAL_RCC_GetSysClockFreq>
 80024fe:	4602      	mov	r2, r0
 8002500:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	490a      	ldr	r1, [pc, #40]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 800250c:	5ccb      	ldrb	r3, [r1, r3]
 800250e:	fa22 f303 	lsr.w	r3, r2, r3
 8002512:	4a09      	ldr	r2, [pc, #36]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <HAL_RCC_ClockConfig+0x1c8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe fc80 	bl	8000e20 <HAL_InitTick>

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40023c00 	.word	0x40023c00
 8002530:	40023800 	.word	0x40023800
 8002534:	080066e4 	.word	0x080066e4
 8002538:	2000001c 	.word	0x2000001c
 800253c:	20000020 	.word	0x20000020

08002540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002544:	b090      	sub	sp, #64	; 0x40
 8002546:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	637b      	str	r3, [r7, #52]	; 0x34
 800254c:	2300      	movs	r3, #0
 800254e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002550:	2300      	movs	r3, #0
 8002552:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002558:	4b59      	ldr	r3, [pc, #356]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 030c 	and.w	r3, r3, #12
 8002560:	2b08      	cmp	r3, #8
 8002562:	d00d      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0x40>
 8002564:	2b08      	cmp	r3, #8
 8002566:	f200 80a1 	bhi.w	80026ac <HAL_RCC_GetSysClockFreq+0x16c>
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0x34>
 800256e:	2b04      	cmp	r3, #4
 8002570:	d003      	beq.n	800257a <HAL_RCC_GetSysClockFreq+0x3a>
 8002572:	e09b      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002574:	4b53      	ldr	r3, [pc, #332]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002576:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002578:	e09b      	b.n	80026b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800257a:	4b53      	ldr	r3, [pc, #332]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800257c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800257e:	e098      	b.n	80026b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002580:	4b4f      	ldr	r3, [pc, #316]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002588:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800258a:	4b4d      	ldr	r3, [pc, #308]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d028      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002596:	4b4a      	ldr	r3, [pc, #296]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	099b      	lsrs	r3, r3, #6
 800259c:	2200      	movs	r2, #0
 800259e:	623b      	str	r3, [r7, #32]
 80025a0:	627a      	str	r2, [r7, #36]	; 0x24
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80025a8:	2100      	movs	r1, #0
 80025aa:	4b47      	ldr	r3, [pc, #284]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80025ac:	fb03 f201 	mul.w	r2, r3, r1
 80025b0:	2300      	movs	r3, #0
 80025b2:	fb00 f303 	mul.w	r3, r0, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	4a43      	ldr	r2, [pc, #268]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80025ba:	fba0 1202 	umull	r1, r2, r0, r2
 80025be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025c0:	460a      	mov	r2, r1
 80025c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80025c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025c6:	4413      	add	r3, r2
 80025c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025cc:	2200      	movs	r2, #0
 80025ce:	61bb      	str	r3, [r7, #24]
 80025d0:	61fa      	str	r2, [r7, #28]
 80025d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025da:	f7fd fe51 	bl	8000280 <__aeabi_uldivmod>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4613      	mov	r3, r2
 80025e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025e6:	e053      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e8:	4b35      	ldr	r3, [pc, #212]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	099b      	lsrs	r3, r3, #6
 80025ee:	2200      	movs	r2, #0
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	617a      	str	r2, [r7, #20]
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025fa:	f04f 0b00 	mov.w	fp, #0
 80025fe:	4652      	mov	r2, sl
 8002600:	465b      	mov	r3, fp
 8002602:	f04f 0000 	mov.w	r0, #0
 8002606:	f04f 0100 	mov.w	r1, #0
 800260a:	0159      	lsls	r1, r3, #5
 800260c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002610:	0150      	lsls	r0, r2, #5
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	ebb2 080a 	subs.w	r8, r2, sl
 800261a:	eb63 090b 	sbc.w	r9, r3, fp
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800262a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800262e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002632:	ebb2 0408 	subs.w	r4, r2, r8
 8002636:	eb63 0509 	sbc.w	r5, r3, r9
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	00eb      	lsls	r3, r5, #3
 8002644:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002648:	00e2      	lsls	r2, r4, #3
 800264a:	4614      	mov	r4, r2
 800264c:	461d      	mov	r5, r3
 800264e:	eb14 030a 	adds.w	r3, r4, sl
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	eb45 030b 	adc.w	r3, r5, fp
 8002658:	607b      	str	r3, [r7, #4]
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002666:	4629      	mov	r1, r5
 8002668:	028b      	lsls	r3, r1, #10
 800266a:	4621      	mov	r1, r4
 800266c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002670:	4621      	mov	r1, r4
 8002672:	028a      	lsls	r2, r1, #10
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267a:	2200      	movs	r2, #0
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	60fa      	str	r2, [r7, #12]
 8002680:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002684:	f7fd fdfc 	bl	8000280 <__aeabi_uldivmod>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4613      	mov	r3, r2
 800268e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	0c1b      	lsrs	r3, r3, #16
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	3301      	adds	r3, #1
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80026a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026aa:	e002      	b.n	80026b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80026ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3740      	adds	r7, #64	; 0x40
 80026b8:	46bd      	mov	sp, r7
 80026ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800
 80026c4:	00f42400 	.word	0x00f42400
 80026c8:	017d7840 	.word	0x017d7840

080026cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80026d2:	681b      	ldr	r3, [r3, #0]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	2000001c 	.word	0x2000001c

080026e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026e8:	f7ff fff0 	bl	80026cc <HAL_RCC_GetHCLKFreq>
 80026ec:	4602      	mov	r2, r0
 80026ee:	4b05      	ldr	r3, [pc, #20]	; (8002704 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	0a9b      	lsrs	r3, r3, #10
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	4903      	ldr	r1, [pc, #12]	; (8002708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026fa:	5ccb      	ldrb	r3, [r1, r3]
 80026fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002700:	4618      	mov	r0, r3
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40023800 	.word	0x40023800
 8002708:	080066f4 	.word	0x080066f4

0800270c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002710:	f7ff ffdc 	bl	80026cc <HAL_RCC_GetHCLKFreq>
 8002714:	4602      	mov	r2, r0
 8002716:	4b05      	ldr	r3, [pc, #20]	; (800272c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	0b5b      	lsrs	r3, r3, #13
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	4903      	ldr	r1, [pc, #12]	; (8002730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002722:	5ccb      	ldrb	r3, [r1, r3]
 8002724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002728:	4618      	mov	r0, r3
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40023800 	.word	0x40023800
 8002730:	080066f4 	.word	0x080066f4

08002734 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	220f      	movs	r2, #15
 8002742:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002744:	4b12      	ldr	r3, [pc, #72]	; (8002790 <HAL_RCC_GetClockConfig+0x5c>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 0203 	and.w	r2, r3, #3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002750:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <HAL_RCC_GetClockConfig+0x5c>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800275c:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <HAL_RCC_GetClockConfig+0x5c>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002768:	4b09      	ldr	r3, [pc, #36]	; (8002790 <HAL_RCC_GetClockConfig+0x5c>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	08db      	lsrs	r3, r3, #3
 800276e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002776:	4b07      	ldr	r3, [pc, #28]	; (8002794 <HAL_RCC_GetClockConfig+0x60>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0207 	and.w	r2, r3, #7
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	601a      	str	r2, [r3, #0]
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40023800 	.word	0x40023800
 8002794:	40023c00 	.word	0x40023c00

08002798 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e07b      	b.n	80028a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d108      	bne.n	80027c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027ba:	d009      	beq.n	80027d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	61da      	str	r2, [r3, #28]
 80027c2:	e005      	b.n	80027d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d106      	bne.n	80027f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7fe fa88 	bl	8000d00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002806:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002854:	ea42 0103 	orr.w	r1, r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	0c1b      	lsrs	r3, r3, #16
 800286e:	f003 0104 	and.w	r1, r3, #4
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	f003 0210 	and.w	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	69da      	ldr	r2, [r3, #28]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002890:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e041      	b.n	8002940 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d106      	bne.n	80028d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f839 	bl	8002948 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2202      	movs	r2, #2
 80028da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3304      	adds	r3, #4
 80028e6:	4619      	mov	r1, r3
 80028e8:	4610      	mov	r0, r2
 80028ea:	f000 f9d7 	bl	8002c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b01      	cmp	r3, #1
 800296e:	d001      	beq.n	8002974 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e04e      	b.n	8002a12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a23      	ldr	r2, [pc, #140]	; (8002a20 <HAL_TIM_Base_Start_IT+0xc4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d022      	beq.n	80029dc <HAL_TIM_Base_Start_IT+0x80>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299e:	d01d      	beq.n	80029dc <HAL_TIM_Base_Start_IT+0x80>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a1f      	ldr	r2, [pc, #124]	; (8002a24 <HAL_TIM_Base_Start_IT+0xc8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d018      	beq.n	80029dc <HAL_TIM_Base_Start_IT+0x80>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a1e      	ldr	r2, [pc, #120]	; (8002a28 <HAL_TIM_Base_Start_IT+0xcc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d013      	beq.n	80029dc <HAL_TIM_Base_Start_IT+0x80>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a1c      	ldr	r2, [pc, #112]	; (8002a2c <HAL_TIM_Base_Start_IT+0xd0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00e      	beq.n	80029dc <HAL_TIM_Base_Start_IT+0x80>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a1b      	ldr	r2, [pc, #108]	; (8002a30 <HAL_TIM_Base_Start_IT+0xd4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d009      	beq.n	80029dc <HAL_TIM_Base_Start_IT+0x80>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a19      	ldr	r2, [pc, #100]	; (8002a34 <HAL_TIM_Base_Start_IT+0xd8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d004      	beq.n	80029dc <HAL_TIM_Base_Start_IT+0x80>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a18      	ldr	r2, [pc, #96]	; (8002a38 <HAL_TIM_Base_Start_IT+0xdc>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d111      	bne.n	8002a00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2b06      	cmp	r3, #6
 80029ec:	d010      	beq.n	8002a10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f042 0201 	orr.w	r2, r2, #1
 80029fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029fe:	e007      	b.n	8002a10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0201 	orr.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40010000 	.word	0x40010000
 8002a24:	40000400 	.word	0x40000400
 8002a28:	40000800 	.word	0x40000800
 8002a2c:	40000c00 	.word	0x40000c00
 8002a30:	40010400 	.word	0x40010400
 8002a34:	40014000 	.word	0x40014000
 8002a38:	40001800 	.word	0x40001800

08002a3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d122      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d11b      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0202 	mvn.w	r2, #2
 8002a68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f8ee 	bl	8002c60 <HAL_TIM_IC_CaptureCallback>
 8002a84:	e005      	b.n	8002a92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f8e0 	bl	8002c4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f8f1 	bl	8002c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d122      	bne.n	8002aec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d11b      	bne.n	8002aec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0204 	mvn.w	r2, #4
 8002abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f8c4 	bl	8002c60 <HAL_TIM_IC_CaptureCallback>
 8002ad8:	e005      	b.n	8002ae6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f8b6 	bl	8002c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f8c7 	bl	8002c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d122      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d11b      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0208 	mvn.w	r2, #8
 8002b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2204      	movs	r2, #4
 8002b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f89a 	bl	8002c60 <HAL_TIM_IC_CaptureCallback>
 8002b2c:	e005      	b.n	8002b3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f88c 	bl	8002c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f89d 	bl	8002c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	2b10      	cmp	r3, #16
 8002b4c:	d122      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	2b10      	cmp	r3, #16
 8002b5a:	d11b      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f06f 0210 	mvn.w	r2, #16
 8002b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2208      	movs	r2, #8
 8002b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f870 	bl	8002c60 <HAL_TIM_IC_CaptureCallback>
 8002b80:	e005      	b.n	8002b8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f862 	bl	8002c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f873 	bl	8002c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d10e      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d107      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0201 	mvn.w	r2, #1
 8002bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fe f818 	bl	8000bf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bca:	2b80      	cmp	r3, #128	; 0x80
 8002bcc:	d10e      	bne.n	8002bec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd8:	2b80      	cmp	r3, #128	; 0x80
 8002bda:	d107      	bne.n	8002bec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f902 	bl	8002df0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf6:	2b40      	cmp	r3, #64	; 0x40
 8002bf8:	d10e      	bne.n	8002c18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c04:	2b40      	cmp	r3, #64	; 0x40
 8002c06:	d107      	bne.n	8002c18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f838 	bl	8002c88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	2b20      	cmp	r3, #32
 8002c24:	d10e      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b20      	cmp	r3, #32
 8002c32:	d107      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f06f 0220 	mvn.w	r2, #32
 8002c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f8cc 	bl	8002ddc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a40      	ldr	r2, [pc, #256]	; (8002db0 <TIM_Base_SetConfig+0x114>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d013      	beq.n	8002cdc <TIM_Base_SetConfig+0x40>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cba:	d00f      	beq.n	8002cdc <TIM_Base_SetConfig+0x40>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a3d      	ldr	r2, [pc, #244]	; (8002db4 <TIM_Base_SetConfig+0x118>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d00b      	beq.n	8002cdc <TIM_Base_SetConfig+0x40>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a3c      	ldr	r2, [pc, #240]	; (8002db8 <TIM_Base_SetConfig+0x11c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d007      	beq.n	8002cdc <TIM_Base_SetConfig+0x40>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a3b      	ldr	r2, [pc, #236]	; (8002dbc <TIM_Base_SetConfig+0x120>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d003      	beq.n	8002cdc <TIM_Base_SetConfig+0x40>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a3a      	ldr	r2, [pc, #232]	; (8002dc0 <TIM_Base_SetConfig+0x124>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d108      	bne.n	8002cee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a2f      	ldr	r2, [pc, #188]	; (8002db0 <TIM_Base_SetConfig+0x114>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d02b      	beq.n	8002d4e <TIM_Base_SetConfig+0xb2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfc:	d027      	beq.n	8002d4e <TIM_Base_SetConfig+0xb2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a2c      	ldr	r2, [pc, #176]	; (8002db4 <TIM_Base_SetConfig+0x118>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d023      	beq.n	8002d4e <TIM_Base_SetConfig+0xb2>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a2b      	ldr	r2, [pc, #172]	; (8002db8 <TIM_Base_SetConfig+0x11c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d01f      	beq.n	8002d4e <TIM_Base_SetConfig+0xb2>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a2a      	ldr	r2, [pc, #168]	; (8002dbc <TIM_Base_SetConfig+0x120>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d01b      	beq.n	8002d4e <TIM_Base_SetConfig+0xb2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a29      	ldr	r2, [pc, #164]	; (8002dc0 <TIM_Base_SetConfig+0x124>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d017      	beq.n	8002d4e <TIM_Base_SetConfig+0xb2>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a28      	ldr	r2, [pc, #160]	; (8002dc4 <TIM_Base_SetConfig+0x128>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d013      	beq.n	8002d4e <TIM_Base_SetConfig+0xb2>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a27      	ldr	r2, [pc, #156]	; (8002dc8 <TIM_Base_SetConfig+0x12c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d00f      	beq.n	8002d4e <TIM_Base_SetConfig+0xb2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a26      	ldr	r2, [pc, #152]	; (8002dcc <TIM_Base_SetConfig+0x130>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00b      	beq.n	8002d4e <TIM_Base_SetConfig+0xb2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a25      	ldr	r2, [pc, #148]	; (8002dd0 <TIM_Base_SetConfig+0x134>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d007      	beq.n	8002d4e <TIM_Base_SetConfig+0xb2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a24      	ldr	r2, [pc, #144]	; (8002dd4 <TIM_Base_SetConfig+0x138>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d003      	beq.n	8002d4e <TIM_Base_SetConfig+0xb2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a23      	ldr	r2, [pc, #140]	; (8002dd8 <TIM_Base_SetConfig+0x13c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d108      	bne.n	8002d60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a0a      	ldr	r2, [pc, #40]	; (8002db0 <TIM_Base_SetConfig+0x114>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d003      	beq.n	8002d94 <TIM_Base_SetConfig+0xf8>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a0c      	ldr	r2, [pc, #48]	; (8002dc0 <TIM_Base_SetConfig+0x124>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d103      	bne.n	8002d9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	615a      	str	r2, [r3, #20]
}
 8002da2:	bf00      	nop
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40010000 	.word	0x40010000
 8002db4:	40000400 	.word	0x40000400
 8002db8:	40000800 	.word	0x40000800
 8002dbc:	40000c00 	.word	0x40000c00
 8002dc0:	40010400 	.word	0x40010400
 8002dc4:	40014000 	.word	0x40014000
 8002dc8:	40014400 	.word	0x40014400
 8002dcc:	40014800 	.word	0x40014800
 8002dd0:	40001800 	.word	0x40001800
 8002dd4:	40001c00 	.word	0x40001c00
 8002dd8:	40002000 	.word	0x40002000

08002ddc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e03f      	b.n	8002e96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d106      	bne.n	8002e30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7fd ffb0 	bl	8000d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2224      	movs	r2, #36	; 0x24
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f929 	bl	80030a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695a      	ldr	r2, [r3, #20]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b08a      	sub	sp, #40	; 0x28
 8002ea2:	af02      	add	r7, sp, #8
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	603b      	str	r3, [r7, #0]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b20      	cmp	r3, #32
 8002ebc:	d17c      	bne.n	8002fb8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <HAL_UART_Transmit+0x2c>
 8002ec4:	88fb      	ldrh	r3, [r7, #6]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e075      	b.n	8002fba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_UART_Transmit+0x3e>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e06e      	b.n	8002fba <HAL_UART_Transmit+0x11c>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2221      	movs	r2, #33	; 0x21
 8002eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ef2:	f7fe f8d9 	bl	80010a8 <HAL_GetTick>
 8002ef6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	88fa      	ldrh	r2, [r7, #6]
 8002efc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	88fa      	ldrh	r2, [r7, #6]
 8002f02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f0c:	d108      	bne.n	8002f20 <HAL_UART_Transmit+0x82>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d104      	bne.n	8002f20 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	e003      	b.n	8002f28 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f30:	e02a      	b.n	8002f88 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	2180      	movs	r1, #128	; 0x80
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 f840 	bl	8002fc2 <UART_WaitOnFlagUntilTimeout>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e036      	b.n	8002fba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10b      	bne.n	8002f6a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	3302      	adds	r3, #2
 8002f66:	61bb      	str	r3, [r7, #24]
 8002f68:	e007      	b.n	8002f7a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	781a      	ldrb	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	3301      	adds	r3, #1
 8002f78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1cf      	bne.n	8002f32 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2140      	movs	r1, #64	; 0x40
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 f810 	bl	8002fc2 <UART_WaitOnFlagUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e006      	b.n	8002fba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	e000      	b.n	8002fba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002fb8:	2302      	movs	r3, #2
  }
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3720      	adds	r7, #32
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b090      	sub	sp, #64	; 0x40
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	60f8      	str	r0, [r7, #12]
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	603b      	str	r3, [r7, #0]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fd2:	e050      	b.n	8003076 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fda:	d04c      	beq.n	8003076 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d007      	beq.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fe2:	f7fe f861 	bl	80010a8 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d241      	bcs.n	8003076 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	330c      	adds	r3, #12
 8002ff8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffc:	e853 3f00 	ldrex	r3, [r3]
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003008:	63fb      	str	r3, [r7, #60]	; 0x3c
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	330c      	adds	r3, #12
 8003010:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003012:	637a      	str	r2, [r7, #52]	; 0x34
 8003014:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003016:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003018:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800301a:	e841 2300 	strex	r3, r2, [r1]
 800301e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1e5      	bne.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	3314      	adds	r3, #20
 800302c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	e853 3f00 	ldrex	r3, [r3]
 8003034:	613b      	str	r3, [r7, #16]
   return(result);
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f023 0301 	bic.w	r3, r3, #1
 800303c:	63bb      	str	r3, [r7, #56]	; 0x38
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	3314      	adds	r3, #20
 8003044:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003046:	623a      	str	r2, [r7, #32]
 8003048:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304a:	69f9      	ldr	r1, [r7, #28]
 800304c:	6a3a      	ldr	r2, [r7, #32]
 800304e:	e841 2300 	strex	r3, r2, [r1]
 8003052:	61bb      	str	r3, [r7, #24]
   return(result);
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1e5      	bne.n	8003026 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2220      	movs	r2, #32
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e00f      	b.n	8003096 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	4013      	ands	r3, r2
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	429a      	cmp	r2, r3
 8003084:	bf0c      	ite	eq
 8003086:	2301      	moveq	r3, #1
 8003088:	2300      	movne	r3, #0
 800308a:	b2db      	uxtb	r3, r3
 800308c:	461a      	mov	r2, r3
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	429a      	cmp	r2, r3
 8003092:	d09f      	beq.n	8002fd4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3740      	adds	r7, #64	; 0x40
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030a4:	b0c0      	sub	sp, #256	; 0x100
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030bc:	68d9      	ldr	r1, [r3, #12]
 80030be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	ea40 0301 	orr.w	r3, r0, r1
 80030c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	431a      	orrs	r2, r3
 80030e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030f8:	f021 010c 	bic.w	r1, r1, #12
 80030fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003106:	430b      	orrs	r3, r1
 8003108:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800310a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311a:	6999      	ldr	r1, [r3, #24]
 800311c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	ea40 0301 	orr.w	r3, r0, r1
 8003126:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	4b8f      	ldr	r3, [pc, #572]	; (800336c <UART_SetConfig+0x2cc>)
 8003130:	429a      	cmp	r2, r3
 8003132:	d005      	beq.n	8003140 <UART_SetConfig+0xa0>
 8003134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	4b8d      	ldr	r3, [pc, #564]	; (8003370 <UART_SetConfig+0x2d0>)
 800313c:	429a      	cmp	r2, r3
 800313e:	d104      	bne.n	800314a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003140:	f7ff fae4 	bl	800270c <HAL_RCC_GetPCLK2Freq>
 8003144:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003148:	e003      	b.n	8003152 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800314a:	f7ff facb 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 800314e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800315c:	f040 810c 	bne.w	8003378 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003164:	2200      	movs	r2, #0
 8003166:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800316a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800316e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003172:	4622      	mov	r2, r4
 8003174:	462b      	mov	r3, r5
 8003176:	1891      	adds	r1, r2, r2
 8003178:	65b9      	str	r1, [r7, #88]	; 0x58
 800317a:	415b      	adcs	r3, r3
 800317c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800317e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003182:	4621      	mov	r1, r4
 8003184:	eb12 0801 	adds.w	r8, r2, r1
 8003188:	4629      	mov	r1, r5
 800318a:	eb43 0901 	adc.w	r9, r3, r1
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	f04f 0300 	mov.w	r3, #0
 8003196:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800319a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800319e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031a2:	4690      	mov	r8, r2
 80031a4:	4699      	mov	r9, r3
 80031a6:	4623      	mov	r3, r4
 80031a8:	eb18 0303 	adds.w	r3, r8, r3
 80031ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80031b0:	462b      	mov	r3, r5
 80031b2:	eb49 0303 	adc.w	r3, r9, r3
 80031b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80031ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80031ce:	460b      	mov	r3, r1
 80031d0:	18db      	adds	r3, r3, r3
 80031d2:	653b      	str	r3, [r7, #80]	; 0x50
 80031d4:	4613      	mov	r3, r2
 80031d6:	eb42 0303 	adc.w	r3, r2, r3
 80031da:	657b      	str	r3, [r7, #84]	; 0x54
 80031dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80031e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80031e4:	f7fd f84c 	bl	8000280 <__aeabi_uldivmod>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4b61      	ldr	r3, [pc, #388]	; (8003374 <UART_SetConfig+0x2d4>)
 80031ee:	fba3 2302 	umull	r2, r3, r3, r2
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	011c      	lsls	r4, r3, #4
 80031f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031fa:	2200      	movs	r2, #0
 80031fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003200:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003204:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003208:	4642      	mov	r2, r8
 800320a:	464b      	mov	r3, r9
 800320c:	1891      	adds	r1, r2, r2
 800320e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003210:	415b      	adcs	r3, r3
 8003212:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003214:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003218:	4641      	mov	r1, r8
 800321a:	eb12 0a01 	adds.w	sl, r2, r1
 800321e:	4649      	mov	r1, r9
 8003220:	eb43 0b01 	adc.w	fp, r3, r1
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003230:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003234:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003238:	4692      	mov	sl, r2
 800323a:	469b      	mov	fp, r3
 800323c:	4643      	mov	r3, r8
 800323e:	eb1a 0303 	adds.w	r3, sl, r3
 8003242:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003246:	464b      	mov	r3, r9
 8003248:	eb4b 0303 	adc.w	r3, fp, r3
 800324c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800325c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003260:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003264:	460b      	mov	r3, r1
 8003266:	18db      	adds	r3, r3, r3
 8003268:	643b      	str	r3, [r7, #64]	; 0x40
 800326a:	4613      	mov	r3, r2
 800326c:	eb42 0303 	adc.w	r3, r2, r3
 8003270:	647b      	str	r3, [r7, #68]	; 0x44
 8003272:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003276:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800327a:	f7fd f801 	bl	8000280 <__aeabi_uldivmod>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	4611      	mov	r1, r2
 8003284:	4b3b      	ldr	r3, [pc, #236]	; (8003374 <UART_SetConfig+0x2d4>)
 8003286:	fba3 2301 	umull	r2, r3, r3, r1
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	2264      	movs	r2, #100	; 0x64
 800328e:	fb02 f303 	mul.w	r3, r2, r3
 8003292:	1acb      	subs	r3, r1, r3
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800329a:	4b36      	ldr	r3, [pc, #216]	; (8003374 <UART_SetConfig+0x2d4>)
 800329c:	fba3 2302 	umull	r2, r3, r3, r2
 80032a0:	095b      	lsrs	r3, r3, #5
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032a8:	441c      	add	r4, r3
 80032aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ae:	2200      	movs	r2, #0
 80032b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80032b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80032bc:	4642      	mov	r2, r8
 80032be:	464b      	mov	r3, r9
 80032c0:	1891      	adds	r1, r2, r2
 80032c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80032c4:	415b      	adcs	r3, r3
 80032c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032cc:	4641      	mov	r1, r8
 80032ce:	1851      	adds	r1, r2, r1
 80032d0:	6339      	str	r1, [r7, #48]	; 0x30
 80032d2:	4649      	mov	r1, r9
 80032d4:	414b      	adcs	r3, r1
 80032d6:	637b      	str	r3, [r7, #52]	; 0x34
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80032e4:	4659      	mov	r1, fp
 80032e6:	00cb      	lsls	r3, r1, #3
 80032e8:	4651      	mov	r1, sl
 80032ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032ee:	4651      	mov	r1, sl
 80032f0:	00ca      	lsls	r2, r1, #3
 80032f2:	4610      	mov	r0, r2
 80032f4:	4619      	mov	r1, r3
 80032f6:	4603      	mov	r3, r0
 80032f8:	4642      	mov	r2, r8
 80032fa:	189b      	adds	r3, r3, r2
 80032fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003300:	464b      	mov	r3, r9
 8003302:	460a      	mov	r2, r1
 8003304:	eb42 0303 	adc.w	r3, r2, r3
 8003308:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800330c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003318:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800331c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003320:	460b      	mov	r3, r1
 8003322:	18db      	adds	r3, r3, r3
 8003324:	62bb      	str	r3, [r7, #40]	; 0x28
 8003326:	4613      	mov	r3, r2
 8003328:	eb42 0303 	adc.w	r3, r2, r3
 800332c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800332e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003332:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003336:	f7fc ffa3 	bl	8000280 <__aeabi_uldivmod>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4b0d      	ldr	r3, [pc, #52]	; (8003374 <UART_SetConfig+0x2d4>)
 8003340:	fba3 1302 	umull	r1, r3, r3, r2
 8003344:	095b      	lsrs	r3, r3, #5
 8003346:	2164      	movs	r1, #100	; 0x64
 8003348:	fb01 f303 	mul.w	r3, r1, r3
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	3332      	adds	r3, #50	; 0x32
 8003352:	4a08      	ldr	r2, [pc, #32]	; (8003374 <UART_SetConfig+0x2d4>)
 8003354:	fba2 2303 	umull	r2, r3, r2, r3
 8003358:	095b      	lsrs	r3, r3, #5
 800335a:	f003 0207 	and.w	r2, r3, #7
 800335e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4422      	add	r2, r4
 8003366:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003368:	e105      	b.n	8003576 <UART_SetConfig+0x4d6>
 800336a:	bf00      	nop
 800336c:	40011000 	.word	0x40011000
 8003370:	40011400 	.word	0x40011400
 8003374:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800337c:	2200      	movs	r2, #0
 800337e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003382:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003386:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800338a:	4642      	mov	r2, r8
 800338c:	464b      	mov	r3, r9
 800338e:	1891      	adds	r1, r2, r2
 8003390:	6239      	str	r1, [r7, #32]
 8003392:	415b      	adcs	r3, r3
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
 8003396:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800339a:	4641      	mov	r1, r8
 800339c:	1854      	adds	r4, r2, r1
 800339e:	4649      	mov	r1, r9
 80033a0:	eb43 0501 	adc.w	r5, r3, r1
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	00eb      	lsls	r3, r5, #3
 80033ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033b2:	00e2      	lsls	r2, r4, #3
 80033b4:	4614      	mov	r4, r2
 80033b6:	461d      	mov	r5, r3
 80033b8:	4643      	mov	r3, r8
 80033ba:	18e3      	adds	r3, r4, r3
 80033bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033c0:	464b      	mov	r3, r9
 80033c2:	eb45 0303 	adc.w	r3, r5, r3
 80033c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80033d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	f04f 0300 	mov.w	r3, #0
 80033e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80033e6:	4629      	mov	r1, r5
 80033e8:	008b      	lsls	r3, r1, #2
 80033ea:	4621      	mov	r1, r4
 80033ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033f0:	4621      	mov	r1, r4
 80033f2:	008a      	lsls	r2, r1, #2
 80033f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80033f8:	f7fc ff42 	bl	8000280 <__aeabi_uldivmod>
 80033fc:	4602      	mov	r2, r0
 80033fe:	460b      	mov	r3, r1
 8003400:	4b60      	ldr	r3, [pc, #384]	; (8003584 <UART_SetConfig+0x4e4>)
 8003402:	fba3 2302 	umull	r2, r3, r3, r2
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	011c      	lsls	r4, r3, #4
 800340a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800340e:	2200      	movs	r2, #0
 8003410:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003414:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003418:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800341c:	4642      	mov	r2, r8
 800341e:	464b      	mov	r3, r9
 8003420:	1891      	adds	r1, r2, r2
 8003422:	61b9      	str	r1, [r7, #24]
 8003424:	415b      	adcs	r3, r3
 8003426:	61fb      	str	r3, [r7, #28]
 8003428:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800342c:	4641      	mov	r1, r8
 800342e:	1851      	adds	r1, r2, r1
 8003430:	6139      	str	r1, [r7, #16]
 8003432:	4649      	mov	r1, r9
 8003434:	414b      	adcs	r3, r1
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003444:	4659      	mov	r1, fp
 8003446:	00cb      	lsls	r3, r1, #3
 8003448:	4651      	mov	r1, sl
 800344a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800344e:	4651      	mov	r1, sl
 8003450:	00ca      	lsls	r2, r1, #3
 8003452:	4610      	mov	r0, r2
 8003454:	4619      	mov	r1, r3
 8003456:	4603      	mov	r3, r0
 8003458:	4642      	mov	r2, r8
 800345a:	189b      	adds	r3, r3, r2
 800345c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003460:	464b      	mov	r3, r9
 8003462:	460a      	mov	r2, r1
 8003464:	eb42 0303 	adc.w	r3, r2, r3
 8003468:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800346c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	67bb      	str	r3, [r7, #120]	; 0x78
 8003476:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003484:	4649      	mov	r1, r9
 8003486:	008b      	lsls	r3, r1, #2
 8003488:	4641      	mov	r1, r8
 800348a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800348e:	4641      	mov	r1, r8
 8003490:	008a      	lsls	r2, r1, #2
 8003492:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003496:	f7fc fef3 	bl	8000280 <__aeabi_uldivmod>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4b39      	ldr	r3, [pc, #228]	; (8003584 <UART_SetConfig+0x4e4>)
 80034a0:	fba3 1302 	umull	r1, r3, r3, r2
 80034a4:	095b      	lsrs	r3, r3, #5
 80034a6:	2164      	movs	r1, #100	; 0x64
 80034a8:	fb01 f303 	mul.w	r3, r1, r3
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	3332      	adds	r3, #50	; 0x32
 80034b2:	4a34      	ldr	r2, [pc, #208]	; (8003584 <UART_SetConfig+0x4e4>)
 80034b4:	fba2 2303 	umull	r2, r3, r2, r3
 80034b8:	095b      	lsrs	r3, r3, #5
 80034ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034be:	441c      	add	r4, r3
 80034c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034c4:	2200      	movs	r2, #0
 80034c6:	673b      	str	r3, [r7, #112]	; 0x70
 80034c8:	677a      	str	r2, [r7, #116]	; 0x74
 80034ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80034ce:	4642      	mov	r2, r8
 80034d0:	464b      	mov	r3, r9
 80034d2:	1891      	adds	r1, r2, r2
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	415b      	adcs	r3, r3
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034de:	4641      	mov	r1, r8
 80034e0:	1851      	adds	r1, r2, r1
 80034e2:	6039      	str	r1, [r7, #0]
 80034e4:	4649      	mov	r1, r9
 80034e6:	414b      	adcs	r3, r1
 80034e8:	607b      	str	r3, [r7, #4]
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034f6:	4659      	mov	r1, fp
 80034f8:	00cb      	lsls	r3, r1, #3
 80034fa:	4651      	mov	r1, sl
 80034fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003500:	4651      	mov	r1, sl
 8003502:	00ca      	lsls	r2, r1, #3
 8003504:	4610      	mov	r0, r2
 8003506:	4619      	mov	r1, r3
 8003508:	4603      	mov	r3, r0
 800350a:	4642      	mov	r2, r8
 800350c:	189b      	adds	r3, r3, r2
 800350e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003510:	464b      	mov	r3, r9
 8003512:	460a      	mov	r2, r1
 8003514:	eb42 0303 	adc.w	r3, r2, r3
 8003518:	66fb      	str	r3, [r7, #108]	; 0x6c
 800351a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	663b      	str	r3, [r7, #96]	; 0x60
 8003524:	667a      	str	r2, [r7, #100]	; 0x64
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003532:	4649      	mov	r1, r9
 8003534:	008b      	lsls	r3, r1, #2
 8003536:	4641      	mov	r1, r8
 8003538:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800353c:	4641      	mov	r1, r8
 800353e:	008a      	lsls	r2, r1, #2
 8003540:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003544:	f7fc fe9c 	bl	8000280 <__aeabi_uldivmod>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	4b0d      	ldr	r3, [pc, #52]	; (8003584 <UART_SetConfig+0x4e4>)
 800354e:	fba3 1302 	umull	r1, r3, r3, r2
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	2164      	movs	r1, #100	; 0x64
 8003556:	fb01 f303 	mul.w	r3, r1, r3
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	3332      	adds	r3, #50	; 0x32
 8003560:	4a08      	ldr	r2, [pc, #32]	; (8003584 <UART_SetConfig+0x4e4>)
 8003562:	fba2 2303 	umull	r2, r3, r2, r3
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	f003 020f 	and.w	r2, r3, #15
 800356c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4422      	add	r2, r4
 8003574:	609a      	str	r2, [r3, #8]
}
 8003576:	bf00      	nop
 8003578:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800357c:	46bd      	mov	sp, r7
 800357e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003582:	bf00      	nop
 8003584:	51eb851f 	.word	0x51eb851f

08003588 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f103 0208 	add.w	r2, r3, #8
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f103 0208 	add.w	r2, r3, #8
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f103 0208 	add.w	r2, r3, #8
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035e2:	b480      	push	{r7}
 80035e4:	b085      	sub	sp, #20
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
 80035ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	601a      	str	r2, [r3, #0]
}
 800361e:	bf00      	nop
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800362a:	b480      	push	{r7}
 800362c:	b085      	sub	sp, #20
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003640:	d103      	bne.n	800364a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	e00c      	b.n	8003664 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3308      	adds	r3, #8
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	e002      	b.n	8003658 <vListInsert+0x2e>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	429a      	cmp	r2, r3
 8003662:	d2f6      	bcs.n	8003652 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	601a      	str	r2, [r3, #0]
}
 8003690:	bf00      	nop
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6892      	ldr	r2, [r2, #8]
 80036b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6852      	ldr	r2, [r2, #4]
 80036bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d103      	bne.n	80036d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	1e5a      	subs	r2, r3, #1
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10a      	bne.n	800371a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003708:	f383 8811 	msr	BASEPRI, r3
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003716:	bf00      	nop
 8003718:	e7fe      	b.n	8003718 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800371a:	f001 ff23 	bl	8005564 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003726:	68f9      	ldr	r1, [r7, #12]
 8003728:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800372a:	fb01 f303 	mul.w	r3, r1, r3
 800372e:	441a      	add	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374a:	3b01      	subs	r3, #1
 800374c:	68f9      	ldr	r1, [r7, #12]
 800374e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003750:	fb01 f303 	mul.w	r3, r1, r3
 8003754:	441a      	add	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	22ff      	movs	r2, #255	; 0xff
 800375e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	22ff      	movs	r2, #255	; 0xff
 8003766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d114      	bne.n	800379a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01a      	beq.n	80037ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	3310      	adds	r3, #16
 800377c:	4618      	mov	r0, r3
 800377e:	f001 f80d 	bl	800479c <xTaskRemoveFromEventList>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d012      	beq.n	80037ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003788:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <xQueueGenericReset+0xcc>)
 800378a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	e009      	b.n	80037ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	3310      	adds	r3, #16
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff fef2 	bl	8003588 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	3324      	adds	r3, #36	; 0x24
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff feed 	bl	8003588 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80037ae:	f001 ff09 	bl	80055c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80037b2:	2301      	movs	r3, #1
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	e000ed04 	.word	0xe000ed04

080037c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08a      	sub	sp, #40	; 0x28
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	4613      	mov	r3, r2
 80037cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10a      	bne.n	80037ea <xQueueGenericCreate+0x2a>
	__asm volatile
 80037d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d8:	f383 8811 	msr	BASEPRI, r3
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	613b      	str	r3, [r7, #16]
}
 80037e6:	bf00      	nop
 80037e8:	e7fe      	b.n	80037e8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d102      	bne.n	80037f6 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	61fb      	str	r3, [r7, #28]
 80037f4:	e004      	b.n	8003800 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	fb02 f303 	mul.w	r3, r2, r3
 80037fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	3350      	adds	r3, #80	; 0x50
 8003804:	4618      	mov	r0, r3
 8003806:	f001 ffcf 	bl	80057a8 <pvPortMalloc>
 800380a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00d      	beq.n	800382e <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	3350      	adds	r3, #80	; 0x50
 800381a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800381c:	79fa      	ldrb	r2, [r7, #7]
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	4613      	mov	r3, r2
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	68b9      	ldr	r1, [r7, #8]
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 f805 	bl	8003838 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800382e:	69bb      	ldr	r3, [r7, #24]
	}
 8003830:	4618      	mov	r0, r3
 8003832:	3720      	adds	r7, #32
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d103      	bne.n	8003854 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	e002      	b.n	800385a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003866:	2101      	movs	r1, #1
 8003868:	69b8      	ldr	r0, [r7, #24]
 800386a:	f7ff ff41 	bl	80036f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	78fa      	ldrb	r2, [r7, #3]
 8003872:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003876:	bf00      	nop
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b08e      	sub	sp, #56	; 0x38
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800388e:	2300      	movs	r3, #0
 8003890:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10a      	bne.n	80038b2 <xQueueGenericSend+0x32>
	__asm volatile
 800389c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038ae:	bf00      	nop
 80038b0:	e7fe      	b.n	80038b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d103      	bne.n	80038c0 <xQueueGenericSend+0x40>
 80038b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <xQueueGenericSend+0x44>
 80038c0:	2301      	movs	r3, #1
 80038c2:	e000      	b.n	80038c6 <xQueueGenericSend+0x46>
 80038c4:	2300      	movs	r3, #0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10a      	bne.n	80038e0 <xQueueGenericSend+0x60>
	__asm volatile
 80038ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ce:	f383 8811 	msr	BASEPRI, r3
 80038d2:	f3bf 8f6f 	isb	sy
 80038d6:	f3bf 8f4f 	dsb	sy
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80038dc:	bf00      	nop
 80038de:	e7fe      	b.n	80038de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d103      	bne.n	80038ee <xQueueGenericSend+0x6e>
 80038e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <xQueueGenericSend+0x72>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <xQueueGenericSend+0x74>
 80038f2:	2300      	movs	r3, #0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10a      	bne.n	800390e <xQueueGenericSend+0x8e>
	__asm volatile
 80038f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	623b      	str	r3, [r7, #32]
}
 800390a:	bf00      	nop
 800390c:	e7fe      	b.n	800390c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800390e:	f001 f8e1 	bl	8004ad4 <xTaskGetSchedulerState>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d102      	bne.n	800391e <xQueueGenericSend+0x9e>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <xQueueGenericSend+0xa2>
 800391e:	2301      	movs	r3, #1
 8003920:	e000      	b.n	8003924 <xQueueGenericSend+0xa4>
 8003922:	2300      	movs	r3, #0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10a      	bne.n	800393e <xQueueGenericSend+0xbe>
	__asm volatile
 8003928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392c:	f383 8811 	msr	BASEPRI, r3
 8003930:	f3bf 8f6f 	isb	sy
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	61fb      	str	r3, [r7, #28]
}
 800393a:	bf00      	nop
 800393c:	e7fe      	b.n	800393c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800393e:	f001 fe11 	bl	8005564 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394a:	429a      	cmp	r2, r3
 800394c:	d302      	bcc.n	8003954 <xQueueGenericSend+0xd4>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b02      	cmp	r3, #2
 8003952:	d129      	bne.n	80039a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	68b9      	ldr	r1, [r7, #8]
 8003958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800395a:	f000 fa07 	bl	8003d6c <prvCopyDataToQueue>
 800395e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	2b00      	cmp	r3, #0
 8003966:	d010      	beq.n	800398a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396a:	3324      	adds	r3, #36	; 0x24
 800396c:	4618      	mov	r0, r3
 800396e:	f000 ff15 	bl	800479c <xTaskRemoveFromEventList>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d013      	beq.n	80039a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003978:	4b3f      	ldr	r3, [pc, #252]	; (8003a78 <xQueueGenericSend+0x1f8>)
 800397a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	e00a      	b.n	80039a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800398a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398c:	2b00      	cmp	r3, #0
 800398e:	d007      	beq.n	80039a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003990:	4b39      	ldr	r3, [pc, #228]	; (8003a78 <xQueueGenericSend+0x1f8>)
 8003992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80039a0:	f001 fe10 	bl	80055c4 <vPortExitCritical>
				return pdPASS;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e063      	b.n	8003a70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d103      	bne.n	80039b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039ae:	f001 fe09 	bl	80055c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	e05c      	b.n	8003a70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d106      	bne.n	80039ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039bc:	f107 0314 	add.w	r3, r7, #20
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 ff4d 	bl	8004860 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039c6:	2301      	movs	r3, #1
 80039c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039ca:	f001 fdfb 	bl	80055c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039ce:	f000 fcc7 	bl	8004360 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039d2:	f001 fdc7 	bl	8005564 <vPortEnterCritical>
 80039d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039dc:	b25b      	sxtb	r3, r3
 80039de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039e2:	d103      	bne.n	80039ec <xQueueGenericSend+0x16c>
 80039e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039f2:	b25b      	sxtb	r3, r3
 80039f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039f8:	d103      	bne.n	8003a02 <xQueueGenericSend+0x182>
 80039fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a02:	f001 fddf 	bl	80055c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a06:	1d3a      	adds	r2, r7, #4
 8003a08:	f107 0314 	add.w	r3, r7, #20
 8003a0c:	4611      	mov	r1, r2
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 ff3c 	bl	800488c <xTaskCheckForTimeOut>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d124      	bne.n	8003a64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a1c:	f000 fa9e 	bl	8003f5c <prvIsQueueFull>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d018      	beq.n	8003a58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	3310      	adds	r3, #16
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	4611      	mov	r1, r2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fe64 	bl	80046fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a36:	f000 fa29 	bl	8003e8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a3a:	f000 fc9f 	bl	800437c <xTaskResumeAll>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f47f af7c 	bne.w	800393e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003a46:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <xQueueGenericSend+0x1f8>)
 8003a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	f3bf 8f6f 	isb	sy
 8003a56:	e772      	b.n	800393e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a5a:	f000 fa17 	bl	8003e8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a5e:	f000 fc8d 	bl	800437c <xTaskResumeAll>
 8003a62:	e76c      	b.n	800393e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a66:	f000 fa11 	bl	8003e8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a6a:	f000 fc87 	bl	800437c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3738      	adds	r7, #56	; 0x38
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	e000ed04 	.word	0xe000ed04

08003a7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08e      	sub	sp, #56	; 0x38
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10a      	bne.n	8003aaa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a98:	f383 8811 	msr	BASEPRI, r3
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003aa6:	bf00      	nop
 8003aa8:	e7fe      	b.n	8003aa8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d103      	bne.n	8003ab8 <xQueueGenericSendFromISR+0x3c>
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <xQueueGenericSendFromISR+0x40>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e000      	b.n	8003abe <xQueueGenericSendFromISR+0x42>
 8003abc:	2300      	movs	r3, #0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10a      	bne.n	8003ad8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac6:	f383 8811 	msr	BASEPRI, r3
 8003aca:	f3bf 8f6f 	isb	sy
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	623b      	str	r3, [r7, #32]
}
 8003ad4:	bf00      	nop
 8003ad6:	e7fe      	b.n	8003ad6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d103      	bne.n	8003ae6 <xQueueGenericSendFromISR+0x6a>
 8003ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <xQueueGenericSendFromISR+0x6e>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <xQueueGenericSendFromISR+0x70>
 8003aea:	2300      	movs	r3, #0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af4:	f383 8811 	msr	BASEPRI, r3
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	61fb      	str	r3, [r7, #28]
}
 8003b02:	bf00      	nop
 8003b04:	e7fe      	b.n	8003b04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b06:	f001 fe0f 	bl	8005728 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b0a:	f3ef 8211 	mrs	r2, BASEPRI
 8003b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b12:	f383 8811 	msr	BASEPRI, r3
 8003b16:	f3bf 8f6f 	isb	sy
 8003b1a:	f3bf 8f4f 	dsb	sy
 8003b1e:	61ba      	str	r2, [r7, #24]
 8003b20:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b22:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d302      	bcc.n	8003b38 <xQueueGenericSendFromISR+0xbc>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d12c      	bne.n	8003b92 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	68b9      	ldr	r1, [r7, #8]
 8003b46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b48:	f000 f910 	bl	8003d6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b4c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b54:	d112      	bne.n	8003b7c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d016      	beq.n	8003b8c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b60:	3324      	adds	r3, #36	; 0x24
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fe1a 	bl	800479c <xTaskRemoveFromEventList>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00e      	beq.n	8003b8c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00b      	beq.n	8003b8c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	e007      	b.n	8003b8c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b80:	3301      	adds	r3, #1
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	b25a      	sxtb	r2, r3
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003b90:	e001      	b.n	8003b96 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	637b      	str	r3, [r7, #52]	; 0x34
 8003b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b98:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003ba0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3738      	adds	r7, #56	; 0x38
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08c      	sub	sp, #48	; 0x30
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10a      	bne.n	8003bdc <xQueueReceive+0x30>
	__asm volatile
 8003bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bca:	f383 8811 	msr	BASEPRI, r3
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	623b      	str	r3, [r7, #32]
}
 8003bd8:	bf00      	nop
 8003bda:	e7fe      	b.n	8003bda <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d103      	bne.n	8003bea <xQueueReceive+0x3e>
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <xQueueReceive+0x42>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <xQueueReceive+0x44>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10a      	bne.n	8003c0a <xQueueReceive+0x5e>
	__asm volatile
 8003bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf8:	f383 8811 	msr	BASEPRI, r3
 8003bfc:	f3bf 8f6f 	isb	sy
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	61fb      	str	r3, [r7, #28]
}
 8003c06:	bf00      	nop
 8003c08:	e7fe      	b.n	8003c08 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c0a:	f000 ff63 	bl	8004ad4 <xTaskGetSchedulerState>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d102      	bne.n	8003c1a <xQueueReceive+0x6e>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <xQueueReceive+0x72>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <xQueueReceive+0x74>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10a      	bne.n	8003c3a <xQueueReceive+0x8e>
	__asm volatile
 8003c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	61bb      	str	r3, [r7, #24]
}
 8003c36:	bf00      	nop
 8003c38:	e7fe      	b.n	8003c38 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c3a:	f001 fc93 	bl	8005564 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d01f      	beq.n	8003c8a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c4a:	68b9      	ldr	r1, [r7, #8]
 8003c4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c4e:	f000 f8f7 	bl	8003e40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	1e5a      	subs	r2, r3, #1
 8003c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00f      	beq.n	8003c82 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c64:	3310      	adds	r3, #16
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fd98 	bl	800479c <xTaskRemoveFromEventList>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d007      	beq.n	8003c82 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c72:	4b3d      	ldr	r3, [pc, #244]	; (8003d68 <xQueueReceive+0x1bc>)
 8003c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c82:	f001 fc9f 	bl	80055c4 <vPortExitCritical>
				return pdPASS;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e069      	b.n	8003d5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d103      	bne.n	8003c98 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c90:	f001 fc98 	bl	80055c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c94:	2300      	movs	r3, #0
 8003c96:	e062      	b.n	8003d5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d106      	bne.n	8003cac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c9e:	f107 0310 	add.w	r3, r7, #16
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fddc 	bl	8004860 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cac:	f001 fc8a 	bl	80055c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cb0:	f000 fb56 	bl	8004360 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cb4:	f001 fc56 	bl	8005564 <vPortEnterCritical>
 8003cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cbe:	b25b      	sxtb	r3, r3
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cc4:	d103      	bne.n	8003cce <xQueueReceive+0x122>
 8003cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cd4:	b25b      	sxtb	r3, r3
 8003cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cda:	d103      	bne.n	8003ce4 <xQueueReceive+0x138>
 8003cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ce4:	f001 fc6e 	bl	80055c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ce8:	1d3a      	adds	r2, r7, #4
 8003cea:	f107 0310 	add.w	r3, r7, #16
 8003cee:	4611      	mov	r1, r2
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 fdcb 	bl	800488c <xTaskCheckForTimeOut>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d123      	bne.n	8003d44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cfe:	f000 f917 	bl	8003f30 <prvIsQueueEmpty>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d017      	beq.n	8003d38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0a:	3324      	adds	r3, #36	; 0x24
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	4611      	mov	r1, r2
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fcf3 	bl	80046fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d18:	f000 f8b8 	bl	8003e8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d1c:	f000 fb2e 	bl	800437c <xTaskResumeAll>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d189      	bne.n	8003c3a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003d26:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <xQueueReceive+0x1bc>)
 8003d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	f3bf 8f6f 	isb	sy
 8003d36:	e780      	b.n	8003c3a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d3a:	f000 f8a7 	bl	8003e8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d3e:	f000 fb1d 	bl	800437c <xTaskResumeAll>
 8003d42:	e77a      	b.n	8003c3a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d46:	f000 f8a1 	bl	8003e8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d4a:	f000 fb17 	bl	800437c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d50:	f000 f8ee 	bl	8003f30 <prvIsQueueEmpty>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f43f af6f 	beq.w	8003c3a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3730      	adds	r7, #48	; 0x30
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	e000ed04 	.word	0xe000ed04

08003d6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10d      	bne.n	8003da6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d14d      	bne.n	8003e2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 feba 	bl	8004b10 <xTaskPriorityDisinherit>
 8003d9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	609a      	str	r2, [r3, #8]
 8003da4:	e043      	b.n	8003e2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d119      	bne.n	8003de0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6858      	ldr	r0, [r3, #4]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	461a      	mov	r2, r3
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	f001 fefa 	bl	8005bb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	441a      	add	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d32b      	bcc.n	8003e2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	e026      	b.n	8003e2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	68d8      	ldr	r0, [r3, #12]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	461a      	mov	r2, r3
 8003dea:	68b9      	ldr	r1, [r7, #8]
 8003dec:	f001 fee0 	bl	8005bb0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	425b      	negs	r3, r3
 8003dfa:	441a      	add	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	68da      	ldr	r2, [r3, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d207      	bcs.n	8003e1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	425b      	negs	r3, r3
 8003e16:	441a      	add	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d105      	bne.n	8003e2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e36:	697b      	ldr	r3, [r7, #20]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d018      	beq.n	8003e84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	441a      	add	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d303      	bcc.n	8003e74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68d9      	ldr	r1, [r3, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	6838      	ldr	r0, [r7, #0]
 8003e80:	f001 fe96 	bl	8005bb0 <memcpy>
	}
}
 8003e84:	bf00      	nop
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e94:	f001 fb66 	bl	8005564 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ea0:	e011      	b.n	8003ec6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d012      	beq.n	8003ed0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3324      	adds	r3, #36	; 0x24
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fc74 	bl	800479c <xTaskRemoveFromEventList>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003eba:	f000 fd49 	bl	8004950 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ebe:	7bfb      	ldrb	r3, [r7, #15]
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	dce9      	bgt.n	8003ea2 <prvUnlockQueue+0x16>
 8003ece:	e000      	b.n	8003ed2 <prvUnlockQueue+0x46>
					break;
 8003ed0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	22ff      	movs	r2, #255	; 0xff
 8003ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003eda:	f001 fb73 	bl	80055c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ede:	f001 fb41 	bl	8005564 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ee8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003eea:	e011      	b.n	8003f10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d012      	beq.n	8003f1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3310      	adds	r3, #16
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 fc4f 	bl	800479c <xTaskRemoveFromEventList>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f04:	f000 fd24 	bl	8004950 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f08:	7bbb      	ldrb	r3, [r7, #14]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	dce9      	bgt.n	8003eec <prvUnlockQueue+0x60>
 8003f18:	e000      	b.n	8003f1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	22ff      	movs	r2, #255	; 0xff
 8003f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f24:	f001 fb4e 	bl	80055c4 <vPortExitCritical>
}
 8003f28:	bf00      	nop
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f38:	f001 fb14 	bl	8005564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d102      	bne.n	8003f4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f44:	2301      	movs	r3, #1
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	e001      	b.n	8003f4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f4e:	f001 fb39 	bl	80055c4 <vPortExitCritical>

	return xReturn;
 8003f52:	68fb      	ldr	r3, [r7, #12]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f64:	f001 fafe 	bl	8005564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d102      	bne.n	8003f7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f74:	2301      	movs	r3, #1
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	e001      	b.n	8003f7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f7e:	f001 fb21 	bl	80055c4 <vPortExitCritical>

	return xReturn;
 8003f82:	68fb      	ldr	r3, [r7, #12]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	e014      	b.n	8003fc6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003f9c:	4a0f      	ldr	r2, [pc, #60]	; (8003fdc <vQueueAddToRegistry+0x50>)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10b      	bne.n	8003fc0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003fa8:	490c      	ldr	r1, [pc, #48]	; (8003fdc <vQueueAddToRegistry+0x50>)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003fb2:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <vQueueAddToRegistry+0x50>)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	4413      	add	r3, r2
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003fbe:	e006      	b.n	8003fce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2b07      	cmp	r3, #7
 8003fca:	d9e7      	bls.n	8003f9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003fcc:	bf00      	nop
 8003fce:	bf00      	nop
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	200003f4 	.word	0x200003f4

08003fe0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003ff0:	f001 fab8 	bl	8005564 <vPortEnterCritical>
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ffa:	b25b      	sxtb	r3, r3
 8003ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004000:	d103      	bne.n	800400a <vQueueWaitForMessageRestricted+0x2a>
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004010:	b25b      	sxtb	r3, r3
 8004012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004016:	d103      	bne.n	8004020 <vQueueWaitForMessageRestricted+0x40>
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004020:	f001 fad0 	bl	80055c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004028:	2b00      	cmp	r3, #0
 800402a:	d106      	bne.n	800403a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	3324      	adds	r3, #36	; 0x24
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	68b9      	ldr	r1, [r7, #8]
 8004034:	4618      	mov	r0, r3
 8004036:	f000 fb85 	bl	8004744 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800403a:	6978      	ldr	r0, [r7, #20]
 800403c:	f7ff ff26 	bl	8003e8c <prvUnlockQueue>
	}
 8004040:	bf00      	nop
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08c      	sub	sp, #48	; 0x30
 800404c:	af04      	add	r7, sp, #16
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	4613      	mov	r3, r2
 8004056:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004058:	88fb      	ldrh	r3, [r7, #6]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4618      	mov	r0, r3
 800405e:	f001 fba3 	bl	80057a8 <pvPortMalloc>
 8004062:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00e      	beq.n	8004088 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800406a:	2058      	movs	r0, #88	; 0x58
 800406c:	f001 fb9c 	bl	80057a8 <pvPortMalloc>
 8004070:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	631a      	str	r2, [r3, #48]	; 0x30
 800407e:	e005      	b.n	800408c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004080:	6978      	ldr	r0, [r7, #20]
 8004082:	f001 fc55 	bl	8005930 <vPortFree>
 8004086:	e001      	b.n	800408c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004088:	2300      	movs	r3, #0
 800408a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d013      	beq.n	80040ba <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004092:	88fa      	ldrh	r2, [r7, #6]
 8004094:	2300      	movs	r3, #0
 8004096:	9303      	str	r3, [sp, #12]
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	9302      	str	r3, [sp, #8]
 800409c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409e:	9301      	str	r3, [sp, #4]
 80040a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f80e 	bl	80040ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040ae:	69f8      	ldr	r0, [r7, #28]
 80040b0:	f000 f89a 	bl	80041e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80040b4:	2301      	movs	r3, #1
 80040b6:	61bb      	str	r3, [r7, #24]
 80040b8:	e002      	b.n	80040c0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80040c0:	69bb      	ldr	r3, [r7, #24]
	}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3720      	adds	r7, #32
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b088      	sub	sp, #32
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	461a      	mov	r2, r3
 80040e2:	21a5      	movs	r1, #165	; 0xa5
 80040e4:	f001 fd72 	bl	8005bcc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80040e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040f2:	3b01      	subs	r3, #1
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	f023 0307 	bic.w	r3, r3, #7
 8004100:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <prvInitialiseNewTask+0x58>
	__asm volatile
 800410c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004110:	f383 8811 	msr	BASEPRI, r3
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	617b      	str	r3, [r7, #20]
}
 800411e:	bf00      	nop
 8004120:	e7fe      	b.n	8004120 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d01f      	beq.n	8004168 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004128:	2300      	movs	r3, #0
 800412a:	61fb      	str	r3, [r7, #28]
 800412c:	e012      	b.n	8004154 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	4413      	add	r3, r2
 8004134:	7819      	ldrb	r1, [r3, #0]
 8004136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	4413      	add	r3, r2
 800413c:	3334      	adds	r3, #52	; 0x34
 800413e:	460a      	mov	r2, r1
 8004140:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	4413      	add	r3, r2
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d006      	beq.n	800415c <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	3301      	adds	r3, #1
 8004152:	61fb      	str	r3, [r7, #28]
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	2b09      	cmp	r3, #9
 8004158:	d9e9      	bls.n	800412e <prvInitialiseNewTask+0x64>
 800415a:	e000      	b.n	800415e <prvInitialiseNewTask+0x94>
			{
				break;
 800415c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004166:	e003      	b.n	8004170 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004172:	2b0f      	cmp	r3, #15
 8004174:	d901      	bls.n	800417a <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004176:	230f      	movs	r3, #15
 8004178:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800417e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004184:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8004186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004188:	2200      	movs	r2, #0
 800418a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800418c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418e:	3304      	adds	r3, #4
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff fa19 	bl	80035c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004198:	3318      	adds	r3, #24
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff fa14 	bl	80035c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80041a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a8:	f1c3 0210 	rsb	r2, r3, #16
 80041ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80041b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b8:	2200      	movs	r2, #0
 80041ba:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80041bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	68f9      	ldr	r1, [r7, #12]
 80041c8:	69b8      	ldr	r0, [r7, #24]
 80041ca:	f001 f89f 	bl	800530c <pxPortInitialiseStack>
 80041ce:	4602      	mov	r2, r0
 80041d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80041d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041e0:	bf00      	nop
 80041e2:	3720      	adds	r7, #32
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041f0:	f001 f9b8 	bl	8005564 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041f4:	4b2c      	ldr	r3, [pc, #176]	; (80042a8 <prvAddNewTaskToReadyList+0xc0>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3301      	adds	r3, #1
 80041fa:	4a2b      	ldr	r2, [pc, #172]	; (80042a8 <prvAddNewTaskToReadyList+0xc0>)
 80041fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80041fe:	4b2b      	ldr	r3, [pc, #172]	; (80042ac <prvAddNewTaskToReadyList+0xc4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d109      	bne.n	800421a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004206:	4a29      	ldr	r2, [pc, #164]	; (80042ac <prvAddNewTaskToReadyList+0xc4>)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800420c:	4b26      	ldr	r3, [pc, #152]	; (80042a8 <prvAddNewTaskToReadyList+0xc0>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d110      	bne.n	8004236 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004214:	f000 fbc0 	bl	8004998 <prvInitialiseTaskLists>
 8004218:	e00d      	b.n	8004236 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800421a:	4b25      	ldr	r3, [pc, #148]	; (80042b0 <prvAddNewTaskToReadyList+0xc8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d109      	bne.n	8004236 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004222:	4b22      	ldr	r3, [pc, #136]	; (80042ac <prvAddNewTaskToReadyList+0xc4>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422c:	429a      	cmp	r2, r3
 800422e:	d802      	bhi.n	8004236 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004230:	4a1e      	ldr	r2, [pc, #120]	; (80042ac <prvAddNewTaskToReadyList+0xc4>)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004236:	4b1f      	ldr	r3, [pc, #124]	; (80042b4 <prvAddNewTaskToReadyList+0xcc>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3301      	adds	r3, #1
 800423c:	4a1d      	ldr	r2, [pc, #116]	; (80042b4 <prvAddNewTaskToReadyList+0xcc>)
 800423e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004240:	4b1c      	ldr	r3, [pc, #112]	; (80042b4 <prvAddNewTaskToReadyList+0xcc>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	2201      	movs	r2, #1
 800424e:	409a      	lsls	r2, r3
 8004250:	4b19      	ldr	r3, [pc, #100]	; (80042b8 <prvAddNewTaskToReadyList+0xd0>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4313      	orrs	r3, r2
 8004256:	4a18      	ldr	r2, [pc, #96]	; (80042b8 <prvAddNewTaskToReadyList+0xd0>)
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800425e:	4613      	mov	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4a15      	ldr	r2, [pc, #84]	; (80042bc <prvAddNewTaskToReadyList+0xd4>)
 8004268:	441a      	add	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3304      	adds	r3, #4
 800426e:	4619      	mov	r1, r3
 8004270:	4610      	mov	r0, r2
 8004272:	f7ff f9b6 	bl	80035e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004276:	f001 f9a5 	bl	80055c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800427a:	4b0d      	ldr	r3, [pc, #52]	; (80042b0 <prvAddNewTaskToReadyList+0xc8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00e      	beq.n	80042a0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004282:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <prvAddNewTaskToReadyList+0xc4>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428c:	429a      	cmp	r2, r3
 800428e:	d207      	bcs.n	80042a0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004290:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <prvAddNewTaskToReadyList+0xd8>)
 8004292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042a0:	bf00      	nop
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	200005e8 	.word	0x200005e8
 80042ac:	20000434 	.word	0x20000434
 80042b0:	200005f4 	.word	0x200005f4
 80042b4:	20000604 	.word	0x20000604
 80042b8:	200005f0 	.word	0x200005f0
 80042bc:	20000438 	.word	0x20000438
 80042c0:	e000ed04 	.word	0xe000ed04

080042c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80042ca:	4b1f      	ldr	r3, [pc, #124]	; (8004348 <vTaskStartScheduler+0x84>)
 80042cc:	9301      	str	r3, [sp, #4]
 80042ce:	2300      	movs	r3, #0
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	2300      	movs	r3, #0
 80042d4:	2282      	movs	r2, #130	; 0x82
 80042d6:	491d      	ldr	r1, [pc, #116]	; (800434c <vTaskStartScheduler+0x88>)
 80042d8:	481d      	ldr	r0, [pc, #116]	; (8004350 <vTaskStartScheduler+0x8c>)
 80042da:	f7ff feb5 	bl	8004048 <xTaskCreate>
 80042de:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d102      	bne.n	80042ec <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80042e6:	f000 fcff 	bl	8004ce8 <xTimerCreateTimerTask>
 80042ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d116      	bne.n	8004320 <vTaskStartScheduler+0x5c>
	__asm volatile
 80042f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	60bb      	str	r3, [r7, #8]
}
 8004304:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004306:	4b13      	ldr	r3, [pc, #76]	; (8004354 <vTaskStartScheduler+0x90>)
 8004308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800430c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800430e:	4b12      	ldr	r3, [pc, #72]	; (8004358 <vTaskStartScheduler+0x94>)
 8004310:	2201      	movs	r2, #1
 8004312:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004314:	4b11      	ldr	r3, [pc, #68]	; (800435c <vTaskStartScheduler+0x98>)
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800431a:	f001 f881 	bl	8005420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800431e:	e00e      	b.n	800433e <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004326:	d10a      	bne.n	800433e <vTaskStartScheduler+0x7a>
	__asm volatile
 8004328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	607b      	str	r3, [r7, #4]
}
 800433a:	bf00      	nop
 800433c:	e7fe      	b.n	800433c <vTaskStartScheduler+0x78>
}
 800433e:	bf00      	nop
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	2000060c 	.word	0x2000060c
 800434c:	080064ec 	.word	0x080064ec
 8004350:	08004969 	.word	0x08004969
 8004354:	20000608 	.word	0x20000608
 8004358:	200005f4 	.word	0x200005f4
 800435c:	200005ec 	.word	0x200005ec

08004360 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004364:	4b04      	ldr	r3, [pc, #16]	; (8004378 <vTaskSuspendAll+0x18>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3301      	adds	r3, #1
 800436a:	4a03      	ldr	r2, [pc, #12]	; (8004378 <vTaskSuspendAll+0x18>)
 800436c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800436e:	bf00      	nop
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	20000610 	.word	0x20000610

0800437c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004382:	2300      	movs	r3, #0
 8004384:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004386:	2300      	movs	r3, #0
 8004388:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800438a:	4b41      	ldr	r3, [pc, #260]	; (8004490 <xTaskResumeAll+0x114>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10a      	bne.n	80043a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8004392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004396:	f383 8811 	msr	BASEPRI, r3
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	603b      	str	r3, [r7, #0]
}
 80043a4:	bf00      	nop
 80043a6:	e7fe      	b.n	80043a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043a8:	f001 f8dc 	bl	8005564 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043ac:	4b38      	ldr	r3, [pc, #224]	; (8004490 <xTaskResumeAll+0x114>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3b01      	subs	r3, #1
 80043b2:	4a37      	ldr	r2, [pc, #220]	; (8004490 <xTaskResumeAll+0x114>)
 80043b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043b6:	4b36      	ldr	r3, [pc, #216]	; (8004490 <xTaskResumeAll+0x114>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d161      	bne.n	8004482 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043be:	4b35      	ldr	r3, [pc, #212]	; (8004494 <xTaskResumeAll+0x118>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d05d      	beq.n	8004482 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043c6:	e02e      	b.n	8004426 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043c8:	4b33      	ldr	r3, [pc, #204]	; (8004498 <xTaskResumeAll+0x11c>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	3318      	adds	r3, #24
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff f961 	bl	800369c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3304      	adds	r3, #4
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff f95c 	bl	800369c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	2201      	movs	r2, #1
 80043ea:	409a      	lsls	r2, r3
 80043ec:	4b2b      	ldr	r3, [pc, #172]	; (800449c <xTaskResumeAll+0x120>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	4a2a      	ldr	r2, [pc, #168]	; (800449c <xTaskResumeAll+0x120>)
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fa:	4613      	mov	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4a27      	ldr	r2, [pc, #156]	; (80044a0 <xTaskResumeAll+0x124>)
 8004404:	441a      	add	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	3304      	adds	r3, #4
 800440a:	4619      	mov	r1, r3
 800440c:	4610      	mov	r0, r2
 800440e:	f7ff f8e8 	bl	80035e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004416:	4b23      	ldr	r3, [pc, #140]	; (80044a4 <xTaskResumeAll+0x128>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	429a      	cmp	r2, r3
 800441e:	d302      	bcc.n	8004426 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004420:	4b21      	ldr	r3, [pc, #132]	; (80044a8 <xTaskResumeAll+0x12c>)
 8004422:	2201      	movs	r2, #1
 8004424:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004426:	4b1c      	ldr	r3, [pc, #112]	; (8004498 <xTaskResumeAll+0x11c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1cc      	bne.n	80043c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004434:	f000 fb2e 	bl	8004a94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004438:	4b1c      	ldr	r3, [pc, #112]	; (80044ac <xTaskResumeAll+0x130>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d010      	beq.n	8004466 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004444:	f000 f846 	bl	80044d4 <xTaskIncrementTick>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800444e:	4b16      	ldr	r3, [pc, #88]	; (80044a8 <xTaskResumeAll+0x12c>)
 8004450:	2201      	movs	r2, #1
 8004452:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3b01      	subs	r3, #1
 8004458:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f1      	bne.n	8004444 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004460:	4b12      	ldr	r3, [pc, #72]	; (80044ac <xTaskResumeAll+0x130>)
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004466:	4b10      	ldr	r3, [pc, #64]	; (80044a8 <xTaskResumeAll+0x12c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d009      	beq.n	8004482 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800446e:	2301      	movs	r3, #1
 8004470:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004472:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <xTaskResumeAll+0x134>)
 8004474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004482:	f001 f89f 	bl	80055c4 <vPortExitCritical>

	return xAlreadyYielded;
 8004486:	68bb      	ldr	r3, [r7, #8]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	20000610 	.word	0x20000610
 8004494:	200005e8 	.word	0x200005e8
 8004498:	200005a8 	.word	0x200005a8
 800449c:	200005f0 	.word	0x200005f0
 80044a0:	20000438 	.word	0x20000438
 80044a4:	20000434 	.word	0x20000434
 80044a8:	200005fc 	.word	0x200005fc
 80044ac:	200005f8 	.word	0x200005f8
 80044b0:	e000ed04 	.word	0xe000ed04

080044b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <xTaskGetTickCount+0x1c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80044c0:	687b      	ldr	r3, [r7, #4]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	200005ec 	.word	0x200005ec

080044d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044de:	4b4e      	ldr	r3, [pc, #312]	; (8004618 <xTaskIncrementTick+0x144>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f040 8088 	bne.w	80045f8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044e8:	4b4c      	ldr	r3, [pc, #304]	; (800461c <xTaskIncrementTick+0x148>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3301      	adds	r3, #1
 80044ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044f0:	4a4a      	ldr	r2, [pc, #296]	; (800461c <xTaskIncrementTick+0x148>)
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d120      	bne.n	800453e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80044fc:	4b48      	ldr	r3, [pc, #288]	; (8004620 <xTaskIncrementTick+0x14c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <xTaskIncrementTick+0x48>
	__asm volatile
 8004506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	603b      	str	r3, [r7, #0]
}
 8004518:	bf00      	nop
 800451a:	e7fe      	b.n	800451a <xTaskIncrementTick+0x46>
 800451c:	4b40      	ldr	r3, [pc, #256]	; (8004620 <xTaskIncrementTick+0x14c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	4b40      	ldr	r3, [pc, #256]	; (8004624 <xTaskIncrementTick+0x150>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a3e      	ldr	r2, [pc, #248]	; (8004620 <xTaskIncrementTick+0x14c>)
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	4a3e      	ldr	r2, [pc, #248]	; (8004624 <xTaskIncrementTick+0x150>)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	4b3d      	ldr	r3, [pc, #244]	; (8004628 <xTaskIncrementTick+0x154>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3301      	adds	r3, #1
 8004536:	4a3c      	ldr	r2, [pc, #240]	; (8004628 <xTaskIncrementTick+0x154>)
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	f000 faab 	bl	8004a94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800453e:	4b3b      	ldr	r3, [pc, #236]	; (800462c <xTaskIncrementTick+0x158>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	429a      	cmp	r2, r3
 8004546:	d348      	bcc.n	80045da <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004548:	4b35      	ldr	r3, [pc, #212]	; (8004620 <xTaskIncrementTick+0x14c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d104      	bne.n	800455c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004552:	4b36      	ldr	r3, [pc, #216]	; (800462c <xTaskIncrementTick+0x158>)
 8004554:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004558:	601a      	str	r2, [r3, #0]
					break;
 800455a:	e03e      	b.n	80045da <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800455c:	4b30      	ldr	r3, [pc, #192]	; (8004620 <xTaskIncrementTick+0x14c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	429a      	cmp	r2, r3
 8004572:	d203      	bcs.n	800457c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004574:	4a2d      	ldr	r2, [pc, #180]	; (800462c <xTaskIncrementTick+0x158>)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800457a:	e02e      	b.n	80045da <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	3304      	adds	r3, #4
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff f88b 	bl	800369c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458a:	2b00      	cmp	r3, #0
 800458c:	d004      	beq.n	8004598 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	3318      	adds	r3, #24
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff f882 	bl	800369c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	2201      	movs	r2, #1
 800459e:	409a      	lsls	r2, r3
 80045a0:	4b23      	ldr	r3, [pc, #140]	; (8004630 <xTaskIncrementTick+0x15c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	4a22      	ldr	r2, [pc, #136]	; (8004630 <xTaskIncrementTick+0x15c>)
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ae:	4613      	mov	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4a1f      	ldr	r2, [pc, #124]	; (8004634 <xTaskIncrementTick+0x160>)
 80045b8:	441a      	add	r2, r3
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	3304      	adds	r3, #4
 80045be:	4619      	mov	r1, r3
 80045c0:	4610      	mov	r0, r2
 80045c2:	f7ff f80e 	bl	80035e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ca:	4b1b      	ldr	r3, [pc, #108]	; (8004638 <xTaskIncrementTick+0x164>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d3b9      	bcc.n	8004548 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80045d4:	2301      	movs	r3, #1
 80045d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045d8:	e7b6      	b.n	8004548 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045da:	4b17      	ldr	r3, [pc, #92]	; (8004638 <xTaskIncrementTick+0x164>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e0:	4914      	ldr	r1, [pc, #80]	; (8004634 <xTaskIncrementTick+0x160>)
 80045e2:	4613      	mov	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d907      	bls.n	8004602 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80045f2:	2301      	movs	r3, #1
 80045f4:	617b      	str	r3, [r7, #20]
 80045f6:	e004      	b.n	8004602 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80045f8:	4b10      	ldr	r3, [pc, #64]	; (800463c <xTaskIncrementTick+0x168>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3301      	adds	r3, #1
 80045fe:	4a0f      	ldr	r2, [pc, #60]	; (800463c <xTaskIncrementTick+0x168>)
 8004600:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004602:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <xTaskIncrementTick+0x16c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800460a:	2301      	movs	r3, #1
 800460c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800460e:	697b      	ldr	r3, [r7, #20]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	20000610 	.word	0x20000610
 800461c:	200005ec 	.word	0x200005ec
 8004620:	200005a0 	.word	0x200005a0
 8004624:	200005a4 	.word	0x200005a4
 8004628:	20000600 	.word	0x20000600
 800462c:	20000608 	.word	0x20000608
 8004630:	200005f0 	.word	0x200005f0
 8004634:	20000438 	.word	0x20000438
 8004638:	20000434 	.word	0x20000434
 800463c:	200005f8 	.word	0x200005f8
 8004640:	200005fc 	.word	0x200005fc

08004644 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800464a:	4b27      	ldr	r3, [pc, #156]	; (80046e8 <vTaskSwitchContext+0xa4>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004652:	4b26      	ldr	r3, [pc, #152]	; (80046ec <vTaskSwitchContext+0xa8>)
 8004654:	2201      	movs	r2, #1
 8004656:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004658:	e03f      	b.n	80046da <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800465a:	4b24      	ldr	r3, [pc, #144]	; (80046ec <vTaskSwitchContext+0xa8>)
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004660:	4b23      	ldr	r3, [pc, #140]	; (80046f0 <vTaskSwitchContext+0xac>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	fab3 f383 	clz	r3, r3
 800466c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800466e:	7afb      	ldrb	r3, [r7, #11]
 8004670:	f1c3 031f 	rsb	r3, r3, #31
 8004674:	617b      	str	r3, [r7, #20]
 8004676:	491f      	ldr	r1, [pc, #124]	; (80046f4 <vTaskSwitchContext+0xb0>)
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4613      	mov	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	440b      	add	r3, r1
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10a      	bne.n	80046a0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800468a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	607b      	str	r3, [r7, #4]
}
 800469c:	bf00      	nop
 800469e:	e7fe      	b.n	800469e <vTaskSwitchContext+0x5a>
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	4613      	mov	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4a12      	ldr	r2, [pc, #72]	; (80046f4 <vTaskSwitchContext+0xb0>)
 80046ac:	4413      	add	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	605a      	str	r2, [r3, #4]
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	3308      	adds	r3, #8
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d104      	bne.n	80046d0 <vTaskSwitchContext+0x8c>
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	605a      	str	r2, [r3, #4]
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	4a08      	ldr	r2, [pc, #32]	; (80046f8 <vTaskSwitchContext+0xb4>)
 80046d8:	6013      	str	r3, [r2, #0]
}
 80046da:	bf00      	nop
 80046dc:	371c      	adds	r7, #28
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	20000610 	.word	0x20000610
 80046ec:	200005fc 	.word	0x200005fc
 80046f0:	200005f0 	.word	0x200005f0
 80046f4:	20000438 	.word	0x20000438
 80046f8:	20000434 	.word	0x20000434

080046fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10a      	bne.n	8004722 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	60fb      	str	r3, [r7, #12]
}
 800471e:	bf00      	nop
 8004720:	e7fe      	b.n	8004720 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004722:	4b07      	ldr	r3, [pc, #28]	; (8004740 <vTaskPlaceOnEventList+0x44>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3318      	adds	r3, #24
 8004728:	4619      	mov	r1, r3
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7fe ff7d 	bl	800362a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004730:	2101      	movs	r1, #1
 8004732:	6838      	ldr	r0, [r7, #0]
 8004734:	f000 fa72 	bl	8004c1c <prvAddCurrentTaskToDelayedList>
}
 8004738:	bf00      	nop
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	20000434 	.word	0x20000434

08004744 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10a      	bne.n	800476c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	617b      	str	r3, [r7, #20]
}
 8004768:	bf00      	nop
 800476a:	e7fe      	b.n	800476a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800476c:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <vTaskPlaceOnEventListRestricted+0x54>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3318      	adds	r3, #24
 8004772:	4619      	mov	r1, r3
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f7fe ff34 	bl	80035e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004784:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	68b8      	ldr	r0, [r7, #8]
 800478a:	f000 fa47 	bl	8004c1c <prvAddCurrentTaskToDelayedList>
	}
 800478e:	bf00      	nop
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	20000434 	.word	0x20000434

0800479c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10a      	bne.n	80047c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80047b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	60fb      	str	r3, [r7, #12]
}
 80047c4:	bf00      	nop
 80047c6:	e7fe      	b.n	80047c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	3318      	adds	r3, #24
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fe ff65 	bl	800369c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047d2:	4b1d      	ldr	r3, [pc, #116]	; (8004848 <xTaskRemoveFromEventList+0xac>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d11c      	bne.n	8004814 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	3304      	adds	r3, #4
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fe ff5c 	bl	800369c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e8:	2201      	movs	r2, #1
 80047ea:	409a      	lsls	r2, r3
 80047ec:	4b17      	ldr	r3, [pc, #92]	; (800484c <xTaskRemoveFromEventList+0xb0>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	4a16      	ldr	r2, [pc, #88]	; (800484c <xTaskRemoveFromEventList+0xb0>)
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047fa:	4613      	mov	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4a13      	ldr	r2, [pc, #76]	; (8004850 <xTaskRemoveFromEventList+0xb4>)
 8004804:	441a      	add	r2, r3
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	3304      	adds	r3, #4
 800480a:	4619      	mov	r1, r3
 800480c:	4610      	mov	r0, r2
 800480e:	f7fe fee8 	bl	80035e2 <vListInsertEnd>
 8004812:	e005      	b.n	8004820 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	3318      	adds	r3, #24
 8004818:	4619      	mov	r1, r3
 800481a:	480e      	ldr	r0, [pc, #56]	; (8004854 <xTaskRemoveFromEventList+0xb8>)
 800481c:	f7fe fee1 	bl	80035e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004824:	4b0c      	ldr	r3, [pc, #48]	; (8004858 <xTaskRemoveFromEventList+0xbc>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	429a      	cmp	r2, r3
 800482c:	d905      	bls.n	800483a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800482e:	2301      	movs	r3, #1
 8004830:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004832:	4b0a      	ldr	r3, [pc, #40]	; (800485c <xTaskRemoveFromEventList+0xc0>)
 8004834:	2201      	movs	r2, #1
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	e001      	b.n	800483e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800483a:	2300      	movs	r3, #0
 800483c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800483e:	697b      	ldr	r3, [r7, #20]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	20000610 	.word	0x20000610
 800484c:	200005f0 	.word	0x200005f0
 8004850:	20000438 	.word	0x20000438
 8004854:	200005a8 	.word	0x200005a8
 8004858:	20000434 	.word	0x20000434
 800485c:	200005fc 	.word	0x200005fc

08004860 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004868:	4b06      	ldr	r3, [pc, #24]	; (8004884 <vTaskInternalSetTimeOutState+0x24>)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004870:	4b05      	ldr	r3, [pc, #20]	; (8004888 <vTaskInternalSetTimeOutState+0x28>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	605a      	str	r2, [r3, #4]
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	20000600 	.word	0x20000600
 8004888:	200005ec 	.word	0x200005ec

0800488c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10a      	bne.n	80048b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800489c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a0:	f383 8811 	msr	BASEPRI, r3
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	613b      	str	r3, [r7, #16]
}
 80048ae:	bf00      	nop
 80048b0:	e7fe      	b.n	80048b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10a      	bne.n	80048ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80048b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048bc:	f383 8811 	msr	BASEPRI, r3
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	60fb      	str	r3, [r7, #12]
}
 80048ca:	bf00      	nop
 80048cc:	e7fe      	b.n	80048cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80048ce:	f000 fe49 	bl	8005564 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80048d2:	4b1d      	ldr	r3, [pc, #116]	; (8004948 <xTaskCheckForTimeOut+0xbc>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048ea:	d102      	bne.n	80048f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80048ec:	2300      	movs	r3, #0
 80048ee:	61fb      	str	r3, [r7, #28]
 80048f0:	e023      	b.n	800493a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	4b15      	ldr	r3, [pc, #84]	; (800494c <xTaskCheckForTimeOut+0xc0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d007      	beq.n	800490e <xTaskCheckForTimeOut+0x82>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	429a      	cmp	r2, r3
 8004906:	d302      	bcc.n	800490e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004908:	2301      	movs	r3, #1
 800490a:	61fb      	str	r3, [r7, #28]
 800490c:	e015      	b.n	800493a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	429a      	cmp	r2, r3
 8004916:	d20b      	bcs.n	8004930 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	1ad2      	subs	r2, r2, r3
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7ff ff9b 	bl	8004860 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800492a:	2300      	movs	r3, #0
 800492c:	61fb      	str	r3, [r7, #28]
 800492e:	e004      	b.n	800493a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004936:	2301      	movs	r3, #1
 8004938:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800493a:	f000 fe43 	bl	80055c4 <vPortExitCritical>

	return xReturn;
 800493e:	69fb      	ldr	r3, [r7, #28]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3720      	adds	r7, #32
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	200005ec 	.word	0x200005ec
 800494c:	20000600 	.word	0x20000600

08004950 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004954:	4b03      	ldr	r3, [pc, #12]	; (8004964 <vTaskMissedYield+0x14>)
 8004956:	2201      	movs	r2, #1
 8004958:	601a      	str	r2, [r3, #0]
}
 800495a:	bf00      	nop
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	200005fc 	.word	0x200005fc

08004968 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004970:	f000 f852 	bl	8004a18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004974:	4b06      	ldr	r3, [pc, #24]	; (8004990 <prvIdleTask+0x28>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d9f9      	bls.n	8004970 <prvIdleTask+0x8>
			{
				taskYIELD();
 800497c:	4b05      	ldr	r3, [pc, #20]	; (8004994 <prvIdleTask+0x2c>)
 800497e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800498c:	e7f0      	b.n	8004970 <prvIdleTask+0x8>
 800498e:	bf00      	nop
 8004990:	20000438 	.word	0x20000438
 8004994:	e000ed04 	.word	0xe000ed04

08004998 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800499e:	2300      	movs	r3, #0
 80049a0:	607b      	str	r3, [r7, #4]
 80049a2:	e00c      	b.n	80049be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	4613      	mov	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4413      	add	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4a12      	ldr	r2, [pc, #72]	; (80049f8 <prvInitialiseTaskLists+0x60>)
 80049b0:	4413      	add	r3, r2
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fe fde8 	bl	8003588 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3301      	adds	r3, #1
 80049bc:	607b      	str	r3, [r7, #4]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b0f      	cmp	r3, #15
 80049c2:	d9ef      	bls.n	80049a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80049c4:	480d      	ldr	r0, [pc, #52]	; (80049fc <prvInitialiseTaskLists+0x64>)
 80049c6:	f7fe fddf 	bl	8003588 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80049ca:	480d      	ldr	r0, [pc, #52]	; (8004a00 <prvInitialiseTaskLists+0x68>)
 80049cc:	f7fe fddc 	bl	8003588 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80049d0:	480c      	ldr	r0, [pc, #48]	; (8004a04 <prvInitialiseTaskLists+0x6c>)
 80049d2:	f7fe fdd9 	bl	8003588 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80049d6:	480c      	ldr	r0, [pc, #48]	; (8004a08 <prvInitialiseTaskLists+0x70>)
 80049d8:	f7fe fdd6 	bl	8003588 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80049dc:	480b      	ldr	r0, [pc, #44]	; (8004a0c <prvInitialiseTaskLists+0x74>)
 80049de:	f7fe fdd3 	bl	8003588 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80049e2:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <prvInitialiseTaskLists+0x78>)
 80049e4:	4a05      	ldr	r2, [pc, #20]	; (80049fc <prvInitialiseTaskLists+0x64>)
 80049e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049e8:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <prvInitialiseTaskLists+0x7c>)
 80049ea:	4a05      	ldr	r2, [pc, #20]	; (8004a00 <prvInitialiseTaskLists+0x68>)
 80049ec:	601a      	str	r2, [r3, #0]
}
 80049ee:	bf00      	nop
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	20000438 	.word	0x20000438
 80049fc:	20000578 	.word	0x20000578
 8004a00:	2000058c 	.word	0x2000058c
 8004a04:	200005a8 	.word	0x200005a8
 8004a08:	200005bc 	.word	0x200005bc
 8004a0c:	200005d4 	.word	0x200005d4
 8004a10:	200005a0 	.word	0x200005a0
 8004a14:	200005a4 	.word	0x200005a4

08004a18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a1e:	e019      	b.n	8004a54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a20:	f000 fda0 	bl	8005564 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a24:	4b10      	ldr	r3, [pc, #64]	; (8004a68 <prvCheckTasksWaitingTermination+0x50>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3304      	adds	r3, #4
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fe fe33 	bl	800369c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a36:	4b0d      	ldr	r3, [pc, #52]	; (8004a6c <prvCheckTasksWaitingTermination+0x54>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	4a0b      	ldr	r2, [pc, #44]	; (8004a6c <prvCheckTasksWaitingTermination+0x54>)
 8004a3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a40:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <prvCheckTasksWaitingTermination+0x58>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3b01      	subs	r3, #1
 8004a46:	4a0a      	ldr	r2, [pc, #40]	; (8004a70 <prvCheckTasksWaitingTermination+0x58>)
 8004a48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a4a:	f000 fdbb 	bl	80055c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f810 	bl	8004a74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a54:	4b06      	ldr	r3, [pc, #24]	; (8004a70 <prvCheckTasksWaitingTermination+0x58>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1e1      	bne.n	8004a20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a5c:	bf00      	nop
 8004a5e:	bf00      	nop
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	200005bc 	.word	0x200005bc
 8004a6c:	200005e8 	.word	0x200005e8
 8004a70:	200005d0 	.word	0x200005d0

08004a74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 ff55 	bl	8005930 <vPortFree>
			vPortFree( pxTCB );
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 ff52 	bl	8005930 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a8c:	bf00      	nop
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a9a:	4b0c      	ldr	r3, [pc, #48]	; (8004acc <prvResetNextTaskUnblockTime+0x38>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d104      	bne.n	8004aae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004aa4:	4b0a      	ldr	r3, [pc, #40]	; (8004ad0 <prvResetNextTaskUnblockTime+0x3c>)
 8004aa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004aaa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004aac:	e008      	b.n	8004ac0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aae:	4b07      	ldr	r3, [pc, #28]	; (8004acc <prvResetNextTaskUnblockTime+0x38>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	4a04      	ldr	r2, [pc, #16]	; (8004ad0 <prvResetNextTaskUnblockTime+0x3c>)
 8004abe:	6013      	str	r3, [r2, #0]
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	200005a0 	.word	0x200005a0
 8004ad0:	20000608 	.word	0x20000608

08004ad4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ada:	4b0b      	ldr	r3, [pc, #44]	; (8004b08 <xTaskGetSchedulerState+0x34>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d102      	bne.n	8004ae8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	607b      	str	r3, [r7, #4]
 8004ae6:	e008      	b.n	8004afa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ae8:	4b08      	ldr	r3, [pc, #32]	; (8004b0c <xTaskGetSchedulerState+0x38>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d102      	bne.n	8004af6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004af0:	2302      	movs	r3, #2
 8004af2:	607b      	str	r3, [r7, #4]
 8004af4:	e001      	b.n	8004afa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004af6:	2300      	movs	r3, #0
 8004af8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004afa:	687b      	ldr	r3, [r7, #4]
	}
 8004afc:	4618      	mov	r0, r3
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	200005f4 	.word	0x200005f4
 8004b0c:	20000610 	.word	0x20000610

08004b10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d06e      	beq.n	8004c04 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b26:	4b3a      	ldr	r3, [pc, #232]	; (8004c10 <xTaskPriorityDisinherit+0x100>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d00a      	beq.n	8004b46 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	60fb      	str	r3, [r7, #12]
}
 8004b42:	bf00      	nop
 8004b44:	e7fe      	b.n	8004b44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10a      	bne.n	8004b64 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	60bb      	str	r3, [r7, #8]
}
 8004b60:	bf00      	nop
 8004b62:	e7fe      	b.n	8004b62 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b68:	1e5a      	subs	r2, r3, #1
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d044      	beq.n	8004c04 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d140      	bne.n	8004c04 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	3304      	adds	r3, #4
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fe fd88 	bl	800369c <uxListRemove>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d115      	bne.n	8004bbe <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b96:	491f      	ldr	r1, [pc, #124]	; (8004c14 <xTaskPriorityDisinherit+0x104>)
 8004b98:	4613      	mov	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10a      	bne.n	8004bbe <xTaskPriorityDisinherit+0xae>
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	2201      	movs	r2, #1
 8004bae:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb2:	43da      	mvns	r2, r3
 8004bb4:	4b18      	ldr	r3, [pc, #96]	; (8004c18 <xTaskPriorityDisinherit+0x108>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	4a17      	ldr	r2, [pc, #92]	; (8004c18 <xTaskPriorityDisinherit+0x108>)
 8004bbc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	f1c3 0210 	rsb	r2, r3, #16
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	409a      	lsls	r2, r3
 8004bda:	4b0f      	ldr	r3, [pc, #60]	; (8004c18 <xTaskPriorityDisinherit+0x108>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	4a0d      	ldr	r2, [pc, #52]	; (8004c18 <xTaskPriorityDisinherit+0x108>)
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be8:	4613      	mov	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4a08      	ldr	r2, [pc, #32]	; (8004c14 <xTaskPriorityDisinherit+0x104>)
 8004bf2:	441a      	add	r2, r3
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	f7fe fcf1 	bl	80035e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c00:	2301      	movs	r3, #1
 8004c02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c04:	697b      	ldr	r3, [r7, #20]
	}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3718      	adds	r7, #24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20000434 	.word	0x20000434
 8004c14:	20000438 	.word	0x20000438
 8004c18:	200005f0 	.word	0x200005f0

08004c1c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c26:	4b29      	ldr	r3, [pc, #164]	; (8004ccc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c2c:	4b28      	ldr	r3, [pc, #160]	; (8004cd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	3304      	adds	r3, #4
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fe fd32 	bl	800369c <uxListRemove>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10b      	bne.n	8004c56 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004c3e:	4b24      	ldr	r3, [pc, #144]	; (8004cd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	2201      	movs	r2, #1
 8004c46:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4a:	43da      	mvns	r2, r3
 8004c4c:	4b21      	ldr	r3, [pc, #132]	; (8004cd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4013      	ands	r3, r2
 8004c52:	4a20      	ldr	r2, [pc, #128]	; (8004cd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c54:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c5c:	d10a      	bne.n	8004c74 <prvAddCurrentTaskToDelayedList+0x58>
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d007      	beq.n	8004c74 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c64:	4b1a      	ldr	r3, [pc, #104]	; (8004cd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	481a      	ldr	r0, [pc, #104]	; (8004cd8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c6e:	f7fe fcb8 	bl	80035e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c72:	e026      	b.n	8004cc2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4413      	add	r3, r2
 8004c7a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c7c:	4b14      	ldr	r3, [pc, #80]	; (8004cd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d209      	bcs.n	8004ca0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c8c:	4b13      	ldr	r3, [pc, #76]	; (8004cdc <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	4b0f      	ldr	r3, [pc, #60]	; (8004cd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3304      	adds	r3, #4
 8004c96:	4619      	mov	r1, r3
 8004c98:	4610      	mov	r0, r2
 8004c9a:	f7fe fcc6 	bl	800362a <vListInsert>
}
 8004c9e:	e010      	b.n	8004cc2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ca0:	4b0f      	ldr	r3, [pc, #60]	; (8004ce0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	4b0a      	ldr	r3, [pc, #40]	; (8004cd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3304      	adds	r3, #4
 8004caa:	4619      	mov	r1, r3
 8004cac:	4610      	mov	r0, r2
 8004cae:	f7fe fcbc 	bl	800362a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004cb2:	4b0c      	ldr	r3, [pc, #48]	; (8004ce4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d202      	bcs.n	8004cc2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004cbc:	4a09      	ldr	r2, [pc, #36]	; (8004ce4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	6013      	str	r3, [r2, #0]
}
 8004cc2:	bf00      	nop
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	200005ec 	.word	0x200005ec
 8004cd0:	20000434 	.word	0x20000434
 8004cd4:	200005f0 	.word	0x200005f0
 8004cd8:	200005d4 	.word	0x200005d4
 8004cdc:	200005a4 	.word	0x200005a4
 8004ce0:	200005a0 	.word	0x200005a0
 8004ce4:	20000608 	.word	0x20000608

08004ce8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004cf2:	f000 fad5 	bl	80052a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004cf6:	4b11      	ldr	r3, [pc, #68]	; (8004d3c <xTimerCreateTimerTask+0x54>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00b      	beq.n	8004d16 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8004cfe:	4b10      	ldr	r3, [pc, #64]	; (8004d40 <xTimerCreateTimerTask+0x58>)
 8004d00:	9301      	str	r3, [sp, #4]
 8004d02:	2302      	movs	r3, #2
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	2300      	movs	r3, #0
 8004d08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004d0c:	490d      	ldr	r1, [pc, #52]	; (8004d44 <xTimerCreateTimerTask+0x5c>)
 8004d0e:	480e      	ldr	r0, [pc, #56]	; (8004d48 <xTimerCreateTimerTask+0x60>)
 8004d10:	f7ff f99a 	bl	8004048 <xTaskCreate>
 8004d14:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10a      	bne.n	8004d32 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8004d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d20:	f383 8811 	msr	BASEPRI, r3
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	603b      	str	r3, [r7, #0]
}
 8004d2e:	bf00      	nop
 8004d30:	e7fe      	b.n	8004d30 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8004d32:	687b      	ldr	r3, [r7, #4]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	20000644 	.word	0x20000644
 8004d40:	20000648 	.word	0x20000648
 8004d44:	080064f4 	.word	0x080064f4
 8004d48:	08004e81 	.word	0x08004e81

08004d4c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08a      	sub	sp, #40	; 0x28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10a      	bne.n	8004d7a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d68:	f383 8811 	msr	BASEPRI, r3
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	623b      	str	r3, [r7, #32]
}
 8004d76:	bf00      	nop
 8004d78:	e7fe      	b.n	8004d78 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004d7a:	4b1a      	ldr	r3, [pc, #104]	; (8004de4 <xTimerGenericCommand+0x98>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d02a      	beq.n	8004dd8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	2b05      	cmp	r3, #5
 8004d92:	dc18      	bgt.n	8004dc6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004d94:	f7ff fe9e 	bl	8004ad4 <xTaskGetSchedulerState>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d109      	bne.n	8004db2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004d9e:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <xTimerGenericCommand+0x98>)
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	f107 0114 	add.w	r1, r7, #20
 8004da6:	2300      	movs	r3, #0
 8004da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004daa:	f7fe fd69 	bl	8003880 <xQueueGenericSend>
 8004dae:	6278      	str	r0, [r7, #36]	; 0x24
 8004db0:	e012      	b.n	8004dd8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004db2:	4b0c      	ldr	r3, [pc, #48]	; (8004de4 <xTimerGenericCommand+0x98>)
 8004db4:	6818      	ldr	r0, [r3, #0]
 8004db6:	f107 0114 	add.w	r1, r7, #20
 8004dba:	2300      	movs	r3, #0
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f7fe fd5f 	bl	8003880 <xQueueGenericSend>
 8004dc2:	6278      	str	r0, [r7, #36]	; 0x24
 8004dc4:	e008      	b.n	8004dd8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004dc6:	4b07      	ldr	r3, [pc, #28]	; (8004de4 <xTimerGenericCommand+0x98>)
 8004dc8:	6818      	ldr	r0, [r3, #0]
 8004dca:	f107 0114 	add.w	r1, r7, #20
 8004dce:	2300      	movs	r3, #0
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	f7fe fe53 	bl	8003a7c <xQueueGenericSendFromISR>
 8004dd6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3728      	adds	r7, #40	; 0x28
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20000644 	.word	0x20000644

08004de8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b088      	sub	sp, #32
 8004dec:	af02      	add	r7, sp, #8
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004df2:	4b22      	ldr	r3, [pc, #136]	; (8004e7c <prvProcessExpiredTimer+0x94>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	3304      	adds	r3, #4
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7fe fc4b 	bl	800369c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d022      	beq.n	8004e5a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	699a      	ldr	r2, [r3, #24]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	18d1      	adds	r1, r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	6978      	ldr	r0, [r7, #20]
 8004e22:	f000 f8d1 	bl	8004fc8 <prvInsertTimerInActiveList>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d01f      	beq.n	8004e6c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	2300      	movs	r3, #0
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	2100      	movs	r1, #0
 8004e36:	6978      	ldr	r0, [r7, #20]
 8004e38:	f7ff ff88 	bl	8004d4c <xTimerGenericCommand>
 8004e3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d113      	bne.n	8004e6c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	60fb      	str	r3, [r7, #12]
}
 8004e56:	bf00      	nop
 8004e58:	e7fe      	b.n	8004e58 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e60:	f023 0301 	bic.w	r3, r3, #1
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	6978      	ldr	r0, [r7, #20]
 8004e72:	4798      	blx	r3
}
 8004e74:	bf00      	nop
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	2000063c 	.word	0x2000063c

08004e80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e88:	f107 0308 	add.w	r3, r7, #8
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 f857 	bl	8004f40 <prvGetNextExpireTime>
 8004e92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	4619      	mov	r1, r3
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 f803 	bl	8004ea4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004e9e:	f000 f8d5 	bl	800504c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ea2:	e7f1      	b.n	8004e88 <prvTimerTask+0x8>

08004ea4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004eae:	f7ff fa57 	bl	8004360 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004eb2:	f107 0308 	add.w	r3, r7, #8
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 f866 	bl	8004f88 <prvSampleTimeNow>
 8004ebc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d130      	bne.n	8004f26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10a      	bne.n	8004ee0 <prvProcessTimerOrBlockTask+0x3c>
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d806      	bhi.n	8004ee0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004ed2:	f7ff fa53 	bl	800437c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004ed6:	68f9      	ldr	r1, [r7, #12]
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff ff85 	bl	8004de8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004ede:	e024      	b.n	8004f2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d008      	beq.n	8004ef8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004ee6:	4b13      	ldr	r3, [pc, #76]	; (8004f34 <prvProcessTimerOrBlockTask+0x90>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <prvProcessTimerOrBlockTask+0x50>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e000      	b.n	8004ef6 <prvProcessTimerOrBlockTask+0x52>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ef8:	4b0f      	ldr	r3, [pc, #60]	; (8004f38 <prvProcessTimerOrBlockTask+0x94>)
 8004efa:	6818      	ldr	r0, [r3, #0]
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	4619      	mov	r1, r3
 8004f06:	f7ff f86b 	bl	8003fe0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f0a:	f7ff fa37 	bl	800437c <xTaskResumeAll>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10a      	bne.n	8004f2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004f14:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <prvProcessTimerOrBlockTask+0x98>)
 8004f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	f3bf 8f6f 	isb	sy
}
 8004f24:	e001      	b.n	8004f2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004f26:	f7ff fa29 	bl	800437c <xTaskResumeAll>
}
 8004f2a:	bf00      	nop
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20000640 	.word	0x20000640
 8004f38:	20000644 	.word	0x20000644
 8004f3c:	e000ed04 	.word	0xe000ed04

08004f40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f48:	4b0e      	ldr	r3, [pc, #56]	; (8004f84 <prvGetNextExpireTime+0x44>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <prvGetNextExpireTime+0x16>
 8004f52:	2201      	movs	r2, #1
 8004f54:	e000      	b.n	8004f58 <prvGetNextExpireTime+0x18>
 8004f56:	2200      	movs	r2, #0
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d105      	bne.n	8004f70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f64:	4b07      	ldr	r3, [pc, #28]	; (8004f84 <prvGetNextExpireTime+0x44>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	60fb      	str	r3, [r7, #12]
 8004f6e:	e001      	b.n	8004f74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004f74:	68fb      	ldr	r3, [r7, #12]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	2000063c 	.word	0x2000063c

08004f88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004f90:	f7ff fa90 	bl	80044b4 <xTaskGetTickCount>
 8004f94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004f96:	4b0b      	ldr	r3, [pc, #44]	; (8004fc4 <prvSampleTimeNow+0x3c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d205      	bcs.n	8004fac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004fa0:	f000 f91a 	bl	80051d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	e002      	b.n	8004fb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004fb2:	4a04      	ldr	r2, [pc, #16]	; (8004fc4 <prvSampleTimeNow+0x3c>)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	2000064c 	.word	0x2000064c

08004fc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
 8004fd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d812      	bhi.n	8005014 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	1ad2      	subs	r2, r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d302      	bcc.n	8005002 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	e01b      	b.n	800503a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005002:	4b10      	ldr	r3, [pc, #64]	; (8005044 <prvInsertTimerInActiveList+0x7c>)
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	3304      	adds	r3, #4
 800500a:	4619      	mov	r1, r3
 800500c:	4610      	mov	r0, r2
 800500e:	f7fe fb0c 	bl	800362a <vListInsert>
 8005012:	e012      	b.n	800503a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	429a      	cmp	r2, r3
 800501a:	d206      	bcs.n	800502a <prvInsertTimerInActiveList+0x62>
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	429a      	cmp	r2, r3
 8005022:	d302      	bcc.n	800502a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005024:	2301      	movs	r3, #1
 8005026:	617b      	str	r3, [r7, #20]
 8005028:	e007      	b.n	800503a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800502a:	4b07      	ldr	r3, [pc, #28]	; (8005048 <prvInsertTimerInActiveList+0x80>)
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3304      	adds	r3, #4
 8005032:	4619      	mov	r1, r3
 8005034:	4610      	mov	r0, r2
 8005036:	f7fe faf8 	bl	800362a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800503a:	697b      	ldr	r3, [r7, #20]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3718      	adds	r7, #24
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	20000640 	.word	0x20000640
 8005048:	2000063c 	.word	0x2000063c

0800504c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b08c      	sub	sp, #48	; 0x30
 8005050:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005052:	e0ae      	b.n	80051b2 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	f2c0 80aa 	blt.w	80051b0 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d004      	beq.n	8005072 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	3304      	adds	r3, #4
 800506c:	4618      	mov	r0, r3
 800506e:	f7fe fb15 	bl	800369c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005072:	1d3b      	adds	r3, r7, #4
 8005074:	4618      	mov	r0, r3
 8005076:	f7ff ff87 	bl	8004f88 <prvSampleTimeNow>
 800507a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	2b09      	cmp	r3, #9
 8005080:	f200 8097 	bhi.w	80051b2 <prvProcessReceivedCommands+0x166>
 8005084:	a201      	add	r2, pc, #4	; (adr r2, 800508c <prvProcessReceivedCommands+0x40>)
 8005086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508a:	bf00      	nop
 800508c:	080050b5 	.word	0x080050b5
 8005090:	080050b5 	.word	0x080050b5
 8005094:	080050b5 	.word	0x080050b5
 8005098:	08005129 	.word	0x08005129
 800509c:	0800513d 	.word	0x0800513d
 80050a0:	08005187 	.word	0x08005187
 80050a4:	080050b5 	.word	0x080050b5
 80050a8:	080050b5 	.word	0x080050b5
 80050ac:	08005129 	.word	0x08005129
 80050b0:	0800513d 	.word	0x0800513d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050ba:	f043 0301 	orr.w	r3, r3, #1
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	18d1      	adds	r1, r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a3a      	ldr	r2, [r7, #32]
 80050d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050d4:	f7ff ff78 	bl	8004fc8 <prvInsertTimerInActiveList>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d069      	beq.n	80051b2 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d05e      	beq.n	80051b2 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	441a      	add	r2, r3
 80050fc:	2300      	movs	r3, #0
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	2300      	movs	r3, #0
 8005102:	2100      	movs	r1, #0
 8005104:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005106:	f7ff fe21 	bl	8004d4c <xTimerGenericCommand>
 800510a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d14f      	bne.n	80051b2 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8005112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	61bb      	str	r3, [r7, #24]
}
 8005124:	bf00      	nop
 8005126:	e7fe      	b.n	8005126 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800512e:	f023 0301 	bic.w	r3, r3, #1
 8005132:	b2da      	uxtb	r2, r3
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800513a:	e03a      	b.n	80051b2 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005142:	f043 0301 	orr.w	r3, r3, #1
 8005146:	b2da      	uxtb	r2, r3
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10a      	bne.n	8005172 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800515c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	617b      	str	r3, [r7, #20]
}
 800516e:	bf00      	nop
 8005170:	e7fe      	b.n	8005170 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	699a      	ldr	r2, [r3, #24]
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	18d1      	adds	r1, r2, r3
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	6a3a      	ldr	r2, [r7, #32]
 800517e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005180:	f7ff ff22 	bl	8004fc8 <prvInsertTimerInActiveList>
					break;
 8005184:	e015      	b.n	80051b2 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d103      	bne.n	800519c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8005194:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005196:	f000 fbcb 	bl	8005930 <vPortFree>
 800519a:	e00a      	b.n	80051b2 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051a2:	f023 0301 	bic.w	r3, r3, #1
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80051ae:	e000      	b.n	80051b2 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80051b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80051b2:	4b08      	ldr	r3, [pc, #32]	; (80051d4 <prvProcessReceivedCommands+0x188>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f107 0108 	add.w	r1, r7, #8
 80051ba:	2200      	movs	r2, #0
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fe fcf5 	bl	8003bac <xQueueReceive>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f47f af45 	bne.w	8005054 <prvProcessReceivedCommands+0x8>
	}
}
 80051ca:	bf00      	nop
 80051cc:	bf00      	nop
 80051ce:	3728      	adds	r7, #40	; 0x28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	20000644 	.word	0x20000644

080051d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051de:	e048      	b.n	8005272 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051e0:	4b2d      	ldr	r3, [pc, #180]	; (8005298 <prvSwitchTimerLists+0xc0>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051ea:	4b2b      	ldr	r3, [pc, #172]	; (8005298 <prvSwitchTimerLists+0xc0>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	3304      	adds	r3, #4
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fe fa4f 	bl	800369c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800520c:	f003 0304 	and.w	r3, r3, #4
 8005210:	2b00      	cmp	r3, #0
 8005212:	d02e      	beq.n	8005272 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	4413      	add	r3, r2
 800521c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	429a      	cmp	r2, r3
 8005224:	d90e      	bls.n	8005244 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005232:	4b19      	ldr	r3, [pc, #100]	; (8005298 <prvSwitchTimerLists+0xc0>)
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	3304      	adds	r3, #4
 800523a:	4619      	mov	r1, r3
 800523c:	4610      	mov	r0, r2
 800523e:	f7fe f9f4 	bl	800362a <vListInsert>
 8005242:	e016      	b.n	8005272 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005244:	2300      	movs	r3, #0
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	2300      	movs	r3, #0
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	2100      	movs	r1, #0
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f7ff fd7c 	bl	8004d4c <xTimerGenericCommand>
 8005254:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10a      	bne.n	8005272 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800525c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	603b      	str	r3, [r7, #0]
}
 800526e:	bf00      	nop
 8005270:	e7fe      	b.n	8005270 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005272:	4b09      	ldr	r3, [pc, #36]	; (8005298 <prvSwitchTimerLists+0xc0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1b1      	bne.n	80051e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800527c:	4b06      	ldr	r3, [pc, #24]	; (8005298 <prvSwitchTimerLists+0xc0>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005282:	4b06      	ldr	r3, [pc, #24]	; (800529c <prvSwitchTimerLists+0xc4>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a04      	ldr	r2, [pc, #16]	; (8005298 <prvSwitchTimerLists+0xc0>)
 8005288:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800528a:	4a04      	ldr	r2, [pc, #16]	; (800529c <prvSwitchTimerLists+0xc4>)
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	6013      	str	r3, [r2, #0]
}
 8005290:	bf00      	nop
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	2000063c 	.word	0x2000063c
 800529c:	20000640 	.word	0x20000640

080052a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80052a4:	f000 f95e 	bl	8005564 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80052a8:	4b12      	ldr	r3, [pc, #72]	; (80052f4 <prvCheckForValidListAndQueue+0x54>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d11d      	bne.n	80052ec <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80052b0:	4811      	ldr	r0, [pc, #68]	; (80052f8 <prvCheckForValidListAndQueue+0x58>)
 80052b2:	f7fe f969 	bl	8003588 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80052b6:	4811      	ldr	r0, [pc, #68]	; (80052fc <prvCheckForValidListAndQueue+0x5c>)
 80052b8:	f7fe f966 	bl	8003588 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80052bc:	4b10      	ldr	r3, [pc, #64]	; (8005300 <prvCheckForValidListAndQueue+0x60>)
 80052be:	4a0e      	ldr	r2, [pc, #56]	; (80052f8 <prvCheckForValidListAndQueue+0x58>)
 80052c0:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80052c2:	4b10      	ldr	r3, [pc, #64]	; (8005304 <prvCheckForValidListAndQueue+0x64>)
 80052c4:	4a0d      	ldr	r2, [pc, #52]	; (80052fc <prvCheckForValidListAndQueue+0x5c>)
 80052c6:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80052c8:	2200      	movs	r2, #0
 80052ca:	210c      	movs	r1, #12
 80052cc:	200a      	movs	r0, #10
 80052ce:	f7fe fa77 	bl	80037c0 <xQueueGenericCreate>
 80052d2:	4603      	mov	r3, r0
 80052d4:	4a07      	ldr	r2, [pc, #28]	; (80052f4 <prvCheckForValidListAndQueue+0x54>)
 80052d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80052d8:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <prvCheckForValidListAndQueue+0x54>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80052e0:	4b04      	ldr	r3, [pc, #16]	; (80052f4 <prvCheckForValidListAndQueue+0x54>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4908      	ldr	r1, [pc, #32]	; (8005308 <prvCheckForValidListAndQueue+0x68>)
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fe fe50 	bl	8003f8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052ec:	f000 f96a 	bl	80055c4 <vPortExitCritical>
}
 80052f0:	bf00      	nop
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	20000644 	.word	0x20000644
 80052f8:	20000614 	.word	0x20000614
 80052fc:	20000628 	.word	0x20000628
 8005300:	2000063c 	.word	0x2000063c
 8005304:	20000640 	.word	0x20000640
 8005308:	080064fc 	.word	0x080064fc

0800530c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	3b04      	subs	r3, #4
 800531c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005324:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	3b04      	subs	r3, #4
 800532a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f023 0201 	bic.w	r2, r3, #1
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	3b04      	subs	r3, #4
 800533a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800533c:	4a0c      	ldr	r2, [pc, #48]	; (8005370 <pxPortInitialiseStack+0x64>)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	3b14      	subs	r3, #20
 8005346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3b04      	subs	r3, #4
 8005352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f06f 0202 	mvn.w	r2, #2
 800535a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	3b20      	subs	r3, #32
 8005360:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005362:	68fb      	ldr	r3, [r7, #12]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	08005375 	.word	0x08005375

08005374 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800537a:	2300      	movs	r3, #0
 800537c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800537e:	4b12      	ldr	r3, [pc, #72]	; (80053c8 <prvTaskExitError+0x54>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005386:	d00a      	beq.n	800539e <prvTaskExitError+0x2a>
	__asm volatile
 8005388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	60fb      	str	r3, [r7, #12]
}
 800539a:	bf00      	nop
 800539c:	e7fe      	b.n	800539c <prvTaskExitError+0x28>
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	60bb      	str	r3, [r7, #8]
}
 80053b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80053b2:	bf00      	nop
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0fc      	beq.n	80053b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053ba:	bf00      	nop
 80053bc:	bf00      	nop
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	20000028 	.word	0x20000028
 80053cc:	00000000 	.word	0x00000000

080053d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80053d0:	4b07      	ldr	r3, [pc, #28]	; (80053f0 <pxCurrentTCBConst2>)
 80053d2:	6819      	ldr	r1, [r3, #0]
 80053d4:	6808      	ldr	r0, [r1, #0]
 80053d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053da:	f380 8809 	msr	PSP, r0
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f04f 0000 	mov.w	r0, #0
 80053e6:	f380 8811 	msr	BASEPRI, r0
 80053ea:	4770      	bx	lr
 80053ec:	f3af 8000 	nop.w

080053f0 <pxCurrentTCBConst2>:
 80053f0:	20000434 	.word	0x20000434
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80053f4:	bf00      	nop
 80053f6:	bf00      	nop

080053f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80053f8:	4808      	ldr	r0, [pc, #32]	; (800541c <prvPortStartFirstTask+0x24>)
 80053fa:	6800      	ldr	r0, [r0, #0]
 80053fc:	6800      	ldr	r0, [r0, #0]
 80053fe:	f380 8808 	msr	MSP, r0
 8005402:	f04f 0000 	mov.w	r0, #0
 8005406:	f380 8814 	msr	CONTROL, r0
 800540a:	b662      	cpsie	i
 800540c:	b661      	cpsie	f
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	df00      	svc	0
 8005418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800541a:	bf00      	nop
 800541c:	e000ed08 	.word	0xe000ed08

08005420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005426:	4b46      	ldr	r3, [pc, #280]	; (8005540 <xPortStartScheduler+0x120>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a46      	ldr	r2, [pc, #280]	; (8005544 <xPortStartScheduler+0x124>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d10a      	bne.n	8005446 <xPortStartScheduler+0x26>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	613b      	str	r3, [r7, #16]
}
 8005442:	bf00      	nop
 8005444:	e7fe      	b.n	8005444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005446:	4b3e      	ldr	r3, [pc, #248]	; (8005540 <xPortStartScheduler+0x120>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a3f      	ldr	r2, [pc, #252]	; (8005548 <xPortStartScheduler+0x128>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d10a      	bne.n	8005466 <xPortStartScheduler+0x46>
	__asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	60fb      	str	r3, [r7, #12]
}
 8005462:	bf00      	nop
 8005464:	e7fe      	b.n	8005464 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005466:	4b39      	ldr	r3, [pc, #228]	; (800554c <xPortStartScheduler+0x12c>)
 8005468:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	b2db      	uxtb	r3, r3
 8005470:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	22ff      	movs	r2, #255	; 0xff
 8005476:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	b2db      	uxtb	r3, r3
 800547e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	b2db      	uxtb	r3, r3
 8005484:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005488:	b2da      	uxtb	r2, r3
 800548a:	4b31      	ldr	r3, [pc, #196]	; (8005550 <xPortStartScheduler+0x130>)
 800548c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800548e:	4b31      	ldr	r3, [pc, #196]	; (8005554 <xPortStartScheduler+0x134>)
 8005490:	2207      	movs	r2, #7
 8005492:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005494:	e009      	b.n	80054aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005496:	4b2f      	ldr	r3, [pc, #188]	; (8005554 <xPortStartScheduler+0x134>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3b01      	subs	r3, #1
 800549c:	4a2d      	ldr	r2, [pc, #180]	; (8005554 <xPortStartScheduler+0x134>)
 800549e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054aa:	78fb      	ldrb	r3, [r7, #3]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b2:	2b80      	cmp	r3, #128	; 0x80
 80054b4:	d0ef      	beq.n	8005496 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054b6:	4b27      	ldr	r3, [pc, #156]	; (8005554 <xPortStartScheduler+0x134>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f1c3 0307 	rsb	r3, r3, #7
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d00a      	beq.n	80054d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80054c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	60bb      	str	r3, [r7, #8]
}
 80054d4:	bf00      	nop
 80054d6:	e7fe      	b.n	80054d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054d8:	4b1e      	ldr	r3, [pc, #120]	; (8005554 <xPortStartScheduler+0x134>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	021b      	lsls	r3, r3, #8
 80054de:	4a1d      	ldr	r2, [pc, #116]	; (8005554 <xPortStartScheduler+0x134>)
 80054e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054e2:	4b1c      	ldr	r3, [pc, #112]	; (8005554 <xPortStartScheduler+0x134>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054ea:	4a1a      	ldr	r2, [pc, #104]	; (8005554 <xPortStartScheduler+0x134>)
 80054ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80054f6:	4b18      	ldr	r3, [pc, #96]	; (8005558 <xPortStartScheduler+0x138>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a17      	ldr	r2, [pc, #92]	; (8005558 <xPortStartScheduler+0x138>)
 80054fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005500:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005502:	4b15      	ldr	r3, [pc, #84]	; (8005558 <xPortStartScheduler+0x138>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a14      	ldr	r2, [pc, #80]	; (8005558 <xPortStartScheduler+0x138>)
 8005508:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800550c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800550e:	f000 f8dd 	bl	80056cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005512:	4b12      	ldr	r3, [pc, #72]	; (800555c <xPortStartScheduler+0x13c>)
 8005514:	2200      	movs	r2, #0
 8005516:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005518:	f000 f8fc 	bl	8005714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800551c:	4b10      	ldr	r3, [pc, #64]	; (8005560 <xPortStartScheduler+0x140>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a0f      	ldr	r2, [pc, #60]	; (8005560 <xPortStartScheduler+0x140>)
 8005522:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005526:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005528:	f7ff ff66 	bl	80053f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800552c:	f7ff f88a 	bl	8004644 <vTaskSwitchContext>
	prvTaskExitError();
 8005530:	f7ff ff20 	bl	8005374 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	e000ed00 	.word	0xe000ed00
 8005544:	410fc271 	.word	0x410fc271
 8005548:	410fc270 	.word	0x410fc270
 800554c:	e000e400 	.word	0xe000e400
 8005550:	20000650 	.word	0x20000650
 8005554:	20000654 	.word	0x20000654
 8005558:	e000ed20 	.word	0xe000ed20
 800555c:	20000028 	.word	0x20000028
 8005560:	e000ef34 	.word	0xe000ef34

08005564 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	607b      	str	r3, [r7, #4]
}
 800557c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800557e:	4b0f      	ldr	r3, [pc, #60]	; (80055bc <vPortEnterCritical+0x58>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3301      	adds	r3, #1
 8005584:	4a0d      	ldr	r2, [pc, #52]	; (80055bc <vPortEnterCritical+0x58>)
 8005586:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005588:	4b0c      	ldr	r3, [pc, #48]	; (80055bc <vPortEnterCritical+0x58>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d10f      	bne.n	80055b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005590:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <vPortEnterCritical+0x5c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00a      	beq.n	80055b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800559a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	603b      	str	r3, [r7, #0]
}
 80055ac:	bf00      	nop
 80055ae:	e7fe      	b.n	80055ae <vPortEnterCritical+0x4a>
	}
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	20000028 	.word	0x20000028
 80055c0:	e000ed04 	.word	0xe000ed04

080055c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055ca:	4b12      	ldr	r3, [pc, #72]	; (8005614 <vPortExitCritical+0x50>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10a      	bne.n	80055e8 <vPortExitCritical+0x24>
	__asm volatile
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	607b      	str	r3, [r7, #4]
}
 80055e4:	bf00      	nop
 80055e6:	e7fe      	b.n	80055e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80055e8:	4b0a      	ldr	r3, [pc, #40]	; (8005614 <vPortExitCritical+0x50>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3b01      	subs	r3, #1
 80055ee:	4a09      	ldr	r2, [pc, #36]	; (8005614 <vPortExitCritical+0x50>)
 80055f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80055f2:	4b08      	ldr	r3, [pc, #32]	; (8005614 <vPortExitCritical+0x50>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d105      	bne.n	8005606 <vPortExitCritical+0x42>
 80055fa:	2300      	movs	r3, #0
 80055fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	f383 8811 	msr	BASEPRI, r3
}
 8005604:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	20000028 	.word	0x20000028
	...

08005620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005620:	f3ef 8009 	mrs	r0, PSP
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	4b15      	ldr	r3, [pc, #84]	; (8005680 <pxCurrentTCBConst>)
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	f01e 0f10 	tst.w	lr, #16
 8005630:	bf08      	it	eq
 8005632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800563a:	6010      	str	r0, [r2, #0]
 800563c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005640:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005644:	f380 8811 	msr	BASEPRI, r0
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f7fe fff8 	bl	8004644 <vTaskSwitchContext>
 8005654:	f04f 0000 	mov.w	r0, #0
 8005658:	f380 8811 	msr	BASEPRI, r0
 800565c:	bc09      	pop	{r0, r3}
 800565e:	6819      	ldr	r1, [r3, #0]
 8005660:	6808      	ldr	r0, [r1, #0]
 8005662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005666:	f01e 0f10 	tst.w	lr, #16
 800566a:	bf08      	it	eq
 800566c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005670:	f380 8809 	msr	PSP, r0
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	f3af 8000 	nop.w

08005680 <pxCurrentTCBConst>:
 8005680:	20000434 	.word	0x20000434
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop

08005688 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
	__asm volatile
 800568e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005692:	f383 8811 	msr	BASEPRI, r3
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	607b      	str	r3, [r7, #4]
}
 80056a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80056a2:	f7fe ff17 	bl	80044d4 <xTaskIncrementTick>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056ac:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <SysTick_Handler+0x40>)
 80056ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	2300      	movs	r3, #0
 80056b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	f383 8811 	msr	BASEPRI, r3
}
 80056be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056c0:	bf00      	nop
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	e000ed04 	.word	0xe000ed04

080056cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056d0:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <vPortSetupTimerInterrupt+0x34>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056d6:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <vPortSetupTimerInterrupt+0x38>)
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056dc:	4b0a      	ldr	r3, [pc, #40]	; (8005708 <vPortSetupTimerInterrupt+0x3c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a0a      	ldr	r2, [pc, #40]	; (800570c <vPortSetupTimerInterrupt+0x40>)
 80056e2:	fba2 2303 	umull	r2, r3, r2, r3
 80056e6:	099b      	lsrs	r3, r3, #6
 80056e8:	4a09      	ldr	r2, [pc, #36]	; (8005710 <vPortSetupTimerInterrupt+0x44>)
 80056ea:	3b01      	subs	r3, #1
 80056ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056ee:	4b04      	ldr	r3, [pc, #16]	; (8005700 <vPortSetupTimerInterrupt+0x34>)
 80056f0:	2207      	movs	r2, #7
 80056f2:	601a      	str	r2, [r3, #0]
}
 80056f4:	bf00      	nop
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	e000e010 	.word	0xe000e010
 8005704:	e000e018 	.word	0xe000e018
 8005708:	2000001c 	.word	0x2000001c
 800570c:	10624dd3 	.word	0x10624dd3
 8005710:	e000e014 	.word	0xe000e014

08005714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005714:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005724 <vPortEnableVFP+0x10>
 8005718:	6801      	ldr	r1, [r0, #0]
 800571a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800571e:	6001      	str	r1, [r0, #0]
 8005720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005722:	bf00      	nop
 8005724:	e000ed88 	.word	0xe000ed88

08005728 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800572e:	f3ef 8305 	mrs	r3, IPSR
 8005732:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2b0f      	cmp	r3, #15
 8005738:	d914      	bls.n	8005764 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800573a:	4a17      	ldr	r2, [pc, #92]	; (8005798 <vPortValidateInterruptPriority+0x70>)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4413      	add	r3, r2
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005744:	4b15      	ldr	r3, [pc, #84]	; (800579c <vPortValidateInterruptPriority+0x74>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	7afa      	ldrb	r2, [r7, #11]
 800574a:	429a      	cmp	r2, r3
 800574c:	d20a      	bcs.n	8005764 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800574e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	607b      	str	r3, [r7, #4]
}
 8005760:	bf00      	nop
 8005762:	e7fe      	b.n	8005762 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005764:	4b0e      	ldr	r3, [pc, #56]	; (80057a0 <vPortValidateInterruptPriority+0x78>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800576c:	4b0d      	ldr	r3, [pc, #52]	; (80057a4 <vPortValidateInterruptPriority+0x7c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	429a      	cmp	r2, r3
 8005772:	d90a      	bls.n	800578a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	603b      	str	r3, [r7, #0]
}
 8005786:	bf00      	nop
 8005788:	e7fe      	b.n	8005788 <vPortValidateInterruptPriority+0x60>
	}
 800578a:	bf00      	nop
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	e000e3f0 	.word	0xe000e3f0
 800579c:	20000650 	.word	0x20000650
 80057a0:	e000ed0c 	.word	0xe000ed0c
 80057a4:	20000654 	.word	0x20000654

080057a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08a      	sub	sp, #40	; 0x28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057b0:	2300      	movs	r3, #0
 80057b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80057b4:	f7fe fdd4 	bl	8004360 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80057b8:	4b58      	ldr	r3, [pc, #352]	; (800591c <pvPortMalloc+0x174>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057c0:	f000 f910 	bl	80059e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057c4:	4b56      	ldr	r3, [pc, #344]	; (8005920 <pvPortMalloc+0x178>)
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4013      	ands	r3, r2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f040 808e 	bne.w	80058ee <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d01d      	beq.n	8005814 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80057d8:	2208      	movs	r2, #8
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4413      	add	r3, r2
 80057de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f003 0307 	and.w	r3, r3, #7
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d014      	beq.n	8005814 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f023 0307 	bic.w	r3, r3, #7
 80057f0:	3308      	adds	r3, #8
 80057f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f003 0307 	and.w	r3, r3, #7
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <pvPortMalloc+0x6c>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	617b      	str	r3, [r7, #20]
}
 8005810:	bf00      	nop
 8005812:	e7fe      	b.n	8005812 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d069      	beq.n	80058ee <pvPortMalloc+0x146>
 800581a:	4b42      	ldr	r3, [pc, #264]	; (8005924 <pvPortMalloc+0x17c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	429a      	cmp	r2, r3
 8005822:	d864      	bhi.n	80058ee <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005824:	4b40      	ldr	r3, [pc, #256]	; (8005928 <pvPortMalloc+0x180>)
 8005826:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005828:	4b3f      	ldr	r3, [pc, #252]	; (8005928 <pvPortMalloc+0x180>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800582e:	e004      	b.n	800583a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	429a      	cmp	r2, r3
 8005842:	d903      	bls.n	800584c <pvPortMalloc+0xa4>
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1f1      	bne.n	8005830 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800584c:	4b33      	ldr	r3, [pc, #204]	; (800591c <pvPortMalloc+0x174>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005852:	429a      	cmp	r2, r3
 8005854:	d04b      	beq.n	80058ee <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2208      	movs	r2, #8
 800585c:	4413      	add	r3, r2
 800585e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	1ad2      	subs	r2, r2, r3
 8005870:	2308      	movs	r3, #8
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	429a      	cmp	r2, r3
 8005876:	d91f      	bls.n	80058b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4413      	add	r3, r2
 800587e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	f003 0307 	and.w	r3, r3, #7
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <pvPortMalloc+0xf8>
	__asm volatile
 800588a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	613b      	str	r3, [r7, #16]
}
 800589c:	bf00      	nop
 800589e:	e7fe      	b.n	800589e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	1ad2      	subs	r2, r2, r3
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058b2:	69b8      	ldr	r0, [r7, #24]
 80058b4:	f000 f8f8 	bl	8005aa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058b8:	4b1a      	ldr	r3, [pc, #104]	; (8005924 <pvPortMalloc+0x17c>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	4a18      	ldr	r2, [pc, #96]	; (8005924 <pvPortMalloc+0x17c>)
 80058c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058c6:	4b17      	ldr	r3, [pc, #92]	; (8005924 <pvPortMalloc+0x17c>)
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	4b18      	ldr	r3, [pc, #96]	; (800592c <pvPortMalloc+0x184>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d203      	bcs.n	80058da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058d2:	4b14      	ldr	r3, [pc, #80]	; (8005924 <pvPortMalloc+0x17c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a15      	ldr	r2, [pc, #84]	; (800592c <pvPortMalloc+0x184>)
 80058d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	4b10      	ldr	r3, [pc, #64]	; (8005920 <pvPortMalloc+0x178>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	431a      	orrs	r2, r3
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	2200      	movs	r2, #0
 80058ec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80058ee:	f7fe fd45 	bl	800437c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <pvPortMalloc+0x16a>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	60fb      	str	r3, [r7, #12]
}
 800590e:	bf00      	nop
 8005910:	e7fe      	b.n	8005910 <pvPortMalloc+0x168>
	return pvReturn;
 8005912:	69fb      	ldr	r3, [r7, #28]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3728      	adds	r7, #40	; 0x28
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	20013260 	.word	0x20013260
 8005920:	2001326c 	.word	0x2001326c
 8005924:	20013264 	.word	0x20013264
 8005928:	20013258 	.word	0x20013258
 800592c:	20013268 	.word	0x20013268

08005930 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d048      	beq.n	80059d4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005942:	2308      	movs	r3, #8
 8005944:	425b      	negs	r3, r3
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	4413      	add	r3, r2
 800594a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	4b21      	ldr	r3, [pc, #132]	; (80059dc <vPortFree+0xac>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4013      	ands	r3, r2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10a      	bne.n	8005974 <vPortFree+0x44>
	__asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	60fb      	str	r3, [r7, #12]
}
 8005970:	bf00      	nop
 8005972:	e7fe      	b.n	8005972 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <vPortFree+0x62>
	__asm volatile
 800597c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	60bb      	str	r3, [r7, #8]
}
 800598e:	bf00      	nop
 8005990:	e7fe      	b.n	8005990 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	4b11      	ldr	r3, [pc, #68]	; (80059dc <vPortFree+0xac>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4013      	ands	r3, r2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d019      	beq.n	80059d4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d115      	bne.n	80059d4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	4b0b      	ldr	r3, [pc, #44]	; (80059dc <vPortFree+0xac>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	43db      	mvns	r3, r3
 80059b2:	401a      	ands	r2, r3
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059b8:	f7fe fcd2 	bl	8004360 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	4b07      	ldr	r3, [pc, #28]	; (80059e0 <vPortFree+0xb0>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4413      	add	r3, r2
 80059c6:	4a06      	ldr	r2, [pc, #24]	; (80059e0 <vPortFree+0xb0>)
 80059c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059ca:	6938      	ldr	r0, [r7, #16]
 80059cc:	f000 f86c 	bl	8005aa8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80059d0:	f7fe fcd4 	bl	800437c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80059d4:	bf00      	nop
 80059d6:	3718      	adds	r7, #24
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	2001326c 	.word	0x2001326c
 80059e0:	20013264 	.word	0x20013264

080059e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059ea:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80059ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80059f0:	4b27      	ldr	r3, [pc, #156]	; (8005a90 <prvHeapInit+0xac>)
 80059f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f003 0307 	and.w	r3, r3, #7
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00c      	beq.n	8005a18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	3307      	adds	r3, #7
 8005a02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 0307 	bic.w	r3, r3, #7
 8005a0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	4a1f      	ldr	r2, [pc, #124]	; (8005a90 <prvHeapInit+0xac>)
 8005a14:	4413      	add	r3, r2
 8005a16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a1c:	4a1d      	ldr	r2, [pc, #116]	; (8005a94 <prvHeapInit+0xb0>)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a22:	4b1c      	ldr	r3, [pc, #112]	; (8005a94 <prvHeapInit+0xb0>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a30:	2208      	movs	r2, #8
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	1a9b      	subs	r3, r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 0307 	bic.w	r3, r3, #7
 8005a3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	4a15      	ldr	r2, [pc, #84]	; (8005a98 <prvHeapInit+0xb4>)
 8005a44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a46:	4b14      	ldr	r3, [pc, #80]	; (8005a98 <prvHeapInit+0xb4>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a4e:	4b12      	ldr	r3, [pc, #72]	; (8005a98 <prvHeapInit+0xb4>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2200      	movs	r2, #0
 8005a54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	1ad2      	subs	r2, r2, r3
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a64:	4b0c      	ldr	r3, [pc, #48]	; (8005a98 <prvHeapInit+0xb4>)
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	4a0a      	ldr	r2, [pc, #40]	; (8005a9c <prvHeapInit+0xb8>)
 8005a72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	4a09      	ldr	r2, [pc, #36]	; (8005aa0 <prvHeapInit+0xbc>)
 8005a7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a7c:	4b09      	ldr	r3, [pc, #36]	; (8005aa4 <prvHeapInit+0xc0>)
 8005a7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a82:	601a      	str	r2, [r3, #0]
}
 8005a84:	bf00      	nop
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	20000658 	.word	0x20000658
 8005a94:	20013258 	.word	0x20013258
 8005a98:	20013260 	.word	0x20013260
 8005a9c:	20013268 	.word	0x20013268
 8005aa0:	20013264 	.word	0x20013264
 8005aa4:	2001326c 	.word	0x2001326c

08005aa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ab0:	4b28      	ldr	r3, [pc, #160]	; (8005b54 <prvInsertBlockIntoFreeList+0xac>)
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	e002      	b.n	8005abc <prvInsertBlockIntoFreeList+0x14>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d8f7      	bhi.n	8005ab6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d108      	bne.n	8005aea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	441a      	add	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	441a      	add	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d118      	bne.n	8005b30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	4b15      	ldr	r3, [pc, #84]	; (8005b58 <prvInsertBlockIntoFreeList+0xb0>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d00d      	beq.n	8005b26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	441a      	add	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	e008      	b.n	8005b38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b26:	4b0c      	ldr	r3, [pc, #48]	; (8005b58 <prvInsertBlockIntoFreeList+0xb0>)
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	e003      	b.n	8005b38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d002      	beq.n	8005b46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b46:	bf00      	nop
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	20013258 	.word	0x20013258
 8005b58:	20013260 	.word	0x20013260

08005b5c <__errno>:
 8005b5c:	4b01      	ldr	r3, [pc, #4]	; (8005b64 <__errno+0x8>)
 8005b5e:	6818      	ldr	r0, [r3, #0]
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	2000002c 	.word	0x2000002c

08005b68 <__libc_init_array>:
 8005b68:	b570      	push	{r4, r5, r6, lr}
 8005b6a:	4d0d      	ldr	r5, [pc, #52]	; (8005ba0 <__libc_init_array+0x38>)
 8005b6c:	4c0d      	ldr	r4, [pc, #52]	; (8005ba4 <__libc_init_array+0x3c>)
 8005b6e:	1b64      	subs	r4, r4, r5
 8005b70:	10a4      	asrs	r4, r4, #2
 8005b72:	2600      	movs	r6, #0
 8005b74:	42a6      	cmp	r6, r4
 8005b76:	d109      	bne.n	8005b8c <__libc_init_array+0x24>
 8005b78:	4d0b      	ldr	r5, [pc, #44]	; (8005ba8 <__libc_init_array+0x40>)
 8005b7a:	4c0c      	ldr	r4, [pc, #48]	; (8005bac <__libc_init_array+0x44>)
 8005b7c:	f000 fc8e 	bl	800649c <_init>
 8005b80:	1b64      	subs	r4, r4, r5
 8005b82:	10a4      	asrs	r4, r4, #2
 8005b84:	2600      	movs	r6, #0
 8005b86:	42a6      	cmp	r6, r4
 8005b88:	d105      	bne.n	8005b96 <__libc_init_array+0x2e>
 8005b8a:	bd70      	pop	{r4, r5, r6, pc}
 8005b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b90:	4798      	blx	r3
 8005b92:	3601      	adds	r6, #1
 8005b94:	e7ee      	b.n	8005b74 <__libc_init_array+0xc>
 8005b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b9a:	4798      	blx	r3
 8005b9c:	3601      	adds	r6, #1
 8005b9e:	e7f2      	b.n	8005b86 <__libc_init_array+0x1e>
 8005ba0:	08006738 	.word	0x08006738
 8005ba4:	08006738 	.word	0x08006738
 8005ba8:	08006738 	.word	0x08006738
 8005bac:	0800673c 	.word	0x0800673c

08005bb0 <memcpy>:
 8005bb0:	440a      	add	r2, r1
 8005bb2:	4291      	cmp	r1, r2
 8005bb4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005bb8:	d100      	bne.n	8005bbc <memcpy+0xc>
 8005bba:	4770      	bx	lr
 8005bbc:	b510      	push	{r4, lr}
 8005bbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bc6:	4291      	cmp	r1, r2
 8005bc8:	d1f9      	bne.n	8005bbe <memcpy+0xe>
 8005bca:	bd10      	pop	{r4, pc}

08005bcc <memset>:
 8005bcc:	4402      	add	r2, r0
 8005bce:	4603      	mov	r3, r0
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d100      	bne.n	8005bd6 <memset+0xa>
 8005bd4:	4770      	bx	lr
 8005bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8005bda:	e7f9      	b.n	8005bd0 <memset+0x4>

08005bdc <siprintf>:
 8005bdc:	b40e      	push	{r1, r2, r3}
 8005bde:	b500      	push	{lr}
 8005be0:	b09c      	sub	sp, #112	; 0x70
 8005be2:	ab1d      	add	r3, sp, #116	; 0x74
 8005be4:	9002      	str	r0, [sp, #8]
 8005be6:	9006      	str	r0, [sp, #24]
 8005be8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005bec:	4809      	ldr	r0, [pc, #36]	; (8005c14 <siprintf+0x38>)
 8005bee:	9107      	str	r1, [sp, #28]
 8005bf0:	9104      	str	r1, [sp, #16]
 8005bf2:	4909      	ldr	r1, [pc, #36]	; (8005c18 <siprintf+0x3c>)
 8005bf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bf8:	9105      	str	r1, [sp, #20]
 8005bfa:	6800      	ldr	r0, [r0, #0]
 8005bfc:	9301      	str	r3, [sp, #4]
 8005bfe:	a902      	add	r1, sp, #8
 8005c00:	f000 f868 	bl	8005cd4 <_svfiprintf_r>
 8005c04:	9b02      	ldr	r3, [sp, #8]
 8005c06:	2200      	movs	r2, #0
 8005c08:	701a      	strb	r2, [r3, #0]
 8005c0a:	b01c      	add	sp, #112	; 0x70
 8005c0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c10:	b003      	add	sp, #12
 8005c12:	4770      	bx	lr
 8005c14:	2000002c 	.word	0x2000002c
 8005c18:	ffff0208 	.word	0xffff0208

08005c1c <__ssputs_r>:
 8005c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c20:	688e      	ldr	r6, [r1, #8]
 8005c22:	429e      	cmp	r6, r3
 8005c24:	4682      	mov	sl, r0
 8005c26:	460c      	mov	r4, r1
 8005c28:	4690      	mov	r8, r2
 8005c2a:	461f      	mov	r7, r3
 8005c2c:	d838      	bhi.n	8005ca0 <__ssputs_r+0x84>
 8005c2e:	898a      	ldrh	r2, [r1, #12]
 8005c30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c34:	d032      	beq.n	8005c9c <__ssputs_r+0x80>
 8005c36:	6825      	ldr	r5, [r4, #0]
 8005c38:	6909      	ldr	r1, [r1, #16]
 8005c3a:	eba5 0901 	sub.w	r9, r5, r1
 8005c3e:	6965      	ldr	r5, [r4, #20]
 8005c40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c48:	3301      	adds	r3, #1
 8005c4a:	444b      	add	r3, r9
 8005c4c:	106d      	asrs	r5, r5, #1
 8005c4e:	429d      	cmp	r5, r3
 8005c50:	bf38      	it	cc
 8005c52:	461d      	movcc	r5, r3
 8005c54:	0553      	lsls	r3, r2, #21
 8005c56:	d531      	bpl.n	8005cbc <__ssputs_r+0xa0>
 8005c58:	4629      	mov	r1, r5
 8005c5a:	f000 fb55 	bl	8006308 <_malloc_r>
 8005c5e:	4606      	mov	r6, r0
 8005c60:	b950      	cbnz	r0, 8005c78 <__ssputs_r+0x5c>
 8005c62:	230c      	movs	r3, #12
 8005c64:	f8ca 3000 	str.w	r3, [sl]
 8005c68:	89a3      	ldrh	r3, [r4, #12]
 8005c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c6e:	81a3      	strh	r3, [r4, #12]
 8005c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c78:	6921      	ldr	r1, [r4, #16]
 8005c7a:	464a      	mov	r2, r9
 8005c7c:	f7ff ff98 	bl	8005bb0 <memcpy>
 8005c80:	89a3      	ldrh	r3, [r4, #12]
 8005c82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c8a:	81a3      	strh	r3, [r4, #12]
 8005c8c:	6126      	str	r6, [r4, #16]
 8005c8e:	6165      	str	r5, [r4, #20]
 8005c90:	444e      	add	r6, r9
 8005c92:	eba5 0509 	sub.w	r5, r5, r9
 8005c96:	6026      	str	r6, [r4, #0]
 8005c98:	60a5      	str	r5, [r4, #8]
 8005c9a:	463e      	mov	r6, r7
 8005c9c:	42be      	cmp	r6, r7
 8005c9e:	d900      	bls.n	8005ca2 <__ssputs_r+0x86>
 8005ca0:	463e      	mov	r6, r7
 8005ca2:	6820      	ldr	r0, [r4, #0]
 8005ca4:	4632      	mov	r2, r6
 8005ca6:	4641      	mov	r1, r8
 8005ca8:	f000 faa8 	bl	80061fc <memmove>
 8005cac:	68a3      	ldr	r3, [r4, #8]
 8005cae:	1b9b      	subs	r3, r3, r6
 8005cb0:	60a3      	str	r3, [r4, #8]
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	4433      	add	r3, r6
 8005cb6:	6023      	str	r3, [r4, #0]
 8005cb8:	2000      	movs	r0, #0
 8005cba:	e7db      	b.n	8005c74 <__ssputs_r+0x58>
 8005cbc:	462a      	mov	r2, r5
 8005cbe:	f000 fb97 	bl	80063f0 <_realloc_r>
 8005cc2:	4606      	mov	r6, r0
 8005cc4:	2800      	cmp	r0, #0
 8005cc6:	d1e1      	bne.n	8005c8c <__ssputs_r+0x70>
 8005cc8:	6921      	ldr	r1, [r4, #16]
 8005cca:	4650      	mov	r0, sl
 8005ccc:	f000 fab0 	bl	8006230 <_free_r>
 8005cd0:	e7c7      	b.n	8005c62 <__ssputs_r+0x46>
	...

08005cd4 <_svfiprintf_r>:
 8005cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd8:	4698      	mov	r8, r3
 8005cda:	898b      	ldrh	r3, [r1, #12]
 8005cdc:	061b      	lsls	r3, r3, #24
 8005cde:	b09d      	sub	sp, #116	; 0x74
 8005ce0:	4607      	mov	r7, r0
 8005ce2:	460d      	mov	r5, r1
 8005ce4:	4614      	mov	r4, r2
 8005ce6:	d50e      	bpl.n	8005d06 <_svfiprintf_r+0x32>
 8005ce8:	690b      	ldr	r3, [r1, #16]
 8005cea:	b963      	cbnz	r3, 8005d06 <_svfiprintf_r+0x32>
 8005cec:	2140      	movs	r1, #64	; 0x40
 8005cee:	f000 fb0b 	bl	8006308 <_malloc_r>
 8005cf2:	6028      	str	r0, [r5, #0]
 8005cf4:	6128      	str	r0, [r5, #16]
 8005cf6:	b920      	cbnz	r0, 8005d02 <_svfiprintf_r+0x2e>
 8005cf8:	230c      	movs	r3, #12
 8005cfa:	603b      	str	r3, [r7, #0]
 8005cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d00:	e0d1      	b.n	8005ea6 <_svfiprintf_r+0x1d2>
 8005d02:	2340      	movs	r3, #64	; 0x40
 8005d04:	616b      	str	r3, [r5, #20]
 8005d06:	2300      	movs	r3, #0
 8005d08:	9309      	str	r3, [sp, #36]	; 0x24
 8005d0a:	2320      	movs	r3, #32
 8005d0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d10:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d14:	2330      	movs	r3, #48	; 0x30
 8005d16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005ec0 <_svfiprintf_r+0x1ec>
 8005d1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d1e:	f04f 0901 	mov.w	r9, #1
 8005d22:	4623      	mov	r3, r4
 8005d24:	469a      	mov	sl, r3
 8005d26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d2a:	b10a      	cbz	r2, 8005d30 <_svfiprintf_r+0x5c>
 8005d2c:	2a25      	cmp	r2, #37	; 0x25
 8005d2e:	d1f9      	bne.n	8005d24 <_svfiprintf_r+0x50>
 8005d30:	ebba 0b04 	subs.w	fp, sl, r4
 8005d34:	d00b      	beq.n	8005d4e <_svfiprintf_r+0x7a>
 8005d36:	465b      	mov	r3, fp
 8005d38:	4622      	mov	r2, r4
 8005d3a:	4629      	mov	r1, r5
 8005d3c:	4638      	mov	r0, r7
 8005d3e:	f7ff ff6d 	bl	8005c1c <__ssputs_r>
 8005d42:	3001      	adds	r0, #1
 8005d44:	f000 80aa 	beq.w	8005e9c <_svfiprintf_r+0x1c8>
 8005d48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d4a:	445a      	add	r2, fp
 8005d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8005d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 80a2 	beq.w	8005e9c <_svfiprintf_r+0x1c8>
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d62:	f10a 0a01 	add.w	sl, sl, #1
 8005d66:	9304      	str	r3, [sp, #16]
 8005d68:	9307      	str	r3, [sp, #28]
 8005d6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d6e:	931a      	str	r3, [sp, #104]	; 0x68
 8005d70:	4654      	mov	r4, sl
 8005d72:	2205      	movs	r2, #5
 8005d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d78:	4851      	ldr	r0, [pc, #324]	; (8005ec0 <_svfiprintf_r+0x1ec>)
 8005d7a:	f7fa fa31 	bl	80001e0 <memchr>
 8005d7e:	9a04      	ldr	r2, [sp, #16]
 8005d80:	b9d8      	cbnz	r0, 8005dba <_svfiprintf_r+0xe6>
 8005d82:	06d0      	lsls	r0, r2, #27
 8005d84:	bf44      	itt	mi
 8005d86:	2320      	movmi	r3, #32
 8005d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d8c:	0711      	lsls	r1, r2, #28
 8005d8e:	bf44      	itt	mi
 8005d90:	232b      	movmi	r3, #43	; 0x2b
 8005d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d96:	f89a 3000 	ldrb.w	r3, [sl]
 8005d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8005d9c:	d015      	beq.n	8005dca <_svfiprintf_r+0xf6>
 8005d9e:	9a07      	ldr	r2, [sp, #28]
 8005da0:	4654      	mov	r4, sl
 8005da2:	2000      	movs	r0, #0
 8005da4:	f04f 0c0a 	mov.w	ip, #10
 8005da8:	4621      	mov	r1, r4
 8005daa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dae:	3b30      	subs	r3, #48	; 0x30
 8005db0:	2b09      	cmp	r3, #9
 8005db2:	d94e      	bls.n	8005e52 <_svfiprintf_r+0x17e>
 8005db4:	b1b0      	cbz	r0, 8005de4 <_svfiprintf_r+0x110>
 8005db6:	9207      	str	r2, [sp, #28]
 8005db8:	e014      	b.n	8005de4 <_svfiprintf_r+0x110>
 8005dba:	eba0 0308 	sub.w	r3, r0, r8
 8005dbe:	fa09 f303 	lsl.w	r3, r9, r3
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	9304      	str	r3, [sp, #16]
 8005dc6:	46a2      	mov	sl, r4
 8005dc8:	e7d2      	b.n	8005d70 <_svfiprintf_r+0x9c>
 8005dca:	9b03      	ldr	r3, [sp, #12]
 8005dcc:	1d19      	adds	r1, r3, #4
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	9103      	str	r1, [sp, #12]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	bfbb      	ittet	lt
 8005dd6:	425b      	neglt	r3, r3
 8005dd8:	f042 0202 	orrlt.w	r2, r2, #2
 8005ddc:	9307      	strge	r3, [sp, #28]
 8005dde:	9307      	strlt	r3, [sp, #28]
 8005de0:	bfb8      	it	lt
 8005de2:	9204      	strlt	r2, [sp, #16]
 8005de4:	7823      	ldrb	r3, [r4, #0]
 8005de6:	2b2e      	cmp	r3, #46	; 0x2e
 8005de8:	d10c      	bne.n	8005e04 <_svfiprintf_r+0x130>
 8005dea:	7863      	ldrb	r3, [r4, #1]
 8005dec:	2b2a      	cmp	r3, #42	; 0x2a
 8005dee:	d135      	bne.n	8005e5c <_svfiprintf_r+0x188>
 8005df0:	9b03      	ldr	r3, [sp, #12]
 8005df2:	1d1a      	adds	r2, r3, #4
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	9203      	str	r2, [sp, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	bfb8      	it	lt
 8005dfc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005e00:	3402      	adds	r4, #2
 8005e02:	9305      	str	r3, [sp, #20]
 8005e04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ed0 <_svfiprintf_r+0x1fc>
 8005e08:	7821      	ldrb	r1, [r4, #0]
 8005e0a:	2203      	movs	r2, #3
 8005e0c:	4650      	mov	r0, sl
 8005e0e:	f7fa f9e7 	bl	80001e0 <memchr>
 8005e12:	b140      	cbz	r0, 8005e26 <_svfiprintf_r+0x152>
 8005e14:	2340      	movs	r3, #64	; 0x40
 8005e16:	eba0 000a 	sub.w	r0, r0, sl
 8005e1a:	fa03 f000 	lsl.w	r0, r3, r0
 8005e1e:	9b04      	ldr	r3, [sp, #16]
 8005e20:	4303      	orrs	r3, r0
 8005e22:	3401      	adds	r4, #1
 8005e24:	9304      	str	r3, [sp, #16]
 8005e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e2a:	4826      	ldr	r0, [pc, #152]	; (8005ec4 <_svfiprintf_r+0x1f0>)
 8005e2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e30:	2206      	movs	r2, #6
 8005e32:	f7fa f9d5 	bl	80001e0 <memchr>
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d038      	beq.n	8005eac <_svfiprintf_r+0x1d8>
 8005e3a:	4b23      	ldr	r3, [pc, #140]	; (8005ec8 <_svfiprintf_r+0x1f4>)
 8005e3c:	bb1b      	cbnz	r3, 8005e86 <_svfiprintf_r+0x1b2>
 8005e3e:	9b03      	ldr	r3, [sp, #12]
 8005e40:	3307      	adds	r3, #7
 8005e42:	f023 0307 	bic.w	r3, r3, #7
 8005e46:	3308      	adds	r3, #8
 8005e48:	9303      	str	r3, [sp, #12]
 8005e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e4c:	4433      	add	r3, r6
 8005e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e50:	e767      	b.n	8005d22 <_svfiprintf_r+0x4e>
 8005e52:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e56:	460c      	mov	r4, r1
 8005e58:	2001      	movs	r0, #1
 8005e5a:	e7a5      	b.n	8005da8 <_svfiprintf_r+0xd4>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	3401      	adds	r4, #1
 8005e60:	9305      	str	r3, [sp, #20]
 8005e62:	4619      	mov	r1, r3
 8005e64:	f04f 0c0a 	mov.w	ip, #10
 8005e68:	4620      	mov	r0, r4
 8005e6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e6e:	3a30      	subs	r2, #48	; 0x30
 8005e70:	2a09      	cmp	r2, #9
 8005e72:	d903      	bls.n	8005e7c <_svfiprintf_r+0x1a8>
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d0c5      	beq.n	8005e04 <_svfiprintf_r+0x130>
 8005e78:	9105      	str	r1, [sp, #20]
 8005e7a:	e7c3      	b.n	8005e04 <_svfiprintf_r+0x130>
 8005e7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e80:	4604      	mov	r4, r0
 8005e82:	2301      	movs	r3, #1
 8005e84:	e7f0      	b.n	8005e68 <_svfiprintf_r+0x194>
 8005e86:	ab03      	add	r3, sp, #12
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	462a      	mov	r2, r5
 8005e8c:	4b0f      	ldr	r3, [pc, #60]	; (8005ecc <_svfiprintf_r+0x1f8>)
 8005e8e:	a904      	add	r1, sp, #16
 8005e90:	4638      	mov	r0, r7
 8005e92:	f3af 8000 	nop.w
 8005e96:	1c42      	adds	r2, r0, #1
 8005e98:	4606      	mov	r6, r0
 8005e9a:	d1d6      	bne.n	8005e4a <_svfiprintf_r+0x176>
 8005e9c:	89ab      	ldrh	r3, [r5, #12]
 8005e9e:	065b      	lsls	r3, r3, #25
 8005ea0:	f53f af2c 	bmi.w	8005cfc <_svfiprintf_r+0x28>
 8005ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ea6:	b01d      	add	sp, #116	; 0x74
 8005ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eac:	ab03      	add	r3, sp, #12
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	462a      	mov	r2, r5
 8005eb2:	4b06      	ldr	r3, [pc, #24]	; (8005ecc <_svfiprintf_r+0x1f8>)
 8005eb4:	a904      	add	r1, sp, #16
 8005eb6:	4638      	mov	r0, r7
 8005eb8:	f000 f87a 	bl	8005fb0 <_printf_i>
 8005ebc:	e7eb      	b.n	8005e96 <_svfiprintf_r+0x1c2>
 8005ebe:	bf00      	nop
 8005ec0:	080066fc 	.word	0x080066fc
 8005ec4:	08006706 	.word	0x08006706
 8005ec8:	00000000 	.word	0x00000000
 8005ecc:	08005c1d 	.word	0x08005c1d
 8005ed0:	08006702 	.word	0x08006702

08005ed4 <_printf_common>:
 8005ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed8:	4616      	mov	r6, r2
 8005eda:	4699      	mov	r9, r3
 8005edc:	688a      	ldr	r2, [r1, #8]
 8005ede:	690b      	ldr	r3, [r1, #16]
 8005ee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	bfb8      	it	lt
 8005ee8:	4613      	movlt	r3, r2
 8005eea:	6033      	str	r3, [r6, #0]
 8005eec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ef0:	4607      	mov	r7, r0
 8005ef2:	460c      	mov	r4, r1
 8005ef4:	b10a      	cbz	r2, 8005efa <_printf_common+0x26>
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	6033      	str	r3, [r6, #0]
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	0699      	lsls	r1, r3, #26
 8005efe:	bf42      	ittt	mi
 8005f00:	6833      	ldrmi	r3, [r6, #0]
 8005f02:	3302      	addmi	r3, #2
 8005f04:	6033      	strmi	r3, [r6, #0]
 8005f06:	6825      	ldr	r5, [r4, #0]
 8005f08:	f015 0506 	ands.w	r5, r5, #6
 8005f0c:	d106      	bne.n	8005f1c <_printf_common+0x48>
 8005f0e:	f104 0a19 	add.w	sl, r4, #25
 8005f12:	68e3      	ldr	r3, [r4, #12]
 8005f14:	6832      	ldr	r2, [r6, #0]
 8005f16:	1a9b      	subs	r3, r3, r2
 8005f18:	42ab      	cmp	r3, r5
 8005f1a:	dc26      	bgt.n	8005f6a <_printf_common+0x96>
 8005f1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f20:	1e13      	subs	r3, r2, #0
 8005f22:	6822      	ldr	r2, [r4, #0]
 8005f24:	bf18      	it	ne
 8005f26:	2301      	movne	r3, #1
 8005f28:	0692      	lsls	r2, r2, #26
 8005f2a:	d42b      	bmi.n	8005f84 <_printf_common+0xb0>
 8005f2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f30:	4649      	mov	r1, r9
 8005f32:	4638      	mov	r0, r7
 8005f34:	47c0      	blx	r8
 8005f36:	3001      	adds	r0, #1
 8005f38:	d01e      	beq.n	8005f78 <_printf_common+0xa4>
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	68e5      	ldr	r5, [r4, #12]
 8005f3e:	6832      	ldr	r2, [r6, #0]
 8005f40:	f003 0306 	and.w	r3, r3, #6
 8005f44:	2b04      	cmp	r3, #4
 8005f46:	bf08      	it	eq
 8005f48:	1aad      	subeq	r5, r5, r2
 8005f4a:	68a3      	ldr	r3, [r4, #8]
 8005f4c:	6922      	ldr	r2, [r4, #16]
 8005f4e:	bf0c      	ite	eq
 8005f50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f54:	2500      	movne	r5, #0
 8005f56:	4293      	cmp	r3, r2
 8005f58:	bfc4      	itt	gt
 8005f5a:	1a9b      	subgt	r3, r3, r2
 8005f5c:	18ed      	addgt	r5, r5, r3
 8005f5e:	2600      	movs	r6, #0
 8005f60:	341a      	adds	r4, #26
 8005f62:	42b5      	cmp	r5, r6
 8005f64:	d11a      	bne.n	8005f9c <_printf_common+0xc8>
 8005f66:	2000      	movs	r0, #0
 8005f68:	e008      	b.n	8005f7c <_printf_common+0xa8>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	4652      	mov	r2, sl
 8005f6e:	4649      	mov	r1, r9
 8005f70:	4638      	mov	r0, r7
 8005f72:	47c0      	blx	r8
 8005f74:	3001      	adds	r0, #1
 8005f76:	d103      	bne.n	8005f80 <_printf_common+0xac>
 8005f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f80:	3501      	adds	r5, #1
 8005f82:	e7c6      	b.n	8005f12 <_printf_common+0x3e>
 8005f84:	18e1      	adds	r1, r4, r3
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	2030      	movs	r0, #48	; 0x30
 8005f8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f8e:	4422      	add	r2, r4
 8005f90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f98:	3302      	adds	r3, #2
 8005f9a:	e7c7      	b.n	8005f2c <_printf_common+0x58>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	4622      	mov	r2, r4
 8005fa0:	4649      	mov	r1, r9
 8005fa2:	4638      	mov	r0, r7
 8005fa4:	47c0      	blx	r8
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	d0e6      	beq.n	8005f78 <_printf_common+0xa4>
 8005faa:	3601      	adds	r6, #1
 8005fac:	e7d9      	b.n	8005f62 <_printf_common+0x8e>
	...

08005fb0 <_printf_i>:
 8005fb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fb4:	7e0f      	ldrb	r7, [r1, #24]
 8005fb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005fb8:	2f78      	cmp	r7, #120	; 0x78
 8005fba:	4691      	mov	r9, r2
 8005fbc:	4680      	mov	r8, r0
 8005fbe:	460c      	mov	r4, r1
 8005fc0:	469a      	mov	sl, r3
 8005fc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005fc6:	d807      	bhi.n	8005fd8 <_printf_i+0x28>
 8005fc8:	2f62      	cmp	r7, #98	; 0x62
 8005fca:	d80a      	bhi.n	8005fe2 <_printf_i+0x32>
 8005fcc:	2f00      	cmp	r7, #0
 8005fce:	f000 80d8 	beq.w	8006182 <_printf_i+0x1d2>
 8005fd2:	2f58      	cmp	r7, #88	; 0x58
 8005fd4:	f000 80a3 	beq.w	800611e <_printf_i+0x16e>
 8005fd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005fe0:	e03a      	b.n	8006058 <_printf_i+0xa8>
 8005fe2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005fe6:	2b15      	cmp	r3, #21
 8005fe8:	d8f6      	bhi.n	8005fd8 <_printf_i+0x28>
 8005fea:	a101      	add	r1, pc, #4	; (adr r1, 8005ff0 <_printf_i+0x40>)
 8005fec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ff0:	08006049 	.word	0x08006049
 8005ff4:	0800605d 	.word	0x0800605d
 8005ff8:	08005fd9 	.word	0x08005fd9
 8005ffc:	08005fd9 	.word	0x08005fd9
 8006000:	08005fd9 	.word	0x08005fd9
 8006004:	08005fd9 	.word	0x08005fd9
 8006008:	0800605d 	.word	0x0800605d
 800600c:	08005fd9 	.word	0x08005fd9
 8006010:	08005fd9 	.word	0x08005fd9
 8006014:	08005fd9 	.word	0x08005fd9
 8006018:	08005fd9 	.word	0x08005fd9
 800601c:	08006169 	.word	0x08006169
 8006020:	0800608d 	.word	0x0800608d
 8006024:	0800614b 	.word	0x0800614b
 8006028:	08005fd9 	.word	0x08005fd9
 800602c:	08005fd9 	.word	0x08005fd9
 8006030:	0800618b 	.word	0x0800618b
 8006034:	08005fd9 	.word	0x08005fd9
 8006038:	0800608d 	.word	0x0800608d
 800603c:	08005fd9 	.word	0x08005fd9
 8006040:	08005fd9 	.word	0x08005fd9
 8006044:	08006153 	.word	0x08006153
 8006048:	682b      	ldr	r3, [r5, #0]
 800604a:	1d1a      	adds	r2, r3, #4
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	602a      	str	r2, [r5, #0]
 8006050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006058:	2301      	movs	r3, #1
 800605a:	e0a3      	b.n	80061a4 <_printf_i+0x1f4>
 800605c:	6820      	ldr	r0, [r4, #0]
 800605e:	6829      	ldr	r1, [r5, #0]
 8006060:	0606      	lsls	r6, r0, #24
 8006062:	f101 0304 	add.w	r3, r1, #4
 8006066:	d50a      	bpl.n	800607e <_printf_i+0xce>
 8006068:	680e      	ldr	r6, [r1, #0]
 800606a:	602b      	str	r3, [r5, #0]
 800606c:	2e00      	cmp	r6, #0
 800606e:	da03      	bge.n	8006078 <_printf_i+0xc8>
 8006070:	232d      	movs	r3, #45	; 0x2d
 8006072:	4276      	negs	r6, r6
 8006074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006078:	485e      	ldr	r0, [pc, #376]	; (80061f4 <_printf_i+0x244>)
 800607a:	230a      	movs	r3, #10
 800607c:	e019      	b.n	80060b2 <_printf_i+0x102>
 800607e:	680e      	ldr	r6, [r1, #0]
 8006080:	602b      	str	r3, [r5, #0]
 8006082:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006086:	bf18      	it	ne
 8006088:	b236      	sxthne	r6, r6
 800608a:	e7ef      	b.n	800606c <_printf_i+0xbc>
 800608c:	682b      	ldr	r3, [r5, #0]
 800608e:	6820      	ldr	r0, [r4, #0]
 8006090:	1d19      	adds	r1, r3, #4
 8006092:	6029      	str	r1, [r5, #0]
 8006094:	0601      	lsls	r1, r0, #24
 8006096:	d501      	bpl.n	800609c <_printf_i+0xec>
 8006098:	681e      	ldr	r6, [r3, #0]
 800609a:	e002      	b.n	80060a2 <_printf_i+0xf2>
 800609c:	0646      	lsls	r6, r0, #25
 800609e:	d5fb      	bpl.n	8006098 <_printf_i+0xe8>
 80060a0:	881e      	ldrh	r6, [r3, #0]
 80060a2:	4854      	ldr	r0, [pc, #336]	; (80061f4 <_printf_i+0x244>)
 80060a4:	2f6f      	cmp	r7, #111	; 0x6f
 80060a6:	bf0c      	ite	eq
 80060a8:	2308      	moveq	r3, #8
 80060aa:	230a      	movne	r3, #10
 80060ac:	2100      	movs	r1, #0
 80060ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060b2:	6865      	ldr	r5, [r4, #4]
 80060b4:	60a5      	str	r5, [r4, #8]
 80060b6:	2d00      	cmp	r5, #0
 80060b8:	bfa2      	ittt	ge
 80060ba:	6821      	ldrge	r1, [r4, #0]
 80060bc:	f021 0104 	bicge.w	r1, r1, #4
 80060c0:	6021      	strge	r1, [r4, #0]
 80060c2:	b90e      	cbnz	r6, 80060c8 <_printf_i+0x118>
 80060c4:	2d00      	cmp	r5, #0
 80060c6:	d04d      	beq.n	8006164 <_printf_i+0x1b4>
 80060c8:	4615      	mov	r5, r2
 80060ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80060ce:	fb03 6711 	mls	r7, r3, r1, r6
 80060d2:	5dc7      	ldrb	r7, [r0, r7]
 80060d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80060d8:	4637      	mov	r7, r6
 80060da:	42bb      	cmp	r3, r7
 80060dc:	460e      	mov	r6, r1
 80060de:	d9f4      	bls.n	80060ca <_printf_i+0x11a>
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	d10b      	bne.n	80060fc <_printf_i+0x14c>
 80060e4:	6823      	ldr	r3, [r4, #0]
 80060e6:	07de      	lsls	r6, r3, #31
 80060e8:	d508      	bpl.n	80060fc <_printf_i+0x14c>
 80060ea:	6923      	ldr	r3, [r4, #16]
 80060ec:	6861      	ldr	r1, [r4, #4]
 80060ee:	4299      	cmp	r1, r3
 80060f0:	bfde      	ittt	le
 80060f2:	2330      	movle	r3, #48	; 0x30
 80060f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80060fc:	1b52      	subs	r2, r2, r5
 80060fe:	6122      	str	r2, [r4, #16]
 8006100:	f8cd a000 	str.w	sl, [sp]
 8006104:	464b      	mov	r3, r9
 8006106:	aa03      	add	r2, sp, #12
 8006108:	4621      	mov	r1, r4
 800610a:	4640      	mov	r0, r8
 800610c:	f7ff fee2 	bl	8005ed4 <_printf_common>
 8006110:	3001      	adds	r0, #1
 8006112:	d14c      	bne.n	80061ae <_printf_i+0x1fe>
 8006114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006118:	b004      	add	sp, #16
 800611a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800611e:	4835      	ldr	r0, [pc, #212]	; (80061f4 <_printf_i+0x244>)
 8006120:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006124:	6829      	ldr	r1, [r5, #0]
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	f851 6b04 	ldr.w	r6, [r1], #4
 800612c:	6029      	str	r1, [r5, #0]
 800612e:	061d      	lsls	r5, r3, #24
 8006130:	d514      	bpl.n	800615c <_printf_i+0x1ac>
 8006132:	07df      	lsls	r7, r3, #31
 8006134:	bf44      	itt	mi
 8006136:	f043 0320 	orrmi.w	r3, r3, #32
 800613a:	6023      	strmi	r3, [r4, #0]
 800613c:	b91e      	cbnz	r6, 8006146 <_printf_i+0x196>
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	f023 0320 	bic.w	r3, r3, #32
 8006144:	6023      	str	r3, [r4, #0]
 8006146:	2310      	movs	r3, #16
 8006148:	e7b0      	b.n	80060ac <_printf_i+0xfc>
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	f043 0320 	orr.w	r3, r3, #32
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	2378      	movs	r3, #120	; 0x78
 8006154:	4828      	ldr	r0, [pc, #160]	; (80061f8 <_printf_i+0x248>)
 8006156:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800615a:	e7e3      	b.n	8006124 <_printf_i+0x174>
 800615c:	0659      	lsls	r1, r3, #25
 800615e:	bf48      	it	mi
 8006160:	b2b6      	uxthmi	r6, r6
 8006162:	e7e6      	b.n	8006132 <_printf_i+0x182>
 8006164:	4615      	mov	r5, r2
 8006166:	e7bb      	b.n	80060e0 <_printf_i+0x130>
 8006168:	682b      	ldr	r3, [r5, #0]
 800616a:	6826      	ldr	r6, [r4, #0]
 800616c:	6961      	ldr	r1, [r4, #20]
 800616e:	1d18      	adds	r0, r3, #4
 8006170:	6028      	str	r0, [r5, #0]
 8006172:	0635      	lsls	r5, r6, #24
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	d501      	bpl.n	800617c <_printf_i+0x1cc>
 8006178:	6019      	str	r1, [r3, #0]
 800617a:	e002      	b.n	8006182 <_printf_i+0x1d2>
 800617c:	0670      	lsls	r0, r6, #25
 800617e:	d5fb      	bpl.n	8006178 <_printf_i+0x1c8>
 8006180:	8019      	strh	r1, [r3, #0]
 8006182:	2300      	movs	r3, #0
 8006184:	6123      	str	r3, [r4, #16]
 8006186:	4615      	mov	r5, r2
 8006188:	e7ba      	b.n	8006100 <_printf_i+0x150>
 800618a:	682b      	ldr	r3, [r5, #0]
 800618c:	1d1a      	adds	r2, r3, #4
 800618e:	602a      	str	r2, [r5, #0]
 8006190:	681d      	ldr	r5, [r3, #0]
 8006192:	6862      	ldr	r2, [r4, #4]
 8006194:	2100      	movs	r1, #0
 8006196:	4628      	mov	r0, r5
 8006198:	f7fa f822 	bl	80001e0 <memchr>
 800619c:	b108      	cbz	r0, 80061a2 <_printf_i+0x1f2>
 800619e:	1b40      	subs	r0, r0, r5
 80061a0:	6060      	str	r0, [r4, #4]
 80061a2:	6863      	ldr	r3, [r4, #4]
 80061a4:	6123      	str	r3, [r4, #16]
 80061a6:	2300      	movs	r3, #0
 80061a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061ac:	e7a8      	b.n	8006100 <_printf_i+0x150>
 80061ae:	6923      	ldr	r3, [r4, #16]
 80061b0:	462a      	mov	r2, r5
 80061b2:	4649      	mov	r1, r9
 80061b4:	4640      	mov	r0, r8
 80061b6:	47d0      	blx	sl
 80061b8:	3001      	adds	r0, #1
 80061ba:	d0ab      	beq.n	8006114 <_printf_i+0x164>
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	079b      	lsls	r3, r3, #30
 80061c0:	d413      	bmi.n	80061ea <_printf_i+0x23a>
 80061c2:	68e0      	ldr	r0, [r4, #12]
 80061c4:	9b03      	ldr	r3, [sp, #12]
 80061c6:	4298      	cmp	r0, r3
 80061c8:	bfb8      	it	lt
 80061ca:	4618      	movlt	r0, r3
 80061cc:	e7a4      	b.n	8006118 <_printf_i+0x168>
 80061ce:	2301      	movs	r3, #1
 80061d0:	4632      	mov	r2, r6
 80061d2:	4649      	mov	r1, r9
 80061d4:	4640      	mov	r0, r8
 80061d6:	47d0      	blx	sl
 80061d8:	3001      	adds	r0, #1
 80061da:	d09b      	beq.n	8006114 <_printf_i+0x164>
 80061dc:	3501      	adds	r5, #1
 80061de:	68e3      	ldr	r3, [r4, #12]
 80061e0:	9903      	ldr	r1, [sp, #12]
 80061e2:	1a5b      	subs	r3, r3, r1
 80061e4:	42ab      	cmp	r3, r5
 80061e6:	dcf2      	bgt.n	80061ce <_printf_i+0x21e>
 80061e8:	e7eb      	b.n	80061c2 <_printf_i+0x212>
 80061ea:	2500      	movs	r5, #0
 80061ec:	f104 0619 	add.w	r6, r4, #25
 80061f0:	e7f5      	b.n	80061de <_printf_i+0x22e>
 80061f2:	bf00      	nop
 80061f4:	0800670d 	.word	0x0800670d
 80061f8:	0800671e 	.word	0x0800671e

080061fc <memmove>:
 80061fc:	4288      	cmp	r0, r1
 80061fe:	b510      	push	{r4, lr}
 8006200:	eb01 0402 	add.w	r4, r1, r2
 8006204:	d902      	bls.n	800620c <memmove+0x10>
 8006206:	4284      	cmp	r4, r0
 8006208:	4623      	mov	r3, r4
 800620a:	d807      	bhi.n	800621c <memmove+0x20>
 800620c:	1e43      	subs	r3, r0, #1
 800620e:	42a1      	cmp	r1, r4
 8006210:	d008      	beq.n	8006224 <memmove+0x28>
 8006212:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006216:	f803 2f01 	strb.w	r2, [r3, #1]!
 800621a:	e7f8      	b.n	800620e <memmove+0x12>
 800621c:	4402      	add	r2, r0
 800621e:	4601      	mov	r1, r0
 8006220:	428a      	cmp	r2, r1
 8006222:	d100      	bne.n	8006226 <memmove+0x2a>
 8006224:	bd10      	pop	{r4, pc}
 8006226:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800622a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800622e:	e7f7      	b.n	8006220 <memmove+0x24>

08006230 <_free_r>:
 8006230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006232:	2900      	cmp	r1, #0
 8006234:	d044      	beq.n	80062c0 <_free_r+0x90>
 8006236:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800623a:	9001      	str	r0, [sp, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	f1a1 0404 	sub.w	r4, r1, #4
 8006242:	bfb8      	it	lt
 8006244:	18e4      	addlt	r4, r4, r3
 8006246:	f000 f913 	bl	8006470 <__malloc_lock>
 800624a:	4a1e      	ldr	r2, [pc, #120]	; (80062c4 <_free_r+0x94>)
 800624c:	9801      	ldr	r0, [sp, #4]
 800624e:	6813      	ldr	r3, [r2, #0]
 8006250:	b933      	cbnz	r3, 8006260 <_free_r+0x30>
 8006252:	6063      	str	r3, [r4, #4]
 8006254:	6014      	str	r4, [r2, #0]
 8006256:	b003      	add	sp, #12
 8006258:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800625c:	f000 b90e 	b.w	800647c <__malloc_unlock>
 8006260:	42a3      	cmp	r3, r4
 8006262:	d908      	bls.n	8006276 <_free_r+0x46>
 8006264:	6825      	ldr	r5, [r4, #0]
 8006266:	1961      	adds	r1, r4, r5
 8006268:	428b      	cmp	r3, r1
 800626a:	bf01      	itttt	eq
 800626c:	6819      	ldreq	r1, [r3, #0]
 800626e:	685b      	ldreq	r3, [r3, #4]
 8006270:	1949      	addeq	r1, r1, r5
 8006272:	6021      	streq	r1, [r4, #0]
 8006274:	e7ed      	b.n	8006252 <_free_r+0x22>
 8006276:	461a      	mov	r2, r3
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	b10b      	cbz	r3, 8006280 <_free_r+0x50>
 800627c:	42a3      	cmp	r3, r4
 800627e:	d9fa      	bls.n	8006276 <_free_r+0x46>
 8006280:	6811      	ldr	r1, [r2, #0]
 8006282:	1855      	adds	r5, r2, r1
 8006284:	42a5      	cmp	r5, r4
 8006286:	d10b      	bne.n	80062a0 <_free_r+0x70>
 8006288:	6824      	ldr	r4, [r4, #0]
 800628a:	4421      	add	r1, r4
 800628c:	1854      	adds	r4, r2, r1
 800628e:	42a3      	cmp	r3, r4
 8006290:	6011      	str	r1, [r2, #0]
 8006292:	d1e0      	bne.n	8006256 <_free_r+0x26>
 8006294:	681c      	ldr	r4, [r3, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	6053      	str	r3, [r2, #4]
 800629a:	4421      	add	r1, r4
 800629c:	6011      	str	r1, [r2, #0]
 800629e:	e7da      	b.n	8006256 <_free_r+0x26>
 80062a0:	d902      	bls.n	80062a8 <_free_r+0x78>
 80062a2:	230c      	movs	r3, #12
 80062a4:	6003      	str	r3, [r0, #0]
 80062a6:	e7d6      	b.n	8006256 <_free_r+0x26>
 80062a8:	6825      	ldr	r5, [r4, #0]
 80062aa:	1961      	adds	r1, r4, r5
 80062ac:	428b      	cmp	r3, r1
 80062ae:	bf04      	itt	eq
 80062b0:	6819      	ldreq	r1, [r3, #0]
 80062b2:	685b      	ldreq	r3, [r3, #4]
 80062b4:	6063      	str	r3, [r4, #4]
 80062b6:	bf04      	itt	eq
 80062b8:	1949      	addeq	r1, r1, r5
 80062ba:	6021      	streq	r1, [r4, #0]
 80062bc:	6054      	str	r4, [r2, #4]
 80062be:	e7ca      	b.n	8006256 <_free_r+0x26>
 80062c0:	b003      	add	sp, #12
 80062c2:	bd30      	pop	{r4, r5, pc}
 80062c4:	20013270 	.word	0x20013270

080062c8 <sbrk_aligned>:
 80062c8:	b570      	push	{r4, r5, r6, lr}
 80062ca:	4e0e      	ldr	r6, [pc, #56]	; (8006304 <sbrk_aligned+0x3c>)
 80062cc:	460c      	mov	r4, r1
 80062ce:	6831      	ldr	r1, [r6, #0]
 80062d0:	4605      	mov	r5, r0
 80062d2:	b911      	cbnz	r1, 80062da <sbrk_aligned+0x12>
 80062d4:	f000 f8bc 	bl	8006450 <_sbrk_r>
 80062d8:	6030      	str	r0, [r6, #0]
 80062da:	4621      	mov	r1, r4
 80062dc:	4628      	mov	r0, r5
 80062de:	f000 f8b7 	bl	8006450 <_sbrk_r>
 80062e2:	1c43      	adds	r3, r0, #1
 80062e4:	d00a      	beq.n	80062fc <sbrk_aligned+0x34>
 80062e6:	1cc4      	adds	r4, r0, #3
 80062e8:	f024 0403 	bic.w	r4, r4, #3
 80062ec:	42a0      	cmp	r0, r4
 80062ee:	d007      	beq.n	8006300 <sbrk_aligned+0x38>
 80062f0:	1a21      	subs	r1, r4, r0
 80062f2:	4628      	mov	r0, r5
 80062f4:	f000 f8ac 	bl	8006450 <_sbrk_r>
 80062f8:	3001      	adds	r0, #1
 80062fa:	d101      	bne.n	8006300 <sbrk_aligned+0x38>
 80062fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006300:	4620      	mov	r0, r4
 8006302:	bd70      	pop	{r4, r5, r6, pc}
 8006304:	20013274 	.word	0x20013274

08006308 <_malloc_r>:
 8006308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800630c:	1ccd      	adds	r5, r1, #3
 800630e:	f025 0503 	bic.w	r5, r5, #3
 8006312:	3508      	adds	r5, #8
 8006314:	2d0c      	cmp	r5, #12
 8006316:	bf38      	it	cc
 8006318:	250c      	movcc	r5, #12
 800631a:	2d00      	cmp	r5, #0
 800631c:	4607      	mov	r7, r0
 800631e:	db01      	blt.n	8006324 <_malloc_r+0x1c>
 8006320:	42a9      	cmp	r1, r5
 8006322:	d905      	bls.n	8006330 <_malloc_r+0x28>
 8006324:	230c      	movs	r3, #12
 8006326:	603b      	str	r3, [r7, #0]
 8006328:	2600      	movs	r6, #0
 800632a:	4630      	mov	r0, r6
 800632c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006330:	4e2e      	ldr	r6, [pc, #184]	; (80063ec <_malloc_r+0xe4>)
 8006332:	f000 f89d 	bl	8006470 <__malloc_lock>
 8006336:	6833      	ldr	r3, [r6, #0]
 8006338:	461c      	mov	r4, r3
 800633a:	bb34      	cbnz	r4, 800638a <_malloc_r+0x82>
 800633c:	4629      	mov	r1, r5
 800633e:	4638      	mov	r0, r7
 8006340:	f7ff ffc2 	bl	80062c8 <sbrk_aligned>
 8006344:	1c43      	adds	r3, r0, #1
 8006346:	4604      	mov	r4, r0
 8006348:	d14d      	bne.n	80063e6 <_malloc_r+0xde>
 800634a:	6834      	ldr	r4, [r6, #0]
 800634c:	4626      	mov	r6, r4
 800634e:	2e00      	cmp	r6, #0
 8006350:	d140      	bne.n	80063d4 <_malloc_r+0xcc>
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	4631      	mov	r1, r6
 8006356:	4638      	mov	r0, r7
 8006358:	eb04 0803 	add.w	r8, r4, r3
 800635c:	f000 f878 	bl	8006450 <_sbrk_r>
 8006360:	4580      	cmp	r8, r0
 8006362:	d13a      	bne.n	80063da <_malloc_r+0xd2>
 8006364:	6821      	ldr	r1, [r4, #0]
 8006366:	3503      	adds	r5, #3
 8006368:	1a6d      	subs	r5, r5, r1
 800636a:	f025 0503 	bic.w	r5, r5, #3
 800636e:	3508      	adds	r5, #8
 8006370:	2d0c      	cmp	r5, #12
 8006372:	bf38      	it	cc
 8006374:	250c      	movcc	r5, #12
 8006376:	4629      	mov	r1, r5
 8006378:	4638      	mov	r0, r7
 800637a:	f7ff ffa5 	bl	80062c8 <sbrk_aligned>
 800637e:	3001      	adds	r0, #1
 8006380:	d02b      	beq.n	80063da <_malloc_r+0xd2>
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	442b      	add	r3, r5
 8006386:	6023      	str	r3, [r4, #0]
 8006388:	e00e      	b.n	80063a8 <_malloc_r+0xa0>
 800638a:	6822      	ldr	r2, [r4, #0]
 800638c:	1b52      	subs	r2, r2, r5
 800638e:	d41e      	bmi.n	80063ce <_malloc_r+0xc6>
 8006390:	2a0b      	cmp	r2, #11
 8006392:	d916      	bls.n	80063c2 <_malloc_r+0xba>
 8006394:	1961      	adds	r1, r4, r5
 8006396:	42a3      	cmp	r3, r4
 8006398:	6025      	str	r5, [r4, #0]
 800639a:	bf18      	it	ne
 800639c:	6059      	strne	r1, [r3, #4]
 800639e:	6863      	ldr	r3, [r4, #4]
 80063a0:	bf08      	it	eq
 80063a2:	6031      	streq	r1, [r6, #0]
 80063a4:	5162      	str	r2, [r4, r5]
 80063a6:	604b      	str	r3, [r1, #4]
 80063a8:	4638      	mov	r0, r7
 80063aa:	f104 060b 	add.w	r6, r4, #11
 80063ae:	f000 f865 	bl	800647c <__malloc_unlock>
 80063b2:	f026 0607 	bic.w	r6, r6, #7
 80063b6:	1d23      	adds	r3, r4, #4
 80063b8:	1af2      	subs	r2, r6, r3
 80063ba:	d0b6      	beq.n	800632a <_malloc_r+0x22>
 80063bc:	1b9b      	subs	r3, r3, r6
 80063be:	50a3      	str	r3, [r4, r2]
 80063c0:	e7b3      	b.n	800632a <_malloc_r+0x22>
 80063c2:	6862      	ldr	r2, [r4, #4]
 80063c4:	42a3      	cmp	r3, r4
 80063c6:	bf0c      	ite	eq
 80063c8:	6032      	streq	r2, [r6, #0]
 80063ca:	605a      	strne	r2, [r3, #4]
 80063cc:	e7ec      	b.n	80063a8 <_malloc_r+0xa0>
 80063ce:	4623      	mov	r3, r4
 80063d0:	6864      	ldr	r4, [r4, #4]
 80063d2:	e7b2      	b.n	800633a <_malloc_r+0x32>
 80063d4:	4634      	mov	r4, r6
 80063d6:	6876      	ldr	r6, [r6, #4]
 80063d8:	e7b9      	b.n	800634e <_malloc_r+0x46>
 80063da:	230c      	movs	r3, #12
 80063dc:	603b      	str	r3, [r7, #0]
 80063de:	4638      	mov	r0, r7
 80063e0:	f000 f84c 	bl	800647c <__malloc_unlock>
 80063e4:	e7a1      	b.n	800632a <_malloc_r+0x22>
 80063e6:	6025      	str	r5, [r4, #0]
 80063e8:	e7de      	b.n	80063a8 <_malloc_r+0xa0>
 80063ea:	bf00      	nop
 80063ec:	20013270 	.word	0x20013270

080063f0 <_realloc_r>:
 80063f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063f4:	4680      	mov	r8, r0
 80063f6:	4614      	mov	r4, r2
 80063f8:	460e      	mov	r6, r1
 80063fa:	b921      	cbnz	r1, 8006406 <_realloc_r+0x16>
 80063fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006400:	4611      	mov	r1, r2
 8006402:	f7ff bf81 	b.w	8006308 <_malloc_r>
 8006406:	b92a      	cbnz	r2, 8006414 <_realloc_r+0x24>
 8006408:	f7ff ff12 	bl	8006230 <_free_r>
 800640c:	4625      	mov	r5, r4
 800640e:	4628      	mov	r0, r5
 8006410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006414:	f000 f838 	bl	8006488 <_malloc_usable_size_r>
 8006418:	4284      	cmp	r4, r0
 800641a:	4607      	mov	r7, r0
 800641c:	d802      	bhi.n	8006424 <_realloc_r+0x34>
 800641e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006422:	d812      	bhi.n	800644a <_realloc_r+0x5a>
 8006424:	4621      	mov	r1, r4
 8006426:	4640      	mov	r0, r8
 8006428:	f7ff ff6e 	bl	8006308 <_malloc_r>
 800642c:	4605      	mov	r5, r0
 800642e:	2800      	cmp	r0, #0
 8006430:	d0ed      	beq.n	800640e <_realloc_r+0x1e>
 8006432:	42bc      	cmp	r4, r7
 8006434:	4622      	mov	r2, r4
 8006436:	4631      	mov	r1, r6
 8006438:	bf28      	it	cs
 800643a:	463a      	movcs	r2, r7
 800643c:	f7ff fbb8 	bl	8005bb0 <memcpy>
 8006440:	4631      	mov	r1, r6
 8006442:	4640      	mov	r0, r8
 8006444:	f7ff fef4 	bl	8006230 <_free_r>
 8006448:	e7e1      	b.n	800640e <_realloc_r+0x1e>
 800644a:	4635      	mov	r5, r6
 800644c:	e7df      	b.n	800640e <_realloc_r+0x1e>
	...

08006450 <_sbrk_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	4d06      	ldr	r5, [pc, #24]	; (800646c <_sbrk_r+0x1c>)
 8006454:	2300      	movs	r3, #0
 8006456:	4604      	mov	r4, r0
 8006458:	4608      	mov	r0, r1
 800645a:	602b      	str	r3, [r5, #0]
 800645c:	f7fa fd7c 	bl	8000f58 <_sbrk>
 8006460:	1c43      	adds	r3, r0, #1
 8006462:	d102      	bne.n	800646a <_sbrk_r+0x1a>
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	b103      	cbz	r3, 800646a <_sbrk_r+0x1a>
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	bd38      	pop	{r3, r4, r5, pc}
 800646c:	20013278 	.word	0x20013278

08006470 <__malloc_lock>:
 8006470:	4801      	ldr	r0, [pc, #4]	; (8006478 <__malloc_lock+0x8>)
 8006472:	f000 b811 	b.w	8006498 <__retarget_lock_acquire_recursive>
 8006476:	bf00      	nop
 8006478:	2001327c 	.word	0x2001327c

0800647c <__malloc_unlock>:
 800647c:	4801      	ldr	r0, [pc, #4]	; (8006484 <__malloc_unlock+0x8>)
 800647e:	f000 b80c 	b.w	800649a <__retarget_lock_release_recursive>
 8006482:	bf00      	nop
 8006484:	2001327c 	.word	0x2001327c

08006488 <_malloc_usable_size_r>:
 8006488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800648c:	1f18      	subs	r0, r3, #4
 800648e:	2b00      	cmp	r3, #0
 8006490:	bfbc      	itt	lt
 8006492:	580b      	ldrlt	r3, [r1, r0]
 8006494:	18c0      	addlt	r0, r0, r3
 8006496:	4770      	bx	lr

08006498 <__retarget_lock_acquire_recursive>:
 8006498:	4770      	bx	lr

0800649a <__retarget_lock_release_recursive>:
 800649a:	4770      	bx	lr

0800649c <_init>:
 800649c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649e:	bf00      	nop
 80064a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064a2:	bc08      	pop	{r3}
 80064a4:	469e      	mov	lr, r3
 80064a6:	4770      	bx	lr

080064a8 <_fini>:
 80064a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064aa:	bf00      	nop
 80064ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ae:	bc08      	pop	{r3}
 80064b0:	469e      	mov	lr, r3
 80064b2:	4770      	bx	lr
