
audioplayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006384  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08006514  08006514  00016514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006790  08006790  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006790  08006790  00016790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006798  08006798  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006798  08006798  00016798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800679c  0800679c  0001679c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080067a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000131f0  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013280  20013280  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017820  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003152  00000000  00000000  000378e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d0  00000000  00000000  0003aa38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014b0  00000000  00000000  0003c008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000234f8  00000000  00000000  0003d4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019366  00000000  00000000  000609b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6b76  00000000  00000000  00079d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015088c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060a4  00000000  00000000  001508dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080064fc 	.word	0x080064fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080064fc 	.word	0x080064fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <LCD_Init>:
   
   0xFF
};
//----------------------------------------------------------------------------------
void LCD_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af02      	add	r7, sp, #8
   HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, comm, sizeof(comm),10);
 800058a:	230a      	movs	r3, #10
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	231b      	movs	r3, #27
 8000590:	4a03      	ldr	r2, [pc, #12]	; (80005a0 <LCD_Init+0x1c>)
 8000592:	2178      	movs	r1, #120	; 0x78
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <LCD_Init+0x20>)
 8000596:	f001 f99d 	bl	80018d4 <HAL_I2C_Master_Transmit>
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000000 	.word	0x20000000
 80005a4:	200002b4 	.word	0x200002b4

080005a8 <LCD_command>:
//----------------------------------------------------------------------------------
void  LCD_command(uint8_t cmd)
{   
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af02      	add	r7, sp, #8
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
   uint8_t cmd_arr[2] = {0,0};
 80005b2:	2300      	movs	r3, #0
 80005b4:	81bb      	strh	r3, [r7, #12]
   cmd_arr[0] = COMMAND_MODE;
 80005b6:	2300      	movs	r3, #0
 80005b8:	733b      	strb	r3, [r7, #12]
   cmd_arr[1] = cmd;
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	737b      	strb	r3, [r7, #13]
   HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, cmd_arr, sizeof(cmd_arr),10);
 80005be:	f107 020c 	add.w	r2, r7, #12
 80005c2:	230a      	movs	r3, #10
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2302      	movs	r3, #2
 80005c8:	2178      	movs	r1, #120	; 0x78
 80005ca:	4803      	ldr	r0, [pc, #12]	; (80005d8 <LCD_command+0x30>)
 80005cc:	f001 f982 	bl	80018d4 <HAL_I2C_Master_Transmit>
}
 80005d0:	bf00      	nop
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200002b4 	.word	0x200002b4

080005dc <LCD_Update>:
   x_cur = 0;
   y_cur = 0;
}
//----------------------------------------------------------------------------------
void LCD_Update(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af02      	add	r7, sp, #8
   LCD_command(0x21);		      // SSD1306_COLUMNADDR
 80005e2:	2021      	movs	r0, #33	; 0x21
 80005e4:	f7ff ffe0 	bl	80005a8 <LCD_command>
   LCD_command(column_start);     // column start
 80005e8:	2000      	movs	r0, #0
 80005ea:	f7ff ffdd 	bl	80005a8 <LCD_command>
   LCD_command(column_end);       // column end
 80005ee:	207f      	movs	r0, #127	; 0x7f
 80005f0:	f7ff ffda 	bl	80005a8 <LCD_command>
   LCD_command(0x22);             // SSD1306_PAGEADDR
 80005f4:	2022      	movs	r0, #34	; 0x22
 80005f6:	f7ff ffd7 	bl	80005a8 <LCD_command>
   LCD_command(page_start);       // page start
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff ffd4 	bl	80005a8 <LCD_command>
   LCD_command(page_end);         // page end (4 pages for 32 rows OLED)
 8000600:	2003      	movs	r0, #3
 8000602:	f7ff ffd1 	bl	80005a8 <LCD_command>
   
   lcd_buff[0]= DATA_MODE;              
 8000606:	4b07      	ldr	r3, [pc, #28]	; (8000624 <LCD_Update+0x48>)
 8000608:	2240      	movs	r2, #64	; 0x40
 800060a:	701a      	strb	r2, [r3, #0]
   
   HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, lcd_buff, BUFF_SIZE,50);
 800060c:	2332      	movs	r3, #50	; 0x32
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	f240 2301 	movw	r3, #513	; 0x201
 8000614:	4a03      	ldr	r2, [pc, #12]	; (8000624 <LCD_Update+0x48>)
 8000616:	2178      	movs	r1, #120	; 0x78
 8000618:	4803      	ldr	r0, [pc, #12]	; (8000628 <LCD_Update+0x4c>)
 800061a:	f001 f95b 	bl	80018d4 <HAL_I2C_Master_Transmit>
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000ac 	.word	0x200000ac
 8000628:	200002b4 	.word	0x200002b4

0800062c <LCD_Chr>:
//----------------------------------------------------------------------------------
void LCD_Chr(char ch)
{
 800062c:	b490      	push	{r4, r7}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
   uint8_t i;   
   lcd_buff_idx=(y_cur*128 + x_cur*6) + 1;    
 8000636:	4b32      	ldr	r3, [pc, #200]	; (8000700 <LCD_Chr+0xd4>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b29b      	uxth	r3, r3
 800063c:	01db      	lsls	r3, r3, #7
 800063e:	b29a      	uxth	r2, r3
 8000640:	4b30      	ldr	r3, [pc, #192]	; (8000704 <LCD_Chr+0xd8>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	b29b      	uxth	r3, r3
 8000646:	4619      	mov	r1, r3
 8000648:	0049      	lsls	r1, r1, #1
 800064a:	440b      	add	r3, r1
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	b29b      	uxth	r3, r3
 8000650:	4413      	add	r3, r2
 8000652:	b29b      	uxth	r3, r3
 8000654:	3301      	adds	r3, #1
 8000656:	b29a      	uxth	r2, r3
 8000658:	4b2b      	ldr	r3, [pc, #172]	; (8000708 <LCD_Chr+0xdc>)
 800065a:	801a      	strh	r2, [r3, #0]
   if ((ch >= 0x20)&&(ch <= 0x7F)) ch -= 32;
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	2b1f      	cmp	r3, #31
 8000660:	d907      	bls.n	8000672 <LCD_Chr+0x46>
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	db03      	blt.n	8000672 <LCD_Chr+0x46>
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	3b20      	subs	r3, #32
 800066e:	71fb      	strb	r3, [r7, #7]
 8000670:	e001      	b.n	8000676 <LCD_Chr+0x4a>
   else ch = 95;   
 8000672:	235f      	movs	r3, #95	; 0x5f
 8000674:	71fb      	strb	r3, [r7, #7]
   for (i = 0; i < 5; i++)
 8000676:	2300      	movs	r3, #0
 8000678:	73fb      	strb	r3, [r7, #15]
 800067a:	e014      	b.n	80006a6 <LCD_Chr+0x7a>
   {
        lcd_buff[lcd_buff_idx++] = font[ch][i];       
 800067c:	79fa      	ldrb	r2, [r7, #7]
 800067e:	7bf9      	ldrb	r1, [r7, #15]
 8000680:	4b21      	ldr	r3, [pc, #132]	; (8000708 <LCD_Chr+0xdc>)
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	1c58      	adds	r0, r3, #1
 8000686:	b284      	uxth	r4, r0
 8000688:	481f      	ldr	r0, [pc, #124]	; (8000708 <LCD_Chr+0xdc>)
 800068a:	8004      	strh	r4, [r0, #0]
 800068c:	461c      	mov	r4, r3
 800068e:	481f      	ldr	r0, [pc, #124]	; (800070c <LCD_Chr+0xe0>)
 8000690:	4613      	mov	r3, r2
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	4413      	add	r3, r2
 8000696:	4403      	add	r3, r0
 8000698:	440b      	add	r3, r1
 800069a:	781a      	ldrb	r2, [r3, #0]
 800069c:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <LCD_Chr+0xe4>)
 800069e:	551a      	strb	r2, [r3, r4]
   for (i = 0; i < 5; i++)
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	3301      	adds	r3, #1
 80006a4:	73fb      	strb	r3, [r7, #15]
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	2b04      	cmp	r3, #4
 80006aa:	d9e7      	bls.n	800067c <LCD_Chr+0x50>
   }
   lcd_buff[lcd_buff_idx++] = 0x00;  
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <LCD_Chr+0xdc>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	b291      	uxth	r1, r2
 80006b4:	4a14      	ldr	r2, [pc, #80]	; (8000708 <LCD_Chr+0xdc>)
 80006b6:	8011      	strh	r1, [r2, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <LCD_Chr+0xe4>)
 80006bc:	2100      	movs	r1, #0
 80006be:	5499      	strb	r1, [r3, r2]
   x_cur++;
 80006c0:	4b10      	ldr	r3, [pc, #64]	; (8000704 <LCD_Chr+0xd8>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	3301      	adds	r3, #1
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <LCD_Chr+0xd8>)
 80006ca:	701a      	strb	r2, [r3, #0]
   if (x_cur > 20)
 80006cc:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <LCD_Chr+0xd8>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b14      	cmp	r3, #20
 80006d2:	d90f      	bls.n	80006f4 <LCD_Chr+0xc8>
   {
      x_cur = 0;
 80006d4:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <LCD_Chr+0xd8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
      y_cur++;
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <LCD_Chr+0xd4>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	3301      	adds	r3, #1
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b07      	ldr	r3, [pc, #28]	; (8000700 <LCD_Chr+0xd4>)
 80006e4:	701a      	strb	r2, [r3, #0]
      if (y_cur > 3)
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <LCD_Chr+0xd4>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d902      	bls.n	80006f4 <LCD_Chr+0xc8>
      {
         y_cur = 0;
 80006ee:	4b04      	ldr	r3, [pc, #16]	; (8000700 <LCD_Chr+0xd4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]
      }
   }
}
 80006f4:	bf00      	nop
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc90      	pop	{r4, r7}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	200002b1 	.word	0x200002b1
 8000704:	200002b0 	.word	0x200002b0
 8000708:	200002ae 	.word	0x200002ae
 800070c:	08006564 	.word	0x08006564
 8000710:	200000ac 	.word	0x200000ac

08000714 <LCD_FStr>:
      }
   }
}
//----------------------------------------------------------------------------------
void LCD_FStr(const char *dataPtr, uint8_t x, uint8_t y)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	70fb      	strb	r3, [r7, #3]
 8000720:	4613      	mov	r3, r2
 8000722:	70bb      	strb	r3, [r7, #2]
   LCD_GotoXY(x,y);
 8000724:	78ba      	ldrb	r2, [r7, #2]
 8000726:	78fb      	ldrb	r3, [r7, #3]
 8000728:	4611      	mov	r1, r2
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f812 	bl	8000754 <LCD_GotoXY>
   while(*dataPtr != 0)
 8000730:	e007      	b.n	8000742 <LCD_FStr+0x2e>
   {
      LCD_Chr(*dataPtr);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff78 	bl	800062c <LCD_Chr>
      dataPtr++;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3301      	adds	r3, #1
 8000740:	607b      	str	r3, [r7, #4]
   while(*dataPtr != 0)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d1f3      	bne.n	8000732 <LCD_FStr+0x1e>
   }
}
 800074a:	bf00      	nop
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <LCD_GotoXY>:
      dataPtr++;
   }
}
////----------------------------------------------------
void LCD_GotoXY(uint8_t x,uint8_t y)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	460a      	mov	r2, r1
 800075e:	71fb      	strb	r3, [r7, #7]
 8000760:	4613      	mov	r3, r2
 8000762:	71bb      	strb	r3, [r7, #6]
   if((x < 21)&&(y < (page_end+1)))
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	2b14      	cmp	r3, #20
 8000768:	d808      	bhi.n	800077c <LCD_GotoXY+0x28>
 800076a:	79bb      	ldrb	r3, [r7, #6]
 800076c:	2b03      	cmp	r3, #3
 800076e:	d805      	bhi.n	800077c <LCD_GotoXY+0x28>
   {
      x_cur = x;
 8000770:	4a05      	ldr	r2, [pc, #20]	; (8000788 <LCD_GotoXY+0x34>)
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	7013      	strb	r3, [r2, #0]
      y_cur = y;
 8000776:	4a05      	ldr	r2, [pc, #20]	; (800078c <LCD_GotoXY+0x38>)
 8000778:	79bb      	ldrb	r3, [r7, #6]
 800077a:	7013      	strb	r3, [r2, #0]
   }
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	200002b0 	.word	0x200002b0
 800078c:	200002b1 	.word	0x200002b1

08000790 <SD_init>:
//	}
//	return;
//};


void SD_init(){
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
	// One line of LCD contains 21 character

	char buf[22];
	sprintf(buf, "Loading SD card...");
 8000796:	463b      	mov	r3, r7
 8000798:	4907      	ldr	r1, [pc, #28]	; (80007b8 <SD_init+0x28>)
 800079a:	4618      	mov	r0, r3
 800079c:	f005 fa4e 	bl	8005c3c <siprintf>
	LCD_FStr(buf, 0, 0);
 80007a0:	463b      	mov	r3, r7
 80007a2:	2200      	movs	r2, #0
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ffb4 	bl	8000714 <LCD_FStr>
	LCD_Update();
 80007ac:	f7ff ff16 	bl	80005dc <LCD_Update>
	return;
 80007b0:	bf00      	nop
};
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	08006514 	.word	0x08006514

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c0:	f000 fc52 	bl	8001068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c4:	f000 f810 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c8:	f000 f8fa 	bl	80009c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007cc:	f000 f8ce 	bl	800096c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007d0:	f000 f868 	bl	80008a4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80007d4:	f000 f894 	bl	8000900 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  LCD_Init();
 80007d8:	f7ff fed4 	bl	8000584 <LCD_Init>

  // Init SD card here
  SD_init();
 80007dc:	f7ff ffd8 	bl	8000790 <SD_init>
  // Start task here
//  xTaskCreate(task1, "task1", STACK_SIZE, (void *) NULL, 1, NULL);
//  xTaskCreate(task2, "task2", STACK_SIZE, (void *) NULL, 1, NULL);

  // Start scheduler here
  vTaskStartScheduler();
 80007e0:	f003 fda0 	bl	8004324 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <main+0x28>
	...

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b094      	sub	sp, #80	; 0x50
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0320 	add.w	r3, r7, #32
 80007f2:	2230      	movs	r2, #48	; 0x30
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f005 fa18 	bl	8005c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	4b22      	ldr	r3, [pc, #136]	; (800089c <SystemClock_Config+0xb4>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000814:	4a21      	ldr	r2, [pc, #132]	; (800089c <SystemClock_Config+0xb4>)
 8000816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081a:	6413      	str	r3, [r2, #64]	; 0x40
 800081c:	4b1f      	ldr	r3, [pc, #124]	; (800089c <SystemClock_Config+0xb4>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000828:	2300      	movs	r3, #0
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <SystemClock_Config+0xb8>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <SystemClock_Config+0xb8>)
 8000832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000836:	6013      	str	r3, [r2, #0]
 8000838:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <SystemClock_Config+0xb8>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000844:	2302      	movs	r3, #2
 8000846:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000848:	2301      	movs	r3, #1
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084c:	2310      	movs	r3, #16
 800084e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000850:	2300      	movs	r3, #0
 8000852:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000854:	f107 0320 	add.w	r3, r7, #32
 8000858:	4618      	mov	r0, r3
 800085a:	f001 fb43 	bl	8001ee4 <HAL_RCC_OscConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000864:	f000 f9ec 	bl	8000c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000868:	230f      	movs	r3, #15
 800086a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800086c:	2300      	movs	r3, #0
 800086e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f001 fda6 	bl	80023d4 <HAL_RCC_ClockConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800088e:	f000 f9d7 	bl	8000c40 <Error_Handler>
  }
}
 8000892:	bf00      	nop
 8000894:	3750      	adds	r7, #80	; 0x50
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800
 80008a0:	40007000 	.word	0x40007000

080008a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008aa:	4a13      	ldr	r2, [pc, #76]	; (80008f8 <MX_I2C1_Init+0x54>)
 80008ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008b0:	4a12      	ldr	r2, [pc, #72]	; (80008fc <MX_I2C1_Init+0x58>)
 80008b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008e2:	f000 feb3 	bl	800164c <HAL_I2C_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008ec:	f000 f9a8 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200002b4 	.word	0x200002b4
 80008f8:	40005400 	.word	0x40005400
 80008fc:	000186a0 	.word	0x000186a0

08000900 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000904:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_SPI1_Init+0x64>)
 8000906:	4a18      	ldr	r2, [pc, #96]	; (8000968 <MX_SPI1_Init+0x68>)
 8000908:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_SPI1_Init+0x64>)
 800090c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000910:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_SPI1_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_SPI1_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_SPI1_Init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_SPI1_Init+0x64>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_SPI1_Init+0x64>)
 800092c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000930:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_SPI1_Init+0x64>)
 8000934:	2230      	movs	r2, #48	; 0x30
 8000936:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <MX_SPI1_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_SPI1_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <MX_SPI1_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_SPI1_Init+0x64>)
 800094c:	220a      	movs	r2, #10
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_SPI1_Init+0x64>)
 8000952:	f001 ff51 	bl	80027f8 <HAL_SPI_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800095c:	f000 f970 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000308 	.word	0x20000308
 8000968:	40013000 	.word	0x40013000

0800096c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000972:	4a12      	ldr	r2, [pc, #72]	; (80009bc <MX_USART2_UART_Init+0x50>)
 8000974:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800097c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 80009a4:	f002 fa5e 	bl	8002e64 <HAL_UART_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ae:	f000 f947 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000360 	.word	0x20000360
 80009bc:	40004400 	.word	0x40004400

080009c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	4b3a      	ldr	r3, [pc, #232]	; (8000ac4 <MX_GPIO_Init+0x104>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a39      	ldr	r2, [pc, #228]	; (8000ac4 <MX_GPIO_Init+0x104>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b37      	ldr	r3, [pc, #220]	; (8000ac4 <MX_GPIO_Init+0x104>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b33      	ldr	r3, [pc, #204]	; (8000ac4 <MX_GPIO_Init+0x104>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a32      	ldr	r2, [pc, #200]	; (8000ac4 <MX_GPIO_Init+0x104>)
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b30      	ldr	r3, [pc, #192]	; (8000ac4 <MX_GPIO_Init+0x104>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	4b2c      	ldr	r3, [pc, #176]	; (8000ac4 <MX_GPIO_Init+0x104>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a2b      	ldr	r2, [pc, #172]	; (8000ac4 <MX_GPIO_Init+0x104>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b29      	ldr	r3, [pc, #164]	; (8000ac4 <MX_GPIO_Init+0x104>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDCard_CS_GPIO_Port, SDCard_CS_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2110      	movs	r1, #16
 8000a2e:	4826      	ldr	r0, [pc, #152]	; (8000ac8 <MX_GPIO_Init+0x108>)
 8000a30:	f000 fdda 	bl	80015e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SDCard_CS_Pin */
  GPIO_InitStruct.Pin = SDCard_CS_Pin;
 8000a34:	2310      	movs	r3, #16
 8000a36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SDCard_CS_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	4619      	mov	r1, r3
 8000a4a:	481f      	ldr	r0, [pc, #124]	; (8000ac8 <MX_GPIO_Init+0x108>)
 8000a4c:	f000 fc30 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a50:	231f      	movs	r3, #31
 8000a52:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a54:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a5e:	f107 030c 	add.w	r3, r7, #12
 8000a62:	4619      	mov	r1, r3
 8000a64:	4819      	ldr	r0, [pc, #100]	; (8000acc <MX_GPIO_Init+0x10c>)
 8000a66:	f000 fc23 	bl	80012b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	210f      	movs	r1, #15
 8000a6e:	2006      	movs	r0, #6
 8000a70:	f000 fbf4 	bl	800125c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a74:	2006      	movs	r0, #6
 8000a76:	f000 fc0d 	bl	8001294 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 15, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	210f      	movs	r1, #15
 8000a7e:	2007      	movs	r0, #7
 8000a80:	f000 fbec 	bl	800125c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a84:	2007      	movs	r0, #7
 8000a86:	f000 fc05 	bl	8001294 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 15, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	210f      	movs	r1, #15
 8000a8e:	2008      	movs	r0, #8
 8000a90:	f000 fbe4 	bl	800125c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000a94:	2008      	movs	r0, #8
 8000a96:	f000 fbfd 	bl	8001294 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 15, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	210f      	movs	r1, #15
 8000a9e:	2009      	movs	r0, #9
 8000aa0:	f000 fbdc 	bl	800125c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000aa4:	2009      	movs	r0, #9
 8000aa6:	f000 fbf5 	bl	8001294 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	210f      	movs	r1, #15
 8000aae:	200a      	movs	r0, #10
 8000ab0:	f000 fbd4 	bl	800125c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ab4:	200a      	movs	r0, #10
 8000ab6:	f000 fbed 	bl	8001294 <HAL_NVIC_EnableIRQ>

}
 8000aba:	bf00      	nop
 8000abc:	3720      	adds	r7, #32
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	40020c00 	.word	0x40020c00

08000ad0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b0c4      	sub	sp, #272	; 0x110
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4602      	mov	r2, r0
 8000ad8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000adc:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000ae0:	801a      	strh	r2, [r3, #0]
	char buf[256];
	int button = -1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ae6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	switch(GPIO_Pin){
 8000aea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000aee:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	2b80      	cmp	r3, #128	; 0x80
 8000af6:	d06c      	beq.n	8000bd2 <HAL_GPIO_EXTI_Callback+0x102>
 8000af8:	2b80      	cmp	r3, #128	; 0x80
 8000afa:	f300 8085 	bgt.w	8000c08 <HAL_GPIO_EXTI_Callback+0x138>
 8000afe:	2b20      	cmp	r3, #32
 8000b00:	dc48      	bgt.n	8000b94 <HAL_GPIO_EXTI_Callback+0xc4>
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f340 8080 	ble.w	8000c08 <HAL_GPIO_EXTI_Callback+0x138>
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	2b1f      	cmp	r3, #31
 8000b0c:	d87c      	bhi.n	8000c08 <HAL_GPIO_EXTI_Callback+0x138>
 8000b0e:	a201      	add	r2, pc, #4	; (adr r2, 8000b14 <HAL_GPIO_EXTI_Callback+0x44>)
 8000b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b14:	08000b9b 	.word	0x08000b9b
 8000b18:	08000ba3 	.word	0x08000ba3
 8000b1c:	08000c09 	.word	0x08000c09
 8000b20:	08000bab 	.word	0x08000bab
 8000b24:	08000c09 	.word	0x08000c09
 8000b28:	08000c09 	.word	0x08000c09
 8000b2c:	08000c09 	.word	0x08000c09
 8000b30:	08000bb3 	.word	0x08000bb3
 8000b34:	08000c09 	.word	0x08000c09
 8000b38:	08000c09 	.word	0x08000c09
 8000b3c:	08000c09 	.word	0x08000c09
 8000b40:	08000c09 	.word	0x08000c09
 8000b44:	08000c09 	.word	0x08000c09
 8000b48:	08000c09 	.word	0x08000c09
 8000b4c:	08000c09 	.word	0x08000c09
 8000b50:	08000bbb 	.word	0x08000bbb
 8000b54:	08000c09 	.word	0x08000c09
 8000b58:	08000c09 	.word	0x08000c09
 8000b5c:	08000c09 	.word	0x08000c09
 8000b60:	08000c09 	.word	0x08000c09
 8000b64:	08000c09 	.word	0x08000c09
 8000b68:	08000c09 	.word	0x08000c09
 8000b6c:	08000c09 	.word	0x08000c09
 8000b70:	08000c09 	.word	0x08000c09
 8000b74:	08000c09 	.word	0x08000c09
 8000b78:	08000c09 	.word	0x08000c09
 8000b7c:	08000c09 	.word	0x08000c09
 8000b80:	08000c09 	.word	0x08000c09
 8000b84:	08000c09 	.word	0x08000c09
 8000b88:	08000c09 	.word	0x08000c09
 8000b8c:	08000c09 	.word	0x08000c09
 8000b90:	08000bc3 	.word	0x08000bc3
 8000b94:	2b40      	cmp	r3, #64	; 0x40
 8000b96:	d018      	beq.n	8000bca <HAL_GPIO_EXTI_Callback+0xfa>
			break;
		case GPIO_PIN_7:
			button = 7;
			break;
		default:
			return;
 8000b98:	e036      	b.n	8000c08 <HAL_GPIO_EXTI_Callback+0x138>
			button = 1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8000ba0:	e01b      	b.n	8000bda <HAL_GPIO_EXTI_Callback+0x10a>
			button = 1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8000ba8:	e017      	b.n	8000bda <HAL_GPIO_EXTI_Callback+0x10a>
			button = 2;
 8000baa:	2302      	movs	r3, #2
 8000bac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8000bb0:	e013      	b.n	8000bda <HAL_GPIO_EXTI_Callback+0x10a>
			button = 3;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8000bb8:	e00f      	b.n	8000bda <HAL_GPIO_EXTI_Callback+0x10a>
			button = 4;
 8000bba:	2304      	movs	r3, #4
 8000bbc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8000bc0:	e00b      	b.n	8000bda <HAL_GPIO_EXTI_Callback+0x10a>
			button = 5;
 8000bc2:	2305      	movs	r3, #5
 8000bc4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8000bc8:	e007      	b.n	8000bda <HAL_GPIO_EXTI_Callback+0x10a>
			button = 6;
 8000bca:	2306      	movs	r3, #6
 8000bcc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8000bd0:	e003      	b.n	8000bda <HAL_GPIO_EXTI_Callback+0x10a>
			button = 7;
 8000bd2:	2307      	movs	r3, #7
 8000bd4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8000bd8:	bf00      	nop
			break;
	}
	sprintf(buf,"External IO button %d pressed!\n\r", button);
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000be2:	490c      	ldr	r1, [pc, #48]	; (8000c14 <HAL_GPIO_EXTI_Callback+0x144>)
 8000be4:	4618      	mov	r0, r3
 8000be6:	f005 f829 	bl	8005c3c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 8000bea:	f107 030c 	add.w	r3, r7, #12
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff faee 	bl	80001d0 <strlen>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	f107 010c 	add.w	r1, r7, #12
 8000bfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x148>)
 8000c02:	f002 f97c 	bl	8002efe <HAL_UART_Transmit>
	return;
 8000c06:	e000      	b.n	8000c0a <HAL_GPIO_EXTI_Callback+0x13a>
			return;
 8000c08:	bf00      	nop
}
 8000c0a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	08006528 	.word	0x08006528
 8000c18:	20000360 	.word	0x20000360

08000c1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d101      	bne.n	8000c32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c2e:	f000 fa3d 	bl	80010ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40001400 	.word	0x40001400

08000c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c44:	b672      	cpsid	i
}
 8000c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <Error_Handler+0x8>
	...

08000c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	4a0f      	ldr	r2, [pc, #60]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c60:	6453      	str	r3, [r2, #68]	; 0x44
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	4a08      	ldr	r2, [pc, #32]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800

08000c9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a19      	ldr	r2, [pc, #100]	; (8000d20 <HAL_I2C_MspInit+0x84>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d12b      	bne.n	8000d16 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <HAL_I2C_MspInit+0x88>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a17      	ldr	r2, [pc, #92]	; (8000d24 <HAL_I2C_MspInit+0x88>)
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <HAL_I2C_MspInit+0x88>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cda:	23c0      	movs	r3, #192	; 0xc0
 8000cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cde:	2312      	movs	r3, #18
 8000ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cea:	2304      	movs	r3, #4
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480c      	ldr	r0, [pc, #48]	; (8000d28 <HAL_I2C_MspInit+0x8c>)
 8000cf6:	f000 fadb 	bl	80012b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <HAL_I2C_MspInit+0x88>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <HAL_I2C_MspInit+0x88>)
 8000d04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d08:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_I2C_MspInit+0x88>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d16:	bf00      	nop
 8000d18:	3728      	adds	r7, #40	; 0x28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40005400 	.word	0x40005400
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020400 	.word	0x40020400

08000d2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	; 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a19      	ldr	r2, [pc, #100]	; (8000db0 <HAL_SPI_MspInit+0x84>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d12b      	bne.n	8000da6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <HAL_SPI_MspInit+0x88>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <HAL_SPI_MspInit+0x88>)
 8000d58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <HAL_SPI_MspInit+0x88>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <HAL_SPI_MspInit+0x88>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a10      	ldr	r2, [pc, #64]	; (8000db4 <HAL_SPI_MspInit+0x88>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_SPI_MspInit+0x88>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d86:	23e0      	movs	r3, #224	; 0xe0
 8000d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d96:	2305      	movs	r3, #5
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <HAL_SPI_MspInit+0x8c>)
 8000da2:	f000 fa85 	bl	80012b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	; 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40013000 	.word	0x40013000
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020000 	.word	0x40020000

08000dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a19      	ldr	r2, [pc, #100]	; (8000e40 <HAL_UART_MspInit+0x84>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d12b      	bne.n	8000e36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <HAL_UART_MspInit+0x88>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	4a17      	ldr	r2, [pc, #92]	; (8000e44 <HAL_UART_MspInit+0x88>)
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dec:	6413      	str	r3, [r2, #64]	; 0x40
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <HAL_UART_MspInit+0x88>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <HAL_UART_MspInit+0x88>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a10      	ldr	r2, [pc, #64]	; (8000e44 <HAL_UART_MspInit+0x88>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_UART_MspInit+0x88>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e16:	230c      	movs	r3, #12
 8000e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e26:	2307      	movs	r3, #7
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4805      	ldr	r0, [pc, #20]	; (8000e48 <HAL_UART_MspInit+0x8c>)
 8000e32:	f000 fa3d 	bl	80012b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e36:	bf00      	nop
 8000e38:	3728      	adds	r7, #40	; 0x28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40004400 	.word	0x40004400
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020000 	.word	0x40020000

08000e4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08c      	sub	sp, #48	; 0x30
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	2037      	movs	r0, #55	; 0x37
 8000e62:	f000 f9fb 	bl	800125c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e66:	2037      	movs	r0, #55	; 0x37
 8000e68:	f000 fa14 	bl	8001294 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <HAL_InitTick+0xa0>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	4a1d      	ldr	r2, [pc, #116]	; (8000eec <HAL_InitTick+0xa0>)
 8000e76:	f043 0320 	orr.w	r3, r3, #32
 8000e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <HAL_InitTick+0xa0>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	f003 0320 	and.w	r3, r3, #32
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e88:	f107 0210 	add.w	r2, r7, #16
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4611      	mov	r1, r2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f001 fc7e 	bl	8002794 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e98:	f001 fc54 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 8000e9c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea0:	4a13      	ldr	r2, [pc, #76]	; (8000ef0 <HAL_InitTick+0xa4>)
 8000ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea6:	0c9b      	lsrs	r3, r3, #18
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <HAL_InitTick+0xa8>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <HAL_InitTick+0xac>)
 8000eb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <HAL_InitTick+0xa8>)
 8000eb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eb8:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000eba:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <HAL_InitTick+0xa8>)
 8000ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ebe:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <HAL_InitTick+0xa8>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <HAL_InitTick+0xa8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000ecc:	4809      	ldr	r0, [pc, #36]	; (8000ef4 <HAL_InitTick+0xa8>)
 8000ece:	f001 fd1c 	bl	800290a <HAL_TIM_Base_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d104      	bne.n	8000ee2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000ed8:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <HAL_InitTick+0xa8>)
 8000eda:	f001 fd6f 	bl	80029bc <HAL_TIM_Base_Start_IT>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	e000      	b.n	8000ee4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3730      	adds	r7, #48	; 0x30
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	431bde83 	.word	0x431bde83
 8000ef4:	200003a4 	.word	0x200003a4
 8000ef8:	40001400 	.word	0x40001400

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <NMI_Handler+0x4>

08000f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <MemManage_Handler+0x4>

08000f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f000 fb75 	bl	800161c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f000 fb6e 	bl	800161c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000f48:	2004      	movs	r0, #4
 8000f4a:	f000 fb67 	bl	800161c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000f56:	2008      	movs	r0, #8
 8000f58:	f000 fb60 	bl	800161c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000f64:	2010      	movs	r0, #16
 8000f66:	f000 fb59 	bl	800161c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <TIM7_IRQHandler+0x10>)
 8000f76:	f001 fd91 	bl	8002a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200003a4 	.word	0x200003a4

08000f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f8c:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <_sbrk+0x5c>)
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <_sbrk+0x60>)
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <_sbrk+0x64>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	; (8000fec <_sbrk+0x68>)
 8000fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d207      	bcs.n	8000fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb4:	f004 fe02 	bl	8005bbc <__errno>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	220c      	movs	r2, #12
 8000fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fc2:	e009      	b.n	8000fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <_sbrk+0x64>)
 8000fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20020000 	.word	0x20020000
 8000fe4:	00000400 	.word	0x00000400
 8000fe8:	200003ec 	.word	0x200003ec
 8000fec:	20013280 	.word	0x20013280

08000ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <SystemInit+0x20>)
 8000ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffa:	4a05      	ldr	r2, [pc, #20]	; (8001010 <SystemInit+0x20>)
 8000ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800104c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001018:	480d      	ldr	r0, [pc, #52]	; (8001050 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800101a:	490e      	ldr	r1, [pc, #56]	; (8001054 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800101c:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a0b      	ldr	r2, [pc, #44]	; (800105c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001030:	4c0b      	ldr	r4, [pc, #44]	; (8001060 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800103e:	f7ff ffd7 	bl	8000ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001042:	f004 fdc1 	bl	8005bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001046:	f7ff fbb9 	bl	80007bc <main>
  bx  lr    
 800104a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800104c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001058:	080067a0 	.word	0x080067a0
  ldr r2, =_sbss
 800105c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001060:	20013280 	.word	0x20013280

08001064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC_IRQHandler>
	...

08001068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800106c:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0d      	ldr	r2, [pc, #52]	; (80010a8 <HAL_Init+0x40>)
 8001072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001078:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <HAL_Init+0x40>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <HAL_Init+0x40>)
 800107e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <HAL_Init+0x40>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <HAL_Init+0x40>)
 800108a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001090:	2003      	movs	r0, #3
 8001092:	f000 f8d8 	bl	8001246 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001096:	200f      	movs	r0, #15
 8001098:	f7ff fed8 	bl	8000e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800109c:	f7ff fdd6 	bl	8000c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023c00 	.word	0x40023c00

080010ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_IncTick+0x20>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x24>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <HAL_IncTick+0x24>)
 80010be:	6013      	str	r3, [r2, #0]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000024 	.word	0x20000024
 80010d0:	200003f0 	.word	0x200003f0

080010d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return uwTick;
 80010d8:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <HAL_GetTick+0x14>)
 80010da:	681b      	ldr	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	200003f0 	.word	0x200003f0

080010ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001108:	4013      	ands	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800111c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111e:	4a04      	ldr	r2, [pc, #16]	; (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	60d3      	str	r3, [r2, #12]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <__NVIC_GetPriorityGrouping+0x18>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	f003 0307 	and.w	r3, r3, #7
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	db0b      	blt.n	800117a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	f003 021f 	and.w	r2, r3, #31
 8001168:	4907      	ldr	r1, [pc, #28]	; (8001188 <__NVIC_EnableIRQ+0x38>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	095b      	lsrs	r3, r3, #5
 8001170:	2001      	movs	r0, #1
 8001172:	fa00 f202 	lsl.w	r2, r0, r2
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000e100 	.word	0xe000e100

0800118c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db0a      	blt.n	80011b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	490c      	ldr	r1, [pc, #48]	; (80011d8 <__NVIC_SetPriority+0x4c>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	440b      	add	r3, r1
 80011b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b4:	e00a      	b.n	80011cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4908      	ldr	r1, [pc, #32]	; (80011dc <__NVIC_SetPriority+0x50>)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	3b04      	subs	r3, #4
 80011c4:	0112      	lsls	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	440b      	add	r3, r1
 80011ca:	761a      	strb	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	; 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f1c3 0307 	rsb	r3, r3, #7
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	bf28      	it	cs
 80011fe:	2304      	movcs	r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3304      	adds	r3, #4
 8001206:	2b06      	cmp	r3, #6
 8001208:	d902      	bls.n	8001210 <NVIC_EncodePriority+0x30>
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3b03      	subs	r3, #3
 800120e:	e000      	b.n	8001212 <NVIC_EncodePriority+0x32>
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001228:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43d9      	mvns	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	4313      	orrs	r3, r2
         );
}
 800123a:	4618      	mov	r0, r3
 800123c:	3724      	adds	r7, #36	; 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ff4c 	bl	80010ec <__NVIC_SetPriorityGrouping>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800126e:	f7ff ff61 	bl	8001134 <__NVIC_GetPriorityGrouping>
 8001272:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	68b9      	ldr	r1, [r7, #8]
 8001278:	6978      	ldr	r0, [r7, #20]
 800127a:	f7ff ffb1 	bl	80011e0 <NVIC_EncodePriority>
 800127e:	4602      	mov	r2, r0
 8001280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001284:	4611      	mov	r1, r2
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff80 	bl	800118c <__NVIC_SetPriority>
}
 800128c:	bf00      	nop
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ff54 	bl	8001150 <__NVIC_EnableIRQ>
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b089      	sub	sp, #36	; 0x24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
 80012ca:	e16b      	b.n	80015a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012cc:	2201      	movs	r2, #1
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	f040 815a 	bne.w	800159e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d005      	beq.n	8001302 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d130      	bne.n	8001364 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	2203      	movs	r2, #3
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001338:	2201      	movs	r2, #1
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	091b      	lsrs	r3, r3, #4
 800134e:	f003 0201 	and.w	r2, r3, #1
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	2b03      	cmp	r3, #3
 800136e:	d017      	beq.n	80013a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	2203      	movs	r2, #3
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d123      	bne.n	80013f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	08da      	lsrs	r2, r3, #3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3208      	adds	r2, #8
 80013b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	220f      	movs	r2, #15
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	691a      	ldr	r2, [r3, #16]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	08da      	lsrs	r2, r3, #3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3208      	adds	r2, #8
 80013ee:	69b9      	ldr	r1, [r7, #24]
 80013f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	2203      	movs	r2, #3
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0203 	and.w	r2, r3, #3
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 80b4 	beq.w	800159e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b60      	ldr	r3, [pc, #384]	; (80015bc <HAL_GPIO_Init+0x30c>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	4a5f      	ldr	r2, [pc, #380]	; (80015bc <HAL_GPIO_Init+0x30c>)
 8001440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001444:	6453      	str	r3, [r2, #68]	; 0x44
 8001446:	4b5d      	ldr	r3, [pc, #372]	; (80015bc <HAL_GPIO_Init+0x30c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001452:	4a5b      	ldr	r2, [pc, #364]	; (80015c0 <HAL_GPIO_Init+0x310>)
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	089b      	lsrs	r3, r3, #2
 8001458:	3302      	adds	r3, #2
 800145a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f003 0303 	and.w	r3, r3, #3
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	220f      	movs	r2, #15
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a52      	ldr	r2, [pc, #328]	; (80015c4 <HAL_GPIO_Init+0x314>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d02b      	beq.n	80014d6 <HAL_GPIO_Init+0x226>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a51      	ldr	r2, [pc, #324]	; (80015c8 <HAL_GPIO_Init+0x318>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d025      	beq.n	80014d2 <HAL_GPIO_Init+0x222>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a50      	ldr	r2, [pc, #320]	; (80015cc <HAL_GPIO_Init+0x31c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d01f      	beq.n	80014ce <HAL_GPIO_Init+0x21e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4f      	ldr	r2, [pc, #316]	; (80015d0 <HAL_GPIO_Init+0x320>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d019      	beq.n	80014ca <HAL_GPIO_Init+0x21a>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4e      	ldr	r2, [pc, #312]	; (80015d4 <HAL_GPIO_Init+0x324>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d013      	beq.n	80014c6 <HAL_GPIO_Init+0x216>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4d      	ldr	r2, [pc, #308]	; (80015d8 <HAL_GPIO_Init+0x328>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d00d      	beq.n	80014c2 <HAL_GPIO_Init+0x212>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4c      	ldr	r2, [pc, #304]	; (80015dc <HAL_GPIO_Init+0x32c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d007      	beq.n	80014be <HAL_GPIO_Init+0x20e>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4b      	ldr	r2, [pc, #300]	; (80015e0 <HAL_GPIO_Init+0x330>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d101      	bne.n	80014ba <HAL_GPIO_Init+0x20a>
 80014b6:	2307      	movs	r3, #7
 80014b8:	e00e      	b.n	80014d8 <HAL_GPIO_Init+0x228>
 80014ba:	2308      	movs	r3, #8
 80014bc:	e00c      	b.n	80014d8 <HAL_GPIO_Init+0x228>
 80014be:	2306      	movs	r3, #6
 80014c0:	e00a      	b.n	80014d8 <HAL_GPIO_Init+0x228>
 80014c2:	2305      	movs	r3, #5
 80014c4:	e008      	b.n	80014d8 <HAL_GPIO_Init+0x228>
 80014c6:	2304      	movs	r3, #4
 80014c8:	e006      	b.n	80014d8 <HAL_GPIO_Init+0x228>
 80014ca:	2303      	movs	r3, #3
 80014cc:	e004      	b.n	80014d8 <HAL_GPIO_Init+0x228>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e002      	b.n	80014d8 <HAL_GPIO_Init+0x228>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <HAL_GPIO_Init+0x228>
 80014d6:	2300      	movs	r3, #0
 80014d8:	69fa      	ldr	r2, [r7, #28]
 80014da:	f002 0203 	and.w	r2, r2, #3
 80014de:	0092      	lsls	r2, r2, #2
 80014e0:	4093      	lsls	r3, r2
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014e8:	4935      	ldr	r1, [pc, #212]	; (80015c0 <HAL_GPIO_Init+0x310>)
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	089b      	lsrs	r3, r3, #2
 80014ee:	3302      	adds	r3, #2
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014f6:	4b3b      	ldr	r3, [pc, #236]	; (80015e4 <HAL_GPIO_Init+0x334>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	43db      	mvns	r3, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800151a:	4a32      	ldr	r2, [pc, #200]	; (80015e4 <HAL_GPIO_Init+0x334>)
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001520:	4b30      	ldr	r3, [pc, #192]	; (80015e4 <HAL_GPIO_Init+0x334>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001544:	4a27      	ldr	r2, [pc, #156]	; (80015e4 <HAL_GPIO_Init+0x334>)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800154a:	4b26      	ldr	r3, [pc, #152]	; (80015e4 <HAL_GPIO_Init+0x334>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800156e:	4a1d      	ldr	r2, [pc, #116]	; (80015e4 <HAL_GPIO_Init+0x334>)
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001574:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <HAL_GPIO_Init+0x334>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001598:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <HAL_GPIO_Init+0x334>)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3301      	adds	r3, #1
 80015a2:	61fb      	str	r3, [r7, #28]
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	2b0f      	cmp	r3, #15
 80015a8:	f67f ae90 	bls.w	80012cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	3724      	adds	r7, #36	; 0x24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40013800 	.word	0x40013800
 80015c4:	40020000 	.word	0x40020000
 80015c8:	40020400 	.word	0x40020400
 80015cc:	40020800 	.word	0x40020800
 80015d0:	40020c00 	.word	0x40020c00
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40021400 	.word	0x40021400
 80015dc:	40021800 	.word	0x40021800
 80015e0:	40021c00 	.word	0x40021c00
 80015e4:	40013c00 	.word	0x40013c00

080015e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	807b      	strh	r3, [r7, #2]
 80015f4:	4613      	mov	r3, r2
 80015f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015f8:	787b      	ldrb	r3, [r7, #1]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015fe:	887a      	ldrh	r2, [r7, #2]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001604:	e003      	b.n	800160e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001606:	887b      	ldrh	r3, [r7, #2]
 8001608:	041a      	lsls	r2, r3, #16
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	619a      	str	r2, [r3, #24]
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001626:	4b08      	ldr	r3, [pc, #32]	; (8001648 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001628:	695a      	ldr	r2, [r3, #20]
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	4013      	ands	r3, r2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d006      	beq.n	8001640 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001632:	4a05      	ldr	r2, [pc, #20]	; (8001648 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fa48 	bl	8000ad0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40013c00 	.word	0x40013c00

0800164c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e12b      	b.n	80018b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d106      	bne.n	8001678 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff fb12 	bl	8000c9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2224      	movs	r2, #36	; 0x24
 800167c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0201 	bic.w	r2, r2, #1
 800168e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800169e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016b0:	f001 f848 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 80016b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	4a81      	ldr	r2, [pc, #516]	; (80018c0 <HAL_I2C_Init+0x274>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d807      	bhi.n	80016d0 <HAL_I2C_Init+0x84>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4a80      	ldr	r2, [pc, #512]	; (80018c4 <HAL_I2C_Init+0x278>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	bf94      	ite	ls
 80016c8:	2301      	movls	r3, #1
 80016ca:	2300      	movhi	r3, #0
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	e006      	b.n	80016de <HAL_I2C_Init+0x92>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4a7d      	ldr	r2, [pc, #500]	; (80018c8 <HAL_I2C_Init+0x27c>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	bf94      	ite	ls
 80016d8:	2301      	movls	r3, #1
 80016da:	2300      	movhi	r3, #0
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e0e7      	b.n	80018b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4a78      	ldr	r2, [pc, #480]	; (80018cc <HAL_I2C_Init+0x280>)
 80016ea:	fba2 2303 	umull	r2, r3, r2, r3
 80016ee:	0c9b      	lsrs	r3, r3, #18
 80016f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68ba      	ldr	r2, [r7, #8]
 8001702:	430a      	orrs	r2, r1
 8001704:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	4a6a      	ldr	r2, [pc, #424]	; (80018c0 <HAL_I2C_Init+0x274>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d802      	bhi.n	8001720 <HAL_I2C_Init+0xd4>
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	3301      	adds	r3, #1
 800171e:	e009      	b.n	8001734 <HAL_I2C_Init+0xe8>
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001726:	fb02 f303 	mul.w	r3, r2, r3
 800172a:	4a69      	ldr	r2, [pc, #420]	; (80018d0 <HAL_I2C_Init+0x284>)
 800172c:	fba2 2303 	umull	r2, r3, r2, r3
 8001730:	099b      	lsrs	r3, r3, #6
 8001732:	3301      	adds	r3, #1
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	430b      	orrs	r3, r1
 800173a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001746:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	495c      	ldr	r1, [pc, #368]	; (80018c0 <HAL_I2C_Init+0x274>)
 8001750:	428b      	cmp	r3, r1
 8001752:	d819      	bhi.n	8001788 <HAL_I2C_Init+0x13c>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1e59      	subs	r1, r3, #1
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001762:	1c59      	adds	r1, r3, #1
 8001764:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001768:	400b      	ands	r3, r1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00a      	beq.n	8001784 <HAL_I2C_Init+0x138>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	1e59      	subs	r1, r3, #1
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	fbb1 f3f3 	udiv	r3, r1, r3
 800177c:	3301      	adds	r3, #1
 800177e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001782:	e051      	b.n	8001828 <HAL_I2C_Init+0x1dc>
 8001784:	2304      	movs	r3, #4
 8001786:	e04f      	b.n	8001828 <HAL_I2C_Init+0x1dc>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d111      	bne.n	80017b4 <HAL_I2C_Init+0x168>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	1e58      	subs	r0, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6859      	ldr	r1, [r3, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	440b      	add	r3, r1
 800179e:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a2:	3301      	adds	r3, #1
 80017a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	bf0c      	ite	eq
 80017ac:	2301      	moveq	r3, #1
 80017ae:	2300      	movne	r3, #0
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	e012      	b.n	80017da <HAL_I2C_Init+0x18e>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1e58      	subs	r0, r3, #1
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6859      	ldr	r1, [r3, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	0099      	lsls	r1, r3, #2
 80017c4:	440b      	add	r3, r1
 80017c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ca:	3301      	adds	r3, #1
 80017cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	bf0c      	ite	eq
 80017d4:	2301      	moveq	r3, #1
 80017d6:	2300      	movne	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_I2C_Init+0x196>
 80017de:	2301      	movs	r3, #1
 80017e0:	e022      	b.n	8001828 <HAL_I2C_Init+0x1dc>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10e      	bne.n	8001808 <HAL_I2C_Init+0x1bc>
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	1e58      	subs	r0, r3, #1
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6859      	ldr	r1, [r3, #4]
 80017f2:	460b      	mov	r3, r1
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	440b      	add	r3, r1
 80017f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80017fc:	3301      	adds	r3, #1
 80017fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001806:	e00f      	b.n	8001828 <HAL_I2C_Init+0x1dc>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	1e58      	subs	r0, r3, #1
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6859      	ldr	r1, [r3, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	440b      	add	r3, r1
 8001816:	0099      	lsls	r1, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	fbb0 f3f3 	udiv	r3, r0, r3
 800181e:	3301      	adds	r3, #1
 8001820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001824:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	6809      	ldr	r1, [r1, #0]
 800182c:	4313      	orrs	r3, r2
 800182e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69da      	ldr	r2, [r3, #28]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001856:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6911      	ldr	r1, [r2, #16]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	68d2      	ldr	r2, [r2, #12]
 8001862:	4311      	orrs	r1, r2
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	430b      	orrs	r3, r1
 800186a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	695a      	ldr	r2, [r3, #20]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 0201 	orr.w	r2, r2, #1
 8001896:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2220      	movs	r2, #32
 80018a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	000186a0 	.word	0x000186a0
 80018c4:	001e847f 	.word	0x001e847f
 80018c8:	003d08ff 	.word	0x003d08ff
 80018cc:	431bde83 	.word	0x431bde83
 80018d0:	10624dd3 	.word	0x10624dd3

080018d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af02      	add	r7, sp, #8
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	607a      	str	r2, [r7, #4]
 80018de:	461a      	mov	r2, r3
 80018e0:	460b      	mov	r3, r1
 80018e2:	817b      	strh	r3, [r7, #10]
 80018e4:	4613      	mov	r3, r2
 80018e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018e8:	f7ff fbf4 	bl	80010d4 <HAL_GetTick>
 80018ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b20      	cmp	r3, #32
 80018f8:	f040 80e0 	bne.w	8001abc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2319      	movs	r3, #25
 8001902:	2201      	movs	r2, #1
 8001904:	4970      	ldr	r1, [pc, #448]	; (8001ac8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f000 f964 	bl	8001bd4 <I2C_WaitOnFlagUntilTimeout>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001912:	2302      	movs	r3, #2
 8001914:	e0d3      	b.n	8001abe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800191c:	2b01      	cmp	r3, #1
 800191e:	d101      	bne.n	8001924 <HAL_I2C_Master_Transmit+0x50>
 8001920:	2302      	movs	r3, #2
 8001922:	e0cc      	b.n	8001abe <HAL_I2C_Master_Transmit+0x1ea>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b01      	cmp	r3, #1
 8001938:	d007      	beq.n	800194a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f042 0201 	orr.w	r2, r2, #1
 8001948:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001958:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2221      	movs	r2, #33	; 0x21
 800195e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2210      	movs	r2, #16
 8001966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2200      	movs	r2, #0
 800196e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	893a      	ldrh	r2, [r7, #8]
 800197a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001980:	b29a      	uxth	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4a50      	ldr	r2, [pc, #320]	; (8001acc <HAL_I2C_Master_Transmit+0x1f8>)
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800198c:	8979      	ldrh	r1, [r7, #10]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	6a3a      	ldr	r2, [r7, #32]
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f000 f89c 	bl	8001ad0 <I2C_MasterRequestWrite>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e08d      	b.n	8001abe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80019b8:	e066      	b.n	8001a88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	6a39      	ldr	r1, [r7, #32]
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f000 f9de 	bl	8001d80 <I2C_WaitOnTXEFlagUntilTimeout>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00d      	beq.n	80019e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d107      	bne.n	80019e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e06b      	b.n	8001abe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	781a      	ldrb	r2, [r3, #0]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	1c5a      	adds	r2, r3, #1
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	3b01      	subs	r3, #1
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d11b      	bne.n	8001a5c <HAL_I2C_Master_Transmit+0x188>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d017      	beq.n	8001a5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a30:	781a      	ldrb	r2, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a54:	3b01      	subs	r3, #1
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	6a39      	ldr	r1, [r7, #32]
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f000 f9ce 	bl	8001e02 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d00d      	beq.n	8001a88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d107      	bne.n	8001a84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e01a      	b.n	8001abe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d194      	bne.n	80019ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	e000      	b.n	8001abe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001abc:	2302      	movs	r3, #2
  }
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	00100002 	.word	0x00100002
 8001acc:	ffff0000 	.word	0xffff0000

08001ad0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af02      	add	r7, sp, #8
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	607a      	str	r2, [r7, #4]
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	460b      	mov	r3, r1
 8001ade:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d006      	beq.n	8001afa <I2C_MasterRequestWrite+0x2a>
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d003      	beq.n	8001afa <I2C_MasterRequestWrite+0x2a>
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001af8:	d108      	bne.n	8001b0c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	e00b      	b.n	8001b24 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	2b12      	cmp	r3, #18
 8001b12:	d107      	bne.n	8001b24 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f000 f84f 	bl	8001bd4 <I2C_WaitOnFlagUntilTimeout>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00d      	beq.n	8001b58 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b4a:	d103      	bne.n	8001b54 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e035      	b.n	8001bc4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b60:	d108      	bne.n	8001b74 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b62:	897b      	ldrh	r3, [r7, #10]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	461a      	mov	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b70:	611a      	str	r2, [r3, #16]
 8001b72:	e01b      	b.n	8001bac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b74:	897b      	ldrh	r3, [r7, #10]
 8001b76:	11db      	asrs	r3, r3, #7
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	f003 0306 	and.w	r3, r3, #6
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	f063 030f 	orn	r3, r3, #15
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	490e      	ldr	r1, [pc, #56]	; (8001bcc <I2C_MasterRequestWrite+0xfc>)
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f000 f875 	bl	8001c82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e010      	b.n	8001bc4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ba2:	897b      	ldrh	r3, [r7, #10]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	4907      	ldr	r1, [pc, #28]	; (8001bd0 <I2C_MasterRequestWrite+0x100>)
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 f865 	bl	8001c82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	00010008 	.word	0x00010008
 8001bd0:	00010002 	.word	0x00010002

08001bd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	4613      	mov	r3, r2
 8001be2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001be4:	e025      	b.n	8001c32 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bec:	d021      	beq.n	8001c32 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bee:	f7ff fa71 	bl	80010d4 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d302      	bcc.n	8001c04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d116      	bne.n	8001c32 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f043 0220 	orr.w	r2, r3, #32
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e023      	b.n	8001c7a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	0c1b      	lsrs	r3, r3, #16
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d10d      	bne.n	8001c58 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	43da      	mvns	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	4013      	ands	r3, r2
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	bf0c      	ite	eq
 8001c4e:	2301      	moveq	r3, #1
 8001c50:	2300      	movne	r3, #0
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	e00c      	b.n	8001c72 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	43da      	mvns	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	4013      	ands	r3, r2
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	bf0c      	ite	eq
 8001c6a:	2301      	moveq	r3, #1
 8001c6c:	2300      	movne	r3, #0
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	461a      	mov	r2, r3
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d0b6      	beq.n	8001be6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b084      	sub	sp, #16
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c90:	e051      	b.n	8001d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ca0:	d123      	bne.n	8001cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cb0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001cba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f043 0204 	orr.w	r2, r3, #4
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e046      	b.n	8001d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cf0:	d021      	beq.n	8001d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf2:	f7ff f9ef 	bl	80010d4 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d302      	bcc.n	8001d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d116      	bne.n	8001d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2220      	movs	r2, #32
 8001d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f043 0220 	orr.w	r2, r3, #32
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e020      	b.n	8001d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	0c1b      	lsrs	r3, r3, #16
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d10c      	bne.n	8001d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	43da      	mvns	r2, r3
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	bf14      	ite	ne
 8001d52:	2301      	movne	r3, #1
 8001d54:	2300      	moveq	r3, #0
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	e00b      	b.n	8001d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	43da      	mvns	r2, r3
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	4013      	ands	r3, r2
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	bf14      	ite	ne
 8001d6c:	2301      	movne	r3, #1
 8001d6e:	2300      	moveq	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d18d      	bne.n	8001c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d8c:	e02d      	b.n	8001dea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f000 f878 	bl	8001e84 <I2C_IsAcknowledgeFailed>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e02d      	b.n	8001dfa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001da4:	d021      	beq.n	8001dea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001da6:	f7ff f995 	bl	80010d4 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d302      	bcc.n	8001dbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d116      	bne.n	8001dea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f043 0220 	orr.w	r2, r3, #32
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e007      	b.n	8001dfa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df4:	2b80      	cmp	r3, #128	; 0x80
 8001df6:	d1ca      	bne.n	8001d8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b084      	sub	sp, #16
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e0e:	e02d      	b.n	8001e6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f000 f837 	bl	8001e84 <I2C_IsAcknowledgeFailed>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e02d      	b.n	8001e7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e26:	d021      	beq.n	8001e6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e28:	f7ff f954 	bl	80010d4 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d302      	bcc.n	8001e3e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d116      	bne.n	8001e6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2220      	movs	r2, #32
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	f043 0220 	orr.w	r2, r3, #32
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e007      	b.n	8001e7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d1ca      	bne.n	8001e10 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e9a:	d11b      	bne.n	8001ed4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ea4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	f043 0204 	orr.w	r2, r3, #4
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e000      	b.n	8001ed6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e267      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d075      	beq.n	8001fee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f02:	4b88      	ldr	r3, [pc, #544]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d00c      	beq.n	8001f28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f0e:	4b85      	ldr	r3, [pc, #532]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d112      	bne.n	8001f40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f1a:	4b82      	ldr	r3, [pc, #520]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f26:	d10b      	bne.n	8001f40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f28:	4b7e      	ldr	r3, [pc, #504]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d05b      	beq.n	8001fec <HAL_RCC_OscConfig+0x108>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d157      	bne.n	8001fec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e242      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f48:	d106      	bne.n	8001f58 <HAL_RCC_OscConfig+0x74>
 8001f4a:	4b76      	ldr	r3, [pc, #472]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a75      	ldr	r2, [pc, #468]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	e01d      	b.n	8001f94 <HAL_RCC_OscConfig+0xb0>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f60:	d10c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x98>
 8001f62:	4b70      	ldr	r3, [pc, #448]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a6f      	ldr	r2, [pc, #444]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	4b6d      	ldr	r3, [pc, #436]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a6c      	ldr	r2, [pc, #432]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e00b      	b.n	8001f94 <HAL_RCC_OscConfig+0xb0>
 8001f7c:	4b69      	ldr	r3, [pc, #420]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a68      	ldr	r2, [pc, #416]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	4b66      	ldr	r3, [pc, #408]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a65      	ldr	r2, [pc, #404]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d013      	beq.n	8001fc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9c:	f7ff f89a 	bl	80010d4 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa4:	f7ff f896 	bl	80010d4 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b64      	cmp	r3, #100	; 0x64
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e207      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb6:	4b5b      	ldr	r3, [pc, #364]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0f0      	beq.n	8001fa4 <HAL_RCC_OscConfig+0xc0>
 8001fc2:	e014      	b.n	8001fee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc4:	f7ff f886 	bl	80010d4 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fcc:	f7ff f882 	bl	80010d4 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b64      	cmp	r3, #100	; 0x64
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e1f3      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fde:	4b51      	ldr	r3, [pc, #324]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0xe8>
 8001fea:	e000      	b.n	8001fee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d063      	beq.n	80020c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ffa:	4b4a      	ldr	r3, [pc, #296]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00b      	beq.n	800201e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002006:	4b47      	ldr	r3, [pc, #284]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800200e:	2b08      	cmp	r3, #8
 8002010:	d11c      	bne.n	800204c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002012:	4b44      	ldr	r3, [pc, #272]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d116      	bne.n	800204c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201e:	4b41      	ldr	r3, [pc, #260]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d005      	beq.n	8002036 <HAL_RCC_OscConfig+0x152>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d001      	beq.n	8002036 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e1c7      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002036:	4b3b      	ldr	r3, [pc, #236]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4937      	ldr	r1, [pc, #220]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204a:	e03a      	b.n	80020c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d020      	beq.n	8002096 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002054:	4b34      	ldr	r3, [pc, #208]	; (8002128 <HAL_RCC_OscConfig+0x244>)
 8002056:	2201      	movs	r2, #1
 8002058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205a:	f7ff f83b 	bl	80010d4 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002062:	f7ff f837 	bl	80010d4 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e1a8      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002074:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0f0      	beq.n	8002062 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002080:	4b28      	ldr	r3, [pc, #160]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4925      	ldr	r1, [pc, #148]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8002090:	4313      	orrs	r3, r2
 8002092:	600b      	str	r3, [r1, #0]
 8002094:	e015      	b.n	80020c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002096:	4b24      	ldr	r3, [pc, #144]	; (8002128 <HAL_RCC_OscConfig+0x244>)
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7ff f81a 	bl	80010d4 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020a4:	f7ff f816 	bl	80010d4 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e187      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b6:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d036      	beq.n	800213c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d016      	beq.n	8002104 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020d6:	4b15      	ldr	r3, [pc, #84]	; (800212c <HAL_RCC_OscConfig+0x248>)
 80020d8:	2201      	movs	r2, #1
 80020da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020dc:	f7fe fffa 	bl	80010d4 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020e4:	f7fe fff6 	bl	80010d4 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e167      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f6:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 80020f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x200>
 8002102:	e01b      	b.n	800213c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002104:	4b09      	ldr	r3, [pc, #36]	; (800212c <HAL_RCC_OscConfig+0x248>)
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210a:	f7fe ffe3 	bl	80010d4 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002110:	e00e      	b.n	8002130 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002112:	f7fe ffdf 	bl	80010d4 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d907      	bls.n	8002130 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e150      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
 8002124:	40023800 	.word	0x40023800
 8002128:	42470000 	.word	0x42470000
 800212c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002130:	4b88      	ldr	r3, [pc, #544]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 8002132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1ea      	bne.n	8002112 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 8097 	beq.w	8002278 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800214e:	4b81      	ldr	r3, [pc, #516]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10f      	bne.n	800217a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	4b7d      	ldr	r3, [pc, #500]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	4a7c      	ldr	r2, [pc, #496]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 8002164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002168:	6413      	str	r3, [r2, #64]	; 0x40
 800216a:	4b7a      	ldr	r3, [pc, #488]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002176:	2301      	movs	r3, #1
 8002178:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217a:	4b77      	ldr	r3, [pc, #476]	; (8002358 <HAL_RCC_OscConfig+0x474>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002182:	2b00      	cmp	r3, #0
 8002184:	d118      	bne.n	80021b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002186:	4b74      	ldr	r3, [pc, #464]	; (8002358 <HAL_RCC_OscConfig+0x474>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a73      	ldr	r2, [pc, #460]	; (8002358 <HAL_RCC_OscConfig+0x474>)
 800218c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002192:	f7fe ff9f 	bl	80010d4 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219a:	f7fe ff9b 	bl	80010d4 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e10c      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ac:	4b6a      	ldr	r3, [pc, #424]	; (8002358 <HAL_RCC_OscConfig+0x474>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d106      	bne.n	80021ce <HAL_RCC_OscConfig+0x2ea>
 80021c0:	4b64      	ldr	r3, [pc, #400]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 80021c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c4:	4a63      	ldr	r2, [pc, #396]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6713      	str	r3, [r2, #112]	; 0x70
 80021cc:	e01c      	b.n	8002208 <HAL_RCC_OscConfig+0x324>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b05      	cmp	r3, #5
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x30c>
 80021d6:	4b5f      	ldr	r3, [pc, #380]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021da:	4a5e      	ldr	r2, [pc, #376]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 80021dc:	f043 0304 	orr.w	r3, r3, #4
 80021e0:	6713      	str	r3, [r2, #112]	; 0x70
 80021e2:	4b5c      	ldr	r3, [pc, #368]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 80021e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e6:	4a5b      	ldr	r2, [pc, #364]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6713      	str	r3, [r2, #112]	; 0x70
 80021ee:	e00b      	b.n	8002208 <HAL_RCC_OscConfig+0x324>
 80021f0:	4b58      	ldr	r3, [pc, #352]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 80021f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f4:	4a57      	ldr	r2, [pc, #348]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 80021f6:	f023 0301 	bic.w	r3, r3, #1
 80021fa:	6713      	str	r3, [r2, #112]	; 0x70
 80021fc:	4b55      	ldr	r3, [pc, #340]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 80021fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002200:	4a54      	ldr	r2, [pc, #336]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 8002202:	f023 0304 	bic.w	r3, r3, #4
 8002206:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d015      	beq.n	800223c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002210:	f7fe ff60 	bl	80010d4 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002216:	e00a      	b.n	800222e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002218:	f7fe ff5c 	bl	80010d4 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f241 3288 	movw	r2, #5000	; 0x1388
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e0cb      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222e:	4b49      	ldr	r3, [pc, #292]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 8002230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0ee      	beq.n	8002218 <HAL_RCC_OscConfig+0x334>
 800223a:	e014      	b.n	8002266 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223c:	f7fe ff4a 	bl	80010d4 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002242:	e00a      	b.n	800225a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002244:	f7fe ff46 	bl	80010d4 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e0b5      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225a:	4b3e      	ldr	r3, [pc, #248]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 800225c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1ee      	bne.n	8002244 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002266:	7dfb      	ldrb	r3, [r7, #23]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d105      	bne.n	8002278 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800226c:	4b39      	ldr	r3, [pc, #228]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	4a38      	ldr	r2, [pc, #224]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 8002272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002276:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80a1 	beq.w	80023c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002282:	4b34      	ldr	r3, [pc, #208]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
 800228a:	2b08      	cmp	r3, #8
 800228c:	d05c      	beq.n	8002348 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d141      	bne.n	800231a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002296:	4b31      	ldr	r3, [pc, #196]	; (800235c <HAL_RCC_OscConfig+0x478>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229c:	f7fe ff1a 	bl	80010d4 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a4:	f7fe ff16 	bl	80010d4 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e087      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b6:	4b27      	ldr	r3, [pc, #156]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69da      	ldr	r2, [r3, #28]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	019b      	lsls	r3, r3, #6
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d8:	085b      	lsrs	r3, r3, #1
 80022da:	3b01      	subs	r3, #1
 80022dc:	041b      	lsls	r3, r3, #16
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e4:	061b      	lsls	r3, r3, #24
 80022e6:	491b      	ldr	r1, [pc, #108]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ec:	4b1b      	ldr	r3, [pc, #108]	; (800235c <HAL_RCC_OscConfig+0x478>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f2:	f7fe feef 	bl	80010d4 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022fa:	f7fe feeb 	bl	80010d4 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e05c      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230c:	4b11      	ldr	r3, [pc, #68]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x416>
 8002318:	e054      	b.n	80023c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231a:	4b10      	ldr	r3, [pc, #64]	; (800235c <HAL_RCC_OscConfig+0x478>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7fe fed8 	bl	80010d4 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002328:	f7fe fed4 	bl	80010d4 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e045      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x444>
 8002346:	e03d      	b.n	80023c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d107      	bne.n	8002360 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e038      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
 8002354:	40023800 	.word	0x40023800
 8002358:	40007000 	.word	0x40007000
 800235c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002360:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <HAL_RCC_OscConfig+0x4ec>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d028      	beq.n	80023c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002378:	429a      	cmp	r2, r3
 800237a:	d121      	bne.n	80023c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002386:	429a      	cmp	r2, r3
 8002388:	d11a      	bne.n	80023c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002390:	4013      	ands	r3, r2
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002396:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002398:	4293      	cmp	r3, r2
 800239a:	d111      	bne.n	80023c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a6:	085b      	lsrs	r3, r3, #1
 80023a8:	3b01      	subs	r3, #1
 80023aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d107      	bne.n	80023c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800

080023d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0cc      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023e8:	4b68      	ldr	r3, [pc, #416]	; (800258c <HAL_RCC_ClockConfig+0x1b8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d90c      	bls.n	8002410 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f6:	4b65      	ldr	r3, [pc, #404]	; (800258c <HAL_RCC_ClockConfig+0x1b8>)
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fe:	4b63      	ldr	r3, [pc, #396]	; (800258c <HAL_RCC_ClockConfig+0x1b8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0b8      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d020      	beq.n	800245e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d005      	beq.n	8002434 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002428:	4b59      	ldr	r3, [pc, #356]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	4a58      	ldr	r2, [pc, #352]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002432:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0308 	and.w	r3, r3, #8
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002440:	4b53      	ldr	r3, [pc, #332]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	4a52      	ldr	r2, [pc, #328]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800244a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800244c:	4b50      	ldr	r3, [pc, #320]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	494d      	ldr	r1, [pc, #308]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	4313      	orrs	r3, r2
 800245c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d044      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d107      	bne.n	8002482 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002472:	4b47      	ldr	r3, [pc, #284]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d119      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e07f      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d003      	beq.n	8002492 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800248e:	2b03      	cmp	r3, #3
 8002490:	d107      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002492:	4b3f      	ldr	r3, [pc, #252]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d109      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e06f      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a2:	4b3b      	ldr	r3, [pc, #236]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e067      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024b2:	4b37      	ldr	r3, [pc, #220]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f023 0203 	bic.w	r2, r3, #3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	4934      	ldr	r1, [pc, #208]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024c4:	f7fe fe06 	bl	80010d4 <HAL_GetTick>
 80024c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ca:	e00a      	b.n	80024e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024cc:	f7fe fe02 	bl	80010d4 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024da:	4293      	cmp	r3, r2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e04f      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e2:	4b2b      	ldr	r3, [pc, #172]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 020c 	and.w	r2, r3, #12
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d1eb      	bne.n	80024cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024f4:	4b25      	ldr	r3, [pc, #148]	; (800258c <HAL_RCC_ClockConfig+0x1b8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d20c      	bcs.n	800251c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002502:	4b22      	ldr	r3, [pc, #136]	; (800258c <HAL_RCC_ClockConfig+0x1b8>)
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800250a:	4b20      	ldr	r3, [pc, #128]	; (800258c <HAL_RCC_ClockConfig+0x1b8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d001      	beq.n	800251c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e032      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002528:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	4916      	ldr	r1, [pc, #88]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	4313      	orrs	r3, r2
 8002538:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d009      	beq.n	800255a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002546:	4b12      	ldr	r3, [pc, #72]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	490e      	ldr	r1, [pc, #56]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	4313      	orrs	r3, r2
 8002558:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800255a:	f000 f821 	bl	80025a0 <HAL_RCC_GetSysClockFreq>
 800255e:	4602      	mov	r2, r0
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	490a      	ldr	r1, [pc, #40]	; (8002594 <HAL_RCC_ClockConfig+0x1c0>)
 800256c:	5ccb      	ldrb	r3, [r1, r3]
 800256e:	fa22 f303 	lsr.w	r3, r2, r3
 8002572:	4a09      	ldr	r2, [pc, #36]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002576:	4b09      	ldr	r3, [pc, #36]	; (800259c <HAL_RCC_ClockConfig+0x1c8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe fc66 	bl	8000e4c <HAL_InitTick>

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40023c00 	.word	0x40023c00
 8002590:	40023800 	.word	0x40023800
 8002594:	08006744 	.word	0x08006744
 8002598:	2000001c 	.word	0x2000001c
 800259c:	20000020 	.word	0x20000020

080025a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025a4:	b090      	sub	sp, #64	; 0x40
 80025a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	637b      	str	r3, [r7, #52]	; 0x34
 80025ac:	2300      	movs	r3, #0
 80025ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025b0:	2300      	movs	r3, #0
 80025b2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025b8:	4b59      	ldr	r3, [pc, #356]	; (8002720 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 030c 	and.w	r3, r3, #12
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d00d      	beq.n	80025e0 <HAL_RCC_GetSysClockFreq+0x40>
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	f200 80a1 	bhi.w	800270c <HAL_RCC_GetSysClockFreq+0x16c>
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0x34>
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d003      	beq.n	80025da <HAL_RCC_GetSysClockFreq+0x3a>
 80025d2:	e09b      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025d4:	4b53      	ldr	r3, [pc, #332]	; (8002724 <HAL_RCC_GetSysClockFreq+0x184>)
 80025d6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80025d8:	e09b      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025da:	4b53      	ldr	r3, [pc, #332]	; (8002728 <HAL_RCC_GetSysClockFreq+0x188>)
 80025dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025de:	e098      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025e0:	4b4f      	ldr	r3, [pc, #316]	; (8002720 <HAL_RCC_GetSysClockFreq+0x180>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025e8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025ea:	4b4d      	ldr	r3, [pc, #308]	; (8002720 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d028      	beq.n	8002648 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025f6:	4b4a      	ldr	r3, [pc, #296]	; (8002720 <HAL_RCC_GetSysClockFreq+0x180>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	099b      	lsrs	r3, r3, #6
 80025fc:	2200      	movs	r2, #0
 80025fe:	623b      	str	r3, [r7, #32]
 8002600:	627a      	str	r2, [r7, #36]	; 0x24
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002608:	2100      	movs	r1, #0
 800260a:	4b47      	ldr	r3, [pc, #284]	; (8002728 <HAL_RCC_GetSysClockFreq+0x188>)
 800260c:	fb03 f201 	mul.w	r2, r3, r1
 8002610:	2300      	movs	r3, #0
 8002612:	fb00 f303 	mul.w	r3, r0, r3
 8002616:	4413      	add	r3, r2
 8002618:	4a43      	ldr	r2, [pc, #268]	; (8002728 <HAL_RCC_GetSysClockFreq+0x188>)
 800261a:	fba0 1202 	umull	r1, r2, r0, r2
 800261e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002620:	460a      	mov	r2, r1
 8002622:	62ba      	str	r2, [r7, #40]	; 0x28
 8002624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002626:	4413      	add	r3, r2
 8002628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800262a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800262c:	2200      	movs	r2, #0
 800262e:	61bb      	str	r3, [r7, #24]
 8002630:	61fa      	str	r2, [r7, #28]
 8002632:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002636:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800263a:	f7fd fe21 	bl	8000280 <__aeabi_uldivmod>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4613      	mov	r3, r2
 8002644:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002646:	e053      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002648:	4b35      	ldr	r3, [pc, #212]	; (8002720 <HAL_RCC_GetSysClockFreq+0x180>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	099b      	lsrs	r3, r3, #6
 800264e:	2200      	movs	r2, #0
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	617a      	str	r2, [r7, #20]
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800265a:	f04f 0b00 	mov.w	fp, #0
 800265e:	4652      	mov	r2, sl
 8002660:	465b      	mov	r3, fp
 8002662:	f04f 0000 	mov.w	r0, #0
 8002666:	f04f 0100 	mov.w	r1, #0
 800266a:	0159      	lsls	r1, r3, #5
 800266c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002670:	0150      	lsls	r0, r2, #5
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	ebb2 080a 	subs.w	r8, r2, sl
 800267a:	eb63 090b 	sbc.w	r9, r3, fp
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800268a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800268e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002692:	ebb2 0408 	subs.w	r4, r2, r8
 8002696:	eb63 0509 	sbc.w	r5, r3, r9
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	f04f 0300 	mov.w	r3, #0
 80026a2:	00eb      	lsls	r3, r5, #3
 80026a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026a8:	00e2      	lsls	r2, r4, #3
 80026aa:	4614      	mov	r4, r2
 80026ac:	461d      	mov	r5, r3
 80026ae:	eb14 030a 	adds.w	r3, r4, sl
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	eb45 030b 	adc.w	r3, r5, fp
 80026b8:	607b      	str	r3, [r7, #4]
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026c6:	4629      	mov	r1, r5
 80026c8:	028b      	lsls	r3, r1, #10
 80026ca:	4621      	mov	r1, r4
 80026cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026d0:	4621      	mov	r1, r4
 80026d2:	028a      	lsls	r2, r1, #10
 80026d4:	4610      	mov	r0, r2
 80026d6:	4619      	mov	r1, r3
 80026d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026da:	2200      	movs	r2, #0
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	60fa      	str	r2, [r7, #12]
 80026e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026e4:	f7fd fdcc 	bl	8000280 <__aeabi_uldivmod>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4613      	mov	r3, r2
 80026ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026f0:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <HAL_RCC_GetSysClockFreq+0x180>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	0c1b      	lsrs	r3, r3, #16
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	3301      	adds	r3, #1
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002700:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002704:	fbb2 f3f3 	udiv	r3, r2, r3
 8002708:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800270a:	e002      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <HAL_RCC_GetSysClockFreq+0x184>)
 800270e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002710:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002714:	4618      	mov	r0, r3
 8002716:	3740      	adds	r7, #64	; 0x40
 8002718:	46bd      	mov	sp, r7
 800271a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800271e:	bf00      	nop
 8002720:	40023800 	.word	0x40023800
 8002724:	00f42400 	.word	0x00f42400
 8002728:	017d7840 	.word	0x017d7840

0800272c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <HAL_RCC_GetHCLKFreq+0x14>)
 8002732:	681b      	ldr	r3, [r3, #0]
}
 8002734:	4618      	mov	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	2000001c 	.word	0x2000001c

08002744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002748:	f7ff fff0 	bl	800272c <HAL_RCC_GetHCLKFreq>
 800274c:	4602      	mov	r2, r0
 800274e:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	0a9b      	lsrs	r3, r3, #10
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	4903      	ldr	r1, [pc, #12]	; (8002768 <HAL_RCC_GetPCLK1Freq+0x24>)
 800275a:	5ccb      	ldrb	r3, [r1, r3]
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40023800 	.word	0x40023800
 8002768:	08006754 	.word	0x08006754

0800276c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002770:	f7ff ffdc 	bl	800272c <HAL_RCC_GetHCLKFreq>
 8002774:	4602      	mov	r2, r0
 8002776:	4b05      	ldr	r3, [pc, #20]	; (800278c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	0b5b      	lsrs	r3, r3, #13
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	4903      	ldr	r1, [pc, #12]	; (8002790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002782:	5ccb      	ldrb	r3, [r1, r3]
 8002784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002788:	4618      	mov	r0, r3
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40023800 	.word	0x40023800
 8002790:	08006754 	.word	0x08006754

08002794 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	220f      	movs	r2, #15
 80027a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027a4:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_RCC_GetClockConfig+0x5c>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 0203 	and.w	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027b0:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <HAL_RCC_GetClockConfig+0x5c>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <HAL_RCC_GetClockConfig+0x5c>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027c8:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <HAL_RCC_GetClockConfig+0x5c>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	08db      	lsrs	r3, r3, #3
 80027ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027d6:	4b07      	ldr	r3, [pc, #28]	; (80027f4 <HAL_RCC_GetClockConfig+0x60>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0207 	and.w	r2, r3, #7
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	601a      	str	r2, [r3, #0]
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40023c00 	.word	0x40023c00

080027f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e07b      	b.n	8002902 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	2b00      	cmp	r3, #0
 8002810:	d108      	bne.n	8002824 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800281a:	d009      	beq.n	8002830 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	61da      	str	r2, [r3, #28]
 8002822:	e005      	b.n	8002830 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7fe fa6e 	bl	8000d2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002866:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002878:	431a      	orrs	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	431a      	orrs	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b4:	ea42 0103 	orr.w	r1, r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	0c1b      	lsrs	r3, r3, #16
 80028ce:	f003 0104 	and.w	r1, r3, #4
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	f003 0210 	and.w	r2, r3, #16
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	69da      	ldr	r2, [r3, #28]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e041      	b.n	80029a0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d106      	bne.n	8002936 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f839 	bl	80029a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2202      	movs	r2, #2
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3304      	adds	r3, #4
 8002946:	4619      	mov	r1, r3
 8002948:	4610      	mov	r0, r2
 800294a:	f000 f9d7 	bl	8002cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d001      	beq.n	80029d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e04e      	b.n	8002a72 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2202      	movs	r2, #2
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a23      	ldr	r2, [pc, #140]	; (8002a80 <HAL_TIM_Base_Start_IT+0xc4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d022      	beq.n	8002a3c <HAL_TIM_Base_Start_IT+0x80>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fe:	d01d      	beq.n	8002a3c <HAL_TIM_Base_Start_IT+0x80>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a1f      	ldr	r2, [pc, #124]	; (8002a84 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d018      	beq.n	8002a3c <HAL_TIM_Base_Start_IT+0x80>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a1e      	ldr	r2, [pc, #120]	; (8002a88 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d013      	beq.n	8002a3c <HAL_TIM_Base_Start_IT+0x80>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1c      	ldr	r2, [pc, #112]	; (8002a8c <HAL_TIM_Base_Start_IT+0xd0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00e      	beq.n	8002a3c <HAL_TIM_Base_Start_IT+0x80>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1b      	ldr	r2, [pc, #108]	; (8002a90 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d009      	beq.n	8002a3c <HAL_TIM_Base_Start_IT+0x80>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a19      	ldr	r2, [pc, #100]	; (8002a94 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d004      	beq.n	8002a3c <HAL_TIM_Base_Start_IT+0x80>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a18      	ldr	r2, [pc, #96]	; (8002a98 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d111      	bne.n	8002a60 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2b06      	cmp	r3, #6
 8002a4c:	d010      	beq.n	8002a70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f042 0201 	orr.w	r2, r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5e:	e007      	b.n	8002a70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0201 	orr.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40010000 	.word	0x40010000
 8002a84:	40000400 	.word	0x40000400
 8002a88:	40000800 	.word	0x40000800
 8002a8c:	40000c00 	.word	0x40000c00
 8002a90:	40010400 	.word	0x40010400
 8002a94:	40014000 	.word	0x40014000
 8002a98:	40001800 	.word	0x40001800

08002a9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d122      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d11b      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0202 	mvn.w	r2, #2
 8002ac8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f8ee 	bl	8002cc0 <HAL_TIM_IC_CaptureCallback>
 8002ae4:	e005      	b.n	8002af2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f8e0 	bl	8002cac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f8f1 	bl	8002cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d122      	bne.n	8002b4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d11b      	bne.n	8002b4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0204 	mvn.w	r2, #4
 8002b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2202      	movs	r2, #2
 8002b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f8c4 	bl	8002cc0 <HAL_TIM_IC_CaptureCallback>
 8002b38:	e005      	b.n	8002b46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f8b6 	bl	8002cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f8c7 	bl	8002cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d122      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d11b      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0208 	mvn.w	r2, #8
 8002b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2204      	movs	r2, #4
 8002b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f89a 	bl	8002cc0 <HAL_TIM_IC_CaptureCallback>
 8002b8c:	e005      	b.n	8002b9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f88c 	bl	8002cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f89d 	bl	8002cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	2b10      	cmp	r3, #16
 8002bac:	d122      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b10      	cmp	r3, #16
 8002bba:	d11b      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0210 	mvn.w	r2, #16
 8002bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2208      	movs	r2, #8
 8002bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f870 	bl	8002cc0 <HAL_TIM_IC_CaptureCallback>
 8002be0:	e005      	b.n	8002bee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f862 	bl	8002cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f873 	bl	8002cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d10e      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d107      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0201 	mvn.w	r2, #1
 8002c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fd fffe 	bl	8000c1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2a:	2b80      	cmp	r3, #128	; 0x80
 8002c2c:	d10e      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c38:	2b80      	cmp	r3, #128	; 0x80
 8002c3a:	d107      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f902 	bl	8002e50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c56:	2b40      	cmp	r3, #64	; 0x40
 8002c58:	d10e      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c64:	2b40      	cmp	r3, #64	; 0x40
 8002c66:	d107      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f838 	bl	8002ce8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	d10e      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b20      	cmp	r3, #32
 8002c92:	d107      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0220 	mvn.w	r2, #32
 8002c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f8cc 	bl	8002e3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a40      	ldr	r2, [pc, #256]	; (8002e10 <TIM_Base_SetConfig+0x114>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d013      	beq.n	8002d3c <TIM_Base_SetConfig+0x40>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1a:	d00f      	beq.n	8002d3c <TIM_Base_SetConfig+0x40>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a3d      	ldr	r2, [pc, #244]	; (8002e14 <TIM_Base_SetConfig+0x118>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d00b      	beq.n	8002d3c <TIM_Base_SetConfig+0x40>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a3c      	ldr	r2, [pc, #240]	; (8002e18 <TIM_Base_SetConfig+0x11c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d007      	beq.n	8002d3c <TIM_Base_SetConfig+0x40>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a3b      	ldr	r2, [pc, #236]	; (8002e1c <TIM_Base_SetConfig+0x120>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d003      	beq.n	8002d3c <TIM_Base_SetConfig+0x40>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a3a      	ldr	r2, [pc, #232]	; (8002e20 <TIM_Base_SetConfig+0x124>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d108      	bne.n	8002d4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a2f      	ldr	r2, [pc, #188]	; (8002e10 <TIM_Base_SetConfig+0x114>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d02b      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5c:	d027      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a2c      	ldr	r2, [pc, #176]	; (8002e14 <TIM_Base_SetConfig+0x118>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d023      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a2b      	ldr	r2, [pc, #172]	; (8002e18 <TIM_Base_SetConfig+0x11c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d01f      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a2a      	ldr	r2, [pc, #168]	; (8002e1c <TIM_Base_SetConfig+0x120>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d01b      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a29      	ldr	r2, [pc, #164]	; (8002e20 <TIM_Base_SetConfig+0x124>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d017      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a28      	ldr	r2, [pc, #160]	; (8002e24 <TIM_Base_SetConfig+0x128>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d013      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a27      	ldr	r2, [pc, #156]	; (8002e28 <TIM_Base_SetConfig+0x12c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00f      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a26      	ldr	r2, [pc, #152]	; (8002e2c <TIM_Base_SetConfig+0x130>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00b      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a25      	ldr	r2, [pc, #148]	; (8002e30 <TIM_Base_SetConfig+0x134>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d007      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a24      	ldr	r2, [pc, #144]	; (8002e34 <TIM_Base_SetConfig+0x138>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d003      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a23      	ldr	r2, [pc, #140]	; (8002e38 <TIM_Base_SetConfig+0x13c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d108      	bne.n	8002dc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a0a      	ldr	r2, [pc, #40]	; (8002e10 <TIM_Base_SetConfig+0x114>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d003      	beq.n	8002df4 <TIM_Base_SetConfig+0xf8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a0c      	ldr	r2, [pc, #48]	; (8002e20 <TIM_Base_SetConfig+0x124>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d103      	bne.n	8002dfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	615a      	str	r2, [r3, #20]
}
 8002e02:	bf00      	nop
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40010000 	.word	0x40010000
 8002e14:	40000400 	.word	0x40000400
 8002e18:	40000800 	.word	0x40000800
 8002e1c:	40000c00 	.word	0x40000c00
 8002e20:	40010400 	.word	0x40010400
 8002e24:	40014000 	.word	0x40014000
 8002e28:	40014400 	.word	0x40014400
 8002e2c:	40014800 	.word	0x40014800
 8002e30:	40001800 	.word	0x40001800
 8002e34:	40001c00 	.word	0x40001c00
 8002e38:	40002000 	.word	0x40002000

08002e3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e03f      	b.n	8002ef6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fd ff96 	bl	8000dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2224      	movs	r2, #36	; 0x24
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ea6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f929 	bl	8003100 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	691a      	ldr	r2, [r3, #16]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ebc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695a      	ldr	r2, [r3, #20]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ecc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002edc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b08a      	sub	sp, #40	; 0x28
 8002f02:	af02      	add	r7, sp, #8
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	603b      	str	r3, [r7, #0]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b20      	cmp	r3, #32
 8002f1c:	d17c      	bne.n	8003018 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <HAL_UART_Transmit+0x2c>
 8002f24:	88fb      	ldrh	r3, [r7, #6]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e075      	b.n	800301a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_UART_Transmit+0x3e>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e06e      	b.n	800301a <HAL_UART_Transmit+0x11c>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2221      	movs	r2, #33	; 0x21
 8002f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f52:	f7fe f8bf 	bl	80010d4 <HAL_GetTick>
 8002f56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	88fa      	ldrh	r2, [r7, #6]
 8002f5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	88fa      	ldrh	r2, [r7, #6]
 8002f62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f6c:	d108      	bne.n	8002f80 <HAL_UART_Transmit+0x82>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d104      	bne.n	8002f80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	61bb      	str	r3, [r7, #24]
 8002f7e:	e003      	b.n	8002f88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f90:	e02a      	b.n	8002fe8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2180      	movs	r1, #128	; 0x80
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 f840 	bl	8003022 <UART_WaitOnFlagUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e036      	b.n	800301a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10b      	bne.n	8002fca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	3302      	adds	r3, #2
 8002fc6:	61bb      	str	r3, [r7, #24]
 8002fc8:	e007      	b.n	8002fda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	781a      	ldrb	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1cf      	bne.n	8002f92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2140      	movs	r1, #64	; 0x40
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 f810 	bl	8003022 <UART_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e006      	b.n	800301a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	e000      	b.n	800301a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003018:	2302      	movs	r3, #2
  }
}
 800301a:	4618      	mov	r0, r3
 800301c:	3720      	adds	r7, #32
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b090      	sub	sp, #64	; 0x40
 8003026:	af00      	add	r7, sp, #0
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	603b      	str	r3, [r7, #0]
 800302e:	4613      	mov	r3, r2
 8003030:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003032:	e050      	b.n	80030d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003036:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800303a:	d04c      	beq.n	80030d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800303c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800303e:	2b00      	cmp	r3, #0
 8003040:	d007      	beq.n	8003052 <UART_WaitOnFlagUntilTimeout+0x30>
 8003042:	f7fe f847 	bl	80010d4 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800304e:	429a      	cmp	r2, r3
 8003050:	d241      	bcs.n	80030d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	330c      	adds	r3, #12
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	e853 3f00 	ldrex	r3, [r3]
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	330c      	adds	r3, #12
 8003070:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003072:	637a      	str	r2, [r7, #52]	; 0x34
 8003074:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003076:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800307a:	e841 2300 	strex	r3, r2, [r1]
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1e5      	bne.n	8003052 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	3314      	adds	r3, #20
 800308c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	e853 3f00 	ldrex	r3, [r3]
 8003094:	613b      	str	r3, [r7, #16]
   return(result);
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f023 0301 	bic.w	r3, r3, #1
 800309c:	63bb      	str	r3, [r7, #56]	; 0x38
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	3314      	adds	r3, #20
 80030a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030a6:	623a      	str	r2, [r7, #32]
 80030a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030aa:	69f9      	ldr	r1, [r7, #28]
 80030ac:	6a3a      	ldr	r2, [r7, #32]
 80030ae:	e841 2300 	strex	r3, r2, [r1]
 80030b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1e5      	bne.n	8003086 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e00f      	b.n	80030f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4013      	ands	r3, r2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	bf0c      	ite	eq
 80030e6:	2301      	moveq	r3, #1
 80030e8:	2300      	movne	r3, #0
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d09f      	beq.n	8003034 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3740      	adds	r7, #64	; 0x40
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003104:	b0c0      	sub	sp, #256	; 0x100
 8003106:	af00      	add	r7, sp, #0
 8003108:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800310c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311c:	68d9      	ldr	r1, [r3, #12]
 800311e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	ea40 0301 	orr.w	r3, r0, r1
 8003128:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800312a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	431a      	orrs	r2, r3
 8003138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	431a      	orrs	r2, r3
 8003140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800314c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003158:	f021 010c 	bic.w	r1, r1, #12
 800315c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003166:	430b      	orrs	r3, r1
 8003168:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800316a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317a:	6999      	ldr	r1, [r3, #24]
 800317c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	ea40 0301 	orr.w	r3, r0, r1
 8003186:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4b8f      	ldr	r3, [pc, #572]	; (80033cc <UART_SetConfig+0x2cc>)
 8003190:	429a      	cmp	r2, r3
 8003192:	d005      	beq.n	80031a0 <UART_SetConfig+0xa0>
 8003194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	4b8d      	ldr	r3, [pc, #564]	; (80033d0 <UART_SetConfig+0x2d0>)
 800319c:	429a      	cmp	r2, r3
 800319e:	d104      	bne.n	80031aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031a0:	f7ff fae4 	bl	800276c <HAL_RCC_GetPCLK2Freq>
 80031a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80031a8:	e003      	b.n	80031b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031aa:	f7ff facb 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 80031ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031bc:	f040 810c 	bne.w	80033d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031c4:	2200      	movs	r2, #0
 80031c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80031d2:	4622      	mov	r2, r4
 80031d4:	462b      	mov	r3, r5
 80031d6:	1891      	adds	r1, r2, r2
 80031d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80031da:	415b      	adcs	r3, r3
 80031dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031e2:	4621      	mov	r1, r4
 80031e4:	eb12 0801 	adds.w	r8, r2, r1
 80031e8:	4629      	mov	r1, r5
 80031ea:	eb43 0901 	adc.w	r9, r3, r1
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	f04f 0300 	mov.w	r3, #0
 80031f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003202:	4690      	mov	r8, r2
 8003204:	4699      	mov	r9, r3
 8003206:	4623      	mov	r3, r4
 8003208:	eb18 0303 	adds.w	r3, r8, r3
 800320c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003210:	462b      	mov	r3, r5
 8003212:	eb49 0303 	adc.w	r3, r9, r3
 8003216:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800321a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003226:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800322a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800322e:	460b      	mov	r3, r1
 8003230:	18db      	adds	r3, r3, r3
 8003232:	653b      	str	r3, [r7, #80]	; 0x50
 8003234:	4613      	mov	r3, r2
 8003236:	eb42 0303 	adc.w	r3, r2, r3
 800323a:	657b      	str	r3, [r7, #84]	; 0x54
 800323c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003240:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003244:	f7fd f81c 	bl	8000280 <__aeabi_uldivmod>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4b61      	ldr	r3, [pc, #388]	; (80033d4 <UART_SetConfig+0x2d4>)
 800324e:	fba3 2302 	umull	r2, r3, r3, r2
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	011c      	lsls	r4, r3, #4
 8003256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800325a:	2200      	movs	r2, #0
 800325c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003260:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003264:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003268:	4642      	mov	r2, r8
 800326a:	464b      	mov	r3, r9
 800326c:	1891      	adds	r1, r2, r2
 800326e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003270:	415b      	adcs	r3, r3
 8003272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003274:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003278:	4641      	mov	r1, r8
 800327a:	eb12 0a01 	adds.w	sl, r2, r1
 800327e:	4649      	mov	r1, r9
 8003280:	eb43 0b01 	adc.w	fp, r3, r1
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003290:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003294:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003298:	4692      	mov	sl, r2
 800329a:	469b      	mov	fp, r3
 800329c:	4643      	mov	r3, r8
 800329e:	eb1a 0303 	adds.w	r3, sl, r3
 80032a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032a6:	464b      	mov	r3, r9
 80032a8:	eb4b 0303 	adc.w	r3, fp, r3
 80032ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80032c4:	460b      	mov	r3, r1
 80032c6:	18db      	adds	r3, r3, r3
 80032c8:	643b      	str	r3, [r7, #64]	; 0x40
 80032ca:	4613      	mov	r3, r2
 80032cc:	eb42 0303 	adc.w	r3, r2, r3
 80032d0:	647b      	str	r3, [r7, #68]	; 0x44
 80032d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80032da:	f7fc ffd1 	bl	8000280 <__aeabi_uldivmod>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4611      	mov	r1, r2
 80032e4:	4b3b      	ldr	r3, [pc, #236]	; (80033d4 <UART_SetConfig+0x2d4>)
 80032e6:	fba3 2301 	umull	r2, r3, r3, r1
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	2264      	movs	r2, #100	; 0x64
 80032ee:	fb02 f303 	mul.w	r3, r2, r3
 80032f2:	1acb      	subs	r3, r1, r3
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80032fa:	4b36      	ldr	r3, [pc, #216]	; (80033d4 <UART_SetConfig+0x2d4>)
 80032fc:	fba3 2302 	umull	r2, r3, r3, r2
 8003300:	095b      	lsrs	r3, r3, #5
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003308:	441c      	add	r4, r3
 800330a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800330e:	2200      	movs	r2, #0
 8003310:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003314:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003318:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800331c:	4642      	mov	r2, r8
 800331e:	464b      	mov	r3, r9
 8003320:	1891      	adds	r1, r2, r2
 8003322:	63b9      	str	r1, [r7, #56]	; 0x38
 8003324:	415b      	adcs	r3, r3
 8003326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003328:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800332c:	4641      	mov	r1, r8
 800332e:	1851      	adds	r1, r2, r1
 8003330:	6339      	str	r1, [r7, #48]	; 0x30
 8003332:	4649      	mov	r1, r9
 8003334:	414b      	adcs	r3, r1
 8003336:	637b      	str	r3, [r7, #52]	; 0x34
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003344:	4659      	mov	r1, fp
 8003346:	00cb      	lsls	r3, r1, #3
 8003348:	4651      	mov	r1, sl
 800334a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800334e:	4651      	mov	r1, sl
 8003350:	00ca      	lsls	r2, r1, #3
 8003352:	4610      	mov	r0, r2
 8003354:	4619      	mov	r1, r3
 8003356:	4603      	mov	r3, r0
 8003358:	4642      	mov	r2, r8
 800335a:	189b      	adds	r3, r3, r2
 800335c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003360:	464b      	mov	r3, r9
 8003362:	460a      	mov	r2, r1
 8003364:	eb42 0303 	adc.w	r3, r2, r3
 8003368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800336c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003378:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800337c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003380:	460b      	mov	r3, r1
 8003382:	18db      	adds	r3, r3, r3
 8003384:	62bb      	str	r3, [r7, #40]	; 0x28
 8003386:	4613      	mov	r3, r2
 8003388:	eb42 0303 	adc.w	r3, r2, r3
 800338c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800338e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003392:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003396:	f7fc ff73 	bl	8000280 <__aeabi_uldivmod>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <UART_SetConfig+0x2d4>)
 80033a0:	fba3 1302 	umull	r1, r3, r3, r2
 80033a4:	095b      	lsrs	r3, r3, #5
 80033a6:	2164      	movs	r1, #100	; 0x64
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	3332      	adds	r3, #50	; 0x32
 80033b2:	4a08      	ldr	r2, [pc, #32]	; (80033d4 <UART_SetConfig+0x2d4>)
 80033b4:	fba2 2303 	umull	r2, r3, r2, r3
 80033b8:	095b      	lsrs	r3, r3, #5
 80033ba:	f003 0207 	and.w	r2, r3, #7
 80033be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4422      	add	r2, r4
 80033c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033c8:	e105      	b.n	80035d6 <UART_SetConfig+0x4d6>
 80033ca:	bf00      	nop
 80033cc:	40011000 	.word	0x40011000
 80033d0:	40011400 	.word	0x40011400
 80033d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033dc:	2200      	movs	r2, #0
 80033de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033ea:	4642      	mov	r2, r8
 80033ec:	464b      	mov	r3, r9
 80033ee:	1891      	adds	r1, r2, r2
 80033f0:	6239      	str	r1, [r7, #32]
 80033f2:	415b      	adcs	r3, r3
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
 80033f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033fa:	4641      	mov	r1, r8
 80033fc:	1854      	adds	r4, r2, r1
 80033fe:	4649      	mov	r1, r9
 8003400:	eb43 0501 	adc.w	r5, r3, r1
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	00eb      	lsls	r3, r5, #3
 800340e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003412:	00e2      	lsls	r2, r4, #3
 8003414:	4614      	mov	r4, r2
 8003416:	461d      	mov	r5, r3
 8003418:	4643      	mov	r3, r8
 800341a:	18e3      	adds	r3, r4, r3
 800341c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003420:	464b      	mov	r3, r9
 8003422:	eb45 0303 	adc.w	r3, r5, r3
 8003426:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800342a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003436:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003446:	4629      	mov	r1, r5
 8003448:	008b      	lsls	r3, r1, #2
 800344a:	4621      	mov	r1, r4
 800344c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003450:	4621      	mov	r1, r4
 8003452:	008a      	lsls	r2, r1, #2
 8003454:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003458:	f7fc ff12 	bl	8000280 <__aeabi_uldivmod>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4b60      	ldr	r3, [pc, #384]	; (80035e4 <UART_SetConfig+0x4e4>)
 8003462:	fba3 2302 	umull	r2, r3, r3, r2
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	011c      	lsls	r4, r3, #4
 800346a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800346e:	2200      	movs	r2, #0
 8003470:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003474:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003478:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800347c:	4642      	mov	r2, r8
 800347e:	464b      	mov	r3, r9
 8003480:	1891      	adds	r1, r2, r2
 8003482:	61b9      	str	r1, [r7, #24]
 8003484:	415b      	adcs	r3, r3
 8003486:	61fb      	str	r3, [r7, #28]
 8003488:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800348c:	4641      	mov	r1, r8
 800348e:	1851      	adds	r1, r2, r1
 8003490:	6139      	str	r1, [r7, #16]
 8003492:	4649      	mov	r1, r9
 8003494:	414b      	adcs	r3, r1
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034a4:	4659      	mov	r1, fp
 80034a6:	00cb      	lsls	r3, r1, #3
 80034a8:	4651      	mov	r1, sl
 80034aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ae:	4651      	mov	r1, sl
 80034b0:	00ca      	lsls	r2, r1, #3
 80034b2:	4610      	mov	r0, r2
 80034b4:	4619      	mov	r1, r3
 80034b6:	4603      	mov	r3, r0
 80034b8:	4642      	mov	r2, r8
 80034ba:	189b      	adds	r3, r3, r2
 80034bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034c0:	464b      	mov	r3, r9
 80034c2:	460a      	mov	r2, r1
 80034c4:	eb42 0303 	adc.w	r3, r2, r3
 80034c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80034d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80034e4:	4649      	mov	r1, r9
 80034e6:	008b      	lsls	r3, r1, #2
 80034e8:	4641      	mov	r1, r8
 80034ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034ee:	4641      	mov	r1, r8
 80034f0:	008a      	lsls	r2, r1, #2
 80034f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034f6:	f7fc fec3 	bl	8000280 <__aeabi_uldivmod>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4b39      	ldr	r3, [pc, #228]	; (80035e4 <UART_SetConfig+0x4e4>)
 8003500:	fba3 1302 	umull	r1, r3, r3, r2
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	2164      	movs	r1, #100	; 0x64
 8003508:	fb01 f303 	mul.w	r3, r1, r3
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	3332      	adds	r3, #50	; 0x32
 8003512:	4a34      	ldr	r2, [pc, #208]	; (80035e4 <UART_SetConfig+0x4e4>)
 8003514:	fba2 2303 	umull	r2, r3, r2, r3
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800351e:	441c      	add	r4, r3
 8003520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003524:	2200      	movs	r2, #0
 8003526:	673b      	str	r3, [r7, #112]	; 0x70
 8003528:	677a      	str	r2, [r7, #116]	; 0x74
 800352a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800352e:	4642      	mov	r2, r8
 8003530:	464b      	mov	r3, r9
 8003532:	1891      	adds	r1, r2, r2
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	415b      	adcs	r3, r3
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800353e:	4641      	mov	r1, r8
 8003540:	1851      	adds	r1, r2, r1
 8003542:	6039      	str	r1, [r7, #0]
 8003544:	4649      	mov	r1, r9
 8003546:	414b      	adcs	r3, r1
 8003548:	607b      	str	r3, [r7, #4]
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003556:	4659      	mov	r1, fp
 8003558:	00cb      	lsls	r3, r1, #3
 800355a:	4651      	mov	r1, sl
 800355c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003560:	4651      	mov	r1, sl
 8003562:	00ca      	lsls	r2, r1, #3
 8003564:	4610      	mov	r0, r2
 8003566:	4619      	mov	r1, r3
 8003568:	4603      	mov	r3, r0
 800356a:	4642      	mov	r2, r8
 800356c:	189b      	adds	r3, r3, r2
 800356e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003570:	464b      	mov	r3, r9
 8003572:	460a      	mov	r2, r1
 8003574:	eb42 0303 	adc.w	r3, r2, r3
 8003578:	66fb      	str	r3, [r7, #108]	; 0x6c
 800357a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	663b      	str	r3, [r7, #96]	; 0x60
 8003584:	667a      	str	r2, [r7, #100]	; 0x64
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003592:	4649      	mov	r1, r9
 8003594:	008b      	lsls	r3, r1, #2
 8003596:	4641      	mov	r1, r8
 8003598:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800359c:	4641      	mov	r1, r8
 800359e:	008a      	lsls	r2, r1, #2
 80035a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80035a4:	f7fc fe6c 	bl	8000280 <__aeabi_uldivmod>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4b0d      	ldr	r3, [pc, #52]	; (80035e4 <UART_SetConfig+0x4e4>)
 80035ae:	fba3 1302 	umull	r1, r3, r3, r2
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	2164      	movs	r1, #100	; 0x64
 80035b6:	fb01 f303 	mul.w	r3, r1, r3
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	3332      	adds	r3, #50	; 0x32
 80035c0:	4a08      	ldr	r2, [pc, #32]	; (80035e4 <UART_SetConfig+0x4e4>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	f003 020f 	and.w	r2, r3, #15
 80035cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4422      	add	r2, r4
 80035d4:	609a      	str	r2, [r3, #8]
}
 80035d6:	bf00      	nop
 80035d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80035dc:	46bd      	mov	sp, r7
 80035de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035e2:	bf00      	nop
 80035e4:	51eb851f 	.word	0x51eb851f

080035e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f103 0208 	add.w	r2, r3, #8
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003600:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f103 0208 	add.w	r2, r3, #8
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f103 0208 	add.w	r2, r3, #8
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003642:	b480      	push	{r7}
 8003644:	b085      	sub	sp, #20
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	601a      	str	r2, [r3, #0]
}
 800367e:	bf00      	nop
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800368a:	b480      	push	{r7}
 800368c:	b085      	sub	sp, #20
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036a0:	d103      	bne.n	80036aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	e00c      	b.n	80036c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	3308      	adds	r3, #8
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	e002      	b.n	80036b8 <vListInsert+0x2e>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d2f6      	bcs.n	80036b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	601a      	str	r2, [r3, #0]
}
 80036f0:	bf00      	nop
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6892      	ldr	r2, [r2, #8]
 8003712:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6852      	ldr	r2, [r2, #4]
 800371c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	429a      	cmp	r2, r3
 8003726:	d103      	bne.n	8003730 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	1e5a      	subs	r2, r3, #1
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10a      	bne.n	800377a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003768:	f383 8811 	msr	BASEPRI, r3
 800376c:	f3bf 8f6f 	isb	sy
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003776:	bf00      	nop
 8003778:	e7fe      	b.n	8003778 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800377a:	f001 ff23 	bl	80055c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003786:	68f9      	ldr	r1, [r7, #12]
 8003788:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800378a:	fb01 f303 	mul.w	r3, r1, r3
 800378e:	441a      	add	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037aa:	3b01      	subs	r3, #1
 80037ac:	68f9      	ldr	r1, [r7, #12]
 80037ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037b0:	fb01 f303 	mul.w	r3, r1, r3
 80037b4:	441a      	add	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	22ff      	movs	r2, #255	; 0xff
 80037be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	22ff      	movs	r2, #255	; 0xff
 80037c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d114      	bne.n	80037fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d01a      	beq.n	800380e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	3310      	adds	r3, #16
 80037dc:	4618      	mov	r0, r3
 80037de:	f001 f80d 	bl	80047fc <xTaskRemoveFromEventList>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d012      	beq.n	800380e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80037e8:	4b0c      	ldr	r3, [pc, #48]	; (800381c <xQueueGenericReset+0xcc>)
 80037ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	e009      	b.n	800380e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	3310      	adds	r3, #16
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff fef2 	bl	80035e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	3324      	adds	r3, #36	; 0x24
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff feed 	bl	80035e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800380e:	f001 ff09 	bl	8005624 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003812:	2301      	movs	r3, #1
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	e000ed04 	.word	0xe000ed04

08003820 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08a      	sub	sp, #40	; 0x28
 8003824:	af02      	add	r7, sp, #8
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	4613      	mov	r3, r2
 800382c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10a      	bne.n	800384a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003838:	f383 8811 	msr	BASEPRI, r3
 800383c:	f3bf 8f6f 	isb	sy
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	613b      	str	r3, [r7, #16]
}
 8003846:	bf00      	nop
 8003848:	e7fe      	b.n	8003848 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d102      	bne.n	8003856 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003850:	2300      	movs	r3, #0
 8003852:	61fb      	str	r3, [r7, #28]
 8003854:	e004      	b.n	8003860 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	fb02 f303 	mul.w	r3, r2, r3
 800385e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	3350      	adds	r3, #80	; 0x50
 8003864:	4618      	mov	r0, r3
 8003866:	f001 ffcf 	bl	8005808 <pvPortMalloc>
 800386a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00d      	beq.n	800388e <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	3350      	adds	r3, #80	; 0x50
 800387a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800387c:	79fa      	ldrb	r2, [r7, #7]
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	4613      	mov	r3, r2
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	68b9      	ldr	r1, [r7, #8]
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 f805 	bl	8003898 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800388e:	69bb      	ldr	r3, [r7, #24]
	}
 8003890:	4618      	mov	r0, r3
 8003892:	3720      	adds	r7, #32
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d103      	bne.n	80038b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	e002      	b.n	80038ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038c6:	2101      	movs	r1, #1
 80038c8:	69b8      	ldr	r0, [r7, #24]
 80038ca:	f7ff ff41 	bl	8003750 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	78fa      	ldrb	r2, [r7, #3]
 80038d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80038d6:	bf00      	nop
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08e      	sub	sp, #56	; 0x38
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038ee:	2300      	movs	r3, #0
 80038f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80038f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10a      	bne.n	8003912 <xQueueGenericSend+0x32>
	__asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800390e:	bf00      	nop
 8003910:	e7fe      	b.n	8003910 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d103      	bne.n	8003920 <xQueueGenericSend+0x40>
 8003918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <xQueueGenericSend+0x44>
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <xQueueGenericSend+0x46>
 8003924:	2300      	movs	r3, #0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10a      	bne.n	8003940 <xQueueGenericSend+0x60>
	__asm volatile
 800392a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392e:	f383 8811 	msr	BASEPRI, r3
 8003932:	f3bf 8f6f 	isb	sy
 8003936:	f3bf 8f4f 	dsb	sy
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800393c:	bf00      	nop
 800393e:	e7fe      	b.n	800393e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d103      	bne.n	800394e <xQueueGenericSend+0x6e>
 8003946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <xQueueGenericSend+0x72>
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <xQueueGenericSend+0x74>
 8003952:	2300      	movs	r3, #0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10a      	bne.n	800396e <xQueueGenericSend+0x8e>
	__asm volatile
 8003958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	623b      	str	r3, [r7, #32]
}
 800396a:	bf00      	nop
 800396c:	e7fe      	b.n	800396c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800396e:	f001 f8e1 	bl	8004b34 <xTaskGetSchedulerState>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <xQueueGenericSend+0x9e>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <xQueueGenericSend+0xa2>
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <xQueueGenericSend+0xa4>
 8003982:	2300      	movs	r3, #0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10a      	bne.n	800399e <xQueueGenericSend+0xbe>
	__asm volatile
 8003988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398c:	f383 8811 	msr	BASEPRI, r3
 8003990:	f3bf 8f6f 	isb	sy
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	61fb      	str	r3, [r7, #28]
}
 800399a:	bf00      	nop
 800399c:	e7fe      	b.n	800399c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800399e:	f001 fe11 	bl	80055c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d302      	bcc.n	80039b4 <xQueueGenericSend+0xd4>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d129      	bne.n	8003a08 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	68b9      	ldr	r1, [r7, #8]
 80039b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039ba:	f000 fa07 	bl	8003dcc <prvCopyDataToQueue>
 80039be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d010      	beq.n	80039ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ca:	3324      	adds	r3, #36	; 0x24
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 ff15 	bl	80047fc <xTaskRemoveFromEventList>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d013      	beq.n	8003a00 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039d8:	4b3f      	ldr	r3, [pc, #252]	; (8003ad8 <xQueueGenericSend+0x1f8>)
 80039da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	f3bf 8f6f 	isb	sy
 80039e8:	e00a      	b.n	8003a00 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d007      	beq.n	8003a00 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039f0:	4b39      	ldr	r3, [pc, #228]	; (8003ad8 <xQueueGenericSend+0x1f8>)
 80039f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a00:	f001 fe10 	bl	8005624 <vPortExitCritical>
				return pdPASS;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e063      	b.n	8003ad0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d103      	bne.n	8003a16 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a0e:	f001 fe09 	bl	8005624 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	e05c      	b.n	8003ad0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d106      	bne.n	8003a2a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a1c:	f107 0314 	add.w	r3, r7, #20
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 ff4d 	bl	80048c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a26:	2301      	movs	r3, #1
 8003a28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a2a:	f001 fdfb 	bl	8005624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a2e:	f000 fcc7 	bl	80043c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a32:	f001 fdc7 	bl	80055c4 <vPortEnterCritical>
 8003a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a3c:	b25b      	sxtb	r3, r3
 8003a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a42:	d103      	bne.n	8003a4c <xQueueGenericSend+0x16c>
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a52:	b25b      	sxtb	r3, r3
 8003a54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a58:	d103      	bne.n	8003a62 <xQueueGenericSend+0x182>
 8003a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a62:	f001 fddf 	bl	8005624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a66:	1d3a      	adds	r2, r7, #4
 8003a68:	f107 0314 	add.w	r3, r7, #20
 8003a6c:	4611      	mov	r1, r2
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 ff3c 	bl	80048ec <xTaskCheckForTimeOut>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d124      	bne.n	8003ac4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a7c:	f000 fa9e 	bl	8003fbc <prvIsQueueFull>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d018      	beq.n	8003ab8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a88:	3310      	adds	r3, #16
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	4611      	mov	r1, r2
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 fe64 	bl	800475c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a96:	f000 fa29 	bl	8003eec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a9a:	f000 fc9f 	bl	80043dc <xTaskResumeAll>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f47f af7c 	bne.w	800399e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003aa6:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <xQueueGenericSend+0x1f8>)
 8003aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	e772      	b.n	800399e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aba:	f000 fa17 	bl	8003eec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003abe:	f000 fc8d 	bl	80043dc <xTaskResumeAll>
 8003ac2:	e76c      	b.n	800399e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ac6:	f000 fa11 	bl	8003eec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003aca:	f000 fc87 	bl	80043dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ace:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3738      	adds	r7, #56	; 0x38
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	e000ed04 	.word	0xe000ed04

08003adc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08e      	sub	sp, #56	; 0x38
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
 8003ae8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10a      	bne.n	8003b0a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b06:	bf00      	nop
 8003b08:	e7fe      	b.n	8003b08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d103      	bne.n	8003b18 <xQueueGenericSendFromISR+0x3c>
 8003b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <xQueueGenericSendFromISR+0x40>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e000      	b.n	8003b1e <xQueueGenericSendFromISR+0x42>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10a      	bne.n	8003b38 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b26:	f383 8811 	msr	BASEPRI, r3
 8003b2a:	f3bf 8f6f 	isb	sy
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	623b      	str	r3, [r7, #32]
}
 8003b34:	bf00      	nop
 8003b36:	e7fe      	b.n	8003b36 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d103      	bne.n	8003b46 <xQueueGenericSendFromISR+0x6a>
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <xQueueGenericSendFromISR+0x6e>
 8003b46:	2301      	movs	r3, #1
 8003b48:	e000      	b.n	8003b4c <xQueueGenericSendFromISR+0x70>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10a      	bne.n	8003b66 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	61fb      	str	r3, [r7, #28]
}
 8003b62:	bf00      	nop
 8003b64:	e7fe      	b.n	8003b64 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b66:	f001 fe0f 	bl	8005788 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b6a:	f3ef 8211 	mrs	r2, BASEPRI
 8003b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	61ba      	str	r2, [r7, #24]
 8003b80:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b82:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d302      	bcc.n	8003b98 <xQueueGenericSendFromISR+0xbc>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d12c      	bne.n	8003bf2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	68b9      	ldr	r1, [r7, #8]
 8003ba6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ba8:	f000 f910 	bl	8003dcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003bac:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bb4:	d112      	bne.n	8003bdc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d016      	beq.n	8003bec <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	3324      	adds	r3, #36	; 0x24
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fe1a 	bl	80047fc <xTaskRemoveFromEventList>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00e      	beq.n	8003bec <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00b      	beq.n	8003bec <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	e007      	b.n	8003bec <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bdc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003be0:	3301      	adds	r3, #1
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	b25a      	sxtb	r2, r3
 8003be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003bec:	2301      	movs	r3, #1
 8003bee:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003bf0:	e001      	b.n	8003bf6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8003bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3738      	adds	r7, #56	; 0x38
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08c      	sub	sp, #48	; 0x30
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10a      	bne.n	8003c3c <xQueueReceive+0x30>
	__asm volatile
 8003c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2a:	f383 8811 	msr	BASEPRI, r3
 8003c2e:	f3bf 8f6f 	isb	sy
 8003c32:	f3bf 8f4f 	dsb	sy
 8003c36:	623b      	str	r3, [r7, #32]
}
 8003c38:	bf00      	nop
 8003c3a:	e7fe      	b.n	8003c3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d103      	bne.n	8003c4a <xQueueReceive+0x3e>
 8003c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <xQueueReceive+0x42>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <xQueueReceive+0x44>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10a      	bne.n	8003c6a <xQueueReceive+0x5e>
	__asm volatile
 8003c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	61fb      	str	r3, [r7, #28]
}
 8003c66:	bf00      	nop
 8003c68:	e7fe      	b.n	8003c68 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c6a:	f000 ff63 	bl	8004b34 <xTaskGetSchedulerState>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d102      	bne.n	8003c7a <xQueueReceive+0x6e>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <xQueueReceive+0x72>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <xQueueReceive+0x74>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <xQueueReceive+0x8e>
	__asm volatile
 8003c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	61bb      	str	r3, [r7, #24]
}
 8003c96:	bf00      	nop
 8003c98:	e7fe      	b.n	8003c98 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c9a:	f001 fc93 	bl	80055c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d01f      	beq.n	8003cea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cae:	f000 f8f7 	bl	8003ea0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	1e5a      	subs	r2, r3, #1
 8003cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00f      	beq.n	8003ce2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc4:	3310      	adds	r3, #16
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 fd98 	bl	80047fc <xTaskRemoveFromEventList>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d007      	beq.n	8003ce2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003cd2:	4b3d      	ldr	r3, [pc, #244]	; (8003dc8 <xQueueReceive+0x1bc>)
 8003cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ce2:	f001 fc9f 	bl	8005624 <vPortExitCritical>
				return pdPASS;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e069      	b.n	8003dbe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d103      	bne.n	8003cf8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cf0:	f001 fc98 	bl	8005624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	e062      	b.n	8003dbe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cfe:	f107 0310 	add.w	r3, r7, #16
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fddc 	bl	80048c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d0c:	f001 fc8a 	bl	8005624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d10:	f000 fb56 	bl	80043c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d14:	f001 fc56 	bl	80055c4 <vPortEnterCritical>
 8003d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d1e:	b25b      	sxtb	r3, r3
 8003d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d24:	d103      	bne.n	8003d2e <xQueueReceive+0x122>
 8003d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d34:	b25b      	sxtb	r3, r3
 8003d36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d3a:	d103      	bne.n	8003d44 <xQueueReceive+0x138>
 8003d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d44:	f001 fc6e 	bl	8005624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d48:	1d3a      	adds	r2, r7, #4
 8003d4a:	f107 0310 	add.w	r3, r7, #16
 8003d4e:	4611      	mov	r1, r2
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 fdcb 	bl	80048ec <xTaskCheckForTimeOut>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d123      	bne.n	8003da4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d5e:	f000 f917 	bl	8003f90 <prvIsQueueEmpty>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d017      	beq.n	8003d98 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6a:	3324      	adds	r3, #36	; 0x24
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	4611      	mov	r1, r2
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 fcf3 	bl	800475c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d78:	f000 f8b8 	bl	8003eec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d7c:	f000 fb2e 	bl	80043dc <xTaskResumeAll>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d189      	bne.n	8003c9a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003d86:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <xQueueReceive+0x1bc>)
 8003d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	e780      	b.n	8003c9a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d9a:	f000 f8a7 	bl	8003eec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d9e:	f000 fb1d 	bl	80043dc <xTaskResumeAll>
 8003da2:	e77a      	b.n	8003c9a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003da4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003da6:	f000 f8a1 	bl	8003eec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003daa:	f000 fb17 	bl	80043dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003db0:	f000 f8ee 	bl	8003f90 <prvIsQueueEmpty>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f43f af6f 	beq.w	8003c9a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003dbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3730      	adds	r7, #48	; 0x30
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	e000ed04 	.word	0xe000ed04

08003dcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10d      	bne.n	8003e06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d14d      	bne.n	8003e8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 feba 	bl	8004b70 <xTaskPriorityDisinherit>
 8003dfc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	609a      	str	r2, [r3, #8]
 8003e04:	e043      	b.n	8003e8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d119      	bne.n	8003e40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6858      	ldr	r0, [r3, #4]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	461a      	mov	r2, r3
 8003e16:	68b9      	ldr	r1, [r7, #8]
 8003e18:	f001 fefa 	bl	8005c10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	441a      	add	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d32b      	bcc.n	8003e8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	e026      	b.n	8003e8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	68d8      	ldr	r0, [r3, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	461a      	mov	r2, r3
 8003e4a:	68b9      	ldr	r1, [r7, #8]
 8003e4c:	f001 fee0 	bl	8005c10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	425b      	negs	r3, r3
 8003e5a:	441a      	add	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d207      	bcs.n	8003e7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	425b      	negs	r3, r3
 8003e76:	441a      	add	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d105      	bne.n	8003e8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e96:	697b      	ldr	r3, [r7, #20]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d018      	beq.n	8003ee4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	441a      	add	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d303      	bcc.n	8003ed4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68d9      	ldr	r1, [r3, #12]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	461a      	mov	r2, r3
 8003ede:	6838      	ldr	r0, [r7, #0]
 8003ee0:	f001 fe96 	bl	8005c10 <memcpy>
	}
}
 8003ee4:	bf00      	nop
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ef4:	f001 fb66 	bl	80055c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003efe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f00:	e011      	b.n	8003f26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d012      	beq.n	8003f30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3324      	adds	r3, #36	; 0x24
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fc74 	bl	80047fc <xTaskRemoveFromEventList>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f1a:	f000 fd49 	bl	80049b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	dce9      	bgt.n	8003f02 <prvUnlockQueue+0x16>
 8003f2e:	e000      	b.n	8003f32 <prvUnlockQueue+0x46>
					break;
 8003f30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	22ff      	movs	r2, #255	; 0xff
 8003f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f3a:	f001 fb73 	bl	8005624 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f3e:	f001 fb41 	bl	80055c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f4a:	e011      	b.n	8003f70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d012      	beq.n	8003f7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3310      	adds	r3, #16
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fc4f 	bl	80047fc <xTaskRemoveFromEventList>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f64:	f000 fd24 	bl	80049b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f68:	7bbb      	ldrb	r3, [r7, #14]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	dce9      	bgt.n	8003f4c <prvUnlockQueue+0x60>
 8003f78:	e000      	b.n	8003f7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	22ff      	movs	r2, #255	; 0xff
 8003f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f84:	f001 fb4e 	bl	8005624 <vPortExitCritical>
}
 8003f88:	bf00      	nop
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f98:	f001 fb14 	bl	80055c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d102      	bne.n	8003faa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	e001      	b.n	8003fae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fae:	f001 fb39 	bl	8005624 <vPortExitCritical>

	return xReturn;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fc4:	f001 fafe 	bl	80055c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d102      	bne.n	8003fda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	e001      	b.n	8003fde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fde:	f001 fb21 	bl	8005624 <vPortExitCritical>

	return xReturn;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	e014      	b.n	8004026 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003ffc:	4a0f      	ldr	r2, [pc, #60]	; (800403c <vQueueAddToRegistry+0x50>)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10b      	bne.n	8004020 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004008:	490c      	ldr	r1, [pc, #48]	; (800403c <vQueueAddToRegistry+0x50>)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004012:	4a0a      	ldr	r2, [pc, #40]	; (800403c <vQueueAddToRegistry+0x50>)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	4413      	add	r3, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800401e:	e006      	b.n	800402e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3301      	adds	r3, #1
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b07      	cmp	r3, #7
 800402a:	d9e7      	bls.n	8003ffc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800402c:	bf00      	nop
 800402e:	bf00      	nop
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	200003f4 	.word	0x200003f4

08004040 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004050:	f001 fab8 	bl	80055c4 <vPortEnterCritical>
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800405a:	b25b      	sxtb	r3, r3
 800405c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004060:	d103      	bne.n	800406a <vQueueWaitForMessageRestricted+0x2a>
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004070:	b25b      	sxtb	r3, r3
 8004072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004076:	d103      	bne.n	8004080 <vQueueWaitForMessageRestricted+0x40>
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004080:	f001 fad0 	bl	8005624 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	2b00      	cmp	r3, #0
 800408a:	d106      	bne.n	800409a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	3324      	adds	r3, #36	; 0x24
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	68b9      	ldr	r1, [r7, #8]
 8004094:	4618      	mov	r0, r3
 8004096:	f000 fb85 	bl	80047a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800409a:	6978      	ldr	r0, [r7, #20]
 800409c:	f7ff ff26 	bl	8003eec <prvUnlockQueue>
	}
 80040a0:	bf00      	nop
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08c      	sub	sp, #48	; 0x30
 80040ac:	af04      	add	r7, sp, #16
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	4613      	mov	r3, r2
 80040b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80040b8:	88fb      	ldrh	r3, [r7, #6]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4618      	mov	r0, r3
 80040be:	f001 fba3 	bl	8005808 <pvPortMalloc>
 80040c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00e      	beq.n	80040e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80040ca:	2058      	movs	r0, #88	; 0x58
 80040cc:	f001 fb9c 	bl	8005808 <pvPortMalloc>
 80040d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	631a      	str	r2, [r3, #48]	; 0x30
 80040de:	e005      	b.n	80040ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80040e0:	6978      	ldr	r0, [r7, #20]
 80040e2:	f001 fc55 	bl	8005990 <vPortFree>
 80040e6:	e001      	b.n	80040ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80040e8:	2300      	movs	r3, #0
 80040ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d013      	beq.n	800411a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80040f2:	88fa      	ldrh	r2, [r7, #6]
 80040f4:	2300      	movs	r3, #0
 80040f6:	9303      	str	r3, [sp, #12]
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	9302      	str	r3, [sp, #8]
 80040fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fe:	9301      	str	r3, [sp, #4]
 8004100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68b9      	ldr	r1, [r7, #8]
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 f80e 	bl	800412a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800410e:	69f8      	ldr	r0, [r7, #28]
 8004110:	f000 f89a 	bl	8004248 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004114:	2301      	movs	r3, #1
 8004116:	61bb      	str	r3, [r7, #24]
 8004118:	e002      	b.n	8004120 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800411a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800411e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004120:	69bb      	ldr	r3, [r7, #24]
	}
 8004122:	4618      	mov	r0, r3
 8004124:	3720      	adds	r7, #32
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b088      	sub	sp, #32
 800412e:	af00      	add	r7, sp, #0
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	607a      	str	r2, [r7, #4]
 8004136:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	461a      	mov	r2, r3
 8004142:	21a5      	movs	r1, #165	; 0xa5
 8004144:	f001 fd72 	bl	8005c2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004152:	3b01      	subs	r3, #1
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	f023 0307 	bic.w	r3, r3, #7
 8004160:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <prvInitialiseNewTask+0x58>
	__asm volatile
 800416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004170:	f383 8811 	msr	BASEPRI, r3
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	617b      	str	r3, [r7, #20]
}
 800417e:	bf00      	nop
 8004180:	e7fe      	b.n	8004180 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d01f      	beq.n	80041c8 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004188:	2300      	movs	r3, #0
 800418a:	61fb      	str	r3, [r7, #28]
 800418c:	e012      	b.n	80041b4 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	4413      	add	r3, r2
 8004194:	7819      	ldrb	r1, [r3, #0]
 8004196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	4413      	add	r3, r2
 800419c:	3334      	adds	r3, #52	; 0x34
 800419e:	460a      	mov	r2, r1
 80041a0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	4413      	add	r3, r2
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d006      	beq.n	80041bc <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	3301      	adds	r3, #1
 80041b2:	61fb      	str	r3, [r7, #28]
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	2b09      	cmp	r3, #9
 80041b8:	d9e9      	bls.n	800418e <prvInitialiseNewTask+0x64>
 80041ba:	e000      	b.n	80041be <prvInitialiseNewTask+0x94>
			{
				break;
 80041bc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80041be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80041c6:	e003      	b.n	80041d0 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80041c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80041d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d2:	2b0f      	cmp	r3, #15
 80041d4:	d901      	bls.n	80041da <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80041d6:	230f      	movs	r3, #15
 80041d8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80041da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041de:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041e4:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80041e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e8:	2200      	movs	r2, #0
 80041ea:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80041ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ee:	3304      	adds	r3, #4
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7ff fa19 	bl	8003628 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	3318      	adds	r3, #24
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff fa14 	bl	8003628 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004204:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004208:	f1c3 0210 	rsb	r2, r3, #16
 800420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004214:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004218:	2200      	movs	r2, #0
 800421a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800421c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	68f9      	ldr	r1, [r7, #12]
 8004228:	69b8      	ldr	r0, [r7, #24]
 800422a:	f001 f89f 	bl	800536c <pxPortInitialiseStack>
 800422e:	4602      	mov	r2, r0
 8004230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004232:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800423a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800423e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004240:	bf00      	nop
 8004242:	3720      	adds	r7, #32
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004250:	f001 f9b8 	bl	80055c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004254:	4b2c      	ldr	r3, [pc, #176]	; (8004308 <prvAddNewTaskToReadyList+0xc0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3301      	adds	r3, #1
 800425a:	4a2b      	ldr	r2, [pc, #172]	; (8004308 <prvAddNewTaskToReadyList+0xc0>)
 800425c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800425e:	4b2b      	ldr	r3, [pc, #172]	; (800430c <prvAddNewTaskToReadyList+0xc4>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d109      	bne.n	800427a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004266:	4a29      	ldr	r2, [pc, #164]	; (800430c <prvAddNewTaskToReadyList+0xc4>)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800426c:	4b26      	ldr	r3, [pc, #152]	; (8004308 <prvAddNewTaskToReadyList+0xc0>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d110      	bne.n	8004296 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004274:	f000 fbc0 	bl	80049f8 <prvInitialiseTaskLists>
 8004278:	e00d      	b.n	8004296 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800427a:	4b25      	ldr	r3, [pc, #148]	; (8004310 <prvAddNewTaskToReadyList+0xc8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d109      	bne.n	8004296 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004282:	4b22      	ldr	r3, [pc, #136]	; (800430c <prvAddNewTaskToReadyList+0xc4>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428c:	429a      	cmp	r2, r3
 800428e:	d802      	bhi.n	8004296 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004290:	4a1e      	ldr	r2, [pc, #120]	; (800430c <prvAddNewTaskToReadyList+0xc4>)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004296:	4b1f      	ldr	r3, [pc, #124]	; (8004314 <prvAddNewTaskToReadyList+0xcc>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3301      	adds	r3, #1
 800429c:	4a1d      	ldr	r2, [pc, #116]	; (8004314 <prvAddNewTaskToReadyList+0xcc>)
 800429e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80042a0:	4b1c      	ldr	r3, [pc, #112]	; (8004314 <prvAddNewTaskToReadyList+0xcc>)
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	2201      	movs	r2, #1
 80042ae:	409a      	lsls	r2, r3
 80042b0:	4b19      	ldr	r3, [pc, #100]	; (8004318 <prvAddNewTaskToReadyList+0xd0>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	4a18      	ldr	r2, [pc, #96]	; (8004318 <prvAddNewTaskToReadyList+0xd0>)
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042be:	4613      	mov	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4a15      	ldr	r2, [pc, #84]	; (800431c <prvAddNewTaskToReadyList+0xd4>)
 80042c8:	441a      	add	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3304      	adds	r3, #4
 80042ce:	4619      	mov	r1, r3
 80042d0:	4610      	mov	r0, r2
 80042d2:	f7ff f9b6 	bl	8003642 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80042d6:	f001 f9a5 	bl	8005624 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80042da:	4b0d      	ldr	r3, [pc, #52]	; (8004310 <prvAddNewTaskToReadyList+0xc8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00e      	beq.n	8004300 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80042e2:	4b0a      	ldr	r3, [pc, #40]	; (800430c <prvAddNewTaskToReadyList+0xc4>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d207      	bcs.n	8004300 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80042f0:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <prvAddNewTaskToReadyList+0xd8>)
 80042f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004300:	bf00      	nop
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	200005e8 	.word	0x200005e8
 800430c:	20000434 	.word	0x20000434
 8004310:	200005f4 	.word	0x200005f4
 8004314:	20000604 	.word	0x20000604
 8004318:	200005f0 	.word	0x200005f0
 800431c:	20000438 	.word	0x20000438
 8004320:	e000ed04 	.word	0xe000ed04

08004324 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800432a:	4b1f      	ldr	r3, [pc, #124]	; (80043a8 <vTaskStartScheduler+0x84>)
 800432c:	9301      	str	r3, [sp, #4]
 800432e:	2300      	movs	r3, #0
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	2300      	movs	r3, #0
 8004334:	2282      	movs	r2, #130	; 0x82
 8004336:	491d      	ldr	r1, [pc, #116]	; (80043ac <vTaskStartScheduler+0x88>)
 8004338:	481d      	ldr	r0, [pc, #116]	; (80043b0 <vTaskStartScheduler+0x8c>)
 800433a:	f7ff feb5 	bl	80040a8 <xTaskCreate>
 800433e:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d102      	bne.n	800434c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8004346:	f000 fcff 	bl	8004d48 <xTimerCreateTimerTask>
 800434a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d116      	bne.n	8004380 <vTaskStartScheduler+0x5c>
	__asm volatile
 8004352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	60bb      	str	r3, [r7, #8]
}
 8004364:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004366:	4b13      	ldr	r3, [pc, #76]	; (80043b4 <vTaskStartScheduler+0x90>)
 8004368:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800436c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800436e:	4b12      	ldr	r3, [pc, #72]	; (80043b8 <vTaskStartScheduler+0x94>)
 8004370:	2201      	movs	r2, #1
 8004372:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004374:	4b11      	ldr	r3, [pc, #68]	; (80043bc <vTaskStartScheduler+0x98>)
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800437a:	f001 f881 	bl	8005480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800437e:	e00e      	b.n	800439e <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004386:	d10a      	bne.n	800439e <vTaskStartScheduler+0x7a>
	__asm volatile
 8004388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438c:	f383 8811 	msr	BASEPRI, r3
 8004390:	f3bf 8f6f 	isb	sy
 8004394:	f3bf 8f4f 	dsb	sy
 8004398:	607b      	str	r3, [r7, #4]
}
 800439a:	bf00      	nop
 800439c:	e7fe      	b.n	800439c <vTaskStartScheduler+0x78>
}
 800439e:	bf00      	nop
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	2000060c 	.word	0x2000060c
 80043ac:	0800654c 	.word	0x0800654c
 80043b0:	080049c9 	.word	0x080049c9
 80043b4:	20000608 	.word	0x20000608
 80043b8:	200005f4 	.word	0x200005f4
 80043bc:	200005ec 	.word	0x200005ec

080043c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80043c4:	4b04      	ldr	r3, [pc, #16]	; (80043d8 <vTaskSuspendAll+0x18>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3301      	adds	r3, #1
 80043ca:	4a03      	ldr	r2, [pc, #12]	; (80043d8 <vTaskSuspendAll+0x18>)
 80043cc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80043ce:	bf00      	nop
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	20000610 	.word	0x20000610

080043dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043e6:	2300      	movs	r3, #0
 80043e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043ea:	4b41      	ldr	r3, [pc, #260]	; (80044f0 <xTaskResumeAll+0x114>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <xTaskResumeAll+0x2c>
	__asm volatile
 80043f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	603b      	str	r3, [r7, #0]
}
 8004404:	bf00      	nop
 8004406:	e7fe      	b.n	8004406 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004408:	f001 f8dc 	bl	80055c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800440c:	4b38      	ldr	r3, [pc, #224]	; (80044f0 <xTaskResumeAll+0x114>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3b01      	subs	r3, #1
 8004412:	4a37      	ldr	r2, [pc, #220]	; (80044f0 <xTaskResumeAll+0x114>)
 8004414:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004416:	4b36      	ldr	r3, [pc, #216]	; (80044f0 <xTaskResumeAll+0x114>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d161      	bne.n	80044e2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800441e:	4b35      	ldr	r3, [pc, #212]	; (80044f4 <xTaskResumeAll+0x118>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d05d      	beq.n	80044e2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004426:	e02e      	b.n	8004486 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004428:	4b33      	ldr	r3, [pc, #204]	; (80044f8 <xTaskResumeAll+0x11c>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	3318      	adds	r3, #24
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff f961 	bl	80036fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	3304      	adds	r3, #4
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff f95c 	bl	80036fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	2201      	movs	r2, #1
 800444a:	409a      	lsls	r2, r3
 800444c:	4b2b      	ldr	r3, [pc, #172]	; (80044fc <xTaskResumeAll+0x120>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4313      	orrs	r3, r2
 8004452:	4a2a      	ldr	r2, [pc, #168]	; (80044fc <xTaskResumeAll+0x120>)
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445a:	4613      	mov	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4a27      	ldr	r2, [pc, #156]	; (8004500 <xTaskResumeAll+0x124>)
 8004464:	441a      	add	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3304      	adds	r3, #4
 800446a:	4619      	mov	r1, r3
 800446c:	4610      	mov	r0, r2
 800446e:	f7ff f8e8 	bl	8003642 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004476:	4b23      	ldr	r3, [pc, #140]	; (8004504 <xTaskResumeAll+0x128>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	429a      	cmp	r2, r3
 800447e:	d302      	bcc.n	8004486 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004480:	4b21      	ldr	r3, [pc, #132]	; (8004508 <xTaskResumeAll+0x12c>)
 8004482:	2201      	movs	r2, #1
 8004484:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004486:	4b1c      	ldr	r3, [pc, #112]	; (80044f8 <xTaskResumeAll+0x11c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1cc      	bne.n	8004428 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004494:	f000 fb2e 	bl	8004af4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004498:	4b1c      	ldr	r3, [pc, #112]	; (800450c <xTaskResumeAll+0x130>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d010      	beq.n	80044c6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80044a4:	f000 f846 	bl	8004534 <xTaskIncrementTick>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d002      	beq.n	80044b4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80044ae:	4b16      	ldr	r3, [pc, #88]	; (8004508 <xTaskResumeAll+0x12c>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1f1      	bne.n	80044a4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80044c0:	4b12      	ldr	r3, [pc, #72]	; (800450c <xTaskResumeAll+0x130>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044c6:	4b10      	ldr	r3, [pc, #64]	; (8004508 <xTaskResumeAll+0x12c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d009      	beq.n	80044e2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044ce:	2301      	movs	r3, #1
 80044d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044d2:	4b0f      	ldr	r3, [pc, #60]	; (8004510 <xTaskResumeAll+0x134>)
 80044d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044e2:	f001 f89f 	bl	8005624 <vPortExitCritical>

	return xAlreadyYielded;
 80044e6:	68bb      	ldr	r3, [r7, #8]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	20000610 	.word	0x20000610
 80044f4:	200005e8 	.word	0x200005e8
 80044f8:	200005a8 	.word	0x200005a8
 80044fc:	200005f0 	.word	0x200005f0
 8004500:	20000438 	.word	0x20000438
 8004504:	20000434 	.word	0x20000434
 8004508:	200005fc 	.word	0x200005fc
 800450c:	200005f8 	.word	0x200005f8
 8004510:	e000ed04 	.word	0xe000ed04

08004514 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800451a:	4b05      	ldr	r3, [pc, #20]	; (8004530 <xTaskGetTickCount+0x1c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004520:	687b      	ldr	r3, [r7, #4]
}
 8004522:	4618      	mov	r0, r3
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	200005ec 	.word	0x200005ec

08004534 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800453a:	2300      	movs	r3, #0
 800453c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800453e:	4b4e      	ldr	r3, [pc, #312]	; (8004678 <xTaskIncrementTick+0x144>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	f040 8088 	bne.w	8004658 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004548:	4b4c      	ldr	r3, [pc, #304]	; (800467c <xTaskIncrementTick+0x148>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3301      	adds	r3, #1
 800454e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004550:	4a4a      	ldr	r2, [pc, #296]	; (800467c <xTaskIncrementTick+0x148>)
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d120      	bne.n	800459e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800455c:	4b48      	ldr	r3, [pc, #288]	; (8004680 <xTaskIncrementTick+0x14c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <xTaskIncrementTick+0x48>
	__asm volatile
 8004566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456a:	f383 8811 	msr	BASEPRI, r3
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	603b      	str	r3, [r7, #0]
}
 8004578:	bf00      	nop
 800457a:	e7fe      	b.n	800457a <xTaskIncrementTick+0x46>
 800457c:	4b40      	ldr	r3, [pc, #256]	; (8004680 <xTaskIncrementTick+0x14c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	4b40      	ldr	r3, [pc, #256]	; (8004684 <xTaskIncrementTick+0x150>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a3e      	ldr	r2, [pc, #248]	; (8004680 <xTaskIncrementTick+0x14c>)
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	4a3e      	ldr	r2, [pc, #248]	; (8004684 <xTaskIncrementTick+0x150>)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	4b3d      	ldr	r3, [pc, #244]	; (8004688 <xTaskIncrementTick+0x154>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	3301      	adds	r3, #1
 8004596:	4a3c      	ldr	r2, [pc, #240]	; (8004688 <xTaskIncrementTick+0x154>)
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	f000 faab 	bl	8004af4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800459e:	4b3b      	ldr	r3, [pc, #236]	; (800468c <xTaskIncrementTick+0x158>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d348      	bcc.n	800463a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045a8:	4b35      	ldr	r3, [pc, #212]	; (8004680 <xTaskIncrementTick+0x14c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d104      	bne.n	80045bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045b2:	4b36      	ldr	r3, [pc, #216]	; (800468c <xTaskIncrementTick+0x158>)
 80045b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045b8:	601a      	str	r2, [r3, #0]
					break;
 80045ba:	e03e      	b.n	800463a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045bc:	4b30      	ldr	r3, [pc, #192]	; (8004680 <xTaskIncrementTick+0x14c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d203      	bcs.n	80045dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045d4:	4a2d      	ldr	r2, [pc, #180]	; (800468c <xTaskIncrementTick+0x158>)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80045da:	e02e      	b.n	800463a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	3304      	adds	r3, #4
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff f88b 	bl	80036fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d004      	beq.n	80045f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	3318      	adds	r3, #24
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff f882 	bl	80036fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	2201      	movs	r2, #1
 80045fe:	409a      	lsls	r2, r3
 8004600:	4b23      	ldr	r3, [pc, #140]	; (8004690 <xTaskIncrementTick+0x15c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4313      	orrs	r3, r2
 8004606:	4a22      	ldr	r2, [pc, #136]	; (8004690 <xTaskIncrementTick+0x15c>)
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800460e:	4613      	mov	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4a1f      	ldr	r2, [pc, #124]	; (8004694 <xTaskIncrementTick+0x160>)
 8004618:	441a      	add	r2, r3
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	3304      	adds	r3, #4
 800461e:	4619      	mov	r1, r3
 8004620:	4610      	mov	r0, r2
 8004622:	f7ff f80e 	bl	8003642 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462a:	4b1b      	ldr	r3, [pc, #108]	; (8004698 <xTaskIncrementTick+0x164>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	429a      	cmp	r2, r3
 8004632:	d3b9      	bcc.n	80045a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004634:	2301      	movs	r3, #1
 8004636:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004638:	e7b6      	b.n	80045a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800463a:	4b17      	ldr	r3, [pc, #92]	; (8004698 <xTaskIncrementTick+0x164>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004640:	4914      	ldr	r1, [pc, #80]	; (8004694 <xTaskIncrementTick+0x160>)
 8004642:	4613      	mov	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	440b      	add	r3, r1
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d907      	bls.n	8004662 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004652:	2301      	movs	r3, #1
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	e004      	b.n	8004662 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004658:	4b10      	ldr	r3, [pc, #64]	; (800469c <xTaskIncrementTick+0x168>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3301      	adds	r3, #1
 800465e:	4a0f      	ldr	r2, [pc, #60]	; (800469c <xTaskIncrementTick+0x168>)
 8004660:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004662:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <xTaskIncrementTick+0x16c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800466a:	2301      	movs	r3, #1
 800466c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800466e:	697b      	ldr	r3, [r7, #20]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	20000610 	.word	0x20000610
 800467c:	200005ec 	.word	0x200005ec
 8004680:	200005a0 	.word	0x200005a0
 8004684:	200005a4 	.word	0x200005a4
 8004688:	20000600 	.word	0x20000600
 800468c:	20000608 	.word	0x20000608
 8004690:	200005f0 	.word	0x200005f0
 8004694:	20000438 	.word	0x20000438
 8004698:	20000434 	.word	0x20000434
 800469c:	200005f8 	.word	0x200005f8
 80046a0:	200005fc 	.word	0x200005fc

080046a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046aa:	4b27      	ldr	r3, [pc, #156]	; (8004748 <vTaskSwitchContext+0xa4>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046b2:	4b26      	ldr	r3, [pc, #152]	; (800474c <vTaskSwitchContext+0xa8>)
 80046b4:	2201      	movs	r2, #1
 80046b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80046b8:	e03f      	b.n	800473a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80046ba:	4b24      	ldr	r3, [pc, #144]	; (800474c <vTaskSwitchContext+0xa8>)
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046c0:	4b23      	ldr	r3, [pc, #140]	; (8004750 <vTaskSwitchContext+0xac>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	fab3 f383 	clz	r3, r3
 80046cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80046ce:	7afb      	ldrb	r3, [r7, #11]
 80046d0:	f1c3 031f 	rsb	r3, r3, #31
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	491f      	ldr	r1, [pc, #124]	; (8004754 <vTaskSwitchContext+0xb0>)
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	440b      	add	r3, r1
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10a      	bne.n	8004700 <vTaskSwitchContext+0x5c>
	__asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	607b      	str	r3, [r7, #4]
}
 80046fc:	bf00      	nop
 80046fe:	e7fe      	b.n	80046fe <vTaskSwitchContext+0x5a>
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	4613      	mov	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4a12      	ldr	r2, [pc, #72]	; (8004754 <vTaskSwitchContext+0xb0>)
 800470c:	4413      	add	r3, r2
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	605a      	str	r2, [r3, #4]
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	3308      	adds	r3, #8
 8004722:	429a      	cmp	r2, r3
 8004724:	d104      	bne.n	8004730 <vTaskSwitchContext+0x8c>
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	605a      	str	r2, [r3, #4]
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	4a08      	ldr	r2, [pc, #32]	; (8004758 <vTaskSwitchContext+0xb4>)
 8004738:	6013      	str	r3, [r2, #0]
}
 800473a:	bf00      	nop
 800473c:	371c      	adds	r7, #28
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	20000610 	.word	0x20000610
 800474c:	200005fc 	.word	0x200005fc
 8004750:	200005f0 	.word	0x200005f0
 8004754:	20000438 	.word	0x20000438
 8004758:	20000434 	.word	0x20000434

0800475c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10a      	bne.n	8004782 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	60fb      	str	r3, [r7, #12]
}
 800477e:	bf00      	nop
 8004780:	e7fe      	b.n	8004780 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004782:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <vTaskPlaceOnEventList+0x44>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	3318      	adds	r3, #24
 8004788:	4619      	mov	r1, r3
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fe ff7d 	bl	800368a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004790:	2101      	movs	r1, #1
 8004792:	6838      	ldr	r0, [r7, #0]
 8004794:	f000 fa72 	bl	8004c7c <prvAddCurrentTaskToDelayedList>
}
 8004798:	bf00      	nop
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	20000434 	.word	0x20000434

080047a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10a      	bne.n	80047cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80047b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	617b      	str	r3, [r7, #20]
}
 80047c8:	bf00      	nop
 80047ca:	e7fe      	b.n	80047ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047cc:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3318      	adds	r3, #24
 80047d2:	4619      	mov	r1, r3
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f7fe ff34 	bl	8003642 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d002      	beq.n	80047e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80047e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	68b8      	ldr	r0, [r7, #8]
 80047ea:	f000 fa47 	bl	8004c7c <prvAddCurrentTaskToDelayedList>
	}
 80047ee:	bf00      	nop
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20000434 	.word	0x20000434

080047fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10a      	bne.n	8004828 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	60fb      	str	r3, [r7, #12]
}
 8004824:	bf00      	nop
 8004826:	e7fe      	b.n	8004826 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	3318      	adds	r3, #24
 800482c:	4618      	mov	r0, r3
 800482e:	f7fe ff65 	bl	80036fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004832:	4b1d      	ldr	r3, [pc, #116]	; (80048a8 <xTaskRemoveFromEventList+0xac>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d11c      	bne.n	8004874 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	3304      	adds	r3, #4
 800483e:	4618      	mov	r0, r3
 8004840:	f7fe ff5c 	bl	80036fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	2201      	movs	r2, #1
 800484a:	409a      	lsls	r2, r3
 800484c:	4b17      	ldr	r3, [pc, #92]	; (80048ac <xTaskRemoveFromEventList+0xb0>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4313      	orrs	r3, r2
 8004852:	4a16      	ldr	r2, [pc, #88]	; (80048ac <xTaskRemoveFromEventList+0xb0>)
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800485a:	4613      	mov	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4a13      	ldr	r2, [pc, #76]	; (80048b0 <xTaskRemoveFromEventList+0xb4>)
 8004864:	441a      	add	r2, r3
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	3304      	adds	r3, #4
 800486a:	4619      	mov	r1, r3
 800486c:	4610      	mov	r0, r2
 800486e:	f7fe fee8 	bl	8003642 <vListInsertEnd>
 8004872:	e005      	b.n	8004880 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	3318      	adds	r3, #24
 8004878:	4619      	mov	r1, r3
 800487a:	480e      	ldr	r0, [pc, #56]	; (80048b4 <xTaskRemoveFromEventList+0xb8>)
 800487c:	f7fe fee1 	bl	8003642 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004884:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <xTaskRemoveFromEventList+0xbc>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488a:	429a      	cmp	r2, r3
 800488c:	d905      	bls.n	800489a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800488e:	2301      	movs	r3, #1
 8004890:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004892:	4b0a      	ldr	r3, [pc, #40]	; (80048bc <xTaskRemoveFromEventList+0xc0>)
 8004894:	2201      	movs	r2, #1
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	e001      	b.n	800489e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800489a:	2300      	movs	r3, #0
 800489c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800489e:	697b      	ldr	r3, [r7, #20]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	20000610 	.word	0x20000610
 80048ac:	200005f0 	.word	0x200005f0
 80048b0:	20000438 	.word	0x20000438
 80048b4:	200005a8 	.word	0x200005a8
 80048b8:	20000434 	.word	0x20000434
 80048bc:	200005fc 	.word	0x200005fc

080048c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80048c8:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <vTaskInternalSetTimeOutState+0x24>)
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80048d0:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <vTaskInternalSetTimeOutState+0x28>)
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	605a      	str	r2, [r3, #4]
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	20000600 	.word	0x20000600
 80048e8:	200005ec 	.word	0x200005ec

080048ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10a      	bne.n	8004912 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80048fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004900:	f383 8811 	msr	BASEPRI, r3
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	613b      	str	r3, [r7, #16]
}
 800490e:	bf00      	nop
 8004910:	e7fe      	b.n	8004910 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10a      	bne.n	800492e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	60fb      	str	r3, [r7, #12]
}
 800492a:	bf00      	nop
 800492c:	e7fe      	b.n	800492c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800492e:	f000 fe49 	bl	80055c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004932:	4b1d      	ldr	r3, [pc, #116]	; (80049a8 <xTaskCheckForTimeOut+0xbc>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800494a:	d102      	bne.n	8004952 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800494c:	2300      	movs	r3, #0
 800494e:	61fb      	str	r3, [r7, #28]
 8004950:	e023      	b.n	800499a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	4b15      	ldr	r3, [pc, #84]	; (80049ac <xTaskCheckForTimeOut+0xc0>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d007      	beq.n	800496e <xTaskCheckForTimeOut+0x82>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	429a      	cmp	r2, r3
 8004966:	d302      	bcc.n	800496e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004968:	2301      	movs	r3, #1
 800496a:	61fb      	str	r3, [r7, #28]
 800496c:	e015      	b.n	800499a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	429a      	cmp	r2, r3
 8004976:	d20b      	bcs.n	8004990 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	1ad2      	subs	r2, r2, r3
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7ff ff9b 	bl	80048c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800498a:	2300      	movs	r3, #0
 800498c:	61fb      	str	r3, [r7, #28]
 800498e:	e004      	b.n	800499a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004996:	2301      	movs	r3, #1
 8004998:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800499a:	f000 fe43 	bl	8005624 <vPortExitCritical>

	return xReturn;
 800499e:	69fb      	ldr	r3, [r7, #28]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3720      	adds	r7, #32
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	200005ec 	.word	0x200005ec
 80049ac:	20000600 	.word	0x20000600

080049b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80049b4:	4b03      	ldr	r3, [pc, #12]	; (80049c4 <vTaskMissedYield+0x14>)
 80049b6:	2201      	movs	r2, #1
 80049b8:	601a      	str	r2, [r3, #0]
}
 80049ba:	bf00      	nop
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	200005fc 	.word	0x200005fc

080049c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80049d0:	f000 f852 	bl	8004a78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80049d4:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <prvIdleTask+0x28>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d9f9      	bls.n	80049d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <prvIdleTask+0x2c>)
 80049de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80049ec:	e7f0      	b.n	80049d0 <prvIdleTask+0x8>
 80049ee:	bf00      	nop
 80049f0:	20000438 	.word	0x20000438
 80049f4:	e000ed04 	.word	0xe000ed04

080049f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049fe:	2300      	movs	r3, #0
 8004a00:	607b      	str	r3, [r7, #4]
 8004a02:	e00c      	b.n	8004a1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4a12      	ldr	r2, [pc, #72]	; (8004a58 <prvInitialiseTaskLists+0x60>)
 8004a10:	4413      	add	r3, r2
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fe fde8 	bl	80035e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	607b      	str	r3, [r7, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b0f      	cmp	r3, #15
 8004a22:	d9ef      	bls.n	8004a04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a24:	480d      	ldr	r0, [pc, #52]	; (8004a5c <prvInitialiseTaskLists+0x64>)
 8004a26:	f7fe fddf 	bl	80035e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a2a:	480d      	ldr	r0, [pc, #52]	; (8004a60 <prvInitialiseTaskLists+0x68>)
 8004a2c:	f7fe fddc 	bl	80035e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a30:	480c      	ldr	r0, [pc, #48]	; (8004a64 <prvInitialiseTaskLists+0x6c>)
 8004a32:	f7fe fdd9 	bl	80035e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a36:	480c      	ldr	r0, [pc, #48]	; (8004a68 <prvInitialiseTaskLists+0x70>)
 8004a38:	f7fe fdd6 	bl	80035e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a3c:	480b      	ldr	r0, [pc, #44]	; (8004a6c <prvInitialiseTaskLists+0x74>)
 8004a3e:	f7fe fdd3 	bl	80035e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a42:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <prvInitialiseTaskLists+0x78>)
 8004a44:	4a05      	ldr	r2, [pc, #20]	; (8004a5c <prvInitialiseTaskLists+0x64>)
 8004a46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a48:	4b0a      	ldr	r3, [pc, #40]	; (8004a74 <prvInitialiseTaskLists+0x7c>)
 8004a4a:	4a05      	ldr	r2, [pc, #20]	; (8004a60 <prvInitialiseTaskLists+0x68>)
 8004a4c:	601a      	str	r2, [r3, #0]
}
 8004a4e:	bf00      	nop
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20000438 	.word	0x20000438
 8004a5c:	20000578 	.word	0x20000578
 8004a60:	2000058c 	.word	0x2000058c
 8004a64:	200005a8 	.word	0x200005a8
 8004a68:	200005bc 	.word	0x200005bc
 8004a6c:	200005d4 	.word	0x200005d4
 8004a70:	200005a0 	.word	0x200005a0
 8004a74:	200005a4 	.word	0x200005a4

08004a78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a7e:	e019      	b.n	8004ab4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a80:	f000 fda0 	bl	80055c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a84:	4b10      	ldr	r3, [pc, #64]	; (8004ac8 <prvCheckTasksWaitingTermination+0x50>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	3304      	adds	r3, #4
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fe fe33 	bl	80036fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a96:	4b0d      	ldr	r3, [pc, #52]	; (8004acc <prvCheckTasksWaitingTermination+0x54>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	4a0b      	ldr	r2, [pc, #44]	; (8004acc <prvCheckTasksWaitingTermination+0x54>)
 8004a9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004aa0:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <prvCheckTasksWaitingTermination+0x58>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	4a0a      	ldr	r2, [pc, #40]	; (8004ad0 <prvCheckTasksWaitingTermination+0x58>)
 8004aa8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004aaa:	f000 fdbb 	bl	8005624 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f810 	bl	8004ad4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ab4:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <prvCheckTasksWaitingTermination+0x58>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1e1      	bne.n	8004a80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004abc:	bf00      	nop
 8004abe:	bf00      	nop
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	200005bc 	.word	0x200005bc
 8004acc:	200005e8 	.word	0x200005e8
 8004ad0:	200005d0 	.word	0x200005d0

08004ad4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 ff55 	bl	8005990 <vPortFree>
			vPortFree( pxTCB );
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 ff52 	bl	8005990 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004aec:	bf00      	nop
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004afa:	4b0c      	ldr	r3, [pc, #48]	; (8004b2c <prvResetNextTaskUnblockTime+0x38>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d104      	bne.n	8004b0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b04:	4b0a      	ldr	r3, [pc, #40]	; (8004b30 <prvResetNextTaskUnblockTime+0x3c>)
 8004b06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b0c:	e008      	b.n	8004b20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b0e:	4b07      	ldr	r3, [pc, #28]	; (8004b2c <prvResetNextTaskUnblockTime+0x38>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	4a04      	ldr	r2, [pc, #16]	; (8004b30 <prvResetNextTaskUnblockTime+0x3c>)
 8004b1e:	6013      	str	r3, [r2, #0]
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	200005a0 	.word	0x200005a0
 8004b30:	20000608 	.word	0x20000608

08004b34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b3a:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <xTaskGetSchedulerState+0x34>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d102      	bne.n	8004b48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b42:	2301      	movs	r3, #1
 8004b44:	607b      	str	r3, [r7, #4]
 8004b46:	e008      	b.n	8004b5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b48:	4b08      	ldr	r3, [pc, #32]	; (8004b6c <xTaskGetSchedulerState+0x38>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d102      	bne.n	8004b56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b50:	2302      	movs	r3, #2
 8004b52:	607b      	str	r3, [r7, #4]
 8004b54:	e001      	b.n	8004b5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b56:	2300      	movs	r3, #0
 8004b58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b5a:	687b      	ldr	r3, [r7, #4]
	}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	200005f4 	.word	0x200005f4
 8004b6c:	20000610 	.word	0x20000610

08004b70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d06e      	beq.n	8004c64 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b86:	4b3a      	ldr	r3, [pc, #232]	; (8004c70 <xTaskPriorityDisinherit+0x100>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d00a      	beq.n	8004ba6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	60fb      	str	r3, [r7, #12]
}
 8004ba2:	bf00      	nop
 8004ba4:	e7fe      	b.n	8004ba4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10a      	bne.n	8004bc4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	60bb      	str	r3, [r7, #8]
}
 8004bc0:	bf00      	nop
 8004bc2:	e7fe      	b.n	8004bc2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc8:	1e5a      	subs	r2, r3, #1
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d044      	beq.n	8004c64 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d140      	bne.n	8004c64 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	3304      	adds	r3, #4
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fe fd88 	bl	80036fc <uxListRemove>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d115      	bne.n	8004c1e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf6:	491f      	ldr	r1, [pc, #124]	; (8004c74 <xTaskPriorityDisinherit+0x104>)
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	440b      	add	r3, r1
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10a      	bne.n	8004c1e <xTaskPriorityDisinherit+0xae>
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	43da      	mvns	r2, r3
 8004c14:	4b18      	ldr	r3, [pc, #96]	; (8004c78 <xTaskPriorityDisinherit+0x108>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	4a17      	ldr	r2, [pc, #92]	; (8004c78 <xTaskPriorityDisinherit+0x108>)
 8004c1c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	f1c3 0210 	rsb	r2, r3, #16
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	2201      	movs	r2, #1
 8004c38:	409a      	lsls	r2, r3
 8004c3a:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <xTaskPriorityDisinherit+0x108>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	4a0d      	ldr	r2, [pc, #52]	; (8004c78 <xTaskPriorityDisinherit+0x108>)
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c48:	4613      	mov	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4a08      	ldr	r2, [pc, #32]	; (8004c74 <xTaskPriorityDisinherit+0x104>)
 8004c52:	441a      	add	r2, r3
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	3304      	adds	r3, #4
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4610      	mov	r0, r2
 8004c5c:	f7fe fcf1 	bl	8003642 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c60:	2301      	movs	r3, #1
 8004c62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c64:	697b      	ldr	r3, [r7, #20]
	}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20000434 	.word	0x20000434
 8004c74:	20000438 	.word	0x20000438
 8004c78:	200005f0 	.word	0x200005f0

08004c7c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c86:	4b29      	ldr	r3, [pc, #164]	; (8004d2c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c8c:	4b28      	ldr	r3, [pc, #160]	; (8004d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3304      	adds	r3, #4
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fe fd32 	bl	80036fc <uxListRemove>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10b      	bne.n	8004cb6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004c9e:	4b24      	ldr	r3, [pc, #144]	; (8004d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	43da      	mvns	r2, r3
 8004cac:	4b21      	ldr	r3, [pc, #132]	; (8004d34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	4a20      	ldr	r2, [pc, #128]	; (8004d34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004cb4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cbc:	d10a      	bne.n	8004cd4 <prvAddCurrentTaskToDelayedList+0x58>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d007      	beq.n	8004cd4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cc4:	4b1a      	ldr	r3, [pc, #104]	; (8004d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	4619      	mov	r1, r3
 8004ccc:	481a      	ldr	r0, [pc, #104]	; (8004d38 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004cce:	f7fe fcb8 	bl	8003642 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004cd2:	e026      	b.n	8004d22 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4413      	add	r3, r2
 8004cda:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004cdc:	4b14      	ldr	r3, [pc, #80]	; (8004d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d209      	bcs.n	8004d00 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cec:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <prvAddCurrentTaskToDelayedList+0xc0>)
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	4b0f      	ldr	r3, [pc, #60]	; (8004d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	f7fe fcc6 	bl	800368a <vListInsert>
}
 8004cfe:	e010      	b.n	8004d22 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d00:	4b0f      	ldr	r3, [pc, #60]	; (8004d40 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	4b0a      	ldr	r3, [pc, #40]	; (8004d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	3304      	adds	r3, #4
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	f7fe fcbc 	bl	800368a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d12:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d202      	bcs.n	8004d22 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004d1c:	4a09      	ldr	r2, [pc, #36]	; (8004d44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	6013      	str	r3, [r2, #0]
}
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	200005ec 	.word	0x200005ec
 8004d30:	20000434 	.word	0x20000434
 8004d34:	200005f0 	.word	0x200005f0
 8004d38:	200005d4 	.word	0x200005d4
 8004d3c:	200005a4 	.word	0x200005a4
 8004d40:	200005a0 	.word	0x200005a0
 8004d44:	20000608 	.word	0x20000608

08004d48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d52:	f000 fad5 	bl	8005300 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d56:	4b11      	ldr	r3, [pc, #68]	; (8004d9c <xTimerCreateTimerTask+0x54>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00b      	beq.n	8004d76 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8004d5e:	4b10      	ldr	r3, [pc, #64]	; (8004da0 <xTimerCreateTimerTask+0x58>)
 8004d60:	9301      	str	r3, [sp, #4]
 8004d62:	2302      	movs	r3, #2
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	2300      	movs	r3, #0
 8004d68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004d6c:	490d      	ldr	r1, [pc, #52]	; (8004da4 <xTimerCreateTimerTask+0x5c>)
 8004d6e:	480e      	ldr	r0, [pc, #56]	; (8004da8 <xTimerCreateTimerTask+0x60>)
 8004d70:	f7ff f99a 	bl	80040a8 <xTaskCreate>
 8004d74:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10a      	bne.n	8004d92 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d80:	f383 8811 	msr	BASEPRI, r3
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	603b      	str	r3, [r7, #0]
}
 8004d8e:	bf00      	nop
 8004d90:	e7fe      	b.n	8004d90 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8004d92:	687b      	ldr	r3, [r7, #4]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	20000644 	.word	0x20000644
 8004da0:	20000648 	.word	0x20000648
 8004da4:	08006554 	.word	0x08006554
 8004da8:	08004ee1 	.word	0x08004ee1

08004dac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08a      	sub	sp, #40	; 0x28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
 8004db8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10a      	bne.n	8004dda <xTimerGenericCommand+0x2e>
	__asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	623b      	str	r3, [r7, #32]
}
 8004dd6:	bf00      	nop
 8004dd8:	e7fe      	b.n	8004dd8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004dda:	4b1a      	ldr	r3, [pc, #104]	; (8004e44 <xTimerGenericCommand+0x98>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d02a      	beq.n	8004e38 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b05      	cmp	r3, #5
 8004df2:	dc18      	bgt.n	8004e26 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004df4:	f7ff fe9e 	bl	8004b34 <xTaskGetSchedulerState>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d109      	bne.n	8004e12 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004dfe:	4b11      	ldr	r3, [pc, #68]	; (8004e44 <xTimerGenericCommand+0x98>)
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	f107 0114 	add.w	r1, r7, #20
 8004e06:	2300      	movs	r3, #0
 8004e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e0a:	f7fe fd69 	bl	80038e0 <xQueueGenericSend>
 8004e0e:	6278      	str	r0, [r7, #36]	; 0x24
 8004e10:	e012      	b.n	8004e38 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e12:	4b0c      	ldr	r3, [pc, #48]	; (8004e44 <xTimerGenericCommand+0x98>)
 8004e14:	6818      	ldr	r0, [r3, #0]
 8004e16:	f107 0114 	add.w	r1, r7, #20
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f7fe fd5f 	bl	80038e0 <xQueueGenericSend>
 8004e22:	6278      	str	r0, [r7, #36]	; 0x24
 8004e24:	e008      	b.n	8004e38 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e26:	4b07      	ldr	r3, [pc, #28]	; (8004e44 <xTimerGenericCommand+0x98>)
 8004e28:	6818      	ldr	r0, [r3, #0]
 8004e2a:	f107 0114 	add.w	r1, r7, #20
 8004e2e:	2300      	movs	r3, #0
 8004e30:	683a      	ldr	r2, [r7, #0]
 8004e32:	f7fe fe53 	bl	8003adc <xQueueGenericSendFromISR>
 8004e36:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3728      	adds	r7, #40	; 0x28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20000644 	.word	0x20000644

08004e48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e52:	4b22      	ldr	r3, [pc, #136]	; (8004edc <prvProcessExpiredTimer+0x94>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7fe fc4b 	bl	80036fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d022      	beq.n	8004eba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	699a      	ldr	r2, [r3, #24]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	18d1      	adds	r1, r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	6978      	ldr	r0, [r7, #20]
 8004e82:	f000 f8d1 	bl	8005028 <prvInsertTimerInActiveList>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d01f      	beq.n	8004ecc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	2300      	movs	r3, #0
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	2100      	movs	r1, #0
 8004e96:	6978      	ldr	r0, [r7, #20]
 8004e98:	f7ff ff88 	bl	8004dac <xTimerGenericCommand>
 8004e9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d113      	bne.n	8004ecc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	60fb      	str	r3, [r7, #12]
}
 8004eb6:	bf00      	nop
 8004eb8:	e7fe      	b.n	8004eb8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ec0:	f023 0301 	bic.w	r3, r3, #1
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	6978      	ldr	r0, [r7, #20]
 8004ed2:	4798      	blx	r3
}
 8004ed4:	bf00      	nop
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	2000063c 	.word	0x2000063c

08004ee0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ee8:	f107 0308 	add.w	r3, r7, #8
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 f857 	bl	8004fa0 <prvGetNextExpireTime>
 8004ef2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 f803 	bl	8004f04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004efe:	f000 f8d5 	bl	80050ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f02:	e7f1      	b.n	8004ee8 <prvTimerTask+0x8>

08004f04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f0e:	f7ff fa57 	bl	80043c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f12:	f107 0308 	add.w	r3, r7, #8
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 f866 	bl	8004fe8 <prvSampleTimeNow>
 8004f1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d130      	bne.n	8004f86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10a      	bne.n	8004f40 <prvProcessTimerOrBlockTask+0x3c>
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d806      	bhi.n	8004f40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004f32:	f7ff fa53 	bl	80043dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f36:	68f9      	ldr	r1, [r7, #12]
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7ff ff85 	bl	8004e48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f3e:	e024      	b.n	8004f8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d008      	beq.n	8004f58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f46:	4b13      	ldr	r3, [pc, #76]	; (8004f94 <prvProcessTimerOrBlockTask+0x90>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <prvProcessTimerOrBlockTask+0x50>
 8004f50:	2301      	movs	r3, #1
 8004f52:	e000      	b.n	8004f56 <prvProcessTimerOrBlockTask+0x52>
 8004f54:	2300      	movs	r3, #0
 8004f56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f58:	4b0f      	ldr	r3, [pc, #60]	; (8004f98 <prvProcessTimerOrBlockTask+0x94>)
 8004f5a:	6818      	ldr	r0, [r3, #0]
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	4619      	mov	r1, r3
 8004f66:	f7ff f86b 	bl	8004040 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f6a:	f7ff fa37 	bl	80043dc <xTaskResumeAll>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10a      	bne.n	8004f8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004f74:	4b09      	ldr	r3, [pc, #36]	; (8004f9c <prvProcessTimerOrBlockTask+0x98>)
 8004f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	f3bf 8f6f 	isb	sy
}
 8004f84:	e001      	b.n	8004f8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004f86:	f7ff fa29 	bl	80043dc <xTaskResumeAll>
}
 8004f8a:	bf00      	nop
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20000640 	.word	0x20000640
 8004f98:	20000644 	.word	0x20000644
 8004f9c:	e000ed04 	.word	0xe000ed04

08004fa0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004fa8:	4b0e      	ldr	r3, [pc, #56]	; (8004fe4 <prvGetNextExpireTime+0x44>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <prvGetNextExpireTime+0x16>
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	e000      	b.n	8004fb8 <prvGetNextExpireTime+0x18>
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d105      	bne.n	8004fd0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fc4:	4b07      	ldr	r3, [pc, #28]	; (8004fe4 <prvGetNextExpireTime+0x44>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	e001      	b.n	8004fd4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	2000063c 	.word	0x2000063c

08004fe8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004ff0:	f7ff fa90 	bl	8004514 <xTaskGetTickCount>
 8004ff4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004ff6:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <prvSampleTimeNow+0x3c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d205      	bcs.n	800500c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005000:	f000 f91a 	bl	8005238 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	e002      	b.n	8005012 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005012:	4a04      	ldr	r2, [pc, #16]	; (8005024 <prvSampleTimeNow+0x3c>)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005018:	68fb      	ldr	r3, [r7, #12]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	2000064c 	.word	0x2000064c

08005028 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005036:	2300      	movs	r3, #0
 8005038:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	429a      	cmp	r2, r3
 800504c:	d812      	bhi.n	8005074 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	1ad2      	subs	r2, r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	429a      	cmp	r2, r3
 800505a:	d302      	bcc.n	8005062 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800505c:	2301      	movs	r3, #1
 800505e:	617b      	str	r3, [r7, #20]
 8005060:	e01b      	b.n	800509a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005062:	4b10      	ldr	r3, [pc, #64]	; (80050a4 <prvInsertTimerInActiveList+0x7c>)
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	3304      	adds	r3, #4
 800506a:	4619      	mov	r1, r3
 800506c:	4610      	mov	r0, r2
 800506e:	f7fe fb0c 	bl	800368a <vListInsert>
 8005072:	e012      	b.n	800509a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	429a      	cmp	r2, r3
 800507a:	d206      	bcs.n	800508a <prvInsertTimerInActiveList+0x62>
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d302      	bcc.n	800508a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005084:	2301      	movs	r3, #1
 8005086:	617b      	str	r3, [r7, #20]
 8005088:	e007      	b.n	800509a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800508a:	4b07      	ldr	r3, [pc, #28]	; (80050a8 <prvInsertTimerInActiveList+0x80>)
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3304      	adds	r3, #4
 8005092:	4619      	mov	r1, r3
 8005094:	4610      	mov	r0, r2
 8005096:	f7fe faf8 	bl	800368a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800509a:	697b      	ldr	r3, [r7, #20]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	20000640 	.word	0x20000640
 80050a8:	2000063c 	.word	0x2000063c

080050ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08c      	sub	sp, #48	; 0x30
 80050b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050b2:	e0ae      	b.n	8005212 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f2c0 80aa 	blt.w	8005210 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d004      	beq.n	80050d2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	3304      	adds	r3, #4
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fe fb15 	bl	80036fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050d2:	1d3b      	adds	r3, r7, #4
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff ff87 	bl	8004fe8 <prvSampleTimeNow>
 80050da:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2b09      	cmp	r3, #9
 80050e0:	f200 8097 	bhi.w	8005212 <prvProcessReceivedCommands+0x166>
 80050e4:	a201      	add	r2, pc, #4	; (adr r2, 80050ec <prvProcessReceivedCommands+0x40>)
 80050e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ea:	bf00      	nop
 80050ec:	08005115 	.word	0x08005115
 80050f0:	08005115 	.word	0x08005115
 80050f4:	08005115 	.word	0x08005115
 80050f8:	08005189 	.word	0x08005189
 80050fc:	0800519d 	.word	0x0800519d
 8005100:	080051e7 	.word	0x080051e7
 8005104:	08005115 	.word	0x08005115
 8005108:	08005115 	.word	0x08005115
 800510c:	08005189 	.word	0x08005189
 8005110:	0800519d 	.word	0x0800519d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800511a:	f043 0301 	orr.w	r3, r3, #1
 800511e:	b2da      	uxtb	r2, r3
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	18d1      	adds	r1, r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6a3a      	ldr	r2, [r7, #32]
 8005132:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005134:	f7ff ff78 	bl	8005028 <prvInsertTimerInActiveList>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d069      	beq.n	8005212 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005144:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b00      	cmp	r3, #0
 8005152:	d05e      	beq.n	8005212 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	441a      	add	r2, r3
 800515c:	2300      	movs	r3, #0
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	2300      	movs	r3, #0
 8005162:	2100      	movs	r1, #0
 8005164:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005166:	f7ff fe21 	bl	8004dac <xTimerGenericCommand>
 800516a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d14f      	bne.n	8005212 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8005172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005176:	f383 8811 	msr	BASEPRI, r3
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	61bb      	str	r3, [r7, #24]
}
 8005184:	bf00      	nop
 8005186:	e7fe      	b.n	8005186 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800518e:	f023 0301 	bic.w	r3, r3, #1
 8005192:	b2da      	uxtb	r2, r3
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800519a:	e03a      	b.n	8005212 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051a2:	f043 0301 	orr.w	r3, r3, #1
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10a      	bne.n	80051d2 <prvProcessReceivedCommands+0x126>
	__asm volatile
 80051bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c0:	f383 8811 	msr	BASEPRI, r3
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	617b      	str	r3, [r7, #20]
}
 80051ce:	bf00      	nop
 80051d0:	e7fe      	b.n	80051d0 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	699a      	ldr	r2, [r3, #24]
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	18d1      	adds	r1, r2, r3
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	6a3a      	ldr	r2, [r7, #32]
 80051de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051e0:	f7ff ff22 	bl	8005028 <prvInsertTimerInActiveList>
					break;
 80051e4:	e015      	b.n	8005212 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d103      	bne.n	80051fc <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 80051f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051f6:	f000 fbcb 	bl	8005990 <vPortFree>
 80051fa:	e00a      	b.n	8005212 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005202:	f023 0301 	bic.w	r3, r3, #1
 8005206:	b2da      	uxtb	r2, r3
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800520e:	e000      	b.n	8005212 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005210:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005212:	4b08      	ldr	r3, [pc, #32]	; (8005234 <prvProcessReceivedCommands+0x188>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f107 0108 	add.w	r1, r7, #8
 800521a:	2200      	movs	r2, #0
 800521c:	4618      	mov	r0, r3
 800521e:	f7fe fcf5 	bl	8003c0c <xQueueReceive>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	f47f af45 	bne.w	80050b4 <prvProcessReceivedCommands+0x8>
	}
}
 800522a:	bf00      	nop
 800522c:	bf00      	nop
 800522e:	3728      	adds	r7, #40	; 0x28
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	20000644 	.word	0x20000644

08005238 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b088      	sub	sp, #32
 800523c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800523e:	e048      	b.n	80052d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005240:	4b2d      	ldr	r3, [pc, #180]	; (80052f8 <prvSwitchTimerLists+0xc0>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800524a:	4b2b      	ldr	r3, [pc, #172]	; (80052f8 <prvSwitchTimerLists+0xc0>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	3304      	adds	r3, #4
 8005258:	4618      	mov	r0, r3
 800525a:	f7fe fa4f 	bl	80036fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	d02e      	beq.n	80052d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	4413      	add	r3, r2
 800527c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	429a      	cmp	r2, r3
 8005284:	d90e      	bls.n	80052a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005292:	4b19      	ldr	r3, [pc, #100]	; (80052f8 <prvSwitchTimerLists+0xc0>)
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	3304      	adds	r3, #4
 800529a:	4619      	mov	r1, r3
 800529c:	4610      	mov	r0, r2
 800529e:	f7fe f9f4 	bl	800368a <vListInsert>
 80052a2:	e016      	b.n	80052d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052a4:	2300      	movs	r3, #0
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	2300      	movs	r3, #0
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	2100      	movs	r1, #0
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f7ff fd7c 	bl	8004dac <xTimerGenericCommand>
 80052b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10a      	bne.n	80052d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	603b      	str	r3, [r7, #0]
}
 80052ce:	bf00      	nop
 80052d0:	e7fe      	b.n	80052d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052d2:	4b09      	ldr	r3, [pc, #36]	; (80052f8 <prvSwitchTimerLists+0xc0>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1b1      	bne.n	8005240 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80052dc:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <prvSwitchTimerLists+0xc0>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80052e2:	4b06      	ldr	r3, [pc, #24]	; (80052fc <prvSwitchTimerLists+0xc4>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a04      	ldr	r2, [pc, #16]	; (80052f8 <prvSwitchTimerLists+0xc0>)
 80052e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80052ea:	4a04      	ldr	r2, [pc, #16]	; (80052fc <prvSwitchTimerLists+0xc4>)
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	6013      	str	r3, [r2, #0]
}
 80052f0:	bf00      	nop
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	2000063c 	.word	0x2000063c
 80052fc:	20000640 	.word	0x20000640

08005300 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005304:	f000 f95e 	bl	80055c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005308:	4b12      	ldr	r3, [pc, #72]	; (8005354 <prvCheckForValidListAndQueue+0x54>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d11d      	bne.n	800534c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8005310:	4811      	ldr	r0, [pc, #68]	; (8005358 <prvCheckForValidListAndQueue+0x58>)
 8005312:	f7fe f969 	bl	80035e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005316:	4811      	ldr	r0, [pc, #68]	; (800535c <prvCheckForValidListAndQueue+0x5c>)
 8005318:	f7fe f966 	bl	80035e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800531c:	4b10      	ldr	r3, [pc, #64]	; (8005360 <prvCheckForValidListAndQueue+0x60>)
 800531e:	4a0e      	ldr	r2, [pc, #56]	; (8005358 <prvCheckForValidListAndQueue+0x58>)
 8005320:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005322:	4b10      	ldr	r3, [pc, #64]	; (8005364 <prvCheckForValidListAndQueue+0x64>)
 8005324:	4a0d      	ldr	r2, [pc, #52]	; (800535c <prvCheckForValidListAndQueue+0x5c>)
 8005326:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005328:	2200      	movs	r2, #0
 800532a:	210c      	movs	r1, #12
 800532c:	200a      	movs	r0, #10
 800532e:	f7fe fa77 	bl	8003820 <xQueueGenericCreate>
 8005332:	4603      	mov	r3, r0
 8005334:	4a07      	ldr	r2, [pc, #28]	; (8005354 <prvCheckForValidListAndQueue+0x54>)
 8005336:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005338:	4b06      	ldr	r3, [pc, #24]	; (8005354 <prvCheckForValidListAndQueue+0x54>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d005      	beq.n	800534c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005340:	4b04      	ldr	r3, [pc, #16]	; (8005354 <prvCheckForValidListAndQueue+0x54>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4908      	ldr	r1, [pc, #32]	; (8005368 <prvCheckForValidListAndQueue+0x68>)
 8005346:	4618      	mov	r0, r3
 8005348:	f7fe fe50 	bl	8003fec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800534c:	f000 f96a 	bl	8005624 <vPortExitCritical>
}
 8005350:	bf00      	nop
 8005352:	bd80      	pop	{r7, pc}
 8005354:	20000644 	.word	0x20000644
 8005358:	20000614 	.word	0x20000614
 800535c:	20000628 	.word	0x20000628
 8005360:	2000063c 	.word	0x2000063c
 8005364:	20000640 	.word	0x20000640
 8005368:	0800655c 	.word	0x0800655c

0800536c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	3b04      	subs	r3, #4
 800537c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005384:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	3b04      	subs	r3, #4
 800538a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f023 0201 	bic.w	r2, r3, #1
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	3b04      	subs	r3, #4
 800539a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800539c:	4a0c      	ldr	r2, [pc, #48]	; (80053d0 <pxPortInitialiseStack+0x64>)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	3b14      	subs	r3, #20
 80053a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	3b04      	subs	r3, #4
 80053b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f06f 0202 	mvn.w	r2, #2
 80053ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	3b20      	subs	r3, #32
 80053c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80053c2:	68fb      	ldr	r3, [r7, #12]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	080053d5 	.word	0x080053d5

080053d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80053da:	2300      	movs	r3, #0
 80053dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80053de:	4b12      	ldr	r3, [pc, #72]	; (8005428 <prvTaskExitError+0x54>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053e6:	d00a      	beq.n	80053fe <prvTaskExitError+0x2a>
	__asm volatile
 80053e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	60fb      	str	r3, [r7, #12]
}
 80053fa:	bf00      	nop
 80053fc:	e7fe      	b.n	80053fc <prvTaskExitError+0x28>
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	60bb      	str	r3, [r7, #8]
}
 8005410:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005412:	bf00      	nop
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0fc      	beq.n	8005414 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800541a:	bf00      	nop
 800541c:	bf00      	nop
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	20000028 	.word	0x20000028
 800542c:	00000000 	.word	0x00000000

08005430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005430:	4b07      	ldr	r3, [pc, #28]	; (8005450 <pxCurrentTCBConst2>)
 8005432:	6819      	ldr	r1, [r3, #0]
 8005434:	6808      	ldr	r0, [r1, #0]
 8005436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800543a:	f380 8809 	msr	PSP, r0
 800543e:	f3bf 8f6f 	isb	sy
 8005442:	f04f 0000 	mov.w	r0, #0
 8005446:	f380 8811 	msr	BASEPRI, r0
 800544a:	4770      	bx	lr
 800544c:	f3af 8000 	nop.w

08005450 <pxCurrentTCBConst2>:
 8005450:	20000434 	.word	0x20000434
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005454:	bf00      	nop
 8005456:	bf00      	nop

08005458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005458:	4808      	ldr	r0, [pc, #32]	; (800547c <prvPortStartFirstTask+0x24>)
 800545a:	6800      	ldr	r0, [r0, #0]
 800545c:	6800      	ldr	r0, [r0, #0]
 800545e:	f380 8808 	msr	MSP, r0
 8005462:	f04f 0000 	mov.w	r0, #0
 8005466:	f380 8814 	msr	CONTROL, r0
 800546a:	b662      	cpsie	i
 800546c:	b661      	cpsie	f
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	df00      	svc	0
 8005478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800547a:	bf00      	nop
 800547c:	e000ed08 	.word	0xe000ed08

08005480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005486:	4b46      	ldr	r3, [pc, #280]	; (80055a0 <xPortStartScheduler+0x120>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a46      	ldr	r2, [pc, #280]	; (80055a4 <xPortStartScheduler+0x124>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d10a      	bne.n	80054a6 <xPortStartScheduler+0x26>
	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	613b      	str	r3, [r7, #16]
}
 80054a2:	bf00      	nop
 80054a4:	e7fe      	b.n	80054a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80054a6:	4b3e      	ldr	r3, [pc, #248]	; (80055a0 <xPortStartScheduler+0x120>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a3f      	ldr	r2, [pc, #252]	; (80055a8 <xPortStartScheduler+0x128>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d10a      	bne.n	80054c6 <xPortStartScheduler+0x46>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	60fb      	str	r3, [r7, #12]
}
 80054c2:	bf00      	nop
 80054c4:	e7fe      	b.n	80054c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80054c6:	4b39      	ldr	r3, [pc, #228]	; (80055ac <xPortStartScheduler+0x12c>)
 80054c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	22ff      	movs	r2, #255	; 0xff
 80054d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80054e0:	78fb      	ldrb	r3, [r7, #3]
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	4b31      	ldr	r3, [pc, #196]	; (80055b0 <xPortStartScheduler+0x130>)
 80054ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80054ee:	4b31      	ldr	r3, [pc, #196]	; (80055b4 <xPortStartScheduler+0x134>)
 80054f0:	2207      	movs	r2, #7
 80054f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054f4:	e009      	b.n	800550a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80054f6:	4b2f      	ldr	r3, [pc, #188]	; (80055b4 <xPortStartScheduler+0x134>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	4a2d      	ldr	r2, [pc, #180]	; (80055b4 <xPortStartScheduler+0x134>)
 80054fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	b2db      	uxtb	r3, r3
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	b2db      	uxtb	r3, r3
 8005508:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800550a:	78fb      	ldrb	r3, [r7, #3]
 800550c:	b2db      	uxtb	r3, r3
 800550e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005512:	2b80      	cmp	r3, #128	; 0x80
 8005514:	d0ef      	beq.n	80054f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005516:	4b27      	ldr	r3, [pc, #156]	; (80055b4 <xPortStartScheduler+0x134>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f1c3 0307 	rsb	r3, r3, #7
 800551e:	2b04      	cmp	r3, #4
 8005520:	d00a      	beq.n	8005538 <xPortStartScheduler+0xb8>
	__asm volatile
 8005522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	60bb      	str	r3, [r7, #8]
}
 8005534:	bf00      	nop
 8005536:	e7fe      	b.n	8005536 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005538:	4b1e      	ldr	r3, [pc, #120]	; (80055b4 <xPortStartScheduler+0x134>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	021b      	lsls	r3, r3, #8
 800553e:	4a1d      	ldr	r2, [pc, #116]	; (80055b4 <xPortStartScheduler+0x134>)
 8005540:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005542:	4b1c      	ldr	r3, [pc, #112]	; (80055b4 <xPortStartScheduler+0x134>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800554a:	4a1a      	ldr	r2, [pc, #104]	; (80055b4 <xPortStartScheduler+0x134>)
 800554c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	b2da      	uxtb	r2, r3
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005556:	4b18      	ldr	r3, [pc, #96]	; (80055b8 <xPortStartScheduler+0x138>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a17      	ldr	r2, [pc, #92]	; (80055b8 <xPortStartScheduler+0x138>)
 800555c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005560:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005562:	4b15      	ldr	r3, [pc, #84]	; (80055b8 <xPortStartScheduler+0x138>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a14      	ldr	r2, [pc, #80]	; (80055b8 <xPortStartScheduler+0x138>)
 8005568:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800556c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800556e:	f000 f8dd 	bl	800572c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005572:	4b12      	ldr	r3, [pc, #72]	; (80055bc <xPortStartScheduler+0x13c>)
 8005574:	2200      	movs	r2, #0
 8005576:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005578:	f000 f8fc 	bl	8005774 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800557c:	4b10      	ldr	r3, [pc, #64]	; (80055c0 <xPortStartScheduler+0x140>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a0f      	ldr	r2, [pc, #60]	; (80055c0 <xPortStartScheduler+0x140>)
 8005582:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005586:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005588:	f7ff ff66 	bl	8005458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800558c:	f7ff f88a 	bl	80046a4 <vTaskSwitchContext>
	prvTaskExitError();
 8005590:	f7ff ff20 	bl	80053d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3718      	adds	r7, #24
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	e000ed00 	.word	0xe000ed00
 80055a4:	410fc271 	.word	0x410fc271
 80055a8:	410fc270 	.word	0x410fc270
 80055ac:	e000e400 	.word	0xe000e400
 80055b0:	20000650 	.word	0x20000650
 80055b4:	20000654 	.word	0x20000654
 80055b8:	e000ed20 	.word	0xe000ed20
 80055bc:	20000028 	.word	0x20000028
 80055c0:	e000ef34 	.word	0xe000ef34

080055c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
	__asm volatile
 80055ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ce:	f383 8811 	msr	BASEPRI, r3
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	607b      	str	r3, [r7, #4]
}
 80055dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80055de:	4b0f      	ldr	r3, [pc, #60]	; (800561c <vPortEnterCritical+0x58>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	3301      	adds	r3, #1
 80055e4:	4a0d      	ldr	r2, [pc, #52]	; (800561c <vPortEnterCritical+0x58>)
 80055e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80055e8:	4b0c      	ldr	r3, [pc, #48]	; (800561c <vPortEnterCritical+0x58>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d10f      	bne.n	8005610 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80055f0:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <vPortEnterCritical+0x5c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00a      	beq.n	8005610 <vPortEnterCritical+0x4c>
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	603b      	str	r3, [r7, #0]
}
 800560c:	bf00      	nop
 800560e:	e7fe      	b.n	800560e <vPortEnterCritical+0x4a>
	}
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	20000028 	.word	0x20000028
 8005620:	e000ed04 	.word	0xe000ed04

08005624 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800562a:	4b12      	ldr	r3, [pc, #72]	; (8005674 <vPortExitCritical+0x50>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10a      	bne.n	8005648 <vPortExitCritical+0x24>
	__asm volatile
 8005632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	607b      	str	r3, [r7, #4]
}
 8005644:	bf00      	nop
 8005646:	e7fe      	b.n	8005646 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005648:	4b0a      	ldr	r3, [pc, #40]	; (8005674 <vPortExitCritical+0x50>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3b01      	subs	r3, #1
 800564e:	4a09      	ldr	r2, [pc, #36]	; (8005674 <vPortExitCritical+0x50>)
 8005650:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005652:	4b08      	ldr	r3, [pc, #32]	; (8005674 <vPortExitCritical+0x50>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d105      	bne.n	8005666 <vPortExitCritical+0x42>
 800565a:	2300      	movs	r3, #0
 800565c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	f383 8811 	msr	BASEPRI, r3
}
 8005664:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	20000028 	.word	0x20000028
	...

08005680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005680:	f3ef 8009 	mrs	r0, PSP
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	4b15      	ldr	r3, [pc, #84]	; (80056e0 <pxCurrentTCBConst>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	f01e 0f10 	tst.w	lr, #16
 8005690:	bf08      	it	eq
 8005692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800569a:	6010      	str	r0, [r2, #0]
 800569c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80056a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80056a4:	f380 8811 	msr	BASEPRI, r0
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f7fe fff8 	bl	80046a4 <vTaskSwitchContext>
 80056b4:	f04f 0000 	mov.w	r0, #0
 80056b8:	f380 8811 	msr	BASEPRI, r0
 80056bc:	bc09      	pop	{r0, r3}
 80056be:	6819      	ldr	r1, [r3, #0]
 80056c0:	6808      	ldr	r0, [r1, #0]
 80056c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c6:	f01e 0f10 	tst.w	lr, #16
 80056ca:	bf08      	it	eq
 80056cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80056d0:	f380 8809 	msr	PSP, r0
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	f3af 8000 	nop.w

080056e0 <pxCurrentTCBConst>:
 80056e0:	20000434 	.word	0x20000434
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80056e4:	bf00      	nop
 80056e6:	bf00      	nop

080056e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	607b      	str	r3, [r7, #4]
}
 8005700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005702:	f7fe ff17 	bl	8004534 <xTaskIncrementTick>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800570c:	4b06      	ldr	r3, [pc, #24]	; (8005728 <SysTick_Handler+0x40>)
 800570e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	2300      	movs	r3, #0
 8005716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	f383 8811 	msr	BASEPRI, r3
}
 800571e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005720:	bf00      	nop
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	e000ed04 	.word	0xe000ed04

0800572c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800572c:	b480      	push	{r7}
 800572e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005730:	4b0b      	ldr	r3, [pc, #44]	; (8005760 <vPortSetupTimerInterrupt+0x34>)
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005736:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <vPortSetupTimerInterrupt+0x38>)
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800573c:	4b0a      	ldr	r3, [pc, #40]	; (8005768 <vPortSetupTimerInterrupt+0x3c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a0a      	ldr	r2, [pc, #40]	; (800576c <vPortSetupTimerInterrupt+0x40>)
 8005742:	fba2 2303 	umull	r2, r3, r2, r3
 8005746:	099b      	lsrs	r3, r3, #6
 8005748:	4a09      	ldr	r2, [pc, #36]	; (8005770 <vPortSetupTimerInterrupt+0x44>)
 800574a:	3b01      	subs	r3, #1
 800574c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800574e:	4b04      	ldr	r3, [pc, #16]	; (8005760 <vPortSetupTimerInterrupt+0x34>)
 8005750:	2207      	movs	r2, #7
 8005752:	601a      	str	r2, [r3, #0]
}
 8005754:	bf00      	nop
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	e000e010 	.word	0xe000e010
 8005764:	e000e018 	.word	0xe000e018
 8005768:	2000001c 	.word	0x2000001c
 800576c:	10624dd3 	.word	0x10624dd3
 8005770:	e000e014 	.word	0xe000e014

08005774 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005774:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005784 <vPortEnableVFP+0x10>
 8005778:	6801      	ldr	r1, [r0, #0]
 800577a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800577e:	6001      	str	r1, [r0, #0]
 8005780:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005782:	bf00      	nop
 8005784:	e000ed88 	.word	0xe000ed88

08005788 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800578e:	f3ef 8305 	mrs	r3, IPSR
 8005792:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2b0f      	cmp	r3, #15
 8005798:	d914      	bls.n	80057c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800579a:	4a17      	ldr	r2, [pc, #92]	; (80057f8 <vPortValidateInterruptPriority+0x70>)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4413      	add	r3, r2
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80057a4:	4b15      	ldr	r3, [pc, #84]	; (80057fc <vPortValidateInterruptPriority+0x74>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	7afa      	ldrb	r2, [r7, #11]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d20a      	bcs.n	80057c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80057ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	607b      	str	r3, [r7, #4]
}
 80057c0:	bf00      	nop
 80057c2:	e7fe      	b.n	80057c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80057c4:	4b0e      	ldr	r3, [pc, #56]	; (8005800 <vPortValidateInterruptPriority+0x78>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80057cc:	4b0d      	ldr	r3, [pc, #52]	; (8005804 <vPortValidateInterruptPriority+0x7c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d90a      	bls.n	80057ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80057d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d8:	f383 8811 	msr	BASEPRI, r3
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	603b      	str	r3, [r7, #0]
}
 80057e6:	bf00      	nop
 80057e8:	e7fe      	b.n	80057e8 <vPortValidateInterruptPriority+0x60>
	}
 80057ea:	bf00      	nop
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	e000e3f0 	.word	0xe000e3f0
 80057fc:	20000650 	.word	0x20000650
 8005800:	e000ed0c 	.word	0xe000ed0c
 8005804:	20000654 	.word	0x20000654

08005808 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b08a      	sub	sp, #40	; 0x28
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005810:	2300      	movs	r3, #0
 8005812:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005814:	f7fe fdd4 	bl	80043c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005818:	4b58      	ldr	r3, [pc, #352]	; (800597c <pvPortMalloc+0x174>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005820:	f000 f910 	bl	8005a44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005824:	4b56      	ldr	r3, [pc, #344]	; (8005980 <pvPortMalloc+0x178>)
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4013      	ands	r3, r2
 800582c:	2b00      	cmp	r3, #0
 800582e:	f040 808e 	bne.w	800594e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d01d      	beq.n	8005874 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005838:	2208      	movs	r2, #8
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4413      	add	r3, r2
 800583e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	2b00      	cmp	r3, #0
 8005848:	d014      	beq.n	8005874 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f023 0307 	bic.w	r3, r3, #7
 8005850:	3308      	adds	r3, #8
 8005852:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <pvPortMalloc+0x6c>
	__asm volatile
 800585e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	617b      	str	r3, [r7, #20]
}
 8005870:	bf00      	nop
 8005872:	e7fe      	b.n	8005872 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d069      	beq.n	800594e <pvPortMalloc+0x146>
 800587a:	4b42      	ldr	r3, [pc, #264]	; (8005984 <pvPortMalloc+0x17c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	429a      	cmp	r2, r3
 8005882:	d864      	bhi.n	800594e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005884:	4b40      	ldr	r3, [pc, #256]	; (8005988 <pvPortMalloc+0x180>)
 8005886:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005888:	4b3f      	ldr	r3, [pc, #252]	; (8005988 <pvPortMalloc+0x180>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800588e:	e004      	b.n	800589a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d903      	bls.n	80058ac <pvPortMalloc+0xa4>
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1f1      	bne.n	8005890 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80058ac:	4b33      	ldr	r3, [pc, #204]	; (800597c <pvPortMalloc+0x174>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d04b      	beq.n	800594e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2208      	movs	r2, #8
 80058bc:	4413      	add	r3, r2
 80058be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	1ad2      	subs	r2, r2, r3
 80058d0:	2308      	movs	r3, #8
 80058d2:	005b      	lsls	r3, r3, #1
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d91f      	bls.n	8005918 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4413      	add	r3, r2
 80058de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	f003 0307 	and.w	r3, r3, #7
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <pvPortMalloc+0xf8>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	613b      	str	r3, [r7, #16]
}
 80058fc:	bf00      	nop
 80058fe:	e7fe      	b.n	80058fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	1ad2      	subs	r2, r2, r3
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005912:	69b8      	ldr	r0, [r7, #24]
 8005914:	f000 f8f8 	bl	8005b08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005918:	4b1a      	ldr	r3, [pc, #104]	; (8005984 <pvPortMalloc+0x17c>)
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	4a18      	ldr	r2, [pc, #96]	; (8005984 <pvPortMalloc+0x17c>)
 8005924:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005926:	4b17      	ldr	r3, [pc, #92]	; (8005984 <pvPortMalloc+0x17c>)
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	4b18      	ldr	r3, [pc, #96]	; (800598c <pvPortMalloc+0x184>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	429a      	cmp	r2, r3
 8005930:	d203      	bcs.n	800593a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005932:	4b14      	ldr	r3, [pc, #80]	; (8005984 <pvPortMalloc+0x17c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a15      	ldr	r2, [pc, #84]	; (800598c <pvPortMalloc+0x184>)
 8005938:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	4b10      	ldr	r3, [pc, #64]	; (8005980 <pvPortMalloc+0x178>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	431a      	orrs	r2, r3
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800594e:	f7fe fd45 	bl	80043dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00a      	beq.n	8005972 <pvPortMalloc+0x16a>
	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	60fb      	str	r3, [r7, #12]
}
 800596e:	bf00      	nop
 8005970:	e7fe      	b.n	8005970 <pvPortMalloc+0x168>
	return pvReturn;
 8005972:	69fb      	ldr	r3, [r7, #28]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3728      	adds	r7, #40	; 0x28
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	20013260 	.word	0x20013260
 8005980:	2001326c 	.word	0x2001326c
 8005984:	20013264 	.word	0x20013264
 8005988:	20013258 	.word	0x20013258
 800598c:	20013268 	.word	0x20013268

08005990 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d048      	beq.n	8005a34 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80059a2:	2308      	movs	r3, #8
 80059a4:	425b      	negs	r3, r3
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4413      	add	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	4b21      	ldr	r3, [pc, #132]	; (8005a3c <vPortFree+0xac>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4013      	ands	r3, r2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10a      	bne.n	80059d4 <vPortFree+0x44>
	__asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	60fb      	str	r3, [r7, #12]
}
 80059d0:	bf00      	nop
 80059d2:	e7fe      	b.n	80059d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00a      	beq.n	80059f2 <vPortFree+0x62>
	__asm volatile
 80059dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	60bb      	str	r3, [r7, #8]
}
 80059ee:	bf00      	nop
 80059f0:	e7fe      	b.n	80059f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	4b11      	ldr	r3, [pc, #68]	; (8005a3c <vPortFree+0xac>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4013      	ands	r3, r2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d019      	beq.n	8005a34 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d115      	bne.n	8005a34 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <vPortFree+0xac>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	43db      	mvns	r3, r3
 8005a12:	401a      	ands	r2, r3
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a18:	f7fe fcd2 	bl	80043c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	4b07      	ldr	r3, [pc, #28]	; (8005a40 <vPortFree+0xb0>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4413      	add	r3, r2
 8005a26:	4a06      	ldr	r2, [pc, #24]	; (8005a40 <vPortFree+0xb0>)
 8005a28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a2a:	6938      	ldr	r0, [r7, #16]
 8005a2c:	f000 f86c 	bl	8005b08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005a30:	f7fe fcd4 	bl	80043dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a34:	bf00      	nop
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	2001326c 	.word	0x2001326c
 8005a40:	20013264 	.word	0x20013264

08005a44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a4a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005a4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a50:	4b27      	ldr	r3, [pc, #156]	; (8005af0 <prvHeapInit+0xac>)
 8005a52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f003 0307 	and.w	r3, r3, #7
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00c      	beq.n	8005a78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	3307      	adds	r3, #7
 8005a62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 0307 	bic.w	r3, r3, #7
 8005a6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	4a1f      	ldr	r2, [pc, #124]	; (8005af0 <prvHeapInit+0xac>)
 8005a74:	4413      	add	r3, r2
 8005a76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a7c:	4a1d      	ldr	r2, [pc, #116]	; (8005af4 <prvHeapInit+0xb0>)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a82:	4b1c      	ldr	r3, [pc, #112]	; (8005af4 <prvHeapInit+0xb0>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a90:	2208      	movs	r2, #8
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	1a9b      	subs	r3, r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 0307 	bic.w	r3, r3, #7
 8005a9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4a15      	ldr	r2, [pc, #84]	; (8005af8 <prvHeapInit+0xb4>)
 8005aa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005aa6:	4b14      	ldr	r3, [pc, #80]	; (8005af8 <prvHeapInit+0xb4>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005aae:	4b12      	ldr	r3, [pc, #72]	; (8005af8 <prvHeapInit+0xb4>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	1ad2      	subs	r2, r2, r3
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ac4:	4b0c      	ldr	r3, [pc, #48]	; (8005af8 <prvHeapInit+0xb4>)
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	4a0a      	ldr	r2, [pc, #40]	; (8005afc <prvHeapInit+0xb8>)
 8005ad2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	4a09      	ldr	r2, [pc, #36]	; (8005b00 <prvHeapInit+0xbc>)
 8005ada:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005adc:	4b09      	ldr	r3, [pc, #36]	; (8005b04 <prvHeapInit+0xc0>)
 8005ade:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ae2:	601a      	str	r2, [r3, #0]
}
 8005ae4:	bf00      	nop
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	20000658 	.word	0x20000658
 8005af4:	20013258 	.word	0x20013258
 8005af8:	20013260 	.word	0x20013260
 8005afc:	20013268 	.word	0x20013268
 8005b00:	20013264 	.word	0x20013264
 8005b04:	2001326c 	.word	0x2001326c

08005b08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b10:	4b28      	ldr	r3, [pc, #160]	; (8005bb4 <prvInsertBlockIntoFreeList+0xac>)
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	e002      	b.n	8005b1c <prvInsertBlockIntoFreeList+0x14>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d8f7      	bhi.n	8005b16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	4413      	add	r3, r2
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d108      	bne.n	8005b4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	441a      	add	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	441a      	add	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d118      	bne.n	8005b90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	4b15      	ldr	r3, [pc, #84]	; (8005bb8 <prvInsertBlockIntoFreeList+0xb0>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d00d      	beq.n	8005b86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	441a      	add	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	e008      	b.n	8005b98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b86:	4b0c      	ldr	r3, [pc, #48]	; (8005bb8 <prvInsertBlockIntoFreeList+0xb0>)
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	e003      	b.n	8005b98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d002      	beq.n	8005ba6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ba6:	bf00      	nop
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	20013258 	.word	0x20013258
 8005bb8:	20013260 	.word	0x20013260

08005bbc <__errno>:
 8005bbc:	4b01      	ldr	r3, [pc, #4]	; (8005bc4 <__errno+0x8>)
 8005bbe:	6818      	ldr	r0, [r3, #0]
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	2000002c 	.word	0x2000002c

08005bc8 <__libc_init_array>:
 8005bc8:	b570      	push	{r4, r5, r6, lr}
 8005bca:	4d0d      	ldr	r5, [pc, #52]	; (8005c00 <__libc_init_array+0x38>)
 8005bcc:	4c0d      	ldr	r4, [pc, #52]	; (8005c04 <__libc_init_array+0x3c>)
 8005bce:	1b64      	subs	r4, r4, r5
 8005bd0:	10a4      	asrs	r4, r4, #2
 8005bd2:	2600      	movs	r6, #0
 8005bd4:	42a6      	cmp	r6, r4
 8005bd6:	d109      	bne.n	8005bec <__libc_init_array+0x24>
 8005bd8:	4d0b      	ldr	r5, [pc, #44]	; (8005c08 <__libc_init_array+0x40>)
 8005bda:	4c0c      	ldr	r4, [pc, #48]	; (8005c0c <__libc_init_array+0x44>)
 8005bdc:	f000 fc8e 	bl	80064fc <_init>
 8005be0:	1b64      	subs	r4, r4, r5
 8005be2:	10a4      	asrs	r4, r4, #2
 8005be4:	2600      	movs	r6, #0
 8005be6:	42a6      	cmp	r6, r4
 8005be8:	d105      	bne.n	8005bf6 <__libc_init_array+0x2e>
 8005bea:	bd70      	pop	{r4, r5, r6, pc}
 8005bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bf0:	4798      	blx	r3
 8005bf2:	3601      	adds	r6, #1
 8005bf4:	e7ee      	b.n	8005bd4 <__libc_init_array+0xc>
 8005bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bfa:	4798      	blx	r3
 8005bfc:	3601      	adds	r6, #1
 8005bfe:	e7f2      	b.n	8005be6 <__libc_init_array+0x1e>
 8005c00:	08006798 	.word	0x08006798
 8005c04:	08006798 	.word	0x08006798
 8005c08:	08006798 	.word	0x08006798
 8005c0c:	0800679c 	.word	0x0800679c

08005c10 <memcpy>:
 8005c10:	440a      	add	r2, r1
 8005c12:	4291      	cmp	r1, r2
 8005c14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005c18:	d100      	bne.n	8005c1c <memcpy+0xc>
 8005c1a:	4770      	bx	lr
 8005c1c:	b510      	push	{r4, lr}
 8005c1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c26:	4291      	cmp	r1, r2
 8005c28:	d1f9      	bne.n	8005c1e <memcpy+0xe>
 8005c2a:	bd10      	pop	{r4, pc}

08005c2c <memset>:
 8005c2c:	4402      	add	r2, r0
 8005c2e:	4603      	mov	r3, r0
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d100      	bne.n	8005c36 <memset+0xa>
 8005c34:	4770      	bx	lr
 8005c36:	f803 1b01 	strb.w	r1, [r3], #1
 8005c3a:	e7f9      	b.n	8005c30 <memset+0x4>

08005c3c <siprintf>:
 8005c3c:	b40e      	push	{r1, r2, r3}
 8005c3e:	b500      	push	{lr}
 8005c40:	b09c      	sub	sp, #112	; 0x70
 8005c42:	ab1d      	add	r3, sp, #116	; 0x74
 8005c44:	9002      	str	r0, [sp, #8]
 8005c46:	9006      	str	r0, [sp, #24]
 8005c48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c4c:	4809      	ldr	r0, [pc, #36]	; (8005c74 <siprintf+0x38>)
 8005c4e:	9107      	str	r1, [sp, #28]
 8005c50:	9104      	str	r1, [sp, #16]
 8005c52:	4909      	ldr	r1, [pc, #36]	; (8005c78 <siprintf+0x3c>)
 8005c54:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c58:	9105      	str	r1, [sp, #20]
 8005c5a:	6800      	ldr	r0, [r0, #0]
 8005c5c:	9301      	str	r3, [sp, #4]
 8005c5e:	a902      	add	r1, sp, #8
 8005c60:	f000 f868 	bl	8005d34 <_svfiprintf_r>
 8005c64:	9b02      	ldr	r3, [sp, #8]
 8005c66:	2200      	movs	r2, #0
 8005c68:	701a      	strb	r2, [r3, #0]
 8005c6a:	b01c      	add	sp, #112	; 0x70
 8005c6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c70:	b003      	add	sp, #12
 8005c72:	4770      	bx	lr
 8005c74:	2000002c 	.word	0x2000002c
 8005c78:	ffff0208 	.word	0xffff0208

08005c7c <__ssputs_r>:
 8005c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c80:	688e      	ldr	r6, [r1, #8]
 8005c82:	429e      	cmp	r6, r3
 8005c84:	4682      	mov	sl, r0
 8005c86:	460c      	mov	r4, r1
 8005c88:	4690      	mov	r8, r2
 8005c8a:	461f      	mov	r7, r3
 8005c8c:	d838      	bhi.n	8005d00 <__ssputs_r+0x84>
 8005c8e:	898a      	ldrh	r2, [r1, #12]
 8005c90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c94:	d032      	beq.n	8005cfc <__ssputs_r+0x80>
 8005c96:	6825      	ldr	r5, [r4, #0]
 8005c98:	6909      	ldr	r1, [r1, #16]
 8005c9a:	eba5 0901 	sub.w	r9, r5, r1
 8005c9e:	6965      	ldr	r5, [r4, #20]
 8005ca0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ca4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ca8:	3301      	adds	r3, #1
 8005caa:	444b      	add	r3, r9
 8005cac:	106d      	asrs	r5, r5, #1
 8005cae:	429d      	cmp	r5, r3
 8005cb0:	bf38      	it	cc
 8005cb2:	461d      	movcc	r5, r3
 8005cb4:	0553      	lsls	r3, r2, #21
 8005cb6:	d531      	bpl.n	8005d1c <__ssputs_r+0xa0>
 8005cb8:	4629      	mov	r1, r5
 8005cba:	f000 fb55 	bl	8006368 <_malloc_r>
 8005cbe:	4606      	mov	r6, r0
 8005cc0:	b950      	cbnz	r0, 8005cd8 <__ssputs_r+0x5c>
 8005cc2:	230c      	movs	r3, #12
 8005cc4:	f8ca 3000 	str.w	r3, [sl]
 8005cc8:	89a3      	ldrh	r3, [r4, #12]
 8005cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cce:	81a3      	strh	r3, [r4, #12]
 8005cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd8:	6921      	ldr	r1, [r4, #16]
 8005cda:	464a      	mov	r2, r9
 8005cdc:	f7ff ff98 	bl	8005c10 <memcpy>
 8005ce0:	89a3      	ldrh	r3, [r4, #12]
 8005ce2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cea:	81a3      	strh	r3, [r4, #12]
 8005cec:	6126      	str	r6, [r4, #16]
 8005cee:	6165      	str	r5, [r4, #20]
 8005cf0:	444e      	add	r6, r9
 8005cf2:	eba5 0509 	sub.w	r5, r5, r9
 8005cf6:	6026      	str	r6, [r4, #0]
 8005cf8:	60a5      	str	r5, [r4, #8]
 8005cfa:	463e      	mov	r6, r7
 8005cfc:	42be      	cmp	r6, r7
 8005cfe:	d900      	bls.n	8005d02 <__ssputs_r+0x86>
 8005d00:	463e      	mov	r6, r7
 8005d02:	6820      	ldr	r0, [r4, #0]
 8005d04:	4632      	mov	r2, r6
 8005d06:	4641      	mov	r1, r8
 8005d08:	f000 faa8 	bl	800625c <memmove>
 8005d0c:	68a3      	ldr	r3, [r4, #8]
 8005d0e:	1b9b      	subs	r3, r3, r6
 8005d10:	60a3      	str	r3, [r4, #8]
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	4433      	add	r3, r6
 8005d16:	6023      	str	r3, [r4, #0]
 8005d18:	2000      	movs	r0, #0
 8005d1a:	e7db      	b.n	8005cd4 <__ssputs_r+0x58>
 8005d1c:	462a      	mov	r2, r5
 8005d1e:	f000 fb97 	bl	8006450 <_realloc_r>
 8005d22:	4606      	mov	r6, r0
 8005d24:	2800      	cmp	r0, #0
 8005d26:	d1e1      	bne.n	8005cec <__ssputs_r+0x70>
 8005d28:	6921      	ldr	r1, [r4, #16]
 8005d2a:	4650      	mov	r0, sl
 8005d2c:	f000 fab0 	bl	8006290 <_free_r>
 8005d30:	e7c7      	b.n	8005cc2 <__ssputs_r+0x46>
	...

08005d34 <_svfiprintf_r>:
 8005d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d38:	4698      	mov	r8, r3
 8005d3a:	898b      	ldrh	r3, [r1, #12]
 8005d3c:	061b      	lsls	r3, r3, #24
 8005d3e:	b09d      	sub	sp, #116	; 0x74
 8005d40:	4607      	mov	r7, r0
 8005d42:	460d      	mov	r5, r1
 8005d44:	4614      	mov	r4, r2
 8005d46:	d50e      	bpl.n	8005d66 <_svfiprintf_r+0x32>
 8005d48:	690b      	ldr	r3, [r1, #16]
 8005d4a:	b963      	cbnz	r3, 8005d66 <_svfiprintf_r+0x32>
 8005d4c:	2140      	movs	r1, #64	; 0x40
 8005d4e:	f000 fb0b 	bl	8006368 <_malloc_r>
 8005d52:	6028      	str	r0, [r5, #0]
 8005d54:	6128      	str	r0, [r5, #16]
 8005d56:	b920      	cbnz	r0, 8005d62 <_svfiprintf_r+0x2e>
 8005d58:	230c      	movs	r3, #12
 8005d5a:	603b      	str	r3, [r7, #0]
 8005d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d60:	e0d1      	b.n	8005f06 <_svfiprintf_r+0x1d2>
 8005d62:	2340      	movs	r3, #64	; 0x40
 8005d64:	616b      	str	r3, [r5, #20]
 8005d66:	2300      	movs	r3, #0
 8005d68:	9309      	str	r3, [sp, #36]	; 0x24
 8005d6a:	2320      	movs	r3, #32
 8005d6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d70:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d74:	2330      	movs	r3, #48	; 0x30
 8005d76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005f20 <_svfiprintf_r+0x1ec>
 8005d7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d7e:	f04f 0901 	mov.w	r9, #1
 8005d82:	4623      	mov	r3, r4
 8005d84:	469a      	mov	sl, r3
 8005d86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d8a:	b10a      	cbz	r2, 8005d90 <_svfiprintf_r+0x5c>
 8005d8c:	2a25      	cmp	r2, #37	; 0x25
 8005d8e:	d1f9      	bne.n	8005d84 <_svfiprintf_r+0x50>
 8005d90:	ebba 0b04 	subs.w	fp, sl, r4
 8005d94:	d00b      	beq.n	8005dae <_svfiprintf_r+0x7a>
 8005d96:	465b      	mov	r3, fp
 8005d98:	4622      	mov	r2, r4
 8005d9a:	4629      	mov	r1, r5
 8005d9c:	4638      	mov	r0, r7
 8005d9e:	f7ff ff6d 	bl	8005c7c <__ssputs_r>
 8005da2:	3001      	adds	r0, #1
 8005da4:	f000 80aa 	beq.w	8005efc <_svfiprintf_r+0x1c8>
 8005da8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005daa:	445a      	add	r2, fp
 8005dac:	9209      	str	r2, [sp, #36]	; 0x24
 8005dae:	f89a 3000 	ldrb.w	r3, [sl]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 80a2 	beq.w	8005efc <_svfiprintf_r+0x1c8>
 8005db8:	2300      	movs	r3, #0
 8005dba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dc2:	f10a 0a01 	add.w	sl, sl, #1
 8005dc6:	9304      	str	r3, [sp, #16]
 8005dc8:	9307      	str	r3, [sp, #28]
 8005dca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005dce:	931a      	str	r3, [sp, #104]	; 0x68
 8005dd0:	4654      	mov	r4, sl
 8005dd2:	2205      	movs	r2, #5
 8005dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dd8:	4851      	ldr	r0, [pc, #324]	; (8005f20 <_svfiprintf_r+0x1ec>)
 8005dda:	f7fa fa01 	bl	80001e0 <memchr>
 8005dde:	9a04      	ldr	r2, [sp, #16]
 8005de0:	b9d8      	cbnz	r0, 8005e1a <_svfiprintf_r+0xe6>
 8005de2:	06d0      	lsls	r0, r2, #27
 8005de4:	bf44      	itt	mi
 8005de6:	2320      	movmi	r3, #32
 8005de8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dec:	0711      	lsls	r1, r2, #28
 8005dee:	bf44      	itt	mi
 8005df0:	232b      	movmi	r3, #43	; 0x2b
 8005df2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005df6:	f89a 3000 	ldrb.w	r3, [sl]
 8005dfa:	2b2a      	cmp	r3, #42	; 0x2a
 8005dfc:	d015      	beq.n	8005e2a <_svfiprintf_r+0xf6>
 8005dfe:	9a07      	ldr	r2, [sp, #28]
 8005e00:	4654      	mov	r4, sl
 8005e02:	2000      	movs	r0, #0
 8005e04:	f04f 0c0a 	mov.w	ip, #10
 8005e08:	4621      	mov	r1, r4
 8005e0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e0e:	3b30      	subs	r3, #48	; 0x30
 8005e10:	2b09      	cmp	r3, #9
 8005e12:	d94e      	bls.n	8005eb2 <_svfiprintf_r+0x17e>
 8005e14:	b1b0      	cbz	r0, 8005e44 <_svfiprintf_r+0x110>
 8005e16:	9207      	str	r2, [sp, #28]
 8005e18:	e014      	b.n	8005e44 <_svfiprintf_r+0x110>
 8005e1a:	eba0 0308 	sub.w	r3, r0, r8
 8005e1e:	fa09 f303 	lsl.w	r3, r9, r3
 8005e22:	4313      	orrs	r3, r2
 8005e24:	9304      	str	r3, [sp, #16]
 8005e26:	46a2      	mov	sl, r4
 8005e28:	e7d2      	b.n	8005dd0 <_svfiprintf_r+0x9c>
 8005e2a:	9b03      	ldr	r3, [sp, #12]
 8005e2c:	1d19      	adds	r1, r3, #4
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	9103      	str	r1, [sp, #12]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	bfbb      	ittet	lt
 8005e36:	425b      	neglt	r3, r3
 8005e38:	f042 0202 	orrlt.w	r2, r2, #2
 8005e3c:	9307      	strge	r3, [sp, #28]
 8005e3e:	9307      	strlt	r3, [sp, #28]
 8005e40:	bfb8      	it	lt
 8005e42:	9204      	strlt	r2, [sp, #16]
 8005e44:	7823      	ldrb	r3, [r4, #0]
 8005e46:	2b2e      	cmp	r3, #46	; 0x2e
 8005e48:	d10c      	bne.n	8005e64 <_svfiprintf_r+0x130>
 8005e4a:	7863      	ldrb	r3, [r4, #1]
 8005e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e4e:	d135      	bne.n	8005ebc <_svfiprintf_r+0x188>
 8005e50:	9b03      	ldr	r3, [sp, #12]
 8005e52:	1d1a      	adds	r2, r3, #4
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	9203      	str	r2, [sp, #12]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	bfb8      	it	lt
 8005e5c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005e60:	3402      	adds	r4, #2
 8005e62:	9305      	str	r3, [sp, #20]
 8005e64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005f30 <_svfiprintf_r+0x1fc>
 8005e68:	7821      	ldrb	r1, [r4, #0]
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	4650      	mov	r0, sl
 8005e6e:	f7fa f9b7 	bl	80001e0 <memchr>
 8005e72:	b140      	cbz	r0, 8005e86 <_svfiprintf_r+0x152>
 8005e74:	2340      	movs	r3, #64	; 0x40
 8005e76:	eba0 000a 	sub.w	r0, r0, sl
 8005e7a:	fa03 f000 	lsl.w	r0, r3, r0
 8005e7e:	9b04      	ldr	r3, [sp, #16]
 8005e80:	4303      	orrs	r3, r0
 8005e82:	3401      	adds	r4, #1
 8005e84:	9304      	str	r3, [sp, #16]
 8005e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e8a:	4826      	ldr	r0, [pc, #152]	; (8005f24 <_svfiprintf_r+0x1f0>)
 8005e8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e90:	2206      	movs	r2, #6
 8005e92:	f7fa f9a5 	bl	80001e0 <memchr>
 8005e96:	2800      	cmp	r0, #0
 8005e98:	d038      	beq.n	8005f0c <_svfiprintf_r+0x1d8>
 8005e9a:	4b23      	ldr	r3, [pc, #140]	; (8005f28 <_svfiprintf_r+0x1f4>)
 8005e9c:	bb1b      	cbnz	r3, 8005ee6 <_svfiprintf_r+0x1b2>
 8005e9e:	9b03      	ldr	r3, [sp, #12]
 8005ea0:	3307      	adds	r3, #7
 8005ea2:	f023 0307 	bic.w	r3, r3, #7
 8005ea6:	3308      	adds	r3, #8
 8005ea8:	9303      	str	r3, [sp, #12]
 8005eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eac:	4433      	add	r3, r6
 8005eae:	9309      	str	r3, [sp, #36]	; 0x24
 8005eb0:	e767      	b.n	8005d82 <_svfiprintf_r+0x4e>
 8005eb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005eb6:	460c      	mov	r4, r1
 8005eb8:	2001      	movs	r0, #1
 8005eba:	e7a5      	b.n	8005e08 <_svfiprintf_r+0xd4>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	3401      	adds	r4, #1
 8005ec0:	9305      	str	r3, [sp, #20]
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	f04f 0c0a 	mov.w	ip, #10
 8005ec8:	4620      	mov	r0, r4
 8005eca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ece:	3a30      	subs	r2, #48	; 0x30
 8005ed0:	2a09      	cmp	r2, #9
 8005ed2:	d903      	bls.n	8005edc <_svfiprintf_r+0x1a8>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d0c5      	beq.n	8005e64 <_svfiprintf_r+0x130>
 8005ed8:	9105      	str	r1, [sp, #20]
 8005eda:	e7c3      	b.n	8005e64 <_svfiprintf_r+0x130>
 8005edc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ee0:	4604      	mov	r4, r0
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e7f0      	b.n	8005ec8 <_svfiprintf_r+0x194>
 8005ee6:	ab03      	add	r3, sp, #12
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	462a      	mov	r2, r5
 8005eec:	4b0f      	ldr	r3, [pc, #60]	; (8005f2c <_svfiprintf_r+0x1f8>)
 8005eee:	a904      	add	r1, sp, #16
 8005ef0:	4638      	mov	r0, r7
 8005ef2:	f3af 8000 	nop.w
 8005ef6:	1c42      	adds	r2, r0, #1
 8005ef8:	4606      	mov	r6, r0
 8005efa:	d1d6      	bne.n	8005eaa <_svfiprintf_r+0x176>
 8005efc:	89ab      	ldrh	r3, [r5, #12]
 8005efe:	065b      	lsls	r3, r3, #25
 8005f00:	f53f af2c 	bmi.w	8005d5c <_svfiprintf_r+0x28>
 8005f04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f06:	b01d      	add	sp, #116	; 0x74
 8005f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f0c:	ab03      	add	r3, sp, #12
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	462a      	mov	r2, r5
 8005f12:	4b06      	ldr	r3, [pc, #24]	; (8005f2c <_svfiprintf_r+0x1f8>)
 8005f14:	a904      	add	r1, sp, #16
 8005f16:	4638      	mov	r0, r7
 8005f18:	f000 f87a 	bl	8006010 <_printf_i>
 8005f1c:	e7eb      	b.n	8005ef6 <_svfiprintf_r+0x1c2>
 8005f1e:	bf00      	nop
 8005f20:	0800675c 	.word	0x0800675c
 8005f24:	08006766 	.word	0x08006766
 8005f28:	00000000 	.word	0x00000000
 8005f2c:	08005c7d 	.word	0x08005c7d
 8005f30:	08006762 	.word	0x08006762

08005f34 <_printf_common>:
 8005f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f38:	4616      	mov	r6, r2
 8005f3a:	4699      	mov	r9, r3
 8005f3c:	688a      	ldr	r2, [r1, #8]
 8005f3e:	690b      	ldr	r3, [r1, #16]
 8005f40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f44:	4293      	cmp	r3, r2
 8005f46:	bfb8      	it	lt
 8005f48:	4613      	movlt	r3, r2
 8005f4a:	6033      	str	r3, [r6, #0]
 8005f4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f50:	4607      	mov	r7, r0
 8005f52:	460c      	mov	r4, r1
 8005f54:	b10a      	cbz	r2, 8005f5a <_printf_common+0x26>
 8005f56:	3301      	adds	r3, #1
 8005f58:	6033      	str	r3, [r6, #0]
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	0699      	lsls	r1, r3, #26
 8005f5e:	bf42      	ittt	mi
 8005f60:	6833      	ldrmi	r3, [r6, #0]
 8005f62:	3302      	addmi	r3, #2
 8005f64:	6033      	strmi	r3, [r6, #0]
 8005f66:	6825      	ldr	r5, [r4, #0]
 8005f68:	f015 0506 	ands.w	r5, r5, #6
 8005f6c:	d106      	bne.n	8005f7c <_printf_common+0x48>
 8005f6e:	f104 0a19 	add.w	sl, r4, #25
 8005f72:	68e3      	ldr	r3, [r4, #12]
 8005f74:	6832      	ldr	r2, [r6, #0]
 8005f76:	1a9b      	subs	r3, r3, r2
 8005f78:	42ab      	cmp	r3, r5
 8005f7a:	dc26      	bgt.n	8005fca <_printf_common+0x96>
 8005f7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f80:	1e13      	subs	r3, r2, #0
 8005f82:	6822      	ldr	r2, [r4, #0]
 8005f84:	bf18      	it	ne
 8005f86:	2301      	movne	r3, #1
 8005f88:	0692      	lsls	r2, r2, #26
 8005f8a:	d42b      	bmi.n	8005fe4 <_printf_common+0xb0>
 8005f8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f90:	4649      	mov	r1, r9
 8005f92:	4638      	mov	r0, r7
 8005f94:	47c0      	blx	r8
 8005f96:	3001      	adds	r0, #1
 8005f98:	d01e      	beq.n	8005fd8 <_printf_common+0xa4>
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	68e5      	ldr	r5, [r4, #12]
 8005f9e:	6832      	ldr	r2, [r6, #0]
 8005fa0:	f003 0306 	and.w	r3, r3, #6
 8005fa4:	2b04      	cmp	r3, #4
 8005fa6:	bf08      	it	eq
 8005fa8:	1aad      	subeq	r5, r5, r2
 8005faa:	68a3      	ldr	r3, [r4, #8]
 8005fac:	6922      	ldr	r2, [r4, #16]
 8005fae:	bf0c      	ite	eq
 8005fb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fb4:	2500      	movne	r5, #0
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	bfc4      	itt	gt
 8005fba:	1a9b      	subgt	r3, r3, r2
 8005fbc:	18ed      	addgt	r5, r5, r3
 8005fbe:	2600      	movs	r6, #0
 8005fc0:	341a      	adds	r4, #26
 8005fc2:	42b5      	cmp	r5, r6
 8005fc4:	d11a      	bne.n	8005ffc <_printf_common+0xc8>
 8005fc6:	2000      	movs	r0, #0
 8005fc8:	e008      	b.n	8005fdc <_printf_common+0xa8>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	4652      	mov	r2, sl
 8005fce:	4649      	mov	r1, r9
 8005fd0:	4638      	mov	r0, r7
 8005fd2:	47c0      	blx	r8
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	d103      	bne.n	8005fe0 <_printf_common+0xac>
 8005fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe0:	3501      	adds	r5, #1
 8005fe2:	e7c6      	b.n	8005f72 <_printf_common+0x3e>
 8005fe4:	18e1      	adds	r1, r4, r3
 8005fe6:	1c5a      	adds	r2, r3, #1
 8005fe8:	2030      	movs	r0, #48	; 0x30
 8005fea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fee:	4422      	add	r2, r4
 8005ff0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ff4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ff8:	3302      	adds	r3, #2
 8005ffa:	e7c7      	b.n	8005f8c <_printf_common+0x58>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	4622      	mov	r2, r4
 8006000:	4649      	mov	r1, r9
 8006002:	4638      	mov	r0, r7
 8006004:	47c0      	blx	r8
 8006006:	3001      	adds	r0, #1
 8006008:	d0e6      	beq.n	8005fd8 <_printf_common+0xa4>
 800600a:	3601      	adds	r6, #1
 800600c:	e7d9      	b.n	8005fc2 <_printf_common+0x8e>
	...

08006010 <_printf_i>:
 8006010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006014:	7e0f      	ldrb	r7, [r1, #24]
 8006016:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006018:	2f78      	cmp	r7, #120	; 0x78
 800601a:	4691      	mov	r9, r2
 800601c:	4680      	mov	r8, r0
 800601e:	460c      	mov	r4, r1
 8006020:	469a      	mov	sl, r3
 8006022:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006026:	d807      	bhi.n	8006038 <_printf_i+0x28>
 8006028:	2f62      	cmp	r7, #98	; 0x62
 800602a:	d80a      	bhi.n	8006042 <_printf_i+0x32>
 800602c:	2f00      	cmp	r7, #0
 800602e:	f000 80d8 	beq.w	80061e2 <_printf_i+0x1d2>
 8006032:	2f58      	cmp	r7, #88	; 0x58
 8006034:	f000 80a3 	beq.w	800617e <_printf_i+0x16e>
 8006038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800603c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006040:	e03a      	b.n	80060b8 <_printf_i+0xa8>
 8006042:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006046:	2b15      	cmp	r3, #21
 8006048:	d8f6      	bhi.n	8006038 <_printf_i+0x28>
 800604a:	a101      	add	r1, pc, #4	; (adr r1, 8006050 <_printf_i+0x40>)
 800604c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006050:	080060a9 	.word	0x080060a9
 8006054:	080060bd 	.word	0x080060bd
 8006058:	08006039 	.word	0x08006039
 800605c:	08006039 	.word	0x08006039
 8006060:	08006039 	.word	0x08006039
 8006064:	08006039 	.word	0x08006039
 8006068:	080060bd 	.word	0x080060bd
 800606c:	08006039 	.word	0x08006039
 8006070:	08006039 	.word	0x08006039
 8006074:	08006039 	.word	0x08006039
 8006078:	08006039 	.word	0x08006039
 800607c:	080061c9 	.word	0x080061c9
 8006080:	080060ed 	.word	0x080060ed
 8006084:	080061ab 	.word	0x080061ab
 8006088:	08006039 	.word	0x08006039
 800608c:	08006039 	.word	0x08006039
 8006090:	080061eb 	.word	0x080061eb
 8006094:	08006039 	.word	0x08006039
 8006098:	080060ed 	.word	0x080060ed
 800609c:	08006039 	.word	0x08006039
 80060a0:	08006039 	.word	0x08006039
 80060a4:	080061b3 	.word	0x080061b3
 80060a8:	682b      	ldr	r3, [r5, #0]
 80060aa:	1d1a      	adds	r2, r3, #4
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	602a      	str	r2, [r5, #0]
 80060b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060b8:	2301      	movs	r3, #1
 80060ba:	e0a3      	b.n	8006204 <_printf_i+0x1f4>
 80060bc:	6820      	ldr	r0, [r4, #0]
 80060be:	6829      	ldr	r1, [r5, #0]
 80060c0:	0606      	lsls	r6, r0, #24
 80060c2:	f101 0304 	add.w	r3, r1, #4
 80060c6:	d50a      	bpl.n	80060de <_printf_i+0xce>
 80060c8:	680e      	ldr	r6, [r1, #0]
 80060ca:	602b      	str	r3, [r5, #0]
 80060cc:	2e00      	cmp	r6, #0
 80060ce:	da03      	bge.n	80060d8 <_printf_i+0xc8>
 80060d0:	232d      	movs	r3, #45	; 0x2d
 80060d2:	4276      	negs	r6, r6
 80060d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060d8:	485e      	ldr	r0, [pc, #376]	; (8006254 <_printf_i+0x244>)
 80060da:	230a      	movs	r3, #10
 80060dc:	e019      	b.n	8006112 <_printf_i+0x102>
 80060de:	680e      	ldr	r6, [r1, #0]
 80060e0:	602b      	str	r3, [r5, #0]
 80060e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060e6:	bf18      	it	ne
 80060e8:	b236      	sxthne	r6, r6
 80060ea:	e7ef      	b.n	80060cc <_printf_i+0xbc>
 80060ec:	682b      	ldr	r3, [r5, #0]
 80060ee:	6820      	ldr	r0, [r4, #0]
 80060f0:	1d19      	adds	r1, r3, #4
 80060f2:	6029      	str	r1, [r5, #0]
 80060f4:	0601      	lsls	r1, r0, #24
 80060f6:	d501      	bpl.n	80060fc <_printf_i+0xec>
 80060f8:	681e      	ldr	r6, [r3, #0]
 80060fa:	e002      	b.n	8006102 <_printf_i+0xf2>
 80060fc:	0646      	lsls	r6, r0, #25
 80060fe:	d5fb      	bpl.n	80060f8 <_printf_i+0xe8>
 8006100:	881e      	ldrh	r6, [r3, #0]
 8006102:	4854      	ldr	r0, [pc, #336]	; (8006254 <_printf_i+0x244>)
 8006104:	2f6f      	cmp	r7, #111	; 0x6f
 8006106:	bf0c      	ite	eq
 8006108:	2308      	moveq	r3, #8
 800610a:	230a      	movne	r3, #10
 800610c:	2100      	movs	r1, #0
 800610e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006112:	6865      	ldr	r5, [r4, #4]
 8006114:	60a5      	str	r5, [r4, #8]
 8006116:	2d00      	cmp	r5, #0
 8006118:	bfa2      	ittt	ge
 800611a:	6821      	ldrge	r1, [r4, #0]
 800611c:	f021 0104 	bicge.w	r1, r1, #4
 8006120:	6021      	strge	r1, [r4, #0]
 8006122:	b90e      	cbnz	r6, 8006128 <_printf_i+0x118>
 8006124:	2d00      	cmp	r5, #0
 8006126:	d04d      	beq.n	80061c4 <_printf_i+0x1b4>
 8006128:	4615      	mov	r5, r2
 800612a:	fbb6 f1f3 	udiv	r1, r6, r3
 800612e:	fb03 6711 	mls	r7, r3, r1, r6
 8006132:	5dc7      	ldrb	r7, [r0, r7]
 8006134:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006138:	4637      	mov	r7, r6
 800613a:	42bb      	cmp	r3, r7
 800613c:	460e      	mov	r6, r1
 800613e:	d9f4      	bls.n	800612a <_printf_i+0x11a>
 8006140:	2b08      	cmp	r3, #8
 8006142:	d10b      	bne.n	800615c <_printf_i+0x14c>
 8006144:	6823      	ldr	r3, [r4, #0]
 8006146:	07de      	lsls	r6, r3, #31
 8006148:	d508      	bpl.n	800615c <_printf_i+0x14c>
 800614a:	6923      	ldr	r3, [r4, #16]
 800614c:	6861      	ldr	r1, [r4, #4]
 800614e:	4299      	cmp	r1, r3
 8006150:	bfde      	ittt	le
 8006152:	2330      	movle	r3, #48	; 0x30
 8006154:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006158:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800615c:	1b52      	subs	r2, r2, r5
 800615e:	6122      	str	r2, [r4, #16]
 8006160:	f8cd a000 	str.w	sl, [sp]
 8006164:	464b      	mov	r3, r9
 8006166:	aa03      	add	r2, sp, #12
 8006168:	4621      	mov	r1, r4
 800616a:	4640      	mov	r0, r8
 800616c:	f7ff fee2 	bl	8005f34 <_printf_common>
 8006170:	3001      	adds	r0, #1
 8006172:	d14c      	bne.n	800620e <_printf_i+0x1fe>
 8006174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006178:	b004      	add	sp, #16
 800617a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800617e:	4835      	ldr	r0, [pc, #212]	; (8006254 <_printf_i+0x244>)
 8006180:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006184:	6829      	ldr	r1, [r5, #0]
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	f851 6b04 	ldr.w	r6, [r1], #4
 800618c:	6029      	str	r1, [r5, #0]
 800618e:	061d      	lsls	r5, r3, #24
 8006190:	d514      	bpl.n	80061bc <_printf_i+0x1ac>
 8006192:	07df      	lsls	r7, r3, #31
 8006194:	bf44      	itt	mi
 8006196:	f043 0320 	orrmi.w	r3, r3, #32
 800619a:	6023      	strmi	r3, [r4, #0]
 800619c:	b91e      	cbnz	r6, 80061a6 <_printf_i+0x196>
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	f023 0320 	bic.w	r3, r3, #32
 80061a4:	6023      	str	r3, [r4, #0]
 80061a6:	2310      	movs	r3, #16
 80061a8:	e7b0      	b.n	800610c <_printf_i+0xfc>
 80061aa:	6823      	ldr	r3, [r4, #0]
 80061ac:	f043 0320 	orr.w	r3, r3, #32
 80061b0:	6023      	str	r3, [r4, #0]
 80061b2:	2378      	movs	r3, #120	; 0x78
 80061b4:	4828      	ldr	r0, [pc, #160]	; (8006258 <_printf_i+0x248>)
 80061b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061ba:	e7e3      	b.n	8006184 <_printf_i+0x174>
 80061bc:	0659      	lsls	r1, r3, #25
 80061be:	bf48      	it	mi
 80061c0:	b2b6      	uxthmi	r6, r6
 80061c2:	e7e6      	b.n	8006192 <_printf_i+0x182>
 80061c4:	4615      	mov	r5, r2
 80061c6:	e7bb      	b.n	8006140 <_printf_i+0x130>
 80061c8:	682b      	ldr	r3, [r5, #0]
 80061ca:	6826      	ldr	r6, [r4, #0]
 80061cc:	6961      	ldr	r1, [r4, #20]
 80061ce:	1d18      	adds	r0, r3, #4
 80061d0:	6028      	str	r0, [r5, #0]
 80061d2:	0635      	lsls	r5, r6, #24
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	d501      	bpl.n	80061dc <_printf_i+0x1cc>
 80061d8:	6019      	str	r1, [r3, #0]
 80061da:	e002      	b.n	80061e2 <_printf_i+0x1d2>
 80061dc:	0670      	lsls	r0, r6, #25
 80061de:	d5fb      	bpl.n	80061d8 <_printf_i+0x1c8>
 80061e0:	8019      	strh	r1, [r3, #0]
 80061e2:	2300      	movs	r3, #0
 80061e4:	6123      	str	r3, [r4, #16]
 80061e6:	4615      	mov	r5, r2
 80061e8:	e7ba      	b.n	8006160 <_printf_i+0x150>
 80061ea:	682b      	ldr	r3, [r5, #0]
 80061ec:	1d1a      	adds	r2, r3, #4
 80061ee:	602a      	str	r2, [r5, #0]
 80061f0:	681d      	ldr	r5, [r3, #0]
 80061f2:	6862      	ldr	r2, [r4, #4]
 80061f4:	2100      	movs	r1, #0
 80061f6:	4628      	mov	r0, r5
 80061f8:	f7f9 fff2 	bl	80001e0 <memchr>
 80061fc:	b108      	cbz	r0, 8006202 <_printf_i+0x1f2>
 80061fe:	1b40      	subs	r0, r0, r5
 8006200:	6060      	str	r0, [r4, #4]
 8006202:	6863      	ldr	r3, [r4, #4]
 8006204:	6123      	str	r3, [r4, #16]
 8006206:	2300      	movs	r3, #0
 8006208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800620c:	e7a8      	b.n	8006160 <_printf_i+0x150>
 800620e:	6923      	ldr	r3, [r4, #16]
 8006210:	462a      	mov	r2, r5
 8006212:	4649      	mov	r1, r9
 8006214:	4640      	mov	r0, r8
 8006216:	47d0      	blx	sl
 8006218:	3001      	adds	r0, #1
 800621a:	d0ab      	beq.n	8006174 <_printf_i+0x164>
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	079b      	lsls	r3, r3, #30
 8006220:	d413      	bmi.n	800624a <_printf_i+0x23a>
 8006222:	68e0      	ldr	r0, [r4, #12]
 8006224:	9b03      	ldr	r3, [sp, #12]
 8006226:	4298      	cmp	r0, r3
 8006228:	bfb8      	it	lt
 800622a:	4618      	movlt	r0, r3
 800622c:	e7a4      	b.n	8006178 <_printf_i+0x168>
 800622e:	2301      	movs	r3, #1
 8006230:	4632      	mov	r2, r6
 8006232:	4649      	mov	r1, r9
 8006234:	4640      	mov	r0, r8
 8006236:	47d0      	blx	sl
 8006238:	3001      	adds	r0, #1
 800623a:	d09b      	beq.n	8006174 <_printf_i+0x164>
 800623c:	3501      	adds	r5, #1
 800623e:	68e3      	ldr	r3, [r4, #12]
 8006240:	9903      	ldr	r1, [sp, #12]
 8006242:	1a5b      	subs	r3, r3, r1
 8006244:	42ab      	cmp	r3, r5
 8006246:	dcf2      	bgt.n	800622e <_printf_i+0x21e>
 8006248:	e7eb      	b.n	8006222 <_printf_i+0x212>
 800624a:	2500      	movs	r5, #0
 800624c:	f104 0619 	add.w	r6, r4, #25
 8006250:	e7f5      	b.n	800623e <_printf_i+0x22e>
 8006252:	bf00      	nop
 8006254:	0800676d 	.word	0x0800676d
 8006258:	0800677e 	.word	0x0800677e

0800625c <memmove>:
 800625c:	4288      	cmp	r0, r1
 800625e:	b510      	push	{r4, lr}
 8006260:	eb01 0402 	add.w	r4, r1, r2
 8006264:	d902      	bls.n	800626c <memmove+0x10>
 8006266:	4284      	cmp	r4, r0
 8006268:	4623      	mov	r3, r4
 800626a:	d807      	bhi.n	800627c <memmove+0x20>
 800626c:	1e43      	subs	r3, r0, #1
 800626e:	42a1      	cmp	r1, r4
 8006270:	d008      	beq.n	8006284 <memmove+0x28>
 8006272:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006276:	f803 2f01 	strb.w	r2, [r3, #1]!
 800627a:	e7f8      	b.n	800626e <memmove+0x12>
 800627c:	4402      	add	r2, r0
 800627e:	4601      	mov	r1, r0
 8006280:	428a      	cmp	r2, r1
 8006282:	d100      	bne.n	8006286 <memmove+0x2a>
 8006284:	bd10      	pop	{r4, pc}
 8006286:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800628a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800628e:	e7f7      	b.n	8006280 <memmove+0x24>

08006290 <_free_r>:
 8006290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006292:	2900      	cmp	r1, #0
 8006294:	d044      	beq.n	8006320 <_free_r+0x90>
 8006296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800629a:	9001      	str	r0, [sp, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	f1a1 0404 	sub.w	r4, r1, #4
 80062a2:	bfb8      	it	lt
 80062a4:	18e4      	addlt	r4, r4, r3
 80062a6:	f000 f913 	bl	80064d0 <__malloc_lock>
 80062aa:	4a1e      	ldr	r2, [pc, #120]	; (8006324 <_free_r+0x94>)
 80062ac:	9801      	ldr	r0, [sp, #4]
 80062ae:	6813      	ldr	r3, [r2, #0]
 80062b0:	b933      	cbnz	r3, 80062c0 <_free_r+0x30>
 80062b2:	6063      	str	r3, [r4, #4]
 80062b4:	6014      	str	r4, [r2, #0]
 80062b6:	b003      	add	sp, #12
 80062b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062bc:	f000 b90e 	b.w	80064dc <__malloc_unlock>
 80062c0:	42a3      	cmp	r3, r4
 80062c2:	d908      	bls.n	80062d6 <_free_r+0x46>
 80062c4:	6825      	ldr	r5, [r4, #0]
 80062c6:	1961      	adds	r1, r4, r5
 80062c8:	428b      	cmp	r3, r1
 80062ca:	bf01      	itttt	eq
 80062cc:	6819      	ldreq	r1, [r3, #0]
 80062ce:	685b      	ldreq	r3, [r3, #4]
 80062d0:	1949      	addeq	r1, r1, r5
 80062d2:	6021      	streq	r1, [r4, #0]
 80062d4:	e7ed      	b.n	80062b2 <_free_r+0x22>
 80062d6:	461a      	mov	r2, r3
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	b10b      	cbz	r3, 80062e0 <_free_r+0x50>
 80062dc:	42a3      	cmp	r3, r4
 80062de:	d9fa      	bls.n	80062d6 <_free_r+0x46>
 80062e0:	6811      	ldr	r1, [r2, #0]
 80062e2:	1855      	adds	r5, r2, r1
 80062e4:	42a5      	cmp	r5, r4
 80062e6:	d10b      	bne.n	8006300 <_free_r+0x70>
 80062e8:	6824      	ldr	r4, [r4, #0]
 80062ea:	4421      	add	r1, r4
 80062ec:	1854      	adds	r4, r2, r1
 80062ee:	42a3      	cmp	r3, r4
 80062f0:	6011      	str	r1, [r2, #0]
 80062f2:	d1e0      	bne.n	80062b6 <_free_r+0x26>
 80062f4:	681c      	ldr	r4, [r3, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	6053      	str	r3, [r2, #4]
 80062fa:	4421      	add	r1, r4
 80062fc:	6011      	str	r1, [r2, #0]
 80062fe:	e7da      	b.n	80062b6 <_free_r+0x26>
 8006300:	d902      	bls.n	8006308 <_free_r+0x78>
 8006302:	230c      	movs	r3, #12
 8006304:	6003      	str	r3, [r0, #0]
 8006306:	e7d6      	b.n	80062b6 <_free_r+0x26>
 8006308:	6825      	ldr	r5, [r4, #0]
 800630a:	1961      	adds	r1, r4, r5
 800630c:	428b      	cmp	r3, r1
 800630e:	bf04      	itt	eq
 8006310:	6819      	ldreq	r1, [r3, #0]
 8006312:	685b      	ldreq	r3, [r3, #4]
 8006314:	6063      	str	r3, [r4, #4]
 8006316:	bf04      	itt	eq
 8006318:	1949      	addeq	r1, r1, r5
 800631a:	6021      	streq	r1, [r4, #0]
 800631c:	6054      	str	r4, [r2, #4]
 800631e:	e7ca      	b.n	80062b6 <_free_r+0x26>
 8006320:	b003      	add	sp, #12
 8006322:	bd30      	pop	{r4, r5, pc}
 8006324:	20013270 	.word	0x20013270

08006328 <sbrk_aligned>:
 8006328:	b570      	push	{r4, r5, r6, lr}
 800632a:	4e0e      	ldr	r6, [pc, #56]	; (8006364 <sbrk_aligned+0x3c>)
 800632c:	460c      	mov	r4, r1
 800632e:	6831      	ldr	r1, [r6, #0]
 8006330:	4605      	mov	r5, r0
 8006332:	b911      	cbnz	r1, 800633a <sbrk_aligned+0x12>
 8006334:	f000 f8bc 	bl	80064b0 <_sbrk_r>
 8006338:	6030      	str	r0, [r6, #0]
 800633a:	4621      	mov	r1, r4
 800633c:	4628      	mov	r0, r5
 800633e:	f000 f8b7 	bl	80064b0 <_sbrk_r>
 8006342:	1c43      	adds	r3, r0, #1
 8006344:	d00a      	beq.n	800635c <sbrk_aligned+0x34>
 8006346:	1cc4      	adds	r4, r0, #3
 8006348:	f024 0403 	bic.w	r4, r4, #3
 800634c:	42a0      	cmp	r0, r4
 800634e:	d007      	beq.n	8006360 <sbrk_aligned+0x38>
 8006350:	1a21      	subs	r1, r4, r0
 8006352:	4628      	mov	r0, r5
 8006354:	f000 f8ac 	bl	80064b0 <_sbrk_r>
 8006358:	3001      	adds	r0, #1
 800635a:	d101      	bne.n	8006360 <sbrk_aligned+0x38>
 800635c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006360:	4620      	mov	r0, r4
 8006362:	bd70      	pop	{r4, r5, r6, pc}
 8006364:	20013274 	.word	0x20013274

08006368 <_malloc_r>:
 8006368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800636c:	1ccd      	adds	r5, r1, #3
 800636e:	f025 0503 	bic.w	r5, r5, #3
 8006372:	3508      	adds	r5, #8
 8006374:	2d0c      	cmp	r5, #12
 8006376:	bf38      	it	cc
 8006378:	250c      	movcc	r5, #12
 800637a:	2d00      	cmp	r5, #0
 800637c:	4607      	mov	r7, r0
 800637e:	db01      	blt.n	8006384 <_malloc_r+0x1c>
 8006380:	42a9      	cmp	r1, r5
 8006382:	d905      	bls.n	8006390 <_malloc_r+0x28>
 8006384:	230c      	movs	r3, #12
 8006386:	603b      	str	r3, [r7, #0]
 8006388:	2600      	movs	r6, #0
 800638a:	4630      	mov	r0, r6
 800638c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006390:	4e2e      	ldr	r6, [pc, #184]	; (800644c <_malloc_r+0xe4>)
 8006392:	f000 f89d 	bl	80064d0 <__malloc_lock>
 8006396:	6833      	ldr	r3, [r6, #0]
 8006398:	461c      	mov	r4, r3
 800639a:	bb34      	cbnz	r4, 80063ea <_malloc_r+0x82>
 800639c:	4629      	mov	r1, r5
 800639e:	4638      	mov	r0, r7
 80063a0:	f7ff ffc2 	bl	8006328 <sbrk_aligned>
 80063a4:	1c43      	adds	r3, r0, #1
 80063a6:	4604      	mov	r4, r0
 80063a8:	d14d      	bne.n	8006446 <_malloc_r+0xde>
 80063aa:	6834      	ldr	r4, [r6, #0]
 80063ac:	4626      	mov	r6, r4
 80063ae:	2e00      	cmp	r6, #0
 80063b0:	d140      	bne.n	8006434 <_malloc_r+0xcc>
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	4631      	mov	r1, r6
 80063b6:	4638      	mov	r0, r7
 80063b8:	eb04 0803 	add.w	r8, r4, r3
 80063bc:	f000 f878 	bl	80064b0 <_sbrk_r>
 80063c0:	4580      	cmp	r8, r0
 80063c2:	d13a      	bne.n	800643a <_malloc_r+0xd2>
 80063c4:	6821      	ldr	r1, [r4, #0]
 80063c6:	3503      	adds	r5, #3
 80063c8:	1a6d      	subs	r5, r5, r1
 80063ca:	f025 0503 	bic.w	r5, r5, #3
 80063ce:	3508      	adds	r5, #8
 80063d0:	2d0c      	cmp	r5, #12
 80063d2:	bf38      	it	cc
 80063d4:	250c      	movcc	r5, #12
 80063d6:	4629      	mov	r1, r5
 80063d8:	4638      	mov	r0, r7
 80063da:	f7ff ffa5 	bl	8006328 <sbrk_aligned>
 80063de:	3001      	adds	r0, #1
 80063e0:	d02b      	beq.n	800643a <_malloc_r+0xd2>
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	442b      	add	r3, r5
 80063e6:	6023      	str	r3, [r4, #0]
 80063e8:	e00e      	b.n	8006408 <_malloc_r+0xa0>
 80063ea:	6822      	ldr	r2, [r4, #0]
 80063ec:	1b52      	subs	r2, r2, r5
 80063ee:	d41e      	bmi.n	800642e <_malloc_r+0xc6>
 80063f0:	2a0b      	cmp	r2, #11
 80063f2:	d916      	bls.n	8006422 <_malloc_r+0xba>
 80063f4:	1961      	adds	r1, r4, r5
 80063f6:	42a3      	cmp	r3, r4
 80063f8:	6025      	str	r5, [r4, #0]
 80063fa:	bf18      	it	ne
 80063fc:	6059      	strne	r1, [r3, #4]
 80063fe:	6863      	ldr	r3, [r4, #4]
 8006400:	bf08      	it	eq
 8006402:	6031      	streq	r1, [r6, #0]
 8006404:	5162      	str	r2, [r4, r5]
 8006406:	604b      	str	r3, [r1, #4]
 8006408:	4638      	mov	r0, r7
 800640a:	f104 060b 	add.w	r6, r4, #11
 800640e:	f000 f865 	bl	80064dc <__malloc_unlock>
 8006412:	f026 0607 	bic.w	r6, r6, #7
 8006416:	1d23      	adds	r3, r4, #4
 8006418:	1af2      	subs	r2, r6, r3
 800641a:	d0b6      	beq.n	800638a <_malloc_r+0x22>
 800641c:	1b9b      	subs	r3, r3, r6
 800641e:	50a3      	str	r3, [r4, r2]
 8006420:	e7b3      	b.n	800638a <_malloc_r+0x22>
 8006422:	6862      	ldr	r2, [r4, #4]
 8006424:	42a3      	cmp	r3, r4
 8006426:	bf0c      	ite	eq
 8006428:	6032      	streq	r2, [r6, #0]
 800642a:	605a      	strne	r2, [r3, #4]
 800642c:	e7ec      	b.n	8006408 <_malloc_r+0xa0>
 800642e:	4623      	mov	r3, r4
 8006430:	6864      	ldr	r4, [r4, #4]
 8006432:	e7b2      	b.n	800639a <_malloc_r+0x32>
 8006434:	4634      	mov	r4, r6
 8006436:	6876      	ldr	r6, [r6, #4]
 8006438:	e7b9      	b.n	80063ae <_malloc_r+0x46>
 800643a:	230c      	movs	r3, #12
 800643c:	603b      	str	r3, [r7, #0]
 800643e:	4638      	mov	r0, r7
 8006440:	f000 f84c 	bl	80064dc <__malloc_unlock>
 8006444:	e7a1      	b.n	800638a <_malloc_r+0x22>
 8006446:	6025      	str	r5, [r4, #0]
 8006448:	e7de      	b.n	8006408 <_malloc_r+0xa0>
 800644a:	bf00      	nop
 800644c:	20013270 	.word	0x20013270

08006450 <_realloc_r>:
 8006450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006454:	4680      	mov	r8, r0
 8006456:	4614      	mov	r4, r2
 8006458:	460e      	mov	r6, r1
 800645a:	b921      	cbnz	r1, 8006466 <_realloc_r+0x16>
 800645c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006460:	4611      	mov	r1, r2
 8006462:	f7ff bf81 	b.w	8006368 <_malloc_r>
 8006466:	b92a      	cbnz	r2, 8006474 <_realloc_r+0x24>
 8006468:	f7ff ff12 	bl	8006290 <_free_r>
 800646c:	4625      	mov	r5, r4
 800646e:	4628      	mov	r0, r5
 8006470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006474:	f000 f838 	bl	80064e8 <_malloc_usable_size_r>
 8006478:	4284      	cmp	r4, r0
 800647a:	4607      	mov	r7, r0
 800647c:	d802      	bhi.n	8006484 <_realloc_r+0x34>
 800647e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006482:	d812      	bhi.n	80064aa <_realloc_r+0x5a>
 8006484:	4621      	mov	r1, r4
 8006486:	4640      	mov	r0, r8
 8006488:	f7ff ff6e 	bl	8006368 <_malloc_r>
 800648c:	4605      	mov	r5, r0
 800648e:	2800      	cmp	r0, #0
 8006490:	d0ed      	beq.n	800646e <_realloc_r+0x1e>
 8006492:	42bc      	cmp	r4, r7
 8006494:	4622      	mov	r2, r4
 8006496:	4631      	mov	r1, r6
 8006498:	bf28      	it	cs
 800649a:	463a      	movcs	r2, r7
 800649c:	f7ff fbb8 	bl	8005c10 <memcpy>
 80064a0:	4631      	mov	r1, r6
 80064a2:	4640      	mov	r0, r8
 80064a4:	f7ff fef4 	bl	8006290 <_free_r>
 80064a8:	e7e1      	b.n	800646e <_realloc_r+0x1e>
 80064aa:	4635      	mov	r5, r6
 80064ac:	e7df      	b.n	800646e <_realloc_r+0x1e>
	...

080064b0 <_sbrk_r>:
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	4d06      	ldr	r5, [pc, #24]	; (80064cc <_sbrk_r+0x1c>)
 80064b4:	2300      	movs	r3, #0
 80064b6:	4604      	mov	r4, r0
 80064b8:	4608      	mov	r0, r1
 80064ba:	602b      	str	r3, [r5, #0]
 80064bc:	f7fa fd62 	bl	8000f84 <_sbrk>
 80064c0:	1c43      	adds	r3, r0, #1
 80064c2:	d102      	bne.n	80064ca <_sbrk_r+0x1a>
 80064c4:	682b      	ldr	r3, [r5, #0]
 80064c6:	b103      	cbz	r3, 80064ca <_sbrk_r+0x1a>
 80064c8:	6023      	str	r3, [r4, #0]
 80064ca:	bd38      	pop	{r3, r4, r5, pc}
 80064cc:	20013278 	.word	0x20013278

080064d0 <__malloc_lock>:
 80064d0:	4801      	ldr	r0, [pc, #4]	; (80064d8 <__malloc_lock+0x8>)
 80064d2:	f000 b811 	b.w	80064f8 <__retarget_lock_acquire_recursive>
 80064d6:	bf00      	nop
 80064d8:	2001327c 	.word	0x2001327c

080064dc <__malloc_unlock>:
 80064dc:	4801      	ldr	r0, [pc, #4]	; (80064e4 <__malloc_unlock+0x8>)
 80064de:	f000 b80c 	b.w	80064fa <__retarget_lock_release_recursive>
 80064e2:	bf00      	nop
 80064e4:	2001327c 	.word	0x2001327c

080064e8 <_malloc_usable_size_r>:
 80064e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064ec:	1f18      	subs	r0, r3, #4
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	bfbc      	itt	lt
 80064f2:	580b      	ldrlt	r3, [r1, r0]
 80064f4:	18c0      	addlt	r0, r0, r3
 80064f6:	4770      	bx	lr

080064f8 <__retarget_lock_acquire_recursive>:
 80064f8:	4770      	bx	lr

080064fa <__retarget_lock_release_recursive>:
 80064fa:	4770      	bx	lr

080064fc <_init>:
 80064fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fe:	bf00      	nop
 8006500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006502:	bc08      	pop	{r3}
 8006504:	469e      	mov	lr, r3
 8006506:	4770      	bx	lr

08006508 <_fini>:
 8006508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800650a:	bf00      	nop
 800650c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800650e:	bc08      	pop	{r3}
 8006510:	469e      	mov	lr, r3
 8006512:	4770      	bx	lr
