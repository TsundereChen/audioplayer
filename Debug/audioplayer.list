
audioplayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008354  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  080084e4  080084e4  000184e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800894c  0800894c  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800894c  0800894c  0001894c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008954  08008954  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008954  08008954  00018954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008958  08008958  00018958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800895c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b0  2**0
                  CONTENTS
 10 .bss          00013454  200000b0  200000b0  000200b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20013504  20013504  000200b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d27c  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fd6  00000000  00000000  0003d35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019d0  00000000  00000000  00041338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001840  00000000  00000000  00042d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000577f  00000000  00000000  00044548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000202d3  00000000  00000000  00049cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8af2  00000000  00000000  00069f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00142a8c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007098  00000000  00000000  00142adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080084cc 	.word	0x080084cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	080084cc 	.word	0x080084cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <LCD_Init>:
   
   0xFF
};
//----------------------------------------------------------------------------------
void LCD_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af02      	add	r7, sp, #8
   HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, comm, sizeof(comm),10);
 800058a:	230a      	movs	r3, #10
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	231b      	movs	r3, #27
 8000590:	4a03      	ldr	r2, [pc, #12]	; (80005a0 <LCD_Init+0x1c>)
 8000592:	2178      	movs	r1, #120	; 0x78
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <LCD_Init+0x20>)
 8000596:	f002 feb9 	bl	800330c <HAL_I2C_Master_Transmit>
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000000 	.word	0x20000000
 80005a4:	2000052c 	.word	0x2000052c

080005a8 <LCD_command>:
//----------------------------------------------------------------------------------
void  LCD_command(uint8_t cmd)
{   
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af02      	add	r7, sp, #8
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
   uint8_t cmd_arr[2] = {0,0};
 80005b2:	2300      	movs	r3, #0
 80005b4:	81bb      	strh	r3, [r7, #12]
   cmd_arr[0] = COMMAND_MODE;
 80005b6:	2300      	movs	r3, #0
 80005b8:	733b      	strb	r3, [r7, #12]
   cmd_arr[1] = cmd;
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	737b      	strb	r3, [r7, #13]
   HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, cmd_arr, sizeof(cmd_arr),10);
 80005be:	f107 020c 	add.w	r2, r7, #12
 80005c2:	230a      	movs	r3, #10
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2302      	movs	r3, #2
 80005c8:	2178      	movs	r1, #120	; 0x78
 80005ca:	4803      	ldr	r0, [pc, #12]	; (80005d8 <LCD_command+0x30>)
 80005cc:	f002 fe9e 	bl	800330c <HAL_I2C_Master_Transmit>
}
 80005d0:	bf00      	nop
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	2000052c 	.word	0x2000052c

080005dc <LCD_Clear>:
{
   LCD_command(0xAE);
}
//----------------------------------------------------------------------------------
void LCD_Clear(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
   for(uint16_t ix = 1; ix < BUFF_SIZE; ix++)
 80005e2:	2301      	movs	r3, #1
 80005e4:	80fb      	strh	r3, [r7, #6]
 80005e6:	e006      	b.n	80005f6 <LCD_Clear+0x1a>
   {
      lcd_buff[ix] = 0;
 80005e8:	88fb      	ldrh	r3, [r7, #6]
 80005ea:	4a0b      	ldr	r2, [pc, #44]	; (8000618 <LCD_Clear+0x3c>)
 80005ec:	2100      	movs	r1, #0
 80005ee:	54d1      	strb	r1, [r2, r3]
   for(uint16_t ix = 1; ix < BUFF_SIZE; ix++)
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	3301      	adds	r3, #1
 80005f4:	80fb      	strh	r3, [r7, #6]
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005fc:	d9f4      	bls.n	80005e8 <LCD_Clear+0xc>
   }
   x_cur = 0;
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <LCD_Clear+0x40>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
   y_cur = 0;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <LCD_Clear+0x44>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	200000cc 	.word	0x200000cc
 800061c:	200002d0 	.word	0x200002d0
 8000620:	200002d1 	.word	0x200002d1

08000624 <LCD_Update>:
//----------------------------------------------------------------------------------
void LCD_Update(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af02      	add	r7, sp, #8
   LCD_command(0x21);		      // SSD1306_COLUMNADDR
 800062a:	2021      	movs	r0, #33	; 0x21
 800062c:	f7ff ffbc 	bl	80005a8 <LCD_command>
   LCD_command(column_start);     // column start
 8000630:	2000      	movs	r0, #0
 8000632:	f7ff ffb9 	bl	80005a8 <LCD_command>
   LCD_command(column_end);       // column end
 8000636:	207f      	movs	r0, #127	; 0x7f
 8000638:	f7ff ffb6 	bl	80005a8 <LCD_command>
   LCD_command(0x22);             // SSD1306_PAGEADDR
 800063c:	2022      	movs	r0, #34	; 0x22
 800063e:	f7ff ffb3 	bl	80005a8 <LCD_command>
   LCD_command(page_start);       // page start
 8000642:	2000      	movs	r0, #0
 8000644:	f7ff ffb0 	bl	80005a8 <LCD_command>
   LCD_command(page_end);         // page end (4 pages for 32 rows OLED)
 8000648:	2003      	movs	r0, #3
 800064a:	f7ff ffad 	bl	80005a8 <LCD_command>
   
   lcd_buff[0]= DATA_MODE;              
 800064e:	4b07      	ldr	r3, [pc, #28]	; (800066c <LCD_Update+0x48>)
 8000650:	2240      	movs	r2, #64	; 0x40
 8000652:	701a      	strb	r2, [r3, #0]
   
   HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, lcd_buff, BUFF_SIZE,50);
 8000654:	2332      	movs	r3, #50	; 0x32
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	f240 2301 	movw	r3, #513	; 0x201
 800065c:	4a03      	ldr	r2, [pc, #12]	; (800066c <LCD_Update+0x48>)
 800065e:	2178      	movs	r1, #120	; 0x78
 8000660:	4803      	ldr	r0, [pc, #12]	; (8000670 <LCD_Update+0x4c>)
 8000662:	f002 fe53 	bl	800330c <HAL_I2C_Master_Transmit>
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	200000cc 	.word	0x200000cc
 8000670:	2000052c 	.word	0x2000052c

08000674 <LCD_Chr>:
//----------------------------------------------------------------------------------
void LCD_Chr(char ch)
{
 8000674:	b490      	push	{r4, r7}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
   uint8_t i;   
   lcd_buff_idx=(y_cur*128 + x_cur*6) + 1;    
 800067e:	4b32      	ldr	r3, [pc, #200]	; (8000748 <LCD_Chr+0xd4>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	b29b      	uxth	r3, r3
 8000684:	01db      	lsls	r3, r3, #7
 8000686:	b29a      	uxth	r2, r3
 8000688:	4b30      	ldr	r3, [pc, #192]	; (800074c <LCD_Chr+0xd8>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	b29b      	uxth	r3, r3
 800068e:	4619      	mov	r1, r3
 8000690:	0049      	lsls	r1, r1, #1
 8000692:	440b      	add	r3, r1
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	b29b      	uxth	r3, r3
 8000698:	4413      	add	r3, r2
 800069a:	b29b      	uxth	r3, r3
 800069c:	3301      	adds	r3, #1
 800069e:	b29a      	uxth	r2, r3
 80006a0:	4b2b      	ldr	r3, [pc, #172]	; (8000750 <LCD_Chr+0xdc>)
 80006a2:	801a      	strh	r2, [r3, #0]
   if ((ch >= 0x20)&&(ch <= 0x7F)) ch -= 32;
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	2b1f      	cmp	r3, #31
 80006a8:	d907      	bls.n	80006ba <LCD_Chr+0x46>
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	db03      	blt.n	80006ba <LCD_Chr+0x46>
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	3b20      	subs	r3, #32
 80006b6:	71fb      	strb	r3, [r7, #7]
 80006b8:	e001      	b.n	80006be <LCD_Chr+0x4a>
   else ch = 95;   
 80006ba:	235f      	movs	r3, #95	; 0x5f
 80006bc:	71fb      	strb	r3, [r7, #7]
   for (i = 0; i < 5; i++)
 80006be:	2300      	movs	r3, #0
 80006c0:	73fb      	strb	r3, [r7, #15]
 80006c2:	e014      	b.n	80006ee <LCD_Chr+0x7a>
   {
        lcd_buff[lcd_buff_idx++] = font[(int) ch][i];
 80006c4:	79fa      	ldrb	r2, [r7, #7]
 80006c6:	7bf9      	ldrb	r1, [r7, #15]
 80006c8:	4b21      	ldr	r3, [pc, #132]	; (8000750 <LCD_Chr+0xdc>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	1c58      	adds	r0, r3, #1
 80006ce:	b284      	uxth	r4, r0
 80006d0:	481f      	ldr	r0, [pc, #124]	; (8000750 <LCD_Chr+0xdc>)
 80006d2:	8004      	strh	r4, [r0, #0]
 80006d4:	461c      	mov	r4, r3
 80006d6:	481f      	ldr	r0, [pc, #124]	; (8000754 <LCD_Chr+0xe0>)
 80006d8:	4613      	mov	r3, r2
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	4413      	add	r3, r2
 80006de:	4403      	add	r3, r0
 80006e0:	440b      	add	r3, r1
 80006e2:	781a      	ldrb	r2, [r3, #0]
 80006e4:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <LCD_Chr+0xe4>)
 80006e6:	551a      	strb	r2, [r3, r4]
   for (i = 0; i < 5; i++)
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	3301      	adds	r3, #1
 80006ec:	73fb      	strb	r3, [r7, #15]
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	2b04      	cmp	r3, #4
 80006f2:	d9e7      	bls.n	80006c4 <LCD_Chr+0x50>
   }
   lcd_buff[lcd_buff_idx++] = 0x00;  
 80006f4:	4b16      	ldr	r3, [pc, #88]	; (8000750 <LCD_Chr+0xdc>)
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	1c5a      	adds	r2, r3, #1
 80006fa:	b291      	uxth	r1, r2
 80006fc:	4a14      	ldr	r2, [pc, #80]	; (8000750 <LCD_Chr+0xdc>)
 80006fe:	8011      	strh	r1, [r2, #0]
 8000700:	461a      	mov	r2, r3
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <LCD_Chr+0xe4>)
 8000704:	2100      	movs	r1, #0
 8000706:	5499      	strb	r1, [r3, r2]
   x_cur++;
 8000708:	4b10      	ldr	r3, [pc, #64]	; (800074c <LCD_Chr+0xd8>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	3301      	adds	r3, #1
 800070e:	b2da      	uxtb	r2, r3
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <LCD_Chr+0xd8>)
 8000712:	701a      	strb	r2, [r3, #0]
   if (x_cur > 20)
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <LCD_Chr+0xd8>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b14      	cmp	r3, #20
 800071a:	d90f      	bls.n	800073c <LCD_Chr+0xc8>
   {
      x_cur = 0;
 800071c:	4b0b      	ldr	r3, [pc, #44]	; (800074c <LCD_Chr+0xd8>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
      y_cur++;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <LCD_Chr+0xd4>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	3301      	adds	r3, #1
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b07      	ldr	r3, [pc, #28]	; (8000748 <LCD_Chr+0xd4>)
 800072c:	701a      	strb	r2, [r3, #0]
      if (y_cur > 3)
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <LCD_Chr+0xd4>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b03      	cmp	r3, #3
 8000734:	d902      	bls.n	800073c <LCD_Chr+0xc8>
      {
         y_cur = 0;
 8000736:	4b04      	ldr	r3, [pc, #16]	; (8000748 <LCD_Chr+0xd4>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
      }
   }
}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bc90      	pop	{r4, r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	200002d1 	.word	0x200002d1
 800074c:	200002d0 	.word	0x200002d0
 8000750:	200002ce 	.word	0x200002ce
 8000754:	08008720 	.word	0x08008720
 8000758:	200000cc 	.word	0x200000cc

0800075c <LCD_FStr>:
      }
   }
}
//----------------------------------------------------------------------------------
void LCD_FStr(const char *dataPtr, uint8_t x, uint8_t y)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	70fb      	strb	r3, [r7, #3]
 8000768:	4613      	mov	r3, r2
 800076a:	70bb      	strb	r3, [r7, #2]
   LCD_GotoXY(x,y);
 800076c:	78ba      	ldrb	r2, [r7, #2]
 800076e:	78fb      	ldrb	r3, [r7, #3]
 8000770:	4611      	mov	r1, r2
 8000772:	4618      	mov	r0, r3
 8000774:	f000 f812 	bl	800079c <LCD_GotoXY>
   while(*dataPtr != 0)
 8000778:	e007      	b.n	800078a <LCD_FStr+0x2e>
   {
      LCD_Chr(*dataPtr);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff ff78 	bl	8000674 <LCD_Chr>
      dataPtr++;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3301      	adds	r3, #1
 8000788:	607b      	str	r3, [r7, #4]
   while(*dataPtr != 0)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1f3      	bne.n	800077a <LCD_FStr+0x1e>
   }
}
 8000792:	bf00      	nop
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <LCD_GotoXY>:
      dataPtr++;
   }
}
////----------------------------------------------------
void LCD_GotoXY(uint8_t x,uint8_t y)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	460a      	mov	r2, r1
 80007a6:	71fb      	strb	r3, [r7, #7]
 80007a8:	4613      	mov	r3, r2
 80007aa:	71bb      	strb	r3, [r7, #6]
   if((x < 21)&&(y < (page_end+1)))
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	2b14      	cmp	r3, #20
 80007b0:	d808      	bhi.n	80007c4 <LCD_GotoXY+0x28>
 80007b2:	79bb      	ldrb	r3, [r7, #6]
 80007b4:	2b03      	cmp	r3, #3
 80007b6:	d805      	bhi.n	80007c4 <LCD_GotoXY+0x28>
   {
      x_cur = x;
 80007b8:	4a05      	ldr	r2, [pc, #20]	; (80007d0 <LCD_GotoXY+0x34>)
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	7013      	strb	r3, [r2, #0]
      y_cur = y;
 80007be:	4a05      	ldr	r2, [pc, #20]	; (80007d4 <LCD_GotoXY+0x38>)
 80007c0:	79bb      	ldrb	r3, [r7, #6]
 80007c2:	7013      	strb	r3, [r2, #0]
   }
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	200002d0 	.word	0x200002d0
 80007d4:	200002d1 	.word	0x200002d1

080007d8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	4a08      	ldr	r2, [pc, #32]	; (8000808 <disk_status+0x30>)
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	4413      	add	r3, r2
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	79fa      	ldrb	r2, [r7, #7]
 80007f0:	4905      	ldr	r1, [pc, #20]	; (8000808 <disk_status+0x30>)
 80007f2:	440a      	add	r2, r1
 80007f4:	7a12      	ldrb	r2, [r2, #8]
 80007f6:	4610      	mov	r0, r2
 80007f8:	4798      	blx	r3
 80007fa:	4603      	mov	r3, r0
 80007fc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000800:	4618      	mov	r0, r3
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000520 	.word	0x20000520

0800080c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8000816:	2300      	movs	r3, #0
 8000818:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	4a0d      	ldr	r2, [pc, #52]	; (8000854 <disk_initialize+0x48>)
 800081e:	5cd3      	ldrb	r3, [r2, r3]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d111      	bne.n	8000848 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <disk_initialize+0x48>)
 8000828:	2101      	movs	r1, #1
 800082a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	4a09      	ldr	r2, [pc, #36]	; (8000854 <disk_initialize+0x48>)
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	4413      	add	r3, r2
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	79fa      	ldrb	r2, [r7, #7]
 800083a:	4906      	ldr	r1, [pc, #24]	; (8000854 <disk_initialize+0x48>)
 800083c:	440a      	add	r2, r1
 800083e:	7a12      	ldrb	r2, [r2, #8]
 8000840:	4610      	mov	r0, r2
 8000842:	4798      	blx	r3
 8000844:	4603      	mov	r3, r0
 8000846:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8000848:	7bfb      	ldrb	r3, [r7, #15]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000520 	.word	0x20000520

08000858 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b087      	sub	sp, #28
 800085c:	af00      	add	r7, sp, #0
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607a      	str	r2, [r7, #4]
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	4603      	mov	r3, r0
 8000866:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8000868:	7bfb      	ldrb	r3, [r7, #15]
 800086a:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <disk_read+0x3c>)
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	4413      	add	r3, r2
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	689c      	ldr	r4, [r3, #8]
 8000874:	7bfb      	ldrb	r3, [r7, #15]
 8000876:	4a07      	ldr	r2, [pc, #28]	; (8000894 <disk_read+0x3c>)
 8000878:	4413      	add	r3, r2
 800087a:	7a18      	ldrb	r0, [r3, #8]
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	68b9      	ldr	r1, [r7, #8]
 8000882:	47a0      	blx	r4
 8000884:	4603      	mov	r3, r0
 8000886:	75fb      	strb	r3, [r7, #23]
  return res;
 8000888:	7dfb      	ldrb	r3, [r7, #23]
}
 800088a:	4618      	mov	r0, r3
 800088c:	371c      	adds	r7, #28
 800088e:	46bd      	mov	sp, r7
 8000890:	bd90      	pop	{r4, r7, pc}
 8000892:	bf00      	nop
 8000894:	20000520 	.word	0x20000520

08000898 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b087      	sub	sp, #28
 800089c:	af00      	add	r7, sp, #0
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	4603      	mov	r3, r0
 80008a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <disk_write+0x3c>)
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	4413      	add	r3, r2
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	68dc      	ldr	r4, [r3, #12]
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	4a07      	ldr	r2, [pc, #28]	; (80008d4 <disk_write+0x3c>)
 80008b8:	4413      	add	r3, r2
 80008ba:	7a18      	ldrb	r0, [r3, #8]
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	68b9      	ldr	r1, [r7, #8]
 80008c2:	47a0      	blx	r4
 80008c4:	4603      	mov	r3, r0
 80008c6:	75fb      	strb	r3, [r7, #23]
  return res;
 80008c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	371c      	adds	r7, #28
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd90      	pop	{r4, r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000520 	.word	0x20000520

080008d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b0c0      	sub	sp, #256	; 0x100
 80008dc:	af00      	add	r7, sp, #0
    /*## FatFS: Link the USER driver ###########################*/
    retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80008de:	4912      	ldr	r1, [pc, #72]	; (8000928 <MX_FATFS_Init+0x50>)
 80008e0:	4812      	ldr	r0, [pc, #72]	; (800092c <MX_FATFS_Init+0x54>)
 80008e2:	f000 fdd7 	bl	8001494 <FATFS_LinkDriver>
 80008e6:	4603      	mov	r3, r0
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_FATFS_Init+0x58>)
 80008ec:	701a      	strb	r2, [r3, #0]

    /* USER CODE BEGIN Init */
    char buf[256];
    sprintf(buf, "# FatFs Init %s!\r\n", retUSER == 0 ? "Successfully" : "Failed");
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <MX_FATFS_Init+0x58>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d101      	bne.n	80008fa <MX_FATFS_Init+0x22>
 80008f6:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <MX_FATFS_Init+0x5c>)
 80008f8:	e000      	b.n	80008fc <MX_FATFS_Init+0x24>
 80008fa:	4a0f      	ldr	r2, [pc, #60]	; (8000938 <MX_FATFS_Init+0x60>)
 80008fc:	463b      	mov	r3, r7
 80008fe:	490f      	ldr	r1, [pc, #60]	; (800093c <MX_FATFS_Init+0x64>)
 8000900:	4618      	mov	r0, r3
 8000902:	f007 f983 	bl	8007c0c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 8000906:	463b      	mov	r3, r7
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fc61 	bl	80001d0 <strlen>
 800090e:	4603      	mov	r3, r0
 8000910:	b29a      	uxth	r2, r3
 8000912:	4639      	mov	r1, r7
 8000914:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000918:	4809      	ldr	r0, [pc, #36]	; (8000940 <MX_FATFS_Init+0x68>)
 800091a:	f004 faa2 	bl	8004e62 <HAL_UART_Transmit>
    /* USER CODE END Init */
}
 800091e:	bf00      	nop
 8000920:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	200002d4 	.word	0x200002d4
 800092c:	2000002c 	.word	0x2000002c
 8000930:	200002d2 	.word	0x200002d2
 8000934:	080084e4 	.word	0x080084e4
 8000938:	080084f4 	.word	0x080084f4
 800093c:	080084fc 	.word	0x080084fc
 8000940:	200005d8 	.word	0x200005d8

08000944 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3301      	adds	r3, #1
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8000954:	89fb      	ldrh	r3, [r7, #14]
 8000956:	021b      	lsls	r3, r3, #8
 8000958:	b21a      	sxth	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	b21b      	sxth	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b21b      	sxth	r3, r3
 8000964:	81fb      	strh	r3, [r7, #14]
	return rv;
 8000966:	89fb      	ldrh	r3, [r7, #14]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3303      	adds	r3, #3
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	021b      	lsls	r3, r3, #8
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	3202      	adds	r2, #2
 800098c:	7812      	ldrb	r2, [r2, #0]
 800098e:	4313      	orrs	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	021b      	lsls	r3, r3, #8
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	3201      	adds	r2, #1
 800099a:	7812      	ldrb	r2, [r2, #0]
 800099c:	4313      	orrs	r3, r2
 800099e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	021b      	lsls	r3, r3, #8
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	7812      	ldrb	r2, [r2, #0]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	60fb      	str	r3, [r7, #12]
	return rv;
 80009ac:	68fb      	ldr	r3, [r7, #12]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
	...

080009bc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	e010      	b.n	80009ec <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80009ca:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <clear_lock+0x44>)
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	011b      	lsls	r3, r3, #4
 80009d0:	4413      	add	r3, r2
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d105      	bne.n	80009e6 <clear_lock+0x2a>
 80009da:	4a09      	ldr	r2, [pc, #36]	; (8000a00 <clear_lock+0x44>)
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	011b      	lsls	r3, r3, #4
 80009e0:	4413      	add	r3, r2
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	3301      	adds	r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d0eb      	beq.n	80009ca <clear_lock+0xe>
	}
}
 80009f2:	bf00      	nop
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	20000510 	.word	0x20000510

08000a04 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	78db      	ldrb	r3, [r3, #3]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d034      	beq.n	8000a82 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	7858      	ldrb	r0, [r3, #1]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8000a28:	2301      	movs	r3, #1
 8000a2a:	697a      	ldr	r2, [r7, #20]
 8000a2c:	f7ff ff34 	bl	8000898 <disk_write>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d002      	beq.n	8000a3c <sync_window+0x38>
			res = FR_DISK_ERR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	73fb      	strb	r3, [r7, #15]
 8000a3a:	e022      	b.n	8000a82 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6a1b      	ldr	r3, [r3, #32]
 8000a46:	697a      	ldr	r2, [r7, #20]
 8000a48:	1ad2      	subs	r2, r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d217      	bcs.n	8000a82 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	789b      	ldrb	r3, [r3, #2]
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	e010      	b.n	8000a7c <sync_window+0x78>
					wsect += fs->fsize;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	697a      	ldr	r2, [r7, #20]
 8000a60:	4413      	add	r3, r2
 8000a62:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	7858      	ldrb	r0, [r3, #1]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8000a6e:	2301      	movs	r3, #1
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	f7ff ff11 	bl	8000898 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d8eb      	bhi.n	8000a5a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9e:	683a      	ldr	r2, [r7, #0]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d01b      	beq.n	8000adc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ffad 	bl	8000a04 <sync_window>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8000aae:	7bfb      	ldrb	r3, [r7, #15]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d113      	bne.n	8000adc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	7858      	ldrb	r0, [r3, #1]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8000abe:	2301      	movs	r3, #1
 8000ac0:	683a      	ldr	r2, [r7, #0]
 8000ac2:	f7ff fec9 	bl	8000858 <disk_read>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d004      	beq.n	8000ad6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8000acc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ad0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b086      	sub	sp, #24
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d904      	bls.n	8000b06 <get_fat+0x20>
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	695b      	ldr	r3, [r3, #20]
 8000b00:	683a      	ldr	r2, [r7, #0]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d302      	bcc.n	8000b0c <get_fat+0x26>
		val = 1;	/* Internal error */
 8000b06:	2301      	movs	r3, #1
 8000b08:	617b      	str	r3, [r7, #20]
 8000b0a:	e08f      	b.n	8000c2c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8000b0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b10:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b03      	cmp	r3, #3
 8000b18:	d062      	beq.n	8000be0 <get_fat+0xfa>
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	dc7c      	bgt.n	8000c18 <get_fat+0x132>
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d002      	beq.n	8000b28 <get_fat+0x42>
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d042      	beq.n	8000bac <get_fat+0xc6>
 8000b26:	e077      	b.n	8000c18 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	085b      	lsrs	r3, r3, #1
 8000b30:	68fa      	ldr	r2, [r7, #12]
 8000b32:	4413      	add	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	6a1a      	ldr	r2, [r3, #32]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	0a5b      	lsrs	r3, r3, #9
 8000b3e:	4413      	add	r3, r2
 8000b40:	4619      	mov	r1, r3
 8000b42:	6938      	ldr	r0, [r7, #16]
 8000b44:	f7ff ffa2 	bl	8000a8c <move_window>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d167      	bne.n	8000c1e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	1c5a      	adds	r2, r3, #1
 8000b52:	60fa      	str	r2, [r7, #12]
 8000b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b60:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	6a1a      	ldr	r2, [r3, #32]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	0a5b      	lsrs	r3, r3, #9
 8000b6a:	4413      	add	r3, r2
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	6938      	ldr	r0, [r7, #16]
 8000b70:	f7ff ff8c 	bl	8000a8c <move_window>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d153      	bne.n	8000c22 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	4413      	add	r3, r2
 8000b84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b88:	021b      	lsls	r3, r3, #8
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d002      	beq.n	8000ba2 <get_fat+0xbc>
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	091b      	lsrs	r3, r3, #4
 8000ba0:	e002      	b.n	8000ba8 <get_fat+0xc2>
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ba8:	617b      	str	r3, [r7, #20]
			break;
 8000baa:	e03f      	b.n	8000c2c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	6a1a      	ldr	r2, [r3, #32]
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	0a1b      	lsrs	r3, r3, #8
 8000bb4:	4413      	add	r3, r2
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	6938      	ldr	r0, [r7, #16]
 8000bba:	f7ff ff67 	bl	8000a8c <move_window>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d130      	bne.n	8000c26 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8000bd2:	4413      	add	r3, r2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff feb5 	bl	8000944 <ld_word>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	617b      	str	r3, [r7, #20]
			break;
 8000bde:	e025      	b.n	8000c2c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	6a1a      	ldr	r2, [r3, #32]
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	09db      	lsrs	r3, r3, #7
 8000be8:	4413      	add	r3, r2
 8000bea:	4619      	mov	r1, r3
 8000bec:	6938      	ldr	r0, [r7, #16]
 8000bee:	f7ff ff4d 	bl	8000a8c <move_window>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d118      	bne.n	8000c2a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8000c06:	4413      	add	r3, r2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff feb3 	bl	8000974 <ld_dword>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000c14:	617b      	str	r3, [r7, #20]
			break;
 8000c16:	e009      	b.n	8000c2c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8000c18:	2301      	movs	r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	e006      	b.n	8000c2c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8000c1e:	bf00      	nop
 8000c20:	e004      	b.n	8000c2c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8000c22:	bf00      	nop
 8000c24:	e002      	b.n	8000c2c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8000c26:	bf00      	nop
 8000c28:	e000      	b.n	8000c2c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8000c2a:	bf00      	nop
		}
	}

	return val;
 8000c2c:	697b      	ldr	r3, [r7, #20]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b087      	sub	sp, #28
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c42:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d031      	beq.n	8000cb0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	e002      	b.n	8000c5a <get_ldnumber+0x24>
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	3301      	adds	r3, #1
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b20      	cmp	r3, #32
 8000c60:	d903      	bls.n	8000c6a <get_ldnumber+0x34>
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b3a      	cmp	r3, #58	; 0x3a
 8000c68:	d1f4      	bne.n	8000c54 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b3a      	cmp	r3, #58	; 0x3a
 8000c70:	d11c      	bne.n	8000cac <get_ldnumber+0x76>
			tp = *path;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	1c5a      	adds	r2, r3, #1
 8000c7c:	60fa      	str	r2, [r7, #12]
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	3b30      	subs	r3, #48	; 0x30
 8000c82:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	2b09      	cmp	r3, #9
 8000c88:	d80e      	bhi.n	8000ca8 <get_ldnumber+0x72>
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d10a      	bne.n	8000ca8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d107      	bne.n	8000ca8 <get_ldnumber+0x72>
					vol = (int)i;
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	697a      	ldr	r2, [r7, #20]
 8000ca6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	e002      	b.n	8000cb2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8000cac:	2300      	movs	r3, #0
 8000cae:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8000cb0:	693b      	ldr	r3, [r7, #16]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	371c      	adds	r7, #28
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	70da      	strb	r2, [r3, #3]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cd6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8000cd8:	6839      	ldr	r1, [r7, #0]
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff fed6 	bl	8000a8c <move_window>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <check_fs+0x2a>
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	e038      	b.n	8000d5c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3330      	adds	r3, #48	; 0x30
 8000cee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fe26 	bl	8000944 <ld_word>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d001      	beq.n	8000d08 <check_fs+0x48>
 8000d04:	2303      	movs	r3, #3
 8000d06:	e029      	b.n	8000d5c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d0e:	2be9      	cmp	r3, #233	; 0xe9
 8000d10:	d009      	beq.n	8000d26 <check_fs+0x66>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d18:	2beb      	cmp	r3, #235	; 0xeb
 8000d1a:	d11e      	bne.n	8000d5a <check_fs+0x9a>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000d22:	2b90      	cmp	r3, #144	; 0x90
 8000d24:	d119      	bne.n	8000d5a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3330      	adds	r3, #48	; 0x30
 8000d2a:	3336      	adds	r3, #54	; 0x36
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fe21 	bl	8000974 <ld_dword>
 8000d32:	4603      	mov	r3, r0
 8000d34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000d38:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <check_fs+0xa4>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d101      	bne.n	8000d42 <check_fs+0x82>
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e00c      	b.n	8000d5c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3330      	adds	r3, #48	; 0x30
 8000d46:	3352      	adds	r3, #82	; 0x52
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fe13 	bl	8000974 <ld_dword>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <check_fs+0xa8>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d101      	bne.n	8000d5a <check_fs+0x9a>
 8000d56:	2300      	movs	r3, #0
 8000d58:	e000      	b.n	8000d5c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8000d5a:	2302      	movs	r3, #2
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	00544146 	.word	0x00544146
 8000d68:	33544146 	.word	0x33544146

08000d6c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b096      	sub	sp, #88	; 0x58
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	4613      	mov	r3, r2
 8000d78:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8000d80:	68f8      	ldr	r0, [r7, #12]
 8000d82:	f7ff ff58 	bl	8000c36 <get_ldnumber>
 8000d86:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8000d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	da01      	bge.n	8000d92 <find_volume+0x26>
 8000d8e:	230b      	movs	r3, #11
 8000d90:	e22d      	b.n	80011ee <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8000d92:	4aa1      	ldr	r2, [pc, #644]	; (8001018 <find_volume+0x2ac>)
 8000d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d9a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8000d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <find_volume+0x3a>
 8000da2:	230c      	movs	r3, #12
 8000da4:	e223      	b.n	80011ee <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000daa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f023 0301 	bic.w	r3, r3, #1
 8000db2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8000db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d01a      	beq.n	8000df2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8000dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dbe:	785b      	ldrb	r3, [r3, #1]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fd09 	bl	80007d8 <disk_status>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8000dcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d10c      	bne.n	8000df2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d007      	beq.n	8000dee <find_volume+0x82>
 8000dde:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8000dea:	230a      	movs	r3, #10
 8000dec:	e1ff      	b.n	80011ee <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8000dee:	2300      	movs	r3, #0
 8000df0:	e1fd      	b.n	80011ee <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8000df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8000df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dfe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8000e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e02:	785b      	ldrb	r3, [r3, #1]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fd01 	bl	800080c <disk_initialize>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8000e10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e1e6      	b.n	80011ee <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d007      	beq.n	8000e36 <find_volume+0xca>
 8000e26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8000e32:	230a      	movs	r3, #10
 8000e34:	e1db      	b.n	80011ee <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8000e3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000e3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000e3e:	f7ff ff3f 	bl	8000cc0 <check_fs>
 8000e42:	4603      	mov	r3, r0
 8000e44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8000e48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d149      	bne.n	8000ee4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8000e50:	2300      	movs	r3, #0
 8000e52:	643b      	str	r3, [r7, #64]	; 0x40
 8000e54:	e01e      	b.n	8000e94 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8000e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e58:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e5e:	011b      	lsls	r3, r3, #4
 8000e60:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8000e64:	4413      	add	r3, r2
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8000e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e6a:	3304      	adds	r3, #4
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d006      	beq.n	8000e80 <find_volume+0x114>
 8000e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e74:	3308      	adds	r3, #8
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fd7c 	bl	8000974 <ld_dword>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	e000      	b.n	8000e82 <find_volume+0x116>
 8000e80:	2200      	movs	r2, #0
 8000e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	3358      	adds	r3, #88	; 0x58
 8000e88:	443b      	add	r3, r7
 8000e8a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8000e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e90:	3301      	adds	r3, #1
 8000e92:	643b      	str	r3, [r7, #64]	; 0x40
 8000e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	d9dd      	bls.n	8000e56 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8000e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d002      	beq.n	8000eaa <find_volume+0x13e>
 8000ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8000eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	3358      	adds	r3, #88	; 0x58
 8000eb0:	443b      	add	r3, r7
 8000eb2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8000eb6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8000eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d005      	beq.n	8000eca <find_volume+0x15e>
 8000ebe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000ec0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000ec2:	f7ff fefd 	bl	8000cc0 <check_fs>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	e000      	b.n	8000ecc <find_volume+0x160>
 8000eca:	2303      	movs	r3, #3
 8000ecc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8000ed0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d905      	bls.n	8000ee4 <find_volume+0x178>
 8000ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000eda:	3301      	adds	r3, #1
 8000edc:	643b      	str	r3, [r7, #64]	; 0x40
 8000ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d9e2      	bls.n	8000eaa <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8000ee4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000ee8:	2b04      	cmp	r3, #4
 8000eea:	d101      	bne.n	8000ef0 <find_volume+0x184>
 8000eec:	2301      	movs	r3, #1
 8000eee:	e17e      	b.n	80011ee <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8000ef0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d901      	bls.n	8000efc <find_volume+0x190>
 8000ef8:	230d      	movs	r3, #13
 8000efa:	e178      	b.n	80011ee <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8000efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000efe:	3330      	adds	r3, #48	; 0x30
 8000f00:	330b      	adds	r3, #11
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fd1e 	bl	8000944 <ld_word>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f0e:	d001      	beq.n	8000f14 <find_volume+0x1a8>
 8000f10:	230d      	movs	r3, #13
 8000f12:	e16c      	b.n	80011ee <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8000f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f16:	3330      	adds	r3, #48	; 0x30
 8000f18:	3316      	adds	r3, #22
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fd12 	bl	8000944 <ld_word>
 8000f20:	4603      	mov	r3, r0
 8000f22:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8000f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d106      	bne.n	8000f38 <find_volume+0x1cc>
 8000f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f2c:	3330      	adds	r3, #48	; 0x30
 8000f2e:	3324      	adds	r3, #36	; 0x24
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fd1f 	bl	8000974 <ld_dword>
 8000f36:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8000f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f3c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8000f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f40:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8000f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f46:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8000f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f4a:	789b      	ldrb	r3, [r3, #2]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d005      	beq.n	8000f5c <find_volume+0x1f0>
 8000f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f52:	789b      	ldrb	r3, [r3, #2]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d001      	beq.n	8000f5c <find_volume+0x1f0>
 8000f58:	230d      	movs	r3, #13
 8000f5a:	e148      	b.n	80011ee <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8000f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f5e:	789b      	ldrb	r3, [r3, #2]
 8000f60:	461a      	mov	r2, r3
 8000f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f64:	fb02 f303 	mul.w	r3, r2, r3
 8000f68:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8000f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f74:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8000f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f78:	895b      	ldrh	r3, [r3, #10]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d008      	beq.n	8000f90 <find_volume+0x224>
 8000f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f80:	895b      	ldrh	r3, [r3, #10]
 8000f82:	461a      	mov	r2, r3
 8000f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f86:	895b      	ldrh	r3, [r3, #10]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <find_volume+0x228>
 8000f90:	230d      	movs	r3, #13
 8000f92:	e12c      	b.n	80011ee <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8000f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f96:	3330      	adds	r3, #48	; 0x30
 8000f98:	3311      	adds	r3, #17
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fcd2 	bl	8000944 <ld_word>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fa6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8000fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000faa:	891b      	ldrh	r3, [r3, #8]
 8000fac:	f003 030f 	and.w	r3, r3, #15
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <find_volume+0x24e>
 8000fb6:	230d      	movs	r3, #13
 8000fb8:	e119      	b.n	80011ee <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8000fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fbc:	3330      	adds	r3, #48	; 0x30
 8000fbe:	3313      	adds	r3, #19
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fcbf 	bl	8000944 <ld_word>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8000fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d106      	bne.n	8000fde <find_volume+0x272>
 8000fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fd2:	3330      	adds	r3, #48	; 0x30
 8000fd4:	3320      	adds	r3, #32
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fccc 	bl	8000974 <ld_dword>
 8000fdc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8000fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fe0:	3330      	adds	r3, #48	; 0x30
 8000fe2:	330e      	adds	r3, #14
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fcad 	bl	8000944 <ld_word>
 8000fea:	4603      	mov	r3, r0
 8000fec:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8000fee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d101      	bne.n	8000ff8 <find_volume+0x28c>
 8000ff4:	230d      	movs	r3, #13
 8000ff6:	e0fa      	b.n	80011ee <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8000ff8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ffc:	4413      	add	r3, r2
 8000ffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001000:	8912      	ldrh	r2, [r2, #8]
 8001002:	0912      	lsrs	r2, r2, #4
 8001004:	b292      	uxth	r2, r2
 8001006:	4413      	add	r3, r2
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800100a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800100c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100e:	429a      	cmp	r2, r3
 8001010:	d204      	bcs.n	800101c <find_volume+0x2b0>
 8001012:	230d      	movs	r3, #13
 8001014:	e0eb      	b.n	80011ee <find_volume+0x482>
 8001016:	bf00      	nop
 8001018:	20000508 	.word	0x20000508
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800101c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800101e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001024:	8952      	ldrh	r2, [r2, #10]
 8001026:	fbb3 f3f2 	udiv	r3, r3, r2
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <find_volume+0x2ca>
 8001032:	230d      	movs	r3, #13
 8001034:	e0db      	b.n	80011ee <find_volume+0x482>
		fmt = FS_FAT32;
 8001036:	2303      	movs	r3, #3
 8001038:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8001042:	4293      	cmp	r3, r2
 8001044:	d802      	bhi.n	800104c <find_volume+0x2e0>
 8001046:	2302      	movs	r3, #2
 8001048:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8001052:	4293      	cmp	r3, r2
 8001054:	d802      	bhi.n	800105c <find_volume+0x2f0>
 8001056:	2301      	movs	r3, #1
 8001058:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105e:	1c9a      	adds	r2, r3, #2
 8001060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001062:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8001064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001066:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001068:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800106a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800106c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800106e:	441a      	add	r2, r3
 8001070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001072:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8001074:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001078:	441a      	add	r2, r3
 800107a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800107c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800107e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001082:	2b03      	cmp	r3, #3
 8001084:	d11e      	bne.n	80010c4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8001086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001088:	3330      	adds	r3, #48	; 0x30
 800108a:	332a      	adds	r3, #42	; 0x2a
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fc59 	bl	8000944 <ld_word>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <find_volume+0x330>
 8001098:	230d      	movs	r3, #13
 800109a:	e0a8      	b.n	80011ee <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800109c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800109e:	891b      	ldrh	r3, [r3, #8]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <find_volume+0x33c>
 80010a4:	230d      	movs	r3, #13
 80010a6:	e0a2      	b.n	80011ee <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80010a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010aa:	3330      	adds	r3, #48	; 0x30
 80010ac:	332c      	adds	r3, #44	; 0x2c
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fc60 	bl	8000974 <ld_dword>
 80010b4:	4602      	mov	r2, r0
 80010b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80010ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	647b      	str	r3, [r7, #68]	; 0x44
 80010c2:	e01f      	b.n	8001104 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80010c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010c6:	891b      	ldrh	r3, [r3, #8]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <find_volume+0x364>
 80010cc:	230d      	movs	r3, #13
 80010ce:	e08e      	b.n	80011ee <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80010d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010d2:	6a1a      	ldr	r2, [r3, #32]
 80010d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010d6:	441a      	add	r2, r3
 80010d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010da:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80010dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d103      	bne.n	80010ec <find_volume+0x380>
 80010e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	e00a      	b.n	8001102 <find_volume+0x396>
 80010ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010ee:	695a      	ldr	r2, [r3, #20]
 80010f0:	4613      	mov	r3, r2
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	4413      	add	r3, r2
 80010f6:	085a      	lsrs	r2, r3, #1
 80010f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8001102:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8001104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001106:	699a      	ldr	r2, [r3, #24]
 8001108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800110a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800110e:	0a5b      	lsrs	r3, r3, #9
 8001110:	429a      	cmp	r2, r3
 8001112:	d201      	bcs.n	8001118 <find_volume+0x3ac>
 8001114:	230d      	movs	r3, #13
 8001116:	e06a      	b.n	80011ee <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8001118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800111a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800111e:	611a      	str	r2, [r3, #16]
 8001120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001122:	691a      	ldr	r2, [r3, #16]
 8001124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001126:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8001128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800112a:	2280      	movs	r2, #128	; 0x80
 800112c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800112e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001132:	2b03      	cmp	r3, #3
 8001134:	d149      	bne.n	80011ca <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8001136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001138:	3330      	adds	r3, #48	; 0x30
 800113a:	3330      	adds	r3, #48	; 0x30
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fc01 	bl	8000944 <ld_word>
 8001142:	4603      	mov	r3, r0
 8001144:	2b01      	cmp	r3, #1
 8001146:	d140      	bne.n	80011ca <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8001148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800114a:	3301      	adds	r3, #1
 800114c:	4619      	mov	r1, r3
 800114e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001150:	f7ff fc9c 	bl	8000a8c <move_window>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d137      	bne.n	80011ca <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800115a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800115c:	2200      	movs	r2, #0
 800115e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8001160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001162:	3330      	adds	r3, #48	; 0x30
 8001164:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fbeb 	bl	8000944 <ld_word>
 800116e:	4603      	mov	r3, r0
 8001170:	461a      	mov	r2, r3
 8001172:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8001176:	429a      	cmp	r2, r3
 8001178:	d127      	bne.n	80011ca <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800117a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800117c:	3330      	adds	r3, #48	; 0x30
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fbf8 	bl	8000974 <ld_dword>
 8001184:	4603      	mov	r3, r0
 8001186:	4a1c      	ldr	r2, [pc, #112]	; (80011f8 <find_volume+0x48c>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d11e      	bne.n	80011ca <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800118c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800118e:	3330      	adds	r3, #48	; 0x30
 8001190:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fbed 	bl	8000974 <ld_dword>
 800119a:	4603      	mov	r3, r0
 800119c:	4a17      	ldr	r2, [pc, #92]	; (80011fc <find_volume+0x490>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d113      	bne.n	80011ca <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80011a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011a4:	3330      	adds	r3, #48	; 0x30
 80011a6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fbe2 	bl	8000974 <ld_dword>
 80011b0:	4602      	mov	r2, r0
 80011b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011b4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80011b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011b8:	3330      	adds	r3, #48	; 0x30
 80011ba:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fbd8 	bl	8000974 <ld_dword>
 80011c4:	4602      	mov	r2, r0
 80011c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011c8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80011ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011cc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80011d0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <find_volume+0x494>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	3301      	adds	r3, #1
 80011d8:	b29a      	uxth	r2, r3
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <find_volume+0x494>)
 80011dc:	801a      	strh	r2, [r3, #0]
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <find_volume+0x494>)
 80011e0:	881a      	ldrh	r2, [r3, #0]
 80011e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011e4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80011e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80011e8:	f7ff fbe8 	bl	80009bc <clear_lock>
#endif
	return FR_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3758      	adds	r7, #88	; 0x58
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	41615252 	.word	0x41615252
 80011fc:	61417272 	.word	0x61417272
 8001200:	2000050c 	.word	0x2000050c

08001204 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	4613      	mov	r3, r2
 8001210:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fd0b 	bl	8000c36 <get_ldnumber>
 8001220:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	2b00      	cmp	r3, #0
 8001226:	da01      	bge.n	800122c <f_mount+0x28>
 8001228:	230b      	movs	r3, #11
 800122a:	e02b      	b.n	8001284 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800122c:	4a17      	ldr	r2, [pc, #92]	; (800128c <f_mount+0x88>)
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001234:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800123c:	69b8      	ldr	r0, [r7, #24]
 800123e:	f7ff fbbd 	bl	80009bc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d002      	beq.n	8001254 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	490d      	ldr	r1, [pc, #52]	; (800128c <f_mount+0x88>)
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d002      	beq.n	800126a <f_mount+0x66>
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d001      	beq.n	800126e <f_mount+0x6a>
 800126a:	2300      	movs	r3, #0
 800126c:	e00a      	b.n	8001284 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800126e:	f107 010c 	add.w	r1, r7, #12
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	2200      	movs	r2, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fd77 	bl	8000d6c <find_volume>
 800127e:	4603      	mov	r3, r0
 8001280:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8001282:	7dfb      	ldrb	r3, [r7, #23]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3720      	adds	r7, #32
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000508 	.word	0x20000508

08001290 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b092      	sub	sp, #72	; 0x48
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800129c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	2200      	movs	r2, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fd60 	bl	8000d6c <find_volume>
 80012ac:	4603      	mov	r3, r0
 80012ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80012b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f040 8099 	bne.w	80013ee <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80012bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80012c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c4:	691a      	ldr	r2, [r3, #16]
 80012c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	3b02      	subs	r3, #2
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d804      	bhi.n	80012da <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80012d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d2:	691a      	ldr	r2, [r3, #16]
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	e089      	b.n	80013ee <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80012de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d128      	bne.n	8001338 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80012e6:	2302      	movs	r3, #2
 80012e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ec:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fbf6 	bl	8000ae6 <get_fat>
 80012fa:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80012fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001302:	d103      	bne.n	800130c <f_getfree+0x7c>
 8001304:	2301      	movs	r3, #1
 8001306:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800130a:	e063      	b.n	80013d4 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800130c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800130e:	2b01      	cmp	r3, #1
 8001310:	d103      	bne.n	800131a <f_getfree+0x8a>
 8001312:	2302      	movs	r3, #2
 8001314:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001318:	e05c      	b.n	80013d4 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800131a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131c:	2b00      	cmp	r3, #0
 800131e:	d102      	bne.n	8001326 <f_getfree+0x96>
 8001320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001322:	3301      	adds	r3, #1
 8001324:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8001326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001328:	3301      	adds	r3, #1
 800132a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800132c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001332:	429a      	cmp	r2, r3
 8001334:	d3db      	bcc.n	80012ee <f_getfree+0x5e>
 8001336:	e04d      	b.n	80013d4 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8001338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800133e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001340:	6a1b      	ldr	r3, [r3, #32]
 8001342:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
 8001348:	2300      	movs	r3, #0
 800134a:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800134c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800134e:	2b00      	cmp	r3, #0
 8001350:	d113      	bne.n	800137a <f_getfree+0xea>
							res = move_window(fs, sect++);
 8001352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	63ba      	str	r2, [r7, #56]	; 0x38
 800135a:	4619      	mov	r1, r3
 800135c:	f7ff fb96 	bl	8000a8c <move_window>
 8001360:	4603      	mov	r3, r0
 8001362:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8001366:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800136a:	2b00      	cmp	r3, #0
 800136c:	d131      	bne.n	80013d2 <f_getfree+0x142>
							p = fs->win;
 800136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001370:	3330      	adds	r3, #48	; 0x30
 8001372:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8001374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001378:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800137a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b02      	cmp	r3, #2
 8001380:	d10f      	bne.n	80013a2 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8001382:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001384:	f7ff fade 	bl	8000944 <ld_word>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d102      	bne.n	8001394 <f_getfree+0x104>
 800138e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001390:	3301      	adds	r3, #1
 8001392:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8001394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001396:	3302      	adds	r3, #2
 8001398:	633b      	str	r3, [r7, #48]	; 0x30
 800139a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800139c:	3b02      	subs	r3, #2
 800139e:	637b      	str	r3, [r7, #52]	; 0x34
 80013a0:	e010      	b.n	80013c4 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80013a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013a4:	f7ff fae6 	bl	8000974 <ld_dword>
 80013a8:	4603      	mov	r3, r0
 80013aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d102      	bne.n	80013b8 <f_getfree+0x128>
 80013b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013b4:	3301      	adds	r3, #1
 80013b6:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80013b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ba:	3304      	adds	r3, #4
 80013bc:	633b      	str	r3, [r7, #48]	; 0x30
 80013be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013c0:	3b04      	subs	r3, #4
 80013c2:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80013c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013c6:	3b01      	subs	r3, #1
 80013c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1bd      	bne.n	800134c <f_getfree+0xbc>
 80013d0:	e000      	b.n	80013d4 <f_getfree+0x144>
							if (res != FR_OK) break;
 80013d2:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80013d8:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80013da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80013de:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80013e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e2:	791a      	ldrb	r2, [r3, #4]
 80013e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e6:	f042 0201 	orr.w	r2, r2, #1
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80013ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3748      	adds	r7, #72	; 0x48
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b087      	sub	sp, #28
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	4613      	mov	r3, r2
 8001408:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800140a:	2301      	movs	r3, #1
 800140c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8001412:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <FATFS_LinkDriverEx+0x94>)
 8001414:	7a5b      	ldrb	r3, [r3, #9]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b01      	cmp	r3, #1
 800141a:	d831      	bhi.n	8001480 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800141c:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <FATFS_LinkDriverEx+0x94>)
 800141e:	7a5b      	ldrb	r3, [r3, #9]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	461a      	mov	r2, r3
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <FATFS_LinkDriverEx+0x94>)
 8001426:	2100      	movs	r1, #0
 8001428:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <FATFS_LinkDriverEx+0x94>)
 800142c:	7a5b      	ldrb	r3, [r3, #9]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	4a17      	ldr	r2, [pc, #92]	; (8001490 <FATFS_LinkDriverEx+0x94>)
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <FATFS_LinkDriverEx+0x94>)
 800143c:	7a5b      	ldrb	r3, [r3, #9]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	461a      	mov	r2, r3
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <FATFS_LinkDriverEx+0x94>)
 8001444:	4413      	add	r3, r2
 8001446:	79fa      	ldrb	r2, [r7, #7]
 8001448:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <FATFS_LinkDriverEx+0x94>)
 800144c:	7a5b      	ldrb	r3, [r3, #9]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	b2d1      	uxtb	r1, r2
 8001454:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <FATFS_LinkDriverEx+0x94>)
 8001456:	7251      	strb	r1, [r2, #9]
 8001458:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800145a:	7dbb      	ldrb	r3, [r7, #22]
 800145c:	3330      	adds	r3, #48	; 0x30
 800145e:	b2da      	uxtb	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	3301      	adds	r3, #1
 8001468:	223a      	movs	r2, #58	; 0x3a
 800146a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	3302      	adds	r3, #2
 8001470:	222f      	movs	r2, #47	; 0x2f
 8001472:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	3303      	adds	r3, #3
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8001480:	7dfb      	ldrb	r3, [r7, #23]
}
 8001482:	4618      	mov	r0, r3
 8001484:	371c      	adds	r7, #28
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000520 	.word	0x20000520

08001494 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	6839      	ldr	r1, [r7, #0]
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ffaa 	bl	80013fc <FATFS_LinkDriverEx>
 80014a8:	4603      	mov	r3, r0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <exf_getfree>:

#include "fops.h"
#include "main.h"
#include "string.h"
void exf_getfree(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b0c4      	sub	sp, #272	; 0x110
 80014b8:	af00      	add	r7, sp, #0
    FATFS *fs;
    DWORD fre_clust, fre_sect, tot_sect;

    if(f_getfree(USERPath, &fre_clust, &fs) == FR_OK)
 80014ba:	f507 7282 	add.w	r2, r7, #260	; 0x104
 80014be:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80014c2:	4619      	mov	r1, r3
 80014c4:	4827      	ldr	r0, [pc, #156]	; (8001564 <exf_getfree+0xb0>)
 80014c6:	f7ff fee3 	bl	8001290 <f_getfree>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d144      	bne.n	800155a <exf_getfree+0xa6>
    {
        tot_sect = (fs->n_fatent - 2) * fs->csize;		// �õ���������
 80014d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	3b02      	subs	r3, #2
 80014d8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80014dc:	8952      	ldrh	r2, [r2, #10]
 80014de:	fb02 f303 	mul.w	r3, r2, r3
 80014e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        fre_sect = fre_clust * fs->csize;				// �õ�����������
 80014e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80014ea:	895b      	ldrh	r3, [r3, #10]
 80014ec:	461a      	mov	r2, r3
 80014ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

        tot_sect >>= 11;		// תΪMB
 80014fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014fe:	0adb      	lsrs	r3, r3, #11
 8001500:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        fre_sect >>= 11;		// תΪMB
 8001504:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001508:	0adb      	lsrs	r3, r3, #11
 800150a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

        char buf[256];
        sprintf(buf, "# SD Card Total Size:%ldMB\r\n", tot_sect);
 800150e:	463b      	mov	r3, r7
 8001510:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001514:	4914      	ldr	r1, [pc, #80]	; (8001568 <exf_getfree+0xb4>)
 8001516:	4618      	mov	r0, r3
 8001518:	f006 fb78 	bl	8007c0c <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 800151c:	463b      	mov	r3, r7
 800151e:	4618      	mov	r0, r3
 8001520:	f7fe fe56 	bl	80001d0 <strlen>
 8001524:	4603      	mov	r3, r0
 8001526:	b29a      	uxth	r2, r3
 8001528:	4639      	mov	r1, r7
 800152a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800152e:	480f      	ldr	r0, [pc, #60]	; (800156c <exf_getfree+0xb8>)
 8001530:	f003 fc97 	bl	8004e62 <HAL_UART_Transmit>
        sprintf(buf, "# SD Card Free  Size:%ldMB\r\n", fre_sect);
 8001534:	463b      	mov	r3, r7
 8001536:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800153a:	490d      	ldr	r1, [pc, #52]	; (8001570 <exf_getfree+0xbc>)
 800153c:	4618      	mov	r0, r3
 800153e:	f006 fb65 	bl	8007c0c <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 8001542:	463b      	mov	r3, r7
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe fe43 	bl	80001d0 <strlen>
 800154a:	4603      	mov	r3, r0
 800154c:	b29a      	uxth	r2, r3
 800154e:	4639      	mov	r1, r7
 8001550:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <exf_getfree+0xb8>)
 8001556:	f003 fc84 	bl	8004e62 <HAL_UART_Transmit>
    }
}
 800155a:	bf00      	nop
 800155c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	200002d4 	.word	0x200002d4
 8001568:	08008510 	.word	0x08008510
 800156c:	200005d8 	.word	0x200005d8
 8001570:	08008530 	.word	0x08008530

08001574 <exf_mount>:

void exf_mount(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b0c0      	sub	sp, #256	; 0x100
 8001578:	af00      	add	r7, sp, #0
	char buf[256];
    sprintf(buf, "# SD Card Mount %s!\r\n", f_mount(&USERFatFS, USERPath, 1) == FR_OK ? "Successfullly" : "Failed");
 800157a:	2201      	movs	r2, #1
 800157c:	490f      	ldr	r1, [pc, #60]	; (80015bc <exf_mount+0x48>)
 800157e:	4810      	ldr	r0, [pc, #64]	; (80015c0 <exf_mount+0x4c>)
 8001580:	f7ff fe40 	bl	8001204 <f_mount>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <exf_mount+0x1a>
 800158a:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <exf_mount+0x50>)
 800158c:	e000      	b.n	8001590 <exf_mount+0x1c>
 800158e:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <exf_mount+0x54>)
 8001590:	463b      	mov	r3, r7
 8001592:	490e      	ldr	r1, [pc, #56]	; (80015cc <exf_mount+0x58>)
 8001594:	4618      	mov	r0, r3
 8001596:	f006 fb39 	bl	8007c0c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 800159a:	463b      	mov	r3, r7
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe fe17 	bl	80001d0 <strlen>
 80015a2:	4603      	mov	r3, r0
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	4639      	mov	r1, r7
 80015a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015ac:	4808      	ldr	r0, [pc, #32]	; (80015d0 <exf_mount+0x5c>)
 80015ae:	f003 fc58 	bl	8004e62 <HAL_UART_Transmit>
}
 80015b2:	bf00      	nop
 80015b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200002d4 	.word	0x200002d4
 80015c0:	200002d8 	.word	0x200002d8
 80015c4:	08008550 	.word	0x08008550
 80015c8:	08008560 	.word	0x08008560
 80015cc:	08008568 	.word	0x08008568
 80015d0:	200005d8 	.word	0x200005d8

080015d4 <SD_init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void SD_init(){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
	// One line of LCD contains 21 character
	char buf[22];
	sprintf(buf, "Loading SD card...");
 80015da:	463b      	mov	r3, r7
 80015dc:	491d      	ldr	r1, [pc, #116]	; (8001654 <SD_init+0x80>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f006 fb14 	bl	8007c0c <siprintf>
	LCD_FStr(buf, 0, 0);
 80015e4:	463b      	mov	r3, r7
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff f8b6 	bl	800075c <LCD_FStr>
	LCD_Update();
 80015f0:	f7ff f818 	bl	8000624 <LCD_Update>

	// Wait 1 second before loading SD card
	HAL_Delay(1000);
 80015f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015f8:	f001 f974 	bl	80028e4 <HAL_Delay>

	// Clear LCD before showing anything
	LCD_Clear();
 80015fc:	f7fe ffee 	bl	80005dc <LCD_Clear>

	// Try to get SD card Sector Count
	sprintf(buf, "SD card sector count");
 8001600:	463b      	mov	r3, r7
 8001602:	4915      	ldr	r1, [pc, #84]	; (8001658 <SD_init+0x84>)
 8001604:	4618      	mov	r0, r3
 8001606:	f006 fb01 	bl	8007c0c <siprintf>
	LCD_FStr(buf, 0, 0);
 800160a:	463b      	mov	r3, r7
 800160c:	2200      	movs	r2, #0
 800160e:	2100      	movs	r1, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff f8a3 	bl	800075c <LCD_FStr>
	sprintf(buf, "%u", SD_GetSectorCount());
 8001616:	f000 fc62 	bl	8001ede <SD_GetSectorCount>
 800161a:	4602      	mov	r2, r0
 800161c:	463b      	mov	r3, r7
 800161e:	490f      	ldr	r1, [pc, #60]	; (800165c <SD_init+0x88>)
 8001620:	4618      	mov	r0, r3
 8001622:	f006 faf3 	bl	8007c0c <siprintf>
	LCD_FStr(buf, 0, 1);
 8001626:	463b      	mov	r3, r7
 8001628:	2201      	movs	r2, #1
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff f895 	bl	800075c <LCD_FStr>
	LCD_Update();
 8001632:	f7fe fff7 	bl	8000624 <LCD_Update>
	HAL_Delay(2000);
 8001636:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800163a:	f001 f953 	bl	80028e4 <HAL_Delay>

	MX_FATFS_Init();
 800163e:	f7ff f94b 	bl	80008d8 <MX_FATFS_Init>
	exf_mount();
 8001642:	f7ff ff97 	bl	8001574 <exf_mount>
	exf_getfree();
 8001646:	f7ff ff35 	bl	80014b4 <exf_getfree>

	return;
 800164a:	bf00      	nop
};
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	08008628 	.word	0x08008628
 8001658:	0800863c 	.word	0x0800863c
 800165c:	08008654 	.word	0x08008654

08001660 <OLED_task>:

void OLED_task(void * pvParameters) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	char buf[22];
	while(1){
		// Clear OLED before displaying stuff
		LCD_Clear();
 8001668:	f7fe ffb8 	bl	80005dc <LCD_Clear>
		sprintf(buf, "%s %c", "File Browser", 0x3C);
 800166c:	f107 0008 	add.w	r0, r7, #8
 8001670:	233c      	movs	r3, #60	; 0x3c
 8001672:	4a1e      	ldr	r2, [pc, #120]	; (80016ec <OLED_task+0x8c>)
 8001674:	491e      	ldr	r1, [pc, #120]	; (80016f0 <OLED_task+0x90>)
 8001676:	f006 fac9 	bl	8007c0c <siprintf>
		LCD_FStr(buf, 0, 0);
 800167a:	f107 0308 	add.w	r3, r7, #8
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff f86a 	bl	800075c <LCD_FStr>
		sprintf(buf, "%s", "Player");
 8001688:	f107 0308 	add.w	r3, r7, #8
 800168c:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <OLED_task+0x94>)
 800168e:	491a      	ldr	r1, [pc, #104]	; (80016f8 <OLED_task+0x98>)
 8001690:	4618      	mov	r0, r3
 8001692:	f006 fabb 	bl	8007c0c <siprintf>
		LCD_FStr(buf, 0, 1);
 8001696:	f107 0308 	add.w	r3, r7, #8
 800169a:	2201      	movs	r2, #1
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff f85c 	bl	800075c <LCD_FStr>
		sprintf(buf, "%s", "Setting");
 80016a4:	f107 0308 	add.w	r3, r7, #8
 80016a8:	4a14      	ldr	r2, [pc, #80]	; (80016fc <OLED_task+0x9c>)
 80016aa:	4913      	ldr	r1, [pc, #76]	; (80016f8 <OLED_task+0x98>)
 80016ac:	4618      	mov	r0, r3
 80016ae:	f006 faad 	bl	8007c0c <siprintf>
		LCD_FStr(buf, 0, 2);
 80016b2:	f107 0308 	add.w	r3, r7, #8
 80016b6:	2202      	movs	r2, #2
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff f84e 	bl	800075c <LCD_FStr>
		sprintf(buf, "%s", "About");
 80016c0:	f107 0308 	add.w	r3, r7, #8
 80016c4:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <OLED_task+0xa0>)
 80016c6:	490c      	ldr	r1, [pc, #48]	; (80016f8 <OLED_task+0x98>)
 80016c8:	4618      	mov	r0, r3
 80016ca:	f006 fa9f 	bl	8007c0c <siprintf>
		LCD_FStr(buf, 0, 3);
 80016ce:	f107 0308 	add.w	r3, r7, #8
 80016d2:	2203      	movs	r2, #3
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff f840 	bl	800075c <LCD_FStr>
		LCD_Update();
 80016dc:	f7fe ffa2 	bl	8000624 <LCD_Update>
		vTaskDelay(1000);
 80016e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016e4:	f004 fdd0 	bl	8006288 <vTaskDelay>
		LCD_Clear();
 80016e8:	e7be      	b.n	8001668 <OLED_task+0x8>
 80016ea:	bf00      	nop
 80016ec:	08008658 	.word	0x08008658
 80016f0:	08008668 	.word	0x08008668
 80016f4:	08008670 	.word	0x08008670
 80016f8:	08008678 	.word	0x08008678
 80016fc:	0800867c 	.word	0x0800867c
 8001700:	08008684 	.word	0x08008684

08001704 <timer_task>:
	}
	return;
};

void timer_task(void * pvParameters) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	while(1){
		globalTime++;
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <timer_task+0x1c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	3301      	adds	r3, #1
 8001712:	4a03      	ldr	r2, [pc, #12]	; (8001720 <timer_task+0x1c>)
 8001714:	6013      	str	r3, [r2, #0]
		vTaskDelay(1000);
 8001716:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800171a:	f004 fdb5 	bl	8006288 <vTaskDelay>
		globalTime++;
 800171e:	e7f5      	b.n	800170c <timer_task+0x8>
 8001720:	20000620 	.word	0x20000620

08001724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800172a:	f001 f899 	bl	8002860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800172e:	f000 f833 	bl	8001798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001732:	f000 f91d 	bl	8001970 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001736:	f000 f8f1 	bl	800191c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800173a:	f000 f88b 	bl	8001854 <MX_I2C1_Init>
  MX_SPI1_Init();
 800173e:	f000 f8b7 	bl	80018b0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  LCD_Init();
 8001742:	f7fe ff1f 	bl	8000584 <LCD_Init>

  // Init SD card here
  SD_init();
 8001746:	f7ff ff45 	bl	80015d4 <SD_init>


  // Initialize OLED display status
  OLED_display_status = OLED_MENU;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <main+0x60>)
 800174c:	2201      	movs	r2, #1
 800174e:	601a      	str	r2, [r3, #0]
  // Start task here
  xTaskCreate(OLED_task, "OLED_task", STACK_SIZE, (void *) NULL, 5, NULL);
 8001750:	2300      	movs	r3, #0
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	2305      	movs	r3, #5
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2300      	movs	r3, #0
 800175a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800175e:	490a      	ldr	r1, [pc, #40]	; (8001788 <main+0x64>)
 8001760:	480a      	ldr	r0, [pc, #40]	; (800178c <main+0x68>)
 8001762:	f004 fc53 	bl	800600c <xTaskCreate>
  xTaskCreate(timer_task, "timer_task", STACK_SIZE, (void *) NULL, 10, NULL);
 8001766:	2300      	movs	r3, #0
 8001768:	9301      	str	r3, [sp, #4]
 800176a:	230a      	movs	r3, #10
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	2300      	movs	r3, #0
 8001770:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001774:	4906      	ldr	r1, [pc, #24]	; (8001790 <main+0x6c>)
 8001776:	4807      	ldr	r0, [pc, #28]	; (8001794 <main+0x70>)
 8001778:	f004 fc48 	bl	800600c <xTaskCreate>

  // Start scheduler here
  vTaskStartScheduler();
 800177c:	f004 fdb8 	bl	80062f0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001780:	e7fe      	b.n	8001780 <main+0x5c>
 8001782:	bf00      	nop
 8001784:	2000001c 	.word	0x2000001c
 8001788:	0800868c 	.word	0x0800868c
 800178c:	08001661 	.word	0x08001661
 8001790:	08008698 	.word	0x08008698
 8001794:	08001705 	.word	0x08001705

08001798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b094      	sub	sp, #80	; 0x50
 800179c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800179e:	f107 0320 	add.w	r3, r7, #32
 80017a2:	2230      	movs	r2, #48	; 0x30
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f006 fa28 	bl	8007bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	4b22      	ldr	r3, [pc, #136]	; (800184c <SystemClock_Config+0xb4>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	4a21      	ldr	r2, [pc, #132]	; (800184c <SystemClock_Config+0xb4>)
 80017c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ca:	6413      	str	r3, [r2, #64]	; 0x40
 80017cc:	4b1f      	ldr	r3, [pc, #124]	; (800184c <SystemClock_Config+0xb4>)
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d8:	2300      	movs	r3, #0
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <SystemClock_Config+0xb8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a1b      	ldr	r2, [pc, #108]	; (8001850 <SystemClock_Config+0xb8>)
 80017e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	4b19      	ldr	r3, [pc, #100]	; (8001850 <SystemClock_Config+0xb8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017f4:	2302      	movs	r3, #2
 80017f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017f8:	2301      	movs	r3, #1
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017fc:	2310      	movs	r3, #16
 80017fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001800:	2300      	movs	r3, #0
 8001802:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001804:	f107 0320 	add.w	r3, r7, #32
 8001808:	4618      	mov	r0, r3
 800180a:	f002 f887 	bl	800391c <HAL_RCC_OscConfig>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001814:	f000 f9c8 	bl	8001ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001818:	230f      	movs	r3, #15
 800181a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800181c:	2300      	movs	r3, #0
 800181e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001824:	2300      	movs	r3, #0
 8001826:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800182c:	f107 030c 	add.w	r3, r7, #12
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f002 faea 	bl	8003e0c <HAL_RCC_ClockConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800183e:	f000 f9b3 	bl	8001ba8 <Error_Handler>
  }
}
 8001842:	bf00      	nop
 8001844:	3750      	adds	r7, #80	; 0x50
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800
 8001850:	40007000 	.word	0x40007000

08001854 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <MX_I2C1_Init+0x50>)
 800185a:	4a13      	ldr	r2, [pc, #76]	; (80018a8 <MX_I2C1_Init+0x54>)
 800185c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <MX_I2C1_Init+0x50>)
 8001860:	4a12      	ldr	r2, [pc, #72]	; (80018ac <MX_I2C1_Init+0x58>)
 8001862:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <MX_I2C1_Init+0x50>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <MX_I2C1_Init+0x50>)
 800186c:	2200      	movs	r2, #0
 800186e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <MX_I2C1_Init+0x50>)
 8001872:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001876:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <MX_I2C1_Init+0x50>)
 800187a:	2200      	movs	r2, #0
 800187c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <MX_I2C1_Init+0x50>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <MX_I2C1_Init+0x50>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <MX_I2C1_Init+0x50>)
 800188c:	2200      	movs	r2, #0
 800188e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001890:	4804      	ldr	r0, [pc, #16]	; (80018a4 <MX_I2C1_Init+0x50>)
 8001892:	f001 fbf7 	bl	8003084 <HAL_I2C_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800189c:	f000 f984 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	2000052c 	.word	0x2000052c
 80018a8:	40005400 	.word	0x40005400
 80018ac:	000186a0 	.word	0x000186a0

080018b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <MX_SPI1_Init+0x64>)
 80018b6:	4a18      	ldr	r2, [pc, #96]	; (8001918 <MX_SPI1_Init+0x68>)
 80018b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018ba:	4b16      	ldr	r3, [pc, #88]	; (8001914 <MX_SPI1_Init+0x64>)
 80018bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <MX_SPI1_Init+0x64>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <MX_SPI1_Init+0x64>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <MX_SPI1_Init+0x64>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <MX_SPI1_Init+0x64>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <MX_SPI1_Init+0x64>)
 80018dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <MX_SPI1_Init+0x64>)
 80018e4:	2230      	movs	r2, #48	; 0x30
 80018e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018e8:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <MX_SPI1_Init+0x64>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <MX_SPI1_Init+0x64>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018f4:	4b07      	ldr	r3, [pc, #28]	; (8001914 <MX_SPI1_Init+0x64>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <MX_SPI1_Init+0x64>)
 80018fc:	220a      	movs	r2, #10
 80018fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001900:	4804      	ldr	r0, [pc, #16]	; (8001914 <MX_SPI1_Init+0x64>)
 8001902:	f002 fc95 	bl	8004230 <HAL_SPI_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800190c:	f000 f94c 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000580 	.word	0x20000580
 8001918:	40013000 	.word	0x40013000

0800191c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <MX_USART2_UART_Init+0x4c>)
 8001922:	4a12      	ldr	r2, [pc, #72]	; (800196c <MX_USART2_UART_Init+0x50>)
 8001924:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <MX_USART2_UART_Init+0x4c>)
 8001928:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800192c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <MX_USART2_UART_Init+0x4c>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <MX_USART2_UART_Init+0x4c>)
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <MX_USART2_UART_Init+0x4c>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <MX_USART2_UART_Init+0x4c>)
 8001942:	220c      	movs	r2, #12
 8001944:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <MX_USART2_UART_Init+0x4c>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <MX_USART2_UART_Init+0x4c>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001952:	4805      	ldr	r0, [pc, #20]	; (8001968 <MX_USART2_UART_Init+0x4c>)
 8001954:	f003 fa38 	bl	8004dc8 <HAL_UART_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800195e:	f000 f923 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200005d8 	.word	0x200005d8
 800196c:	40004400 	.word	0x40004400

08001970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
 8001984:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	4b3a      	ldr	r3, [pc, #232]	; (8001a74 <MX_GPIO_Init+0x104>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a39      	ldr	r2, [pc, #228]	; (8001a74 <MX_GPIO_Init+0x104>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b37      	ldr	r3, [pc, #220]	; (8001a74 <MX_GPIO_Init+0x104>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	4b33      	ldr	r3, [pc, #204]	; (8001a74 <MX_GPIO_Init+0x104>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a32      	ldr	r2, [pc, #200]	; (8001a74 <MX_GPIO_Init+0x104>)
 80019ac:	f043 0308 	orr.w	r3, r3, #8
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b30      	ldr	r3, [pc, #192]	; (8001a74 <MX_GPIO_Init+0x104>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	603b      	str	r3, [r7, #0]
 80019c2:	4b2c      	ldr	r3, [pc, #176]	; (8001a74 <MX_GPIO_Init+0x104>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a2b      	ldr	r2, [pc, #172]	; (8001a74 <MX_GPIO_Init+0x104>)
 80019c8:	f043 0302 	orr.w	r3, r3, #2
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b29      	ldr	r3, [pc, #164]	; (8001a74 <MX_GPIO_Init+0x104>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDCard_CS_GPIO_Port, SDCard_CS_Pin, GPIO_PIN_RESET);
 80019da:	2200      	movs	r2, #0
 80019dc:	2110      	movs	r1, #16
 80019de:	4826      	ldr	r0, [pc, #152]	; (8001a78 <MX_GPIO_Init+0x108>)
 80019e0:	f001 fb1e 	bl	8003020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SDCard_CS_Pin */
  GPIO_InitStruct.Pin = SDCard_CS_Pin;
 80019e4:	2310      	movs	r3, #16
 80019e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e8:	2301      	movs	r3, #1
 80019ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SDCard_CS_GPIO_Port, &GPIO_InitStruct);
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	4619      	mov	r1, r3
 80019fa:	481f      	ldr	r0, [pc, #124]	; (8001a78 <MX_GPIO_Init+0x108>)
 80019fc:	f001 f878 	bl	8002af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a00:	231f      	movs	r3, #31
 8001a02:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a04:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	4619      	mov	r1, r3
 8001a14:	4819      	ldr	r0, [pc, #100]	; (8001a7c <MX_GPIO_Init+0x10c>)
 8001a16:	f001 f86b 	bl	8002af0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	210f      	movs	r1, #15
 8001a1e:	2006      	movs	r0, #6
 8001a20:	f001 f83c 	bl	8002a9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a24:	2006      	movs	r0, #6
 8001a26:	f001 f855 	bl	8002ad4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 15, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	210f      	movs	r1, #15
 8001a2e:	2007      	movs	r0, #7
 8001a30:	f001 f834 	bl	8002a9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001a34:	2007      	movs	r0, #7
 8001a36:	f001 f84d 	bl	8002ad4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 15, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	210f      	movs	r1, #15
 8001a3e:	2008      	movs	r0, #8
 8001a40:	f001 f82c 	bl	8002a9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001a44:	2008      	movs	r0, #8
 8001a46:	f001 f845 	bl	8002ad4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 15, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	210f      	movs	r1, #15
 8001a4e:	2009      	movs	r0, #9
 8001a50:	f001 f824 	bl	8002a9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001a54:	2009      	movs	r0, #9
 8001a56:	f001 f83d 	bl	8002ad4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	210f      	movs	r1, #15
 8001a5e:	200a      	movs	r0, #10
 8001a60:	f001 f81c 	bl	8002a9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001a64:	200a      	movs	r0, #10
 8001a66:	f001 f835 	bl	8002ad4 <HAL_NVIC_EnableIRQ>

}
 8001a6a:	bf00      	nop
 8001a6c:	3720      	adds	r7, #32
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40020000 	.word	0x40020000
 8001a7c:	40020c00 	.word	0x40020c00

08001a80 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b0c4      	sub	sp, #272	; 0x110
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4602      	mov	r2, r0
 8001a88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a8c:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001a90:	801a      	strh	r2, [r3, #0]
	if((globalTime - lastEventTime) < 1) return;
 8001a92:	4b37      	ldr	r3, [pc, #220]	; (8001b70 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4b37      	ldr	r3, [pc, #220]	; (8001b74 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d061      	beq.n	8001b62 <HAL_GPIO_EXTI_Callback+0xe2>
	// Start interrupt event
	char buf[256];
	int button = -1;
 8001a9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aa2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	switch(GPIO_Pin){
 8001aa6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001aaa:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	2b0f      	cmp	r3, #15
 8001ab4:	d857      	bhi.n	8001b66 <HAL_GPIO_EXTI_Callback+0xe6>
 8001ab6:	a201      	add	r2, pc, #4	; (adr r2, 8001abc <HAL_GPIO_EXTI_Callback+0x3c>)
 8001ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abc:	08001afd 	.word	0x08001afd
 8001ac0:	08001b05 	.word	0x08001b05
 8001ac4:	08001b67 	.word	0x08001b67
 8001ac8:	08001b0d 	.word	0x08001b0d
 8001acc:	08001b67 	.word	0x08001b67
 8001ad0:	08001b67 	.word	0x08001b67
 8001ad4:	08001b67 	.word	0x08001b67
 8001ad8:	08001b15 	.word	0x08001b15
 8001adc:	08001b67 	.word	0x08001b67
 8001ae0:	08001b67 	.word	0x08001b67
 8001ae4:	08001b67 	.word	0x08001b67
 8001ae8:	08001b67 	.word	0x08001b67
 8001aec:	08001b67 	.word	0x08001b67
 8001af0:	08001b67 	.word	0x08001b67
 8001af4:	08001b67 	.word	0x08001b67
 8001af8:	08001b1d 	.word	0x08001b1d
		case GPIO_PIN_0:
			button = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8001b02:	e00f      	b.n	8001b24 <HAL_GPIO_EXTI_Callback+0xa4>
		case GPIO_PIN_1:
			button = 1;
 8001b04:	2301      	movs	r3, #1
 8001b06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8001b0a:	e00b      	b.n	8001b24 <HAL_GPIO_EXTI_Callback+0xa4>
		case GPIO_PIN_2:
			button = 2;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8001b12:	e007      	b.n	8001b24 <HAL_GPIO_EXTI_Callback+0xa4>
		case GPIO_PIN_3:
			button = 3;
 8001b14:	2303      	movs	r3, #3
 8001b16:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8001b1a:	e003      	b.n	8001b24 <HAL_GPIO_EXTI_Callback+0xa4>
		case GPIO_PIN_4:
			button = 4;
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			break;
 8001b22:	bf00      	nop
		default:
			return;
			break;
	}
	sprintf(buf,"External IO button %d pressed!\n\rbuttonCounter %d\n\r", button, buttonCounter++);
 8001b24:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	4913      	ldr	r1, [pc, #76]	; (8001b78 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001b2c:	600a      	str	r2, [r1, #0]
 8001b2e:	f107 000c 	add.w	r0, r7, #12
 8001b32:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001b36:	4911      	ldr	r1, [pc, #68]	; (8001b7c <HAL_GPIO_EXTI_Callback+0xfc>)
 8001b38:	f006 f868 	bl	8007c0c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fb45 	bl	80001d0 <strlen>
 8001b46:	4603      	mov	r3, r0
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	f107 010c 	add.w	r1, r7, #12
 8001b4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b52:	480b      	ldr	r0, [pc, #44]	; (8001b80 <HAL_GPIO_EXTI_Callback+0x100>)
 8001b54:	f003 f985 	bl	8004e62 <HAL_UART_Transmit>

	// Update lastEventTime
	lastEventTime = globalTime;
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001b5e:	6013      	str	r3, [r2, #0]
	return;
 8001b60:	e002      	b.n	8001b68 <HAL_GPIO_EXTI_Callback+0xe8>
	if((globalTime - lastEventTime) < 1) return;
 8001b62:	bf00      	nop
 8001b64:	e000      	b.n	8001b68 <HAL_GPIO_EXTI_Callback+0xe8>
			return;
 8001b66:	bf00      	nop
}
 8001b68:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000620 	.word	0x20000620
 8001b74:	20000020 	.word	0x20000020
 8001b78:	2000061c 	.word	0x2000061c
 8001b7c:	080086a4 	.word	0x080086a4
 8001b80:	200005d8 	.word	0x200005d8

08001b84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d101      	bne.n	8001b9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b96:	f000 fe85 	bl	80028a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40001400 	.word	0x40001400

08001ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bac:	b672      	cpsid	i
}
 8001bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <Error_Handler+0x8>
	...

08001bb4 <SPI1_Error>:

/////////////////////////////////////////////////////// ��ֲ�޸������� //////////////////////////////////////////////////////////


void SPI1_Error(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
	__HAL_SPI_DISABLE(&hspi1);
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <SPI1_Error+0x34>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <SPI1_Error+0x34>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bc6:	601a      	str	r2, [r3, #0]
    HAL_SPI_DeInit(&hspi1);
 8001bc8:	4807      	ldr	r0, [pc, #28]	; (8001be8 <SPI1_Error+0x34>)
 8001bca:	f002 fbba 	bl	8004342 <HAL_SPI_DeInit>
    MX_SPI1_Init();
 8001bce:	f7ff fe6f 	bl	80018b0 <MX_SPI1_Init>
	__HAL_SPI_ENABLE(&hspi1);
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <SPI1_Error+0x34>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <SPI1_Error+0x34>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001be0:	601a      	str	r2, [r3, #0]
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000580 	.word	0x20000580

08001bec <SPI1_ReadWriteByte>:

uint8_t SPI1_ReadWriteByte(uint8_t TxDate)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af02      	add	r7, sp, #8
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
    uint8_t RxData = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	73fb      	strb	r3, [r7, #15]
    if(HAL_SPI_TransmitReceive(&hspi1, &TxDate, &RxData, 1, 1000) != HAL_OK)
 8001bfa:	f107 020f 	add.w	r2, r7, #15
 8001bfe:	1df9      	adds	r1, r7, #7
 8001c00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	2301      	movs	r3, #1
 8001c08:	4806      	ldr	r0, [pc, #24]	; (8001c24 <SPI1_ReadWriteByte+0x38>)
 8001c0a:	f002 fbc2 	bl	8004392 <HAL_SPI_TransmitReceive>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <SPI1_ReadWriteByte+0x2c>
    {
        SPI1_Error();
 8001c14:	f7ff ffce 	bl	8001bb4 <SPI1_Error>
    }
    return RxData;
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000580 	.word	0x20000580

08001c28 <SD_SPI_ReadWriteByte>:
 * SD��SPI�ӿڶ�дһ���ֽ�
 * @param  TxData ��д����ֽ�
 * @return        ����SPI�Ľ���
 */
uint8_t SD_SPI_ReadWriteByte(uint8_t TxData)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
    return SPI1_ReadWriteByte(TxData);
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ffd9 	bl	8001bec <SPI1_ReadWriteByte>
 8001c3a:	4603      	mov	r3, r0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <SD_SPI_Init>:

/// SPIӲ�����ʼ��
void SD_SPI_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
    MX_SPI1_Init();
 8001c48:	f7ff fe32 	bl	80018b0 <MX_SPI1_Init>
	__HAL_SPI_ENABLE(&hspi1);
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <SD_SPI_Init+0x2c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <SD_SPI_Init+0x2c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c5a:	601a      	str	r2, [r3, #0]
    SD_SPI_ReadWriteByte(0xFF);
 8001c5c:	20ff      	movs	r0, #255	; 0xff
 8001c5e:	f7ff ffe3 	bl	8001c28 <SD_SPI_ReadWriteByte>
    SD_CS_H();
 8001c62:	2201      	movs	r2, #1
 8001c64:	2110      	movs	r1, #16
 8001c66:	4803      	ldr	r0, [pc, #12]	; (8001c74 <SD_SPI_Init+0x30>)
 8001c68:	f001 f9da 	bl	8003020 <HAL_GPIO_WritePin>
}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000580 	.word	0x20000580
 8001c74:	40020000 	.word	0x40020000

08001c78 <SD_DisSelect>:

////////////////////////////////////////////////////////  SD SPI ��������  /////////////////////////////////////////////////////////////

//ȡ��ѡ��,�ͷ�SPI����
void SD_DisSelect(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
    SD_CS_H();
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	2110      	movs	r1, #16
 8001c80:	4803      	ldr	r0, [pc, #12]	; (8001c90 <SD_DisSelect+0x18>)
 8001c82:	f001 f9cd 	bl	8003020 <HAL_GPIO_WritePin>
    SD_SPI_ReadWriteByte(0xff);//�ṩ�����8��ʱ��
 8001c86:	20ff      	movs	r0, #255	; 0xff
 8001c88:	f7ff ffce 	bl	8001c28 <SD_SPI_ReadWriteByte>
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40020000 	.word	0x40020000

08001c94 <SD_Select>:
/**
 * ѡ��SD�����ȴ���׼����
 * @return  0���ɹ�  1��ʧ��
 */
uint8_t SD_Select(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
    SD_CS_L();
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2110      	movs	r1, #16
 8001c9c:	4807      	ldr	r0, [pc, #28]	; (8001cbc <SD_Select+0x28>)
 8001c9e:	f001 f9bf 	bl	8003020 <HAL_GPIO_WritePin>
    if (SD_WaitReady() == 0)return 0; //�ȴ��ɹ�
 8001ca2:	f000 f80d 	bl	8001cc0 <SD_WaitReady>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <SD_Select+0x1c>
 8001cac:	2300      	movs	r3, #0
 8001cae:	e002      	b.n	8001cb6 <SD_Select+0x22>
    SD_DisSelect();
 8001cb0:	f7ff ffe2 	bl	8001c78 <SD_DisSelect>
    return 1;//�ȴ�ʧ��
 8001cb4:	2301      	movs	r3, #1
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40020000 	.word	0x40020000

08001cc0 <SD_WaitReady>:
/**
 * �ȴ�SD��׼����
 * @return  0���ɹ�  other��ʧ��
 */
uint8_t SD_WaitReady(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
    uint32_t t = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	607b      	str	r3, [r7, #4]
    do
    {
        if (SD_SPI_ReadWriteByte(0XFF) == 0XFF)return 0; //OK
 8001cca:	20ff      	movs	r0, #255	; 0xff
 8001ccc:	f7ff ffac 	bl	8001c28 <SD_SPI_ReadWriteByte>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2bff      	cmp	r3, #255	; 0xff
 8001cd4:	d101      	bne.n	8001cda <SD_WaitReady+0x1a>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e008      	b.n	8001cec <SD_WaitReady+0x2c>
        t++;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	607b      	str	r3, [r7, #4]
    }
    while (t < 0xFFFFFF); //�ȴ�
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d3ef      	bcc.n	8001cca <SD_WaitReady+0xa>
    return 1;
 8001cea:	2301      	movs	r3, #1
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <SD_GetResponse>:
 * �ȴ�SD����Ӧ
 * @param  Response Ҫ�õ��Ļ�Ӧֵ
 * @return          0���ɹ�  other��ʧ��
 */
uint8_t SD_GetResponse(uint8_t Response)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
    uint16_t Count = 0xFFF; //�ȴ�����
 8001cfe:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001d02:	81fb      	strh	r3, [r7, #14]
    while ((SD_SPI_ReadWriteByte(0XFF) != Response) && Count)Count--; //�ȴ��õ�׼ȷ�Ļ�Ӧ
 8001d04:	e002      	b.n	8001d0c <SD_GetResponse+0x18>
 8001d06:	89fb      	ldrh	r3, [r7, #14]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	81fb      	strh	r3, [r7, #14]
 8001d0c:	20ff      	movs	r0, #255	; 0xff
 8001d0e:	f7ff ff8b 	bl	8001c28 <SD_SPI_ReadWriteByte>
 8001d12:	4603      	mov	r3, r0
 8001d14:	461a      	mov	r2, r3
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d002      	beq.n	8001d22 <SD_GetResponse+0x2e>
 8001d1c:	89fb      	ldrh	r3, [r7, #14]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f1      	bne.n	8001d06 <SD_GetResponse+0x12>
    if (Count == 0)return MSD_RESPONSE_FAILURE; //�õ���Ӧʧ��
 8001d22:	89fb      	ldrh	r3, [r7, #14]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <SD_GetResponse+0x38>
 8001d28:	23ff      	movs	r3, #255	; 0xff
 8001d2a:	e000      	b.n	8001d2e <SD_GetResponse+0x3a>
    else return MSD_RESPONSE_NO_ERROR;//��ȷ��Ӧ
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <SD_RecvData>:
 * @param  buf ��Ž��յ�����
 * @param  len ���յ����ݳ���
 * @return     0���ɹ�  other��ʧ��
 */
uint8_t SD_RecvData(uint8_t*buf, uint16_t len)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	807b      	strh	r3, [r7, #2]
    if (SD_GetResponse(0xFE))return 1; //�ȴ�SD������������ʼ����0xFE
 8001d42:	20fe      	movs	r0, #254	; 0xfe
 8001d44:	f7ff ffd6 	bl	8001cf4 <SD_GetResponse>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00b      	beq.n	8001d66 <SD_RecvData+0x30>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e015      	b.n	8001d7e <SD_RecvData+0x48>
    while (len--) //��ʼ��������
    {
        *buf = SD_SPI_ReadWriteByte(0xFF);
 8001d52:	20ff      	movs	r0, #255	; 0xff
 8001d54:	f7ff ff68 	bl	8001c28 <SD_SPI_ReadWriteByte>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	701a      	strb	r2, [r3, #0]
        buf++;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3301      	adds	r3, #1
 8001d64:	607b      	str	r3, [r7, #4]
    while (len--) //��ʼ��������
 8001d66:	887b      	ldrh	r3, [r7, #2]
 8001d68:	1e5a      	subs	r2, r3, #1
 8001d6a:	807a      	strh	r2, [r7, #2]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1f0      	bne.n	8001d52 <SD_RecvData+0x1c>
    }
    //������2��αCRC��dummy CRC��
    SD_SPI_ReadWriteByte(0xFF);
 8001d70:	20ff      	movs	r0, #255	; 0xff
 8001d72:	f7ff ff59 	bl	8001c28 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(0xFF);
 8001d76:	20ff      	movs	r0, #255	; 0xff
 8001d78:	f7ff ff56 	bl	8001c28 <SD_SPI_ReadWriteByte>
    return 0;//��ȡ�ɹ�
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <SD_SendBlock>:
 * @param  buf ��д������ݣ�size=512
 * @param  cmd ָ��
 * @return     0���ɹ�  other��ʧ��
 */
uint8_t SD_SendBlock(uint8_t*buf, uint8_t cmd)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b084      	sub	sp, #16
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	70fb      	strb	r3, [r7, #3]
    uint16_t t;
    if (SD_WaitReady())return 1; //�ȴ�׼��ʧЧ
 8001d92:	f7ff ff95 	bl	8001cc0 <SD_WaitReady>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <SD_SendBlock+0x1a>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e02a      	b.n	8001df6 <SD_SendBlock+0x70>
    SD_SPI_ReadWriteByte(cmd);
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff ff40 	bl	8001c28 <SD_SPI_ReadWriteByte>
    if (cmd != 0XFD) //���ǽ���ָ��
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	2bfd      	cmp	r3, #253	; 0xfd
 8001dac:	d022      	beq.n	8001df4 <SD_SendBlock+0x6e>
    {
        for (t = 0; t < 512; t++)SD_SPI_ReadWriteByte(buf[t]); //����ٶ�,���ٺ�������ʱ��
 8001dae:	2300      	movs	r3, #0
 8001db0:	81fb      	strh	r3, [r7, #14]
 8001db2:	e009      	b.n	8001dc8 <SD_SendBlock+0x42>
 8001db4:	89fb      	ldrh	r3, [r7, #14]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff33 	bl	8001c28 <SD_SPI_ReadWriteByte>
 8001dc2:	89fb      	ldrh	r3, [r7, #14]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	81fb      	strh	r3, [r7, #14]
 8001dc8:	89fb      	ldrh	r3, [r7, #14]
 8001dca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dce:	d3f1      	bcc.n	8001db4 <SD_SendBlock+0x2e>
        SD_SPI_ReadWriteByte(0xFF);//����crc
 8001dd0:	20ff      	movs	r0, #255	; 0xff
 8001dd2:	f7ff ff29 	bl	8001c28 <SD_SPI_ReadWriteByte>
        SD_SPI_ReadWriteByte(0xFF);
 8001dd6:	20ff      	movs	r0, #255	; 0xff
 8001dd8:	f7ff ff26 	bl	8001c28 <SD_SPI_ReadWriteByte>
        t = SD_SPI_ReadWriteByte(0xFF); //������Ӧ
 8001ddc:	20ff      	movs	r0, #255	; 0xff
 8001dde:	f7ff ff23 	bl	8001c28 <SD_SPI_ReadWriteByte>
 8001de2:	4603      	mov	r3, r0
 8001de4:	81fb      	strh	r3, [r7, #14]
        if ((t & 0x1F) != 0x05)return 2; //��Ӧ����
 8001de6:	89fb      	ldrh	r3, [r7, #14]
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	2b05      	cmp	r3, #5
 8001dee:	d001      	beq.n	8001df4 <SD_SendBlock+0x6e>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e000      	b.n	8001df6 <SD_SendBlock+0x70>
    }
    return 0;//д��ɹ�
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <SD_SendCmd>:
 * @param  arg ����
 * @param  crc crcУ��ֵ
 * @return     SD�����ص���Ӧֵ
 */
uint8_t SD_SendCmd(uint8_t cmd, uint32_t arg, uint8_t crc)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b084      	sub	sp, #16
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	6039      	str	r1, [r7, #0]
 8001e08:	71fb      	strb	r3, [r7, #7]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	71bb      	strb	r3, [r7, #6]
    uint8_t r1;
    uint8_t Retry = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]
    SD_DisSelect();//ȡ���ϴ�Ƭѡ
 8001e12:	f7ff ff31 	bl	8001c78 <SD_DisSelect>
    if (SD_Select())return 0XFF; //ƬѡʧЧ
 8001e16:	f7ff ff3d 	bl	8001c94 <SD_Select>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <SD_SendCmd+0x26>
 8001e20:	23ff      	movs	r3, #255	; 0xff
 8001e22:	e038      	b.n	8001e96 <SD_SendCmd+0x98>
    //����
    SD_SPI_ReadWriteByte(cmd | 0x40);//�ֱ�д������
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fefb 	bl	8001c28 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg >> 24);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	0e1b      	lsrs	r3, r3, #24
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fef5 	bl	8001c28 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg >> 16);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	0c1b      	lsrs	r3, r3, #16
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff feef 	bl	8001c28 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg >> 8);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	0a1b      	lsrs	r3, r3, #8
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fee9 	bl	8001c28 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fee4 	bl	8001c28 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(crc);
 8001e60:	79bb      	ldrb	r3, [r7, #6]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fee0 	bl	8001c28 <SD_SPI_ReadWriteByte>
    if (cmd == CMD12)SD_SPI_ReadWriteByte(0xff); //Skip a stuff byte when stop reading
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	2b0c      	cmp	r3, #12
 8001e6c:	d102      	bne.n	8001e74 <SD_SendCmd+0x76>
 8001e6e:	20ff      	movs	r0, #255	; 0xff
 8001e70:	f7ff feda 	bl	8001c28 <SD_SPI_ReadWriteByte>
    //�ȴ���Ӧ����ʱ�˳�
    Retry = 0X1F;
 8001e74:	231f      	movs	r3, #31
 8001e76:	73fb      	strb	r3, [r7, #15]
    do
    {
        r1 = SD_SPI_ReadWriteByte(0xFF);
 8001e78:	20ff      	movs	r0, #255	; 0xff
 8001e7a:	f7ff fed5 	bl	8001c28 <SD_SPI_ReadWriteByte>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	73bb      	strb	r3, [r7, #14]
    }
    while ((r1 & 0X80) && Retry--);
 8001e82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	da04      	bge.n	8001e94 <SD_SendCmd+0x96>
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	1e5a      	subs	r2, r3, #1
 8001e8e:	73fa      	strb	r2, [r7, #15]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f1      	bne.n	8001e78 <SD_SendCmd+0x7a>
    //����״ֵ̬
    return r1;
 8001e94:	7bbb      	ldrb	r3, [r7, #14]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <SD_GetCSD>:
 * ��ѯSD��CID��Ϣ��������������Ϣ
 * @param  csd_data ���CID��Ϣ������16�ֽ�
 * @return          0���ɹ�  1��ʧ��
 */
uint8_t SD_GetCSD(uint8_t *csd_data)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
    uint8_t r1;
    r1 = SD_SendCmd(CMD9, 0, 0x01); //��CMD9�����CSD
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	2009      	movs	r0, #9
 8001eac:	f7ff ffa7 	bl	8001dfe <SD_SendCmd>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	73fb      	strb	r3, [r7, #15]
    if (r1 == 0)
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d105      	bne.n	8001ec6 <SD_GetCSD+0x28>
    {
        r1 = SD_RecvData(csd_data, 16); //����16���ֽڵ�����
 8001eba:	2110      	movs	r1, #16
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff ff3a 	bl	8001d36 <SD_RecvData>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	73fb      	strb	r3, [r7, #15]
    }
    SD_DisSelect();//ȡ��Ƭѡ
 8001ec6:	f7ff fed7 	bl	8001c78 <SD_DisSelect>
    if (r1)return 1;
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <SD_GetCSD+0x36>
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e000      	b.n	8001ed6 <SD_GetCSD+0x38>
    else return 0;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <SD_GetSectorCount>:
/**
 * ��ȡSD��������
 * @return  0����ȡ����  other��SD��������
 */
uint32_t SD_GetSectorCount(void)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b086      	sub	sp, #24
 8001ee2:	af00      	add	r7, sp, #0
    uint8_t csd[16];
    uint32_t Capacity;
    uint8_t n;
    uint16_t csize;
    //ȡCSD��Ϣ������ڼ��������0
    if (SD_GetCSD(csd) != 0) return 0;
 8001ee4:	463b      	mov	r3, r7
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff ffd9 	bl	8001e9e <SD_GetCSD>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <SD_GetSectorCount+0x18>
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e040      	b.n	8001f78 <SD_GetSectorCount+0x9a>
    //���ΪSDHC�����������淽ʽ����
    if ((csd[0] & 0xC0) == 0x40)	 //V2.00�Ŀ�
 8001ef6:	783b      	ldrb	r3, [r7, #0]
 8001ef8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001efc:	2b40      	cmp	r3, #64	; 0x40
 8001efe:	d10d      	bne.n	8001f1c <SD_GetSectorCount+0x3e>
    {
        csize = csd[9] + ((uint16_t)csd[8] << 8) + 1;
 8001f00:	7a7b      	ldrb	r3, [r7, #9]
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	7a3b      	ldrb	r3, [r7, #8]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	021b      	lsls	r3, r3, #8
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3301      	adds	r3, #1
 8001f12:	823b      	strh	r3, [r7, #16]
        Capacity = (uint32_t)csize << 10;//�õ�������
 8001f14:	8a3b      	ldrh	r3, [r7, #16]
 8001f16:	029b      	lsls	r3, r3, #10
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	e02c      	b.n	8001f76 <SD_GetSectorCount+0x98>
    }
    else //V1.XX�Ŀ�
    {
        n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001f1c:	797b      	ldrb	r3, [r7, #5]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	7abb      	ldrb	r3, [r7, #10]
 8001f26:	09db      	lsrs	r3, r3, #7
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	7a7b      	ldrb	r3, [r7, #9]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f003 0306 	and.w	r3, r3, #6
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	3302      	adds	r3, #2
 8001f40:	74fb      	strb	r3, [r7, #19]
        csize = (csd[8] >> 6) + ((uint16_t)csd[7] << 2) + ((uint16_t)(csd[6] & 3) << 10) + 1;
 8001f42:	7a3b      	ldrb	r3, [r7, #8]
 8001f44:	099b      	lsrs	r3, r3, #6
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	4413      	add	r3, r2
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	79bb      	ldrb	r3, [r7, #6]
 8001f58:	029b      	lsls	r3, r3, #10
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	4413      	add	r3, r2
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	3301      	adds	r3, #1
 8001f68:	823b      	strh	r3, [r7, #16]
        Capacity = (uint32_t)csize << (n - 9); //�õ�������
 8001f6a:	8a3a      	ldrh	r2, [r7, #16]
 8001f6c:	7cfb      	ldrb	r3, [r7, #19]
 8001f6e:	3b09      	subs	r3, #9
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	617b      	str	r3, [r7, #20]
    }
    return Capacity;
 8001f76:	697b      	ldr	r3, [r7, #20]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <SD_Initialize>:
    if (retry == 200)return 1; //ʧ��
    return 0;//�ɹ�
}
/// ��ʼ��SD��
uint8_t SD_Initialize(void)
{
 8001f80:	b590      	push	{r4, r7, lr}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
    uint8_t r1;      // ���SD���ķ���ֵ
    uint16_t retry;  // �������г�ʱ����
    uint8_t buf[4];
    uint16_t i;

    SD_SPI_Init();		//��ʼ��IO
 8001f86:	f7ff fe5d 	bl	8001c44 <SD_SPI_Init>
	//for(i=0;i<0xf00;i++);//����ʱ���ȴ�SD���ϵ����
//    SD_Select();
    for (i = 0; i < 10; i++)SD_SPI_ReadWriteByte(0XFF); //��������74������
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	817b      	strh	r3, [r7, #10]
 8001f8e:	e005      	b.n	8001f9c <SD_Initialize+0x1c>
 8001f90:	20ff      	movs	r0, #255	; 0xff
 8001f92:	f7ff fe49 	bl	8001c28 <SD_SPI_ReadWriteByte>
 8001f96:	897b      	ldrh	r3, [r7, #10]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	817b      	strh	r3, [r7, #10]
 8001f9c:	897b      	ldrh	r3, [r7, #10]
 8001f9e:	2b09      	cmp	r3, #9
 8001fa0:	d9f6      	bls.n	8001f90 <SD_Initialize+0x10>
    retry = 20;
 8001fa2:	2314      	movs	r3, #20
 8001fa4:	81bb      	strh	r3, [r7, #12]
    do
    {
        r1 = SD_SendCmd(CMD0, 0, 0x95); //����IDLE״̬
 8001fa6:	2295      	movs	r2, #149	; 0x95
 8001fa8:	2100      	movs	r1, #0
 8001faa:	2000      	movs	r0, #0
 8001fac:	f7ff ff27 	bl	8001dfe <SD_SendCmd>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	73fb      	strb	r3, [r7, #15]
    }
    while ((r1 != 0X01) && retry--);
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d004      	beq.n	8001fc4 <SD_Initialize+0x44>
 8001fba:	89bb      	ldrh	r3, [r7, #12]
 8001fbc:	1e5a      	subs	r2, r3, #1
 8001fbe:	81ba      	strh	r2, [r7, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f0      	bne.n	8001fa6 <SD_Initialize+0x26>
    SD_Type = 0; //Ĭ���޿�
 8001fc4:	4b67      	ldr	r3, [pc, #412]	; (8002164 <SD_Initialize+0x1e4>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
    if (r1 == 0X01)
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	f040 80b7 	bne.w	8002140 <SD_Initialize+0x1c0>
    {
        if (SD_SendCmd(CMD8, 0x1AA, 0x87) == 1) //SD V2.0
 8001fd2:	2287      	movs	r2, #135	; 0x87
 8001fd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001fd8:	2008      	movs	r0, #8
 8001fda:	f7ff ff10 	bl	8001dfe <SD_SendCmd>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d15f      	bne.n	80020a4 <SD_Initialize+0x124>
        {
            for (i = 0; i < 4; i++)buf[i] = SD_SPI_ReadWriteByte(0XFF);	//Get trailing return value of R7 resp
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	817b      	strh	r3, [r7, #10]
 8001fe8:	e00d      	b.n	8002006 <SD_Initialize+0x86>
 8001fea:	897c      	ldrh	r4, [r7, #10]
 8001fec:	20ff      	movs	r0, #255	; 0xff
 8001fee:	f7ff fe1b 	bl	8001c28 <SD_SPI_ReadWriteByte>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	f104 0310 	add.w	r3, r4, #16
 8001ffa:	443b      	add	r3, r7
 8001ffc:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8002000:	897b      	ldrh	r3, [r7, #10]
 8002002:	3301      	adds	r3, #1
 8002004:	817b      	strh	r3, [r7, #10]
 8002006:	897b      	ldrh	r3, [r7, #10]
 8002008:	2b03      	cmp	r3, #3
 800200a:	d9ee      	bls.n	8001fea <SD_Initialize+0x6a>
            if (buf[2] == 0X01 && buf[3] == 0XAA) //���Ƿ�֧��2.7~3.6V
 800200c:	79bb      	ldrb	r3, [r7, #6]
 800200e:	2b01      	cmp	r3, #1
 8002010:	f040 8096 	bne.w	8002140 <SD_Initialize+0x1c0>
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	2baa      	cmp	r3, #170	; 0xaa
 8002018:	f040 8092 	bne.w	8002140 <SD_Initialize+0x1c0>
            {
                retry = 0XFFFE;
 800201c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002020:	81bb      	strh	r3, [r7, #12]
                do
                {
                    SD_SendCmd(CMD55, 0, 0X01);	//����CMD55
 8002022:	2201      	movs	r2, #1
 8002024:	2100      	movs	r1, #0
 8002026:	2037      	movs	r0, #55	; 0x37
 8002028:	f7ff fee9 	bl	8001dfe <SD_SendCmd>
                    r1 = SD_SendCmd(CMD41, 0x40000000, 0X01); //����CMD41
 800202c:	2201      	movs	r2, #1
 800202e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002032:	2029      	movs	r0, #41	; 0x29
 8002034:	f7ff fee3 	bl	8001dfe <SD_SendCmd>
 8002038:	4603      	mov	r3, r0
 800203a:	73fb      	strb	r3, [r7, #15]
                }
                while (r1 && retry--);
 800203c:	7bfb      	ldrb	r3, [r7, #15]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d004      	beq.n	800204c <SD_Initialize+0xcc>
 8002042:	89bb      	ldrh	r3, [r7, #12]
 8002044:	1e5a      	subs	r2, r3, #1
 8002046:	81ba      	strh	r2, [r7, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1ea      	bne.n	8002022 <SD_Initialize+0xa2>
                if (retry && SD_SendCmd(CMD58, 0, 0X01) == 0) //����SD2.0���汾��ʼ
 800204c:	89bb      	ldrh	r3, [r7, #12]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d076      	beq.n	8002140 <SD_Initialize+0x1c0>
 8002052:	2201      	movs	r2, #1
 8002054:	2100      	movs	r1, #0
 8002056:	203a      	movs	r0, #58	; 0x3a
 8002058:	f7ff fed1 	bl	8001dfe <SD_SendCmd>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d16e      	bne.n	8002140 <SD_Initialize+0x1c0>
                {
                    for (i = 0; i < 4; i++)buf[i] = SD_SPI_ReadWriteByte(0XFF); //�õ�OCRֵ
 8002062:	2300      	movs	r3, #0
 8002064:	817b      	strh	r3, [r7, #10]
 8002066:	e00d      	b.n	8002084 <SD_Initialize+0x104>
 8002068:	897c      	ldrh	r4, [r7, #10]
 800206a:	20ff      	movs	r0, #255	; 0xff
 800206c:	f7ff fddc 	bl	8001c28 <SD_SPI_ReadWriteByte>
 8002070:	4603      	mov	r3, r0
 8002072:	461a      	mov	r2, r3
 8002074:	f104 0310 	add.w	r3, r4, #16
 8002078:	443b      	add	r3, r7
 800207a:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800207e:	897b      	ldrh	r3, [r7, #10]
 8002080:	3301      	adds	r3, #1
 8002082:	817b      	strh	r3, [r7, #10]
 8002084:	897b      	ldrh	r3, [r7, #10]
 8002086:	2b03      	cmp	r3, #3
 8002088:	d9ee      	bls.n	8002068 <SD_Initialize+0xe8>
                    if (buf[0] & 0x40)SD_Type = SD_TYPE_V2HC; //���CCS
 800208a:	793b      	ldrb	r3, [r7, #4]
 800208c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <SD_Initialize+0x11c>
 8002094:	4b33      	ldr	r3, [pc, #204]	; (8002164 <SD_Initialize+0x1e4>)
 8002096:	2206      	movs	r2, #6
 8002098:	701a      	strb	r2, [r3, #0]
 800209a:	e051      	b.n	8002140 <SD_Initialize+0x1c0>
                    else SD_Type = SD_TYPE_V2;
 800209c:	4b31      	ldr	r3, [pc, #196]	; (8002164 <SD_Initialize+0x1e4>)
 800209e:	2204      	movs	r2, #4
 80020a0:	701a      	strb	r2, [r3, #0]
 80020a2:	e04d      	b.n	8002140 <SD_Initialize+0x1c0>
                }
            }
        }
        else //SD V1.x/ MMC	V3
        {
            SD_SendCmd(CMD55, 0, 0X01);		//����CMD55
 80020a4:	2201      	movs	r2, #1
 80020a6:	2100      	movs	r1, #0
 80020a8:	2037      	movs	r0, #55	; 0x37
 80020aa:	f7ff fea8 	bl	8001dfe <SD_SendCmd>
            r1 = SD_SendCmd(CMD41, 0, 0X01);	//����CMD41
 80020ae:	2201      	movs	r2, #1
 80020b0:	2100      	movs	r1, #0
 80020b2:	2029      	movs	r0, #41	; 0x29
 80020b4:	f7ff fea3 	bl	8001dfe <SD_SendCmd>
 80020b8:	4603      	mov	r3, r0
 80020ba:	73fb      	strb	r3, [r7, #15]
            if (r1 <= 1)
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d81a      	bhi.n	80020f8 <SD_Initialize+0x178>
            {
                SD_Type = SD_TYPE_V1;
 80020c2:	4b28      	ldr	r3, [pc, #160]	; (8002164 <SD_Initialize+0x1e4>)
 80020c4:	2202      	movs	r2, #2
 80020c6:	701a      	strb	r2, [r3, #0]
                retry = 0XFFFE;
 80020c8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80020cc:	81bb      	strh	r3, [r7, #12]
                do //�ȴ��˳�IDLEģʽ
                {
                    SD_SendCmd(CMD55, 0, 0X01);	//����CMD55
 80020ce:	2201      	movs	r2, #1
 80020d0:	2100      	movs	r1, #0
 80020d2:	2037      	movs	r0, #55	; 0x37
 80020d4:	f7ff fe93 	bl	8001dfe <SD_SendCmd>
                    r1 = SD_SendCmd(CMD41, 0, 0X01); //����CMD41
 80020d8:	2201      	movs	r2, #1
 80020da:	2100      	movs	r1, #0
 80020dc:	2029      	movs	r0, #41	; 0x29
 80020de:	f7ff fe8e 	bl	8001dfe <SD_SendCmd>
 80020e2:	4603      	mov	r3, r0
 80020e4:	73fb      	strb	r3, [r7, #15]
                }
                while (r1 && retry--);
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d01a      	beq.n	8002122 <SD_Initialize+0x1a2>
 80020ec:	89bb      	ldrh	r3, [r7, #12]
 80020ee:	1e5a      	subs	r2, r3, #1
 80020f0:	81ba      	strh	r2, [r7, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1eb      	bne.n	80020ce <SD_Initialize+0x14e>
 80020f6:	e014      	b.n	8002122 <SD_Initialize+0x1a2>
            }
            else
            {
                SD_Type = SD_TYPE_MMC; //MMC V3
 80020f8:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <SD_Initialize+0x1e4>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]
                retry = 0XFFFE;
 80020fe:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002102:	81bb      	strh	r3, [r7, #12]
                do //�ȴ��˳�IDLEģʽ
                {
                    r1 = SD_SendCmd(CMD1, 0, 0X01); //����CMD1
 8002104:	2201      	movs	r2, #1
 8002106:	2100      	movs	r1, #0
 8002108:	2001      	movs	r0, #1
 800210a:	f7ff fe78 	bl	8001dfe <SD_SendCmd>
 800210e:	4603      	mov	r3, r0
 8002110:	73fb      	strb	r3, [r7, #15]
                }
                while (r1 && retry--);
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d004      	beq.n	8002122 <SD_Initialize+0x1a2>
 8002118:	89bb      	ldrh	r3, [r7, #12]
 800211a:	1e5a      	subs	r2, r3, #1
 800211c:	81ba      	strh	r2, [r7, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <SD_Initialize+0x184>
            }
            if (retry == 0 || SD_SendCmd(CMD16, 512, 0X01) != 0)SD_Type = SD_TYPE_ERR; //����Ŀ�
 8002122:	89bb      	ldrh	r3, [r7, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d008      	beq.n	800213a <SD_Initialize+0x1ba>
 8002128:	2201      	movs	r2, #1
 800212a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800212e:	2010      	movs	r0, #16
 8002130:	f7ff fe65 	bl	8001dfe <SD_SendCmd>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d002      	beq.n	8002140 <SD_Initialize+0x1c0>
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <SD_Initialize+0x1e4>)
 800213c:	2200      	movs	r2, #0
 800213e:	701a      	strb	r2, [r3, #0]
        }
    }
    SD_DisSelect();//ȡ��Ƭѡ
 8002140:	f7ff fd9a 	bl	8001c78 <SD_DisSelect>
    if (SD_Type)return 0;
 8002144:	4b07      	ldr	r3, [pc, #28]	; (8002164 <SD_Initialize+0x1e4>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <SD_Initialize+0x1d0>
 800214c:	2300      	movs	r3, #0
 800214e:	e005      	b.n	800215c <SD_Initialize+0x1dc>
    else if (r1)return r1;
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <SD_Initialize+0x1da>
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	e000      	b.n	800215c <SD_Initialize+0x1dc>
    return 0xaa;//��������
 800215a:	23aa      	movs	r3, #170	; 0xaa
}
 800215c:	4618      	mov	r0, r3
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	bd90      	pop	{r4, r7, pc}
 8002164:	20000624 	.word	0x20000624

08002168 <SD_ReadDisk>:
 * @param  sector �������
 * @param  cnt    Ҫ��ȡ����������
 * @return        0���ɹ�  other��ʧ��
 */
uint8_t SD_ReadDisk(uint8_t*buf, uint32_t sector, uint8_t cnt)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	4613      	mov	r3, r2
 8002174:	71fb      	strb	r3, [r7, #7]
    uint8_t r1;
    if (SD_Type != SD_TYPE_V2HC)sector <<= 9; //ת��Ϊ�ֽڵ�ַ
 8002176:	4b21      	ldr	r3, [pc, #132]	; (80021fc <SD_ReadDisk+0x94>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b06      	cmp	r3, #6
 800217c:	d002      	beq.n	8002184 <SD_ReadDisk+0x1c>
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	025b      	lsls	r3, r3, #9
 8002182:	60bb      	str	r3, [r7, #8]
    if (cnt == 1)
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d111      	bne.n	80021ae <SD_ReadDisk+0x46>
    {
        r1 = SD_SendCmd(CMD17, sector, 0X01); //������
 800218a:	2201      	movs	r2, #1
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	2011      	movs	r0, #17
 8002190:	f7ff fe35 	bl	8001dfe <SD_SendCmd>
 8002194:	4603      	mov	r3, r0
 8002196:	75fb      	strb	r3, [r7, #23]
        if (r1 == 0) //ָ��ͳɹ�
 8002198:	7dfb      	ldrb	r3, [r7, #23]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d127      	bne.n	80021ee <SD_ReadDisk+0x86>
        {
            r1 = SD_RecvData(buf, 512); //����512���ֽ�
 800219e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f7ff fdc7 	bl	8001d36 <SD_RecvData>
 80021a8:	4603      	mov	r3, r0
 80021aa:	75fb      	strb	r3, [r7, #23]
 80021ac:	e01f      	b.n	80021ee <SD_ReadDisk+0x86>
        }
    }
    else
    {
        r1 = SD_SendCmd(CMD18, sector, 0X01); //����������
 80021ae:	2201      	movs	r2, #1
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	2012      	movs	r0, #18
 80021b4:	f7ff fe23 	bl	8001dfe <SD_SendCmd>
 80021b8:	4603      	mov	r3, r0
 80021ba:	75fb      	strb	r3, [r7, #23]
        do
        {
            r1 = SD_RecvData(buf, 512); //����512���ֽ�
 80021bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f7ff fdb8 	bl	8001d36 <SD_RecvData>
 80021c6:	4603      	mov	r3, r0
 80021c8:	75fb      	strb	r3, [r7, #23]
            buf += 512;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80021d0:	60fb      	str	r3, [r7, #12]
        }
        while (--cnt && r1 == 0);
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	3b01      	subs	r3, #1
 80021d6:	71fb      	strb	r3, [r7, #7]
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <SD_ReadDisk+0x7c>
 80021de:	7dfb      	ldrb	r3, [r7, #23]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0eb      	beq.n	80021bc <SD_ReadDisk+0x54>
        SD_SendCmd(CMD12, 0, 0X01);	//����ֹͣ����
 80021e4:	2201      	movs	r2, #1
 80021e6:	2100      	movs	r1, #0
 80021e8:	200c      	movs	r0, #12
 80021ea:	f7ff fe08 	bl	8001dfe <SD_SendCmd>
    }
    SD_DisSelect();//ȡ��Ƭѡ
 80021ee:	f7ff fd43 	bl	8001c78 <SD_DisSelect>
    return r1;//
 80021f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000624 	.word	0x20000624

08002200 <SD_WriteDisk>:
 * @param  sector �������
 * @param  cnt    Ҫд�����������
 * @return        0���ɹ�  other��ʧ��
 */
uint8_t SD_WriteDisk(uint8_t*buf, uint32_t sector, uint8_t cnt)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	4613      	mov	r3, r2
 800220c:	71fb      	strb	r3, [r7, #7]
    uint8_t r1;
    if (SD_Type != SD_TYPE_V2HC)sector *= 512; //ת��Ϊ�ֽڵ�ַ
 800220e:	4b2a      	ldr	r3, [pc, #168]	; (80022b8 <SD_WriteDisk+0xb8>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b06      	cmp	r3, #6
 8002214:	d002      	beq.n	800221c <SD_WriteDisk+0x1c>
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	025b      	lsls	r3, r3, #9
 800221a:	60bb      	str	r3, [r7, #8]
    if (cnt == 1)
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d110      	bne.n	8002244 <SD_WriteDisk+0x44>
    {
        r1 = SD_SendCmd(CMD24, sector, 0X01); //������
 8002222:	2201      	movs	r2, #1
 8002224:	68b9      	ldr	r1, [r7, #8]
 8002226:	2018      	movs	r0, #24
 8002228:	f7ff fde9 	bl	8001dfe <SD_SendCmd>
 800222c:	4603      	mov	r3, r0
 800222e:	75fb      	strb	r3, [r7, #23]
        if (r1 == 0) //ָ��ͳɹ�
 8002230:	7dfb      	ldrb	r3, [r7, #23]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d138      	bne.n	80022a8 <SD_WriteDisk+0xa8>
        {
            r1 = SD_SendBlock(buf, 0xFE); //д512���ֽ�
 8002236:	21fe      	movs	r1, #254	; 0xfe
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f7ff fda4 	bl	8001d86 <SD_SendBlock>
 800223e:	4603      	mov	r3, r0
 8002240:	75fb      	strb	r3, [r7, #23]
 8002242:	e031      	b.n	80022a8 <SD_WriteDisk+0xa8>
        }
    }
    else
    {
        if (SD_Type != SD_TYPE_MMC)
 8002244:	4b1c      	ldr	r3, [pc, #112]	; (80022b8 <SD_WriteDisk+0xb8>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d00a      	beq.n	8002262 <SD_WriteDisk+0x62>
        {
            SD_SendCmd(CMD55, 0, 0X01);
 800224c:	2201      	movs	r2, #1
 800224e:	2100      	movs	r1, #0
 8002250:	2037      	movs	r0, #55	; 0x37
 8002252:	f7ff fdd4 	bl	8001dfe <SD_SendCmd>
            SD_SendCmd(CMD23, cnt, 0X01); //����ָ��
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	2201      	movs	r2, #1
 800225a:	4619      	mov	r1, r3
 800225c:	2017      	movs	r0, #23
 800225e:	f7ff fdce 	bl	8001dfe <SD_SendCmd>
        }
        r1 = SD_SendCmd(CMD25, sector, 0X01); //����������
 8002262:	2201      	movs	r2, #1
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	2019      	movs	r0, #25
 8002268:	f7ff fdc9 	bl	8001dfe <SD_SendCmd>
 800226c:	4603      	mov	r3, r0
 800226e:	75fb      	strb	r3, [r7, #23]
        if (r1 == 0)
 8002270:	7dfb      	ldrb	r3, [r7, #23]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d118      	bne.n	80022a8 <SD_WriteDisk+0xa8>
        {
            do
            {
                r1 = SD_SendBlock(buf, 0xFC); //����512���ֽ�
 8002276:	21fc      	movs	r1, #252	; 0xfc
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f7ff fd84 	bl	8001d86 <SD_SendBlock>
 800227e:	4603      	mov	r3, r0
 8002280:	75fb      	strb	r3, [r7, #23]
                buf += 512;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002288:	60fb      	str	r3, [r7, #12]
            }
            while (--cnt && r1 == 0);
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	3b01      	subs	r3, #1
 800228e:	71fb      	strb	r3, [r7, #7]
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <SD_WriteDisk+0x9c>
 8002296:	7dfb      	ldrb	r3, [r7, #23]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0ec      	beq.n	8002276 <SD_WriteDisk+0x76>
            r1 = SD_SendBlock(0, 0xFD); //����512���ֽ�
 800229c:	21fd      	movs	r1, #253	; 0xfd
 800229e:	2000      	movs	r0, #0
 80022a0:	f7ff fd71 	bl	8001d86 <SD_SendBlock>
 80022a4:	4603      	mov	r3, r0
 80022a6:	75fb      	strb	r3, [r7, #23]
        }
    }
    SD_DisSelect();//ȡ��Ƭѡ
 80022a8:	f7ff fce6 	bl	8001c78 <SD_DisSelect>
    return r1;//
 80022ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000624 	.word	0x20000624

080022bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	607b      	str	r3, [r7, #4]
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <HAL_MspInit+0x4c>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	4a0f      	ldr	r2, [pc, #60]	; (8002308 <HAL_MspInit+0x4c>)
 80022cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022d0:	6453      	str	r3, [r2, #68]	; 0x44
 80022d2:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <HAL_MspInit+0x4c>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022da:	607b      	str	r3, [r7, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	603b      	str	r3, [r7, #0]
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_MspInit+0x4c>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	4a08      	ldr	r2, [pc, #32]	; (8002308 <HAL_MspInit+0x4c>)
 80022e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ec:	6413      	str	r3, [r2, #64]	; 0x40
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_MspInit+0x4c>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800

0800230c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08a      	sub	sp, #40	; 0x28
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a19      	ldr	r2, [pc, #100]	; (8002390 <HAL_I2C_MspInit+0x84>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d12b      	bne.n	8002386 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	4b18      	ldr	r3, [pc, #96]	; (8002394 <HAL_I2C_MspInit+0x88>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a17      	ldr	r2, [pc, #92]	; (8002394 <HAL_I2C_MspInit+0x88>)
 8002338:	f043 0302 	orr.w	r3, r3, #2
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b15      	ldr	r3, [pc, #84]	; (8002394 <HAL_I2C_MspInit+0x88>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800234a:	23c0      	movs	r3, #192	; 0xc0
 800234c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800234e:	2312      	movs	r3, #18
 8002350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002356:	2303      	movs	r3, #3
 8002358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800235a:	2304      	movs	r3, #4
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235e:	f107 0314 	add.w	r3, r7, #20
 8002362:	4619      	mov	r1, r3
 8002364:	480c      	ldr	r0, [pc, #48]	; (8002398 <HAL_I2C_MspInit+0x8c>)
 8002366:	f000 fbc3 	bl	8002af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <HAL_I2C_MspInit+0x88>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	4a08      	ldr	r2, [pc, #32]	; (8002394 <HAL_I2C_MspInit+0x88>)
 8002374:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002378:	6413      	str	r3, [r2, #64]	; 0x40
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_I2C_MspInit+0x88>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002386:	bf00      	nop
 8002388:	3728      	adds	r7, #40	; 0x28
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40005400 	.word	0x40005400
 8002394:	40023800 	.word	0x40023800
 8002398:	40020400 	.word	0x40020400

0800239c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08a      	sub	sp, #40	; 0x28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a4:	f107 0314 	add.w	r3, r7, #20
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a19      	ldr	r2, [pc, #100]	; (8002420 <HAL_SPI_MspInit+0x84>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d12b      	bne.n	8002416 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	4b18      	ldr	r3, [pc, #96]	; (8002424 <HAL_SPI_MspInit+0x88>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	4a17      	ldr	r2, [pc, #92]	; (8002424 <HAL_SPI_MspInit+0x88>)
 80023c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023cc:	6453      	str	r3, [r2, #68]	; 0x44
 80023ce:	4b15      	ldr	r3, [pc, #84]	; (8002424 <HAL_SPI_MspInit+0x88>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	4b11      	ldr	r3, [pc, #68]	; (8002424 <HAL_SPI_MspInit+0x88>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	4a10      	ldr	r2, [pc, #64]	; (8002424 <HAL_SPI_MspInit+0x88>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ea:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <HAL_SPI_MspInit+0x88>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80023f6:	23e0      	movs	r3, #224	; 0xe0
 80023f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fa:	2302      	movs	r3, #2
 80023fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002402:	2303      	movs	r3, #3
 8002404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002406:	2305      	movs	r3, #5
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240a:	f107 0314 	add.w	r3, r7, #20
 800240e:	4619      	mov	r1, r3
 8002410:	4805      	ldr	r0, [pc, #20]	; (8002428 <HAL_SPI_MspInit+0x8c>)
 8002412:	f000 fb6d 	bl	8002af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002416:	bf00      	nop
 8002418:	3728      	adds	r7, #40	; 0x28
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40013000 	.word	0x40013000
 8002424:	40023800 	.word	0x40023800
 8002428:	40020000 	.word	0x40020000

0800242c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a08      	ldr	r2, [pc, #32]	; (800245c <HAL_SPI_MspDeInit+0x30>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d109      	bne.n	8002452 <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <HAL_SPI_MspDeInit+0x34>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	4a07      	ldr	r2, [pc, #28]	; (8002460 <HAL_SPI_MspDeInit+0x34>)
 8002444:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002448:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800244a:	21e0      	movs	r1, #224	; 0xe0
 800244c:	4805      	ldr	r0, [pc, #20]	; (8002464 <HAL_SPI_MspDeInit+0x38>)
 800244e:	f000 fceb 	bl	8002e28 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40013000 	.word	0x40013000
 8002460:	40023800 	.word	0x40023800
 8002464:	40020000 	.word	0x40020000

08002468 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08a      	sub	sp, #40	; 0x28
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002470:	f107 0314 	add.w	r3, r7, #20
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a19      	ldr	r2, [pc, #100]	; (80024ec <HAL_UART_MspInit+0x84>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d12b      	bne.n	80024e2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	4b18      	ldr	r3, [pc, #96]	; (80024f0 <HAL_UART_MspInit+0x88>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	4a17      	ldr	r2, [pc, #92]	; (80024f0 <HAL_UART_MspInit+0x88>)
 8002494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002498:	6413      	str	r3, [r2, #64]	; 0x40
 800249a:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <HAL_UART_MspInit+0x88>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <HAL_UART_MspInit+0x88>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	4a10      	ldr	r2, [pc, #64]	; (80024f0 <HAL_UART_MspInit+0x88>)
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	6313      	str	r3, [r2, #48]	; 0x30
 80024b6:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <HAL_UART_MspInit+0x88>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024c2:	230c      	movs	r3, #12
 80024c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c6:	2302      	movs	r3, #2
 80024c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ce:	2303      	movs	r3, #3
 80024d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024d2:	2307      	movs	r3, #7
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d6:	f107 0314 	add.w	r3, r7, #20
 80024da:	4619      	mov	r1, r3
 80024dc:	4805      	ldr	r0, [pc, #20]	; (80024f4 <HAL_UART_MspInit+0x8c>)
 80024de:	f000 fb07 	bl	8002af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024e2:	bf00      	nop
 80024e4:	3728      	adds	r7, #40	; 0x28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40004400 	.word	0x40004400
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40020000 	.word	0x40020000

080024f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08c      	sub	sp, #48	; 0x30
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8002508:	2200      	movs	r2, #0
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	2037      	movs	r0, #55	; 0x37
 800250e:	f000 fac5 	bl	8002a9c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002512:	2037      	movs	r0, #55	; 0x37
 8002514:	f000 fade 	bl	8002ad4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <HAL_InitTick+0xa0>)
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	4a1d      	ldr	r2, [pc, #116]	; (8002598 <HAL_InitTick+0xa0>)
 8002522:	f043 0320 	orr.w	r3, r3, #32
 8002526:	6413      	str	r3, [r2, #64]	; 0x40
 8002528:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <HAL_InitTick+0xa0>)
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	f003 0320 	and.w	r3, r3, #32
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002534:	f107 0210 	add.w	r2, r7, #16
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	4611      	mov	r1, r2
 800253e:	4618      	mov	r0, r3
 8002540:	f001 fe44 	bl	80041cc <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002544:	f001 fe1a 	bl	800417c <HAL_RCC_GetPCLK1Freq>
 8002548:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800254a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254c:	4a13      	ldr	r2, [pc, #76]	; (800259c <HAL_InitTick+0xa4>)
 800254e:	fba2 2303 	umull	r2, r3, r2, r3
 8002552:	0c9b      	lsrs	r3, r3, #18
 8002554:	3b01      	subs	r3, #1
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002558:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <HAL_InitTick+0xa8>)
 800255a:	4a12      	ldr	r2, [pc, #72]	; (80025a4 <HAL_InitTick+0xac>)
 800255c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <HAL_InitTick+0xa8>)
 8002560:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002564:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002566:	4a0e      	ldr	r2, [pc, #56]	; (80025a0 <HAL_InitTick+0xa8>)
 8002568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800256c:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <HAL_InitTick+0xa8>)
 800256e:	2200      	movs	r2, #0
 8002570:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002572:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_InitTick+0xa8>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002578:	4809      	ldr	r0, [pc, #36]	; (80025a0 <HAL_InitTick+0xa8>)
 800257a:	f002 f977 	bl	800486c <HAL_TIM_Base_Init>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d104      	bne.n	800258e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8002584:	4806      	ldr	r0, [pc, #24]	; (80025a0 <HAL_InitTick+0xa8>)
 8002586:	f002 f9cb 	bl	8004920 <HAL_TIM_Base_Start_IT>
 800258a:	4603      	mov	r3, r0
 800258c:	e000      	b.n	8002590 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
}
 8002590:	4618      	mov	r0, r3
 8002592:	3730      	adds	r7, #48	; 0x30
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40023800 	.word	0x40023800
 800259c:	431bde83 	.word	0x431bde83
 80025a0:	20000628 	.word	0x20000628
 80025a4:	40001400 	.word	0x40001400

080025a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025ac:	e7fe      	b.n	80025ac <NMI_Handler+0x4>

080025ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025b2:	e7fe      	b.n	80025b2 <HardFault_Handler+0x4>

080025b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025b8:	e7fe      	b.n	80025b8 <MemManage_Handler+0x4>

080025ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025be:	e7fe      	b.n	80025be <BusFault_Handler+0x4>

080025c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025c4:	e7fe      	b.n	80025c4 <UsageFault_Handler+0x4>

080025c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025c6:	b480      	push	{r7}
 80025c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80025d8:	2001      	movs	r0, #1
 80025da:	f000 fd3b 	bl	8003054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80025e6:	2002      	movs	r0, #2
 80025e8:	f000 fd34 	bl	8003054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80025f4:	2004      	movs	r0, #4
 80025f6:	f000 fd2d 	bl	8003054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}

080025fe <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002602:	2008      	movs	r0, #8
 8002604:	f000 fd26 	bl	8003054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002608:	bf00      	nop
 800260a:	bd80      	pop	{r7, pc}

0800260c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002610:	2010      	movs	r0, #16
 8002612:	f000 fd1f 	bl	8003054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002620:	4802      	ldr	r0, [pc, #8]	; (800262c <TIM7_IRQHandler+0x10>)
 8002622:	f002 f9ed 	bl	8004a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20000628 	.word	0x20000628

08002630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002638:	4a14      	ldr	r2, [pc, #80]	; (800268c <_sbrk+0x5c>)
 800263a:	4b15      	ldr	r3, [pc, #84]	; (8002690 <_sbrk+0x60>)
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002644:	4b13      	ldr	r3, [pc, #76]	; (8002694 <_sbrk+0x64>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d102      	bne.n	8002652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <_sbrk+0x64>)
 800264e:	4a12      	ldr	r2, [pc, #72]	; (8002698 <_sbrk+0x68>)
 8002650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <_sbrk+0x64>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	429a      	cmp	r2, r3
 800265e:	d207      	bcs.n	8002670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002660:	f005 fa94 	bl	8007b8c <__errno>
 8002664:	4603      	mov	r3, r0
 8002666:	220c      	movs	r2, #12
 8002668:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800266a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800266e:	e009      	b.n	8002684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002670:	4b08      	ldr	r3, [pc, #32]	; (8002694 <_sbrk+0x64>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002676:	4b07      	ldr	r3, [pc, #28]	; (8002694 <_sbrk+0x64>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	4a05      	ldr	r2, [pc, #20]	; (8002694 <_sbrk+0x64>)
 8002680:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002682:	68fb      	ldr	r3, [r7, #12]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20020000 	.word	0x20020000
 8002690:	00000400 	.word	0x00000400
 8002694:	20000670 	.word	0x20000670
 8002698:	20013508 	.word	0x20013508

0800269c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <SystemInit+0x20>)
 80026a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a6:	4a05      	ldr	r2, [pc, #20]	; (80026bc <SystemInit+0x20>)
 80026a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
    BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b0c2      	sub	sp, #264	; 0x108
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4602      	mov	r2, r0
 80026c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80026cc:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80026d0:	701a      	strb	r2, [r3, #0]
    /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80026d2:	4b21      	ldr	r3, [pc, #132]	; (8002758 <USER_initialize+0x98>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	701a      	strb	r2, [r3, #0]

    char buf[256];
    sprintf(buf, "# SD Card Init ");
 80026d8:	f107 0308 	add.w	r3, r7, #8
 80026dc:	491f      	ldr	r1, [pc, #124]	; (800275c <USER_initialize+0x9c>)
 80026de:	4618      	mov	r0, r3
 80026e0:	f005 fa94 	bl	8007c0c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 80026e4:	f107 0308 	add.w	r3, r7, #8
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fd fd71 	bl	80001d0 <strlen>
 80026ee:	4603      	mov	r3, r0
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	f107 0108 	add.w	r1, r7, #8
 80026f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026fa:	4819      	ldr	r0, [pc, #100]	; (8002760 <USER_initialize+0xa0>)
 80026fc:	f002 fbb1 	bl	8004e62 <HAL_UART_Transmit>
    if(SD_Initialize() == 0)
 8002700:	f7ff fc3e 	bl	8001f80 <SD_Initialize>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d102      	bne.n	8002710 <USER_initialize+0x50>
    {
        Stat = RES_OK;
 800270a:	4b13      	ldr	r3, [pc, #76]	; (8002758 <USER_initialize+0x98>)
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
    }
    sprintf(buf, "%s!\r\n", Stat == RES_OK ? "Successfully" : "Failed");
 8002710:	4b11      	ldr	r3, [pc, #68]	; (8002758 <USER_initialize+0x98>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <USER_initialize+0x5e>
 800271a:	4a12      	ldr	r2, [pc, #72]	; (8002764 <USER_initialize+0xa4>)
 800271c:	e000      	b.n	8002720 <USER_initialize+0x60>
 800271e:	4a12      	ldr	r2, [pc, #72]	; (8002768 <USER_initialize+0xa8>)
 8002720:	f107 0308 	add.w	r3, r7, #8
 8002724:	4911      	ldr	r1, [pc, #68]	; (800276c <USER_initialize+0xac>)
 8002726:	4618      	mov	r0, r3
 8002728:	f005 fa70 	bl	8007c0c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 800272c:	f107 0308 	add.w	r3, r7, #8
 8002730:	4618      	mov	r0, r3
 8002732:	f7fd fd4d 	bl	80001d0 <strlen>
 8002736:	4603      	mov	r3, r0
 8002738:	b29a      	uxth	r2, r3
 800273a:	f107 0108 	add.w	r1, r7, #8
 800273e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002742:	4807      	ldr	r0, [pc, #28]	; (8002760 <USER_initialize+0xa0>)
 8002744:	f002 fb8d 	bl	8004e62 <HAL_UART_Transmit>

    return Stat;
 8002748:	4b03      	ldr	r3, [pc, #12]	; (8002758 <USER_initialize+0x98>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	b2db      	uxtb	r3, r3
    /* USER CODE END INIT */
}
 800274e:	4618      	mov	r0, r3
 8002750:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000028 	.word	0x20000028
 800275c:	080086d8 	.word	0x080086d8
 8002760:	200005d8 	.word	0x200005d8
 8002764:	080086e8 	.word	0x080086e8
 8002768:	080086f8 	.word	0x080086f8
 800276c:	08008700 	.word	0x08008700

08002770 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
    BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]
    /* USER CODE BEGIN STATUS */
    return RES_OK;
 800277a:	2300      	movs	r3, #0
    /* USER CODE END STATUS */
}
 800277c:	4618      	mov	r0, r3
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <USER_read>:
    BYTE pdrv,      /* Physical drive nmuber to identify the drive */
    BYTE *buff,     /* Data buffer to store read data */
    DWORD sector,   /* Sector address in LBA */
    UINT count      /* Number of sectors to read */
)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	4603      	mov	r3, r0
 8002796:	73fb      	strb	r3, [r7, #15]
    /* USER CODE BEGIN READ */
    return SD_ReadDisk(buff, sector, count) == 0 ? RES_OK : RES_ERROR;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	461a      	mov	r2, r3
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	68b8      	ldr	r0, [r7, #8]
 80027a2:	f7ff fce1 	bl	8002168 <SD_ReadDisk>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	bf14      	ite	ne
 80027ac:	2301      	movne	r3, #1
 80027ae:	2300      	moveq	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
    /* USER CODE END READ */
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <USER_write>:
    BYTE pdrv,          /* Physical drive nmuber to identify the drive */
    const BYTE *buff,   /* Data to be written */
    DWORD sector,       /* Sector address in LBA */
    UINT count          /* Number of sectors to write */
)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	603b      	str	r3, [r7, #0]
 80027c6:	4603      	mov	r3, r0
 80027c8:	73fb      	strb	r3, [r7, #15]
    /* USER CODE BEGIN WRITE */
    /* USER CODE HERE */
    return SD_WriteDisk((uint8_t *)buff, sector, count) == 0 ? RES_OK : RES_ERROR;;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	68b8      	ldr	r0, [r7, #8]
 80027d4:	f7ff fd14 	bl	8002200 <SD_WriteDisk>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	bf14      	ite	ne
 80027de:	2301      	movne	r3, #1
 80027e0:	2300      	moveq	r3, #0
 80027e2:	b2db      	uxtb	r3, r3
    /* USER CODE END WRITE */
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <USER_ioctl>:
DRESULT USER_ioctl (
    BYTE pdrv,      /* Physical drive nmuber (0..) */
    BYTE cmd,       /* Control code */
    void *buff      /* Buffer to send/receive control data */
)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	603a      	str	r2, [r7, #0]
 80027f6:	71fb      	strb	r3, [r7, #7]
 80027f8:	460b      	mov	r3, r1
 80027fa:	71bb      	strb	r3, [r7, #6]
    /* USER CODE BEGIN IOCTL */
    return RES_OK;
 80027fc:	2300      	movs	r3, #0
    /* USER CODE END IOCTL */
}
 80027fe:	4618      	mov	r0, r3
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800280c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002844 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002810:	480d      	ldr	r0, [pc, #52]	; (8002848 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002812:	490e      	ldr	r1, [pc, #56]	; (800284c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002814:	4a0e      	ldr	r2, [pc, #56]	; (8002850 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002818:	e002      	b.n	8002820 <LoopCopyDataInit>

0800281a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800281a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800281c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800281e:	3304      	adds	r3, #4

08002820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002824:	d3f9      	bcc.n	800281a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002826:	4a0b      	ldr	r2, [pc, #44]	; (8002854 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002828:	4c0b      	ldr	r4, [pc, #44]	; (8002858 <LoopFillZerobss+0x26>)
  movs r3, #0
 800282a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800282c:	e001      	b.n	8002832 <LoopFillZerobss>

0800282e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800282e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002830:	3204      	adds	r2, #4

08002832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002834:	d3fb      	bcc.n	800282e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002836:	f7ff ff31 	bl	800269c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800283a:	f005 f9ad 	bl	8007b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800283e:	f7fe ff71 	bl	8001724 <main>
  bx  lr    
 8002842:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002844:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800284c:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8002850:	0800895c 	.word	0x0800895c
  ldr r2, =_sbss
 8002854:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8002858:	20013504 	.word	0x20013504

0800285c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800285c:	e7fe      	b.n	800285c <ADC_IRQHandler>
	...

08002860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002864:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <HAL_Init+0x40>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0d      	ldr	r2, [pc, #52]	; (80028a0 <HAL_Init+0x40>)
 800286a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800286e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_Init+0x40>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a0a      	ldr	r2, [pc, #40]	; (80028a0 <HAL_Init+0x40>)
 8002876:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800287a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800287c:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <HAL_Init+0x40>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a07      	ldr	r2, [pc, #28]	; (80028a0 <HAL_Init+0x40>)
 8002882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002886:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002888:	2003      	movs	r0, #3
 800288a:	f000 f8fc 	bl	8002a86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800288e:	200f      	movs	r0, #15
 8002890:	f7ff fe32 	bl	80024f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002894:	f7ff fd12 	bl	80022bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40023c00 	.word	0x40023c00

080028a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a8:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_IncTick+0x20>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <HAL_IncTick+0x24>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4413      	add	r3, r2
 80028b4:	4a04      	ldr	r2, [pc, #16]	; (80028c8 <HAL_IncTick+0x24>)
 80028b6:	6013      	str	r3, [r2, #0]
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	20000044 	.word	0x20000044
 80028c8:	20000674 	.word	0x20000674

080028cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return uwTick;
 80028d0:	4b03      	ldr	r3, [pc, #12]	; (80028e0 <HAL_GetTick+0x14>)
 80028d2:	681b      	ldr	r3, [r3, #0]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	20000674 	.word	0x20000674

080028e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028ec:	f7ff ffee 	bl	80028cc <HAL_GetTick>
 80028f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028fc:	d005      	beq.n	800290a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028fe:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <HAL_Delay+0x44>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4413      	add	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800290a:	bf00      	nop
 800290c:	f7ff ffde 	bl	80028cc <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	429a      	cmp	r2, r3
 800291a:	d8f7      	bhi.n	800290c <HAL_Delay+0x28>
  {
  }
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000044 	.word	0x20000044

0800292c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800293c:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <__NVIC_SetPriorityGrouping+0x44>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002948:	4013      	ands	r3, r2
 800294a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800295c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800295e:	4a04      	ldr	r2, [pc, #16]	; (8002970 <__NVIC_SetPriorityGrouping+0x44>)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	60d3      	str	r3, [r2, #12]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	e000ed00 	.word	0xe000ed00

08002974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <__NVIC_GetPriorityGrouping+0x18>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	0a1b      	lsrs	r3, r3, #8
 800297e:	f003 0307 	and.w	r3, r3, #7
}
 8002982:	4618      	mov	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	db0b      	blt.n	80029ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	f003 021f 	and.w	r2, r3, #31
 80029a8:	4907      	ldr	r1, [pc, #28]	; (80029c8 <__NVIC_EnableIRQ+0x38>)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	2001      	movs	r0, #1
 80029b2:	fa00 f202 	lsl.w	r2, r0, r2
 80029b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	e000e100 	.word	0xe000e100

080029cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	6039      	str	r1, [r7, #0]
 80029d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	db0a      	blt.n	80029f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	490c      	ldr	r1, [pc, #48]	; (8002a18 <__NVIC_SetPriority+0x4c>)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	0112      	lsls	r2, r2, #4
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	440b      	add	r3, r1
 80029f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f4:	e00a      	b.n	8002a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	4908      	ldr	r1, [pc, #32]	; (8002a1c <__NVIC_SetPriority+0x50>)
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	3b04      	subs	r3, #4
 8002a04:	0112      	lsls	r2, r2, #4
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	440b      	add	r3, r1
 8002a0a:	761a      	strb	r2, [r3, #24]
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000e100 	.word	0xe000e100
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b089      	sub	sp, #36	; 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f1c3 0307 	rsb	r3, r3, #7
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	bf28      	it	cs
 8002a3e:	2304      	movcs	r3, #4
 8002a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3304      	adds	r3, #4
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d902      	bls.n	8002a50 <NVIC_EncodePriority+0x30>
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3b03      	subs	r3, #3
 8002a4e:	e000      	b.n	8002a52 <NVIC_EncodePriority+0x32>
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43da      	mvns	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	401a      	ands	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	43d9      	mvns	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	4313      	orrs	r3, r2
         );
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3724      	adds	r7, #36	; 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff ff4c 	bl	800292c <__NVIC_SetPriorityGrouping>
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aae:	f7ff ff61 	bl	8002974 <__NVIC_GetPriorityGrouping>
 8002ab2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	68b9      	ldr	r1, [r7, #8]
 8002ab8:	6978      	ldr	r0, [r7, #20]
 8002aba:	f7ff ffb1 	bl	8002a20 <NVIC_EncodePriority>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac4:	4611      	mov	r1, r2
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff ff80 	bl	80029cc <__NVIC_SetPriority>
}
 8002acc:	bf00      	nop
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff ff54 	bl	8002990 <__NVIC_EnableIRQ>
}
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b089      	sub	sp, #36	; 0x24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
 8002b0a:	e16b      	b.n	8002de4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	f040 815a 	bne.w	8002dde <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d005      	beq.n	8002b42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d130      	bne.n	8002ba4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4013      	ands	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b78:	2201      	movs	r2, #1
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4013      	ands	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	091b      	lsrs	r3, r3, #4
 8002b8e:	f003 0201 	and.w	r2, r3, #1
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 0303 	and.w	r3, r3, #3
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	d017      	beq.n	8002be0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	2203      	movs	r2, #3
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d123      	bne.n	8002c34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	08da      	lsrs	r2, r3, #3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3208      	adds	r2, #8
 8002bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	220f      	movs	r2, #15
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	08da      	lsrs	r2, r3, #3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3208      	adds	r2, #8
 8002c2e:	69b9      	ldr	r1, [r7, #24]
 8002c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	2203      	movs	r2, #3
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0203 	and.w	r2, r3, #3
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 80b4 	beq.w	8002dde <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	4b60      	ldr	r3, [pc, #384]	; (8002dfc <HAL_GPIO_Init+0x30c>)
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7e:	4a5f      	ldr	r2, [pc, #380]	; (8002dfc <HAL_GPIO_Init+0x30c>)
 8002c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c84:	6453      	str	r3, [r2, #68]	; 0x44
 8002c86:	4b5d      	ldr	r3, [pc, #372]	; (8002dfc <HAL_GPIO_Init+0x30c>)
 8002c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c92:	4a5b      	ldr	r2, [pc, #364]	; (8002e00 <HAL_GPIO_Init+0x310>)
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	089b      	lsrs	r3, r3, #2
 8002c98:	3302      	adds	r3, #2
 8002c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	220f      	movs	r2, #15
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a52      	ldr	r2, [pc, #328]	; (8002e04 <HAL_GPIO_Init+0x314>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d02b      	beq.n	8002d16 <HAL_GPIO_Init+0x226>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a51      	ldr	r2, [pc, #324]	; (8002e08 <HAL_GPIO_Init+0x318>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d025      	beq.n	8002d12 <HAL_GPIO_Init+0x222>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a50      	ldr	r2, [pc, #320]	; (8002e0c <HAL_GPIO_Init+0x31c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d01f      	beq.n	8002d0e <HAL_GPIO_Init+0x21e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a4f      	ldr	r2, [pc, #316]	; (8002e10 <HAL_GPIO_Init+0x320>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d019      	beq.n	8002d0a <HAL_GPIO_Init+0x21a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a4e      	ldr	r2, [pc, #312]	; (8002e14 <HAL_GPIO_Init+0x324>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d013      	beq.n	8002d06 <HAL_GPIO_Init+0x216>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a4d      	ldr	r2, [pc, #308]	; (8002e18 <HAL_GPIO_Init+0x328>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d00d      	beq.n	8002d02 <HAL_GPIO_Init+0x212>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a4c      	ldr	r2, [pc, #304]	; (8002e1c <HAL_GPIO_Init+0x32c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d007      	beq.n	8002cfe <HAL_GPIO_Init+0x20e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a4b      	ldr	r2, [pc, #300]	; (8002e20 <HAL_GPIO_Init+0x330>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d101      	bne.n	8002cfa <HAL_GPIO_Init+0x20a>
 8002cf6:	2307      	movs	r3, #7
 8002cf8:	e00e      	b.n	8002d18 <HAL_GPIO_Init+0x228>
 8002cfa:	2308      	movs	r3, #8
 8002cfc:	e00c      	b.n	8002d18 <HAL_GPIO_Init+0x228>
 8002cfe:	2306      	movs	r3, #6
 8002d00:	e00a      	b.n	8002d18 <HAL_GPIO_Init+0x228>
 8002d02:	2305      	movs	r3, #5
 8002d04:	e008      	b.n	8002d18 <HAL_GPIO_Init+0x228>
 8002d06:	2304      	movs	r3, #4
 8002d08:	e006      	b.n	8002d18 <HAL_GPIO_Init+0x228>
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e004      	b.n	8002d18 <HAL_GPIO_Init+0x228>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e002      	b.n	8002d18 <HAL_GPIO_Init+0x228>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_GPIO_Init+0x228>
 8002d16:	2300      	movs	r3, #0
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	f002 0203 	and.w	r2, r2, #3
 8002d1e:	0092      	lsls	r2, r2, #2
 8002d20:	4093      	lsls	r3, r2
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d28:	4935      	ldr	r1, [pc, #212]	; (8002e00 <HAL_GPIO_Init+0x310>)
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	089b      	lsrs	r3, r3, #2
 8002d2e:	3302      	adds	r3, #2
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d36:	4b3b      	ldr	r3, [pc, #236]	; (8002e24 <HAL_GPIO_Init+0x334>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d5a:	4a32      	ldr	r2, [pc, #200]	; (8002e24 <HAL_GPIO_Init+0x334>)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d60:	4b30      	ldr	r3, [pc, #192]	; (8002e24 <HAL_GPIO_Init+0x334>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d84:	4a27      	ldr	r2, [pc, #156]	; (8002e24 <HAL_GPIO_Init+0x334>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d8a:	4b26      	ldr	r3, [pc, #152]	; (8002e24 <HAL_GPIO_Init+0x334>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	43db      	mvns	r3, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dae:	4a1d      	ldr	r2, [pc, #116]	; (8002e24 <HAL_GPIO_Init+0x334>)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002db4:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <HAL_GPIO_Init+0x334>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dd8:	4a12      	ldr	r2, [pc, #72]	; (8002e24 <HAL_GPIO_Init+0x334>)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3301      	adds	r3, #1
 8002de2:	61fb      	str	r3, [r7, #28]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	2b0f      	cmp	r3, #15
 8002de8:	f67f ae90 	bls.w	8002b0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	3724      	adds	r7, #36	; 0x24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40013800 	.word	0x40013800
 8002e04:	40020000 	.word	0x40020000
 8002e08:	40020400 	.word	0x40020400
 8002e0c:	40020800 	.word	0x40020800
 8002e10:	40020c00 	.word	0x40020c00
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40021400 	.word	0x40021400
 8002e1c:	40021800 	.word	0x40021800
 8002e20:	40021c00 	.word	0x40021c00
 8002e24:	40013c00 	.word	0x40013c00

08002e28 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	e0cd      	b.n	8002fe0 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e44:	2201      	movs	r2, #1
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4013      	ands	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	f040 80bd 	bne.w	8002fda <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002e60:	4a65      	ldr	r2, [pc, #404]	; (8002ff8 <HAL_GPIO_DeInit+0x1d0>)
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	089b      	lsrs	r3, r3, #2
 8002e66:	3302      	adds	r3, #2
 8002e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e6c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	220f      	movs	r2, #15
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a5d      	ldr	r2, [pc, #372]	; (8002ffc <HAL_GPIO_DeInit+0x1d4>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d02b      	beq.n	8002ee2 <HAL_GPIO_DeInit+0xba>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a5c      	ldr	r2, [pc, #368]	; (8003000 <HAL_GPIO_DeInit+0x1d8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d025      	beq.n	8002ede <HAL_GPIO_DeInit+0xb6>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a5b      	ldr	r2, [pc, #364]	; (8003004 <HAL_GPIO_DeInit+0x1dc>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d01f      	beq.n	8002eda <HAL_GPIO_DeInit+0xb2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a5a      	ldr	r2, [pc, #360]	; (8003008 <HAL_GPIO_DeInit+0x1e0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d019      	beq.n	8002ed6 <HAL_GPIO_DeInit+0xae>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a59      	ldr	r2, [pc, #356]	; (800300c <HAL_GPIO_DeInit+0x1e4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d013      	beq.n	8002ed2 <HAL_GPIO_DeInit+0xaa>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a58      	ldr	r2, [pc, #352]	; (8003010 <HAL_GPIO_DeInit+0x1e8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00d      	beq.n	8002ece <HAL_GPIO_DeInit+0xa6>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a57      	ldr	r2, [pc, #348]	; (8003014 <HAL_GPIO_DeInit+0x1ec>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d007      	beq.n	8002eca <HAL_GPIO_DeInit+0xa2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a56      	ldr	r2, [pc, #344]	; (8003018 <HAL_GPIO_DeInit+0x1f0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d101      	bne.n	8002ec6 <HAL_GPIO_DeInit+0x9e>
 8002ec2:	2307      	movs	r3, #7
 8002ec4:	e00e      	b.n	8002ee4 <HAL_GPIO_DeInit+0xbc>
 8002ec6:	2308      	movs	r3, #8
 8002ec8:	e00c      	b.n	8002ee4 <HAL_GPIO_DeInit+0xbc>
 8002eca:	2306      	movs	r3, #6
 8002ecc:	e00a      	b.n	8002ee4 <HAL_GPIO_DeInit+0xbc>
 8002ece:	2305      	movs	r3, #5
 8002ed0:	e008      	b.n	8002ee4 <HAL_GPIO_DeInit+0xbc>
 8002ed2:	2304      	movs	r3, #4
 8002ed4:	e006      	b.n	8002ee4 <HAL_GPIO_DeInit+0xbc>
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e004      	b.n	8002ee4 <HAL_GPIO_DeInit+0xbc>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e002      	b.n	8002ee4 <HAL_GPIO_DeInit+0xbc>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <HAL_GPIO_DeInit+0xbc>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	f002 0203 	and.w	r2, r2, #3
 8002eea:	0092      	lsls	r2, r2, #2
 8002eec:	4093      	lsls	r3, r2
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d132      	bne.n	8002f5a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002ef4:	4b49      	ldr	r3, [pc, #292]	; (800301c <HAL_GPIO_DeInit+0x1f4>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	4947      	ldr	r1, [pc, #284]	; (800301c <HAL_GPIO_DeInit+0x1f4>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002f02:	4b46      	ldr	r3, [pc, #280]	; (800301c <HAL_GPIO_DeInit+0x1f4>)
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	4944      	ldr	r1, [pc, #272]	; (800301c <HAL_GPIO_DeInit+0x1f4>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002f10:	4b42      	ldr	r3, [pc, #264]	; (800301c <HAL_GPIO_DeInit+0x1f4>)
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	43db      	mvns	r3, r3
 8002f18:	4940      	ldr	r1, [pc, #256]	; (800301c <HAL_GPIO_DeInit+0x1f4>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002f1e:	4b3f      	ldr	r3, [pc, #252]	; (800301c <HAL_GPIO_DeInit+0x1f4>)
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	493d      	ldr	r1, [pc, #244]	; (800301c <HAL_GPIO_DeInit+0x1f4>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	220f      	movs	r2, #15
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002f3c:	4a2e      	ldr	r2, [pc, #184]	; (8002ff8 <HAL_GPIO_DeInit+0x1d0>)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	089b      	lsrs	r3, r3, #2
 8002f42:	3302      	adds	r3, #2
 8002f44:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	43da      	mvns	r2, r3
 8002f4c:	482a      	ldr	r0, [pc, #168]	; (8002ff8 <HAL_GPIO_DeInit+0x1d0>)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	089b      	lsrs	r3, r3, #2
 8002f52:	400a      	ands	r2, r1
 8002f54:	3302      	adds	r3, #2
 8002f56:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	2103      	movs	r1, #3
 8002f64:	fa01 f303 	lsl.w	r3, r1, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	401a      	ands	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	08da      	lsrs	r2, r3, #3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3208      	adds	r2, #8
 8002f78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	220f      	movs	r2, #15
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	08d2      	lsrs	r2, r2, #3
 8002f90:	4019      	ands	r1, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3208      	adds	r2, #8
 8002f96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	2103      	movs	r1, #3
 8002fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	401a      	ands	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	2103      	movs	r1, #3
 8002fce:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	401a      	ands	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2b0f      	cmp	r3, #15
 8002fe4:	f67f af2e 	bls.w	8002e44 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
 8002fec:	371c      	adds	r7, #28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40013800 	.word	0x40013800
 8002ffc:	40020000 	.word	0x40020000
 8003000:	40020400 	.word	0x40020400
 8003004:	40020800 	.word	0x40020800
 8003008:	40020c00 	.word	0x40020c00
 800300c:	40021000 	.word	0x40021000
 8003010:	40021400 	.word	0x40021400
 8003014:	40021800 	.word	0x40021800
 8003018:	40021c00 	.word	0x40021c00
 800301c:	40013c00 	.word	0x40013c00

08003020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	807b      	strh	r3, [r7, #2]
 800302c:	4613      	mov	r3, r2
 800302e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003030:	787b      	ldrb	r3, [r7, #1]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003036:	887a      	ldrh	r2, [r7, #2]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800303c:	e003      	b.n	8003046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800303e:	887b      	ldrh	r3, [r7, #2]
 8003040:	041a      	lsls	r2, r3, #16
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	619a      	str	r2, [r3, #24]
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
	...

08003054 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800305e:	4b08      	ldr	r3, [pc, #32]	; (8003080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003060:	695a      	ldr	r2, [r3, #20]
 8003062:	88fb      	ldrh	r3, [r7, #6]
 8003064:	4013      	ands	r3, r2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d006      	beq.n	8003078 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800306a:	4a05      	ldr	r2, [pc, #20]	; (8003080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800306c:	88fb      	ldrh	r3, [r7, #6]
 800306e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe fd04 	bl	8001a80 <HAL_GPIO_EXTI_Callback>
  }
}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40013c00 	.word	0x40013c00

08003084 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e12b      	b.n	80032ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7ff f92e 	bl	800230c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2224      	movs	r2, #36	; 0x24
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0201 	bic.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030e8:	f001 f848 	bl	800417c <HAL_RCC_GetPCLK1Freq>
 80030ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	4a81      	ldr	r2, [pc, #516]	; (80032f8 <HAL_I2C_Init+0x274>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d807      	bhi.n	8003108 <HAL_I2C_Init+0x84>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4a80      	ldr	r2, [pc, #512]	; (80032fc <HAL_I2C_Init+0x278>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	bf94      	ite	ls
 8003100:	2301      	movls	r3, #1
 8003102:	2300      	movhi	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	e006      	b.n	8003116 <HAL_I2C_Init+0x92>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4a7d      	ldr	r2, [pc, #500]	; (8003300 <HAL_I2C_Init+0x27c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	bf94      	ite	ls
 8003110:	2301      	movls	r3, #1
 8003112:	2300      	movhi	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e0e7      	b.n	80032ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4a78      	ldr	r2, [pc, #480]	; (8003304 <HAL_I2C_Init+0x280>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	0c9b      	lsrs	r3, r3, #18
 8003128:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	430a      	orrs	r2, r1
 800313c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	4a6a      	ldr	r2, [pc, #424]	; (80032f8 <HAL_I2C_Init+0x274>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d802      	bhi.n	8003158 <HAL_I2C_Init+0xd4>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	3301      	adds	r3, #1
 8003156:	e009      	b.n	800316c <HAL_I2C_Init+0xe8>
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800315e:	fb02 f303 	mul.w	r3, r2, r3
 8003162:	4a69      	ldr	r2, [pc, #420]	; (8003308 <HAL_I2C_Init+0x284>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	099b      	lsrs	r3, r3, #6
 800316a:	3301      	adds	r3, #1
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	430b      	orrs	r3, r1
 8003172:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800317e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	495c      	ldr	r1, [pc, #368]	; (80032f8 <HAL_I2C_Init+0x274>)
 8003188:	428b      	cmp	r3, r1
 800318a:	d819      	bhi.n	80031c0 <HAL_I2C_Init+0x13c>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	1e59      	subs	r1, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	fbb1 f3f3 	udiv	r3, r1, r3
 800319a:	1c59      	adds	r1, r3, #1
 800319c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031a0:	400b      	ands	r3, r1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <HAL_I2C_Init+0x138>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1e59      	subs	r1, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80031b4:	3301      	adds	r3, #1
 80031b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ba:	e051      	b.n	8003260 <HAL_I2C_Init+0x1dc>
 80031bc:	2304      	movs	r3, #4
 80031be:	e04f      	b.n	8003260 <HAL_I2C_Init+0x1dc>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d111      	bne.n	80031ec <HAL_I2C_Init+0x168>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	1e58      	subs	r0, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6859      	ldr	r1, [r3, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	440b      	add	r3, r1
 80031d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031da:	3301      	adds	r3, #1
 80031dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	bf0c      	ite	eq
 80031e4:	2301      	moveq	r3, #1
 80031e6:	2300      	movne	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	e012      	b.n	8003212 <HAL_I2C_Init+0x18e>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	1e58      	subs	r0, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6859      	ldr	r1, [r3, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	0099      	lsls	r1, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003202:	3301      	adds	r3, #1
 8003204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003208:	2b00      	cmp	r3, #0
 800320a:	bf0c      	ite	eq
 800320c:	2301      	moveq	r3, #1
 800320e:	2300      	movne	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_I2C_Init+0x196>
 8003216:	2301      	movs	r3, #1
 8003218:	e022      	b.n	8003260 <HAL_I2C_Init+0x1dc>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10e      	bne.n	8003240 <HAL_I2C_Init+0x1bc>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	1e58      	subs	r0, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6859      	ldr	r1, [r3, #4]
 800322a:	460b      	mov	r3, r1
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	440b      	add	r3, r1
 8003230:	fbb0 f3f3 	udiv	r3, r0, r3
 8003234:	3301      	adds	r3, #1
 8003236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800323e:	e00f      	b.n	8003260 <HAL_I2C_Init+0x1dc>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	1e58      	subs	r0, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6859      	ldr	r1, [r3, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	0099      	lsls	r1, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	fbb0 f3f3 	udiv	r3, r0, r3
 8003256:	3301      	adds	r3, #1
 8003258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800325c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	6809      	ldr	r1, [r1, #0]
 8003264:	4313      	orrs	r3, r2
 8003266:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69da      	ldr	r2, [r3, #28]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800328e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6911      	ldr	r1, [r2, #16]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	68d2      	ldr	r2, [r2, #12]
 800329a:	4311      	orrs	r1, r2
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	430b      	orrs	r3, r1
 80032a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695a      	ldr	r2, [r3, #20]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2220      	movs	r2, #32
 80032da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	000186a0 	.word	0x000186a0
 80032fc:	001e847f 	.word	0x001e847f
 8003300:	003d08ff 	.word	0x003d08ff
 8003304:	431bde83 	.word	0x431bde83
 8003308:	10624dd3 	.word	0x10624dd3

0800330c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	607a      	str	r2, [r7, #4]
 8003316:	461a      	mov	r2, r3
 8003318:	460b      	mov	r3, r1
 800331a:	817b      	strh	r3, [r7, #10]
 800331c:	4613      	mov	r3, r2
 800331e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003320:	f7ff fad4 	bl	80028cc <HAL_GetTick>
 8003324:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b20      	cmp	r3, #32
 8003330:	f040 80e0 	bne.w	80034f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	2319      	movs	r3, #25
 800333a:	2201      	movs	r2, #1
 800333c:	4970      	ldr	r1, [pc, #448]	; (8003500 <HAL_I2C_Master_Transmit+0x1f4>)
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 f964 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800334a:	2302      	movs	r3, #2
 800334c:	e0d3      	b.n	80034f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_I2C_Master_Transmit+0x50>
 8003358:	2302      	movs	r3, #2
 800335a:	e0cc      	b.n	80034f6 <HAL_I2C_Master_Transmit+0x1ea>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b01      	cmp	r3, #1
 8003370:	d007      	beq.n	8003382 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0201 	orr.w	r2, r2, #1
 8003380:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003390:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2221      	movs	r2, #33	; 0x21
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2210      	movs	r2, #16
 800339e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	893a      	ldrh	r2, [r7, #8]
 80033b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4a50      	ldr	r2, [pc, #320]	; (8003504 <HAL_I2C_Master_Transmit+0x1f8>)
 80033c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033c4:	8979      	ldrh	r1, [r7, #10]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	6a3a      	ldr	r2, [r7, #32]
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 f89c 	bl	8003508 <I2C_MasterRequestWrite>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e08d      	b.n	80034f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033f0:	e066      	b.n	80034c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	6a39      	ldr	r1, [r7, #32]
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f9de 	bl	80037b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00d      	beq.n	800341e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	2b04      	cmp	r3, #4
 8003408:	d107      	bne.n	800341a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003418:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e06b      	b.n	80034f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	781a      	ldrb	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	1c5a      	adds	r2, r3, #1
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003438:	b29b      	uxth	r3, r3
 800343a:	3b01      	subs	r3, #1
 800343c:	b29a      	uxth	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003446:	3b01      	subs	r3, #1
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b04      	cmp	r3, #4
 800345a:	d11b      	bne.n	8003494 <HAL_I2C_Master_Transmit+0x188>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003460:	2b00      	cmp	r3, #0
 8003462:	d017      	beq.n	8003494 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	781a      	ldrb	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	6a39      	ldr	r1, [r7, #32]
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 f9ce 	bl	800383a <I2C_WaitOnBTFFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00d      	beq.n	80034c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d107      	bne.n	80034bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e01a      	b.n	80034f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d194      	bne.n	80033f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	e000      	b.n	80034f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034f4:	2302      	movs	r3, #2
  }
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	00100002 	.word	0x00100002
 8003504:	ffff0000 	.word	0xffff0000

08003508 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af02      	add	r7, sp, #8
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	607a      	str	r2, [r7, #4]
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	460b      	mov	r3, r1
 8003516:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2b08      	cmp	r3, #8
 8003522:	d006      	beq.n	8003532 <I2C_MasterRequestWrite+0x2a>
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d003      	beq.n	8003532 <I2C_MasterRequestWrite+0x2a>
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003530:	d108      	bne.n	8003544 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	e00b      	b.n	800355c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	2b12      	cmp	r3, #18
 800354a:	d107      	bne.n	800355c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800355a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f84f 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00d      	beq.n	8003590 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003582:	d103      	bne.n	800358c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800358a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e035      	b.n	80035fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003598:	d108      	bne.n	80035ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800359a:	897b      	ldrh	r3, [r7, #10]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	461a      	mov	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035a8:	611a      	str	r2, [r3, #16]
 80035aa:	e01b      	b.n	80035e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035ac:	897b      	ldrh	r3, [r7, #10]
 80035ae:	11db      	asrs	r3, r3, #7
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	f003 0306 	and.w	r3, r3, #6
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	f063 030f 	orn	r3, r3, #15
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	490e      	ldr	r1, [pc, #56]	; (8003604 <I2C_MasterRequestWrite+0xfc>)
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f875 	bl	80036ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e010      	b.n	80035fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035da:	897b      	ldrh	r3, [r7, #10]
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	4907      	ldr	r1, [pc, #28]	; (8003608 <I2C_MasterRequestWrite+0x100>)
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f865 	bl	80036ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	00010008 	.word	0x00010008
 8003608:	00010002 	.word	0x00010002

0800360c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	4613      	mov	r3, r2
 800361a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800361c:	e025      	b.n	800366a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003624:	d021      	beq.n	800366a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003626:	f7ff f951 	bl	80028cc <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d302      	bcc.n	800363c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d116      	bne.n	800366a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2220      	movs	r2, #32
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	f043 0220 	orr.w	r2, r3, #32
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e023      	b.n	80036b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	0c1b      	lsrs	r3, r3, #16
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b01      	cmp	r3, #1
 8003672:	d10d      	bne.n	8003690 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	43da      	mvns	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	4013      	ands	r3, r2
 8003680:	b29b      	uxth	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	bf0c      	ite	eq
 8003686:	2301      	moveq	r3, #1
 8003688:	2300      	movne	r3, #0
 800368a:	b2db      	uxtb	r3, r3
 800368c:	461a      	mov	r2, r3
 800368e:	e00c      	b.n	80036aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	43da      	mvns	r2, r3
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4013      	ands	r3, r2
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	bf0c      	ite	eq
 80036a2:	2301      	moveq	r3, #1
 80036a4:	2300      	movne	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	461a      	mov	r2, r3
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d0b6      	beq.n	800361e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
 80036c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036c8:	e051      	b.n	800376e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d8:	d123      	bne.n	8003722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f043 0204 	orr.w	r2, r3, #4
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e046      	b.n	80037b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003728:	d021      	beq.n	800376e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372a:	f7ff f8cf 	bl	80028cc <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	429a      	cmp	r2, r3
 8003738:	d302      	bcc.n	8003740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d116      	bne.n	800376e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2220      	movs	r2, #32
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	f043 0220 	orr.w	r2, r3, #32
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e020      	b.n	80037b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	0c1b      	lsrs	r3, r3, #16
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b01      	cmp	r3, #1
 8003776:	d10c      	bne.n	8003792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	43da      	mvns	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4013      	ands	r3, r2
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	bf14      	ite	ne
 800378a:	2301      	movne	r3, #1
 800378c:	2300      	moveq	r3, #0
 800378e:	b2db      	uxtb	r3, r3
 8003790:	e00b      	b.n	80037aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	43da      	mvns	r2, r3
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	4013      	ands	r3, r2
 800379e:	b29b      	uxth	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d18d      	bne.n	80036ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037c4:	e02d      	b.n	8003822 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f878 	bl	80038bc <I2C_IsAcknowledgeFailed>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e02d      	b.n	8003832 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037dc:	d021      	beq.n	8003822 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037de:	f7ff f875 	bl	80028cc <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d302      	bcc.n	80037f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d116      	bne.n	8003822 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2220      	movs	r2, #32
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	f043 0220 	orr.w	r2, r3, #32
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e007      	b.n	8003832 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382c:	2b80      	cmp	r3, #128	; 0x80
 800382e:	d1ca      	bne.n	80037c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b084      	sub	sp, #16
 800383e:	af00      	add	r7, sp, #0
 8003840:	60f8      	str	r0, [r7, #12]
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003846:	e02d      	b.n	80038a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 f837 	bl	80038bc <I2C_IsAcknowledgeFailed>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e02d      	b.n	80038b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800385e:	d021      	beq.n	80038a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003860:	f7ff f834 	bl	80028cc <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	429a      	cmp	r2, r3
 800386e:	d302      	bcc.n	8003876 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d116      	bne.n	80038a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	f043 0220 	orr.w	r2, r3, #32
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e007      	b.n	80038b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d1ca      	bne.n	8003848 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d2:	d11b      	bne.n	800390c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	f043 0204 	orr.w	r2, r3, #4
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
	...

0800391c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e267      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d075      	beq.n	8003a26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800393a:	4b88      	ldr	r3, [pc, #544]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	2b04      	cmp	r3, #4
 8003944:	d00c      	beq.n	8003960 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003946:	4b85      	ldr	r3, [pc, #532]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800394e:	2b08      	cmp	r3, #8
 8003950:	d112      	bne.n	8003978 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003952:	4b82      	ldr	r3, [pc, #520]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800395e:	d10b      	bne.n	8003978 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003960:	4b7e      	ldr	r3, [pc, #504]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d05b      	beq.n	8003a24 <HAL_RCC_OscConfig+0x108>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d157      	bne.n	8003a24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e242      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003980:	d106      	bne.n	8003990 <HAL_RCC_OscConfig+0x74>
 8003982:	4b76      	ldr	r3, [pc, #472]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a75      	ldr	r2, [pc, #468]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	e01d      	b.n	80039cc <HAL_RCC_OscConfig+0xb0>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003998:	d10c      	bne.n	80039b4 <HAL_RCC_OscConfig+0x98>
 800399a:	4b70      	ldr	r3, [pc, #448]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a6f      	ldr	r2, [pc, #444]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 80039a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	4b6d      	ldr	r3, [pc, #436]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a6c      	ldr	r2, [pc, #432]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 80039ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	e00b      	b.n	80039cc <HAL_RCC_OscConfig+0xb0>
 80039b4:	4b69      	ldr	r3, [pc, #420]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a68      	ldr	r2, [pc, #416]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 80039ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	4b66      	ldr	r3, [pc, #408]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a65      	ldr	r2, [pc, #404]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 80039c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d013      	beq.n	80039fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d4:	f7fe ff7a 	bl	80028cc <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039dc:	f7fe ff76 	bl	80028cc <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b64      	cmp	r3, #100	; 0x64
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e207      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ee:	4b5b      	ldr	r3, [pc, #364]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f0      	beq.n	80039dc <HAL_RCC_OscConfig+0xc0>
 80039fa:	e014      	b.n	8003a26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fc:	f7fe ff66 	bl	80028cc <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a04:	f7fe ff62 	bl	80028cc <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b64      	cmp	r3, #100	; 0x64
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e1f3      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a16:	4b51      	ldr	r3, [pc, #324]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCC_OscConfig+0xe8>
 8003a22:	e000      	b.n	8003a26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d063      	beq.n	8003afa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a32:	4b4a      	ldr	r3, [pc, #296]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 030c 	and.w	r3, r3, #12
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00b      	beq.n	8003a56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a3e:	4b47      	ldr	r3, [pc, #284]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d11c      	bne.n	8003a84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a4a:	4b44      	ldr	r3, [pc, #272]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d116      	bne.n	8003a84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a56:	4b41      	ldr	r3, [pc, #260]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d005      	beq.n	8003a6e <HAL_RCC_OscConfig+0x152>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d001      	beq.n	8003a6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e1c7      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a6e:	4b3b      	ldr	r3, [pc, #236]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	4937      	ldr	r1, [pc, #220]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a82:	e03a      	b.n	8003afa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d020      	beq.n	8003ace <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a8c:	4b34      	ldr	r3, [pc, #208]	; (8003b60 <HAL_RCC_OscConfig+0x244>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a92:	f7fe ff1b 	bl	80028cc <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a9a:	f7fe ff17 	bl	80028cc <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e1a8      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aac:	4b2b      	ldr	r3, [pc, #172]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0f0      	beq.n	8003a9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab8:	4b28      	ldr	r3, [pc, #160]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	4925      	ldr	r1, [pc, #148]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	600b      	str	r3, [r1, #0]
 8003acc:	e015      	b.n	8003afa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ace:	4b24      	ldr	r3, [pc, #144]	; (8003b60 <HAL_RCC_OscConfig+0x244>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad4:	f7fe fefa 	bl	80028cc <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003adc:	f7fe fef6 	bl	80028cc <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e187      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aee:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f0      	bne.n	8003adc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d036      	beq.n	8003b74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d016      	beq.n	8003b3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b0e:	4b15      	ldr	r3, [pc, #84]	; (8003b64 <HAL_RCC_OscConfig+0x248>)
 8003b10:	2201      	movs	r2, #1
 8003b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b14:	f7fe feda 	bl	80028cc <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b1c:	f7fe fed6 	bl	80028cc <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e167      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b2e:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0f0      	beq.n	8003b1c <HAL_RCC_OscConfig+0x200>
 8003b3a:	e01b      	b.n	8003b74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b3c:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <HAL_RCC_OscConfig+0x248>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b42:	f7fe fec3 	bl	80028cc <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b48:	e00e      	b.n	8003b68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b4a:	f7fe febf 	bl	80028cc <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d907      	bls.n	8003b68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e150      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	42470000 	.word	0x42470000
 8003b64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b68:	4b88      	ldr	r3, [pc, #544]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1ea      	bne.n	8003b4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 8097 	beq.w	8003cb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b82:	2300      	movs	r3, #0
 8003b84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b86:	4b81      	ldr	r3, [pc, #516]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10f      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b92:	2300      	movs	r3, #0
 8003b94:	60bb      	str	r3, [r7, #8]
 8003b96:	4b7d      	ldr	r3, [pc, #500]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	4a7c      	ldr	r2, [pc, #496]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ba2:	4b7a      	ldr	r3, [pc, #488]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003baa:	60bb      	str	r3, [r7, #8]
 8003bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb2:	4b77      	ldr	r3, [pc, #476]	; (8003d90 <HAL_RCC_OscConfig+0x474>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d118      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bbe:	4b74      	ldr	r3, [pc, #464]	; (8003d90 <HAL_RCC_OscConfig+0x474>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a73      	ldr	r2, [pc, #460]	; (8003d90 <HAL_RCC_OscConfig+0x474>)
 8003bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bca:	f7fe fe7f 	bl	80028cc <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd2:	f7fe fe7b 	bl	80028cc <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e10c      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be4:	4b6a      	ldr	r3, [pc, #424]	; (8003d90 <HAL_RCC_OscConfig+0x474>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0f0      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d106      	bne.n	8003c06 <HAL_RCC_OscConfig+0x2ea>
 8003bf8:	4b64      	ldr	r3, [pc, #400]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfc:	4a63      	ldr	r2, [pc, #396]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	6713      	str	r3, [r2, #112]	; 0x70
 8003c04:	e01c      	b.n	8003c40 <HAL_RCC_OscConfig+0x324>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	2b05      	cmp	r3, #5
 8003c0c:	d10c      	bne.n	8003c28 <HAL_RCC_OscConfig+0x30c>
 8003c0e:	4b5f      	ldr	r3, [pc, #380]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c12:	4a5e      	ldr	r2, [pc, #376]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c14:	f043 0304 	orr.w	r3, r3, #4
 8003c18:	6713      	str	r3, [r2, #112]	; 0x70
 8003c1a:	4b5c      	ldr	r3, [pc, #368]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1e:	4a5b      	ldr	r2, [pc, #364]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	6713      	str	r3, [r2, #112]	; 0x70
 8003c26:	e00b      	b.n	8003c40 <HAL_RCC_OscConfig+0x324>
 8003c28:	4b58      	ldr	r3, [pc, #352]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2c:	4a57      	ldr	r2, [pc, #348]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c2e:	f023 0301 	bic.w	r3, r3, #1
 8003c32:	6713      	str	r3, [r2, #112]	; 0x70
 8003c34:	4b55      	ldr	r3, [pc, #340]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c38:	4a54      	ldr	r2, [pc, #336]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c3a:	f023 0304 	bic.w	r3, r3, #4
 8003c3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d015      	beq.n	8003c74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c48:	f7fe fe40 	bl	80028cc <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4e:	e00a      	b.n	8003c66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c50:	f7fe fe3c 	bl	80028cc <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e0cb      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c66:	4b49      	ldr	r3, [pc, #292]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0ee      	beq.n	8003c50 <HAL_RCC_OscConfig+0x334>
 8003c72:	e014      	b.n	8003c9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c74:	f7fe fe2a 	bl	80028cc <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7a:	e00a      	b.n	8003c92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c7c:	f7fe fe26 	bl	80028cc <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e0b5      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c92:	4b3e      	ldr	r3, [pc, #248]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1ee      	bne.n	8003c7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d105      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca4:	4b39      	ldr	r3, [pc, #228]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	4a38      	ldr	r2, [pc, #224]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80a1 	beq.w	8003dfc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cba:	4b34      	ldr	r3, [pc, #208]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d05c      	beq.n	8003d80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d141      	bne.n	8003d52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cce:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <HAL_RCC_OscConfig+0x478>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd4:	f7fe fdfa 	bl	80028cc <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cdc:	f7fe fdf6 	bl	80028cc <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e087      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cee:	4b27      	ldr	r3, [pc, #156]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69da      	ldr	r2, [r3, #28]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	019b      	lsls	r3, r3, #6
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d10:	085b      	lsrs	r3, r3, #1
 8003d12:	3b01      	subs	r3, #1
 8003d14:	041b      	lsls	r3, r3, #16
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	061b      	lsls	r3, r3, #24
 8003d1e:	491b      	ldr	r1, [pc, #108]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d24:	4b1b      	ldr	r3, [pc, #108]	; (8003d94 <HAL_RCC_OscConfig+0x478>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2a:	f7fe fdcf 	bl	80028cc <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d32:	f7fe fdcb 	bl	80028cc <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e05c      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d44:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f0      	beq.n	8003d32 <HAL_RCC_OscConfig+0x416>
 8003d50:	e054      	b.n	8003dfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d52:	4b10      	ldr	r3, [pc, #64]	; (8003d94 <HAL_RCC_OscConfig+0x478>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d58:	f7fe fdb8 	bl	80028cc <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d60:	f7fe fdb4 	bl	80028cc <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e045      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d72:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x444>
 8003d7e:	e03d      	b.n	8003dfc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d107      	bne.n	8003d98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e038      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	40007000 	.word	0x40007000
 8003d94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d98:	4b1b      	ldr	r3, [pc, #108]	; (8003e08 <HAL_RCC_OscConfig+0x4ec>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d028      	beq.n	8003df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d121      	bne.n	8003df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d11a      	bne.n	8003df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dc8:	4013      	ands	r3, r2
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d111      	bne.n	8003df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dde:	085b      	lsrs	r3, r3, #1
 8003de0:	3b01      	subs	r3, #1
 8003de2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d107      	bne.n	8003df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d001      	beq.n	8003dfc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e000      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40023800 	.word	0x40023800

08003e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0cc      	b.n	8003fba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e20:	4b68      	ldr	r3, [pc, #416]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d90c      	bls.n	8003e48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2e:	4b65      	ldr	r3, [pc, #404]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e36:	4b63      	ldr	r3, [pc, #396]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d001      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e0b8      	b.n	8003fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d020      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e60:	4b59      	ldr	r3, [pc, #356]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	4a58      	ldr	r2, [pc, #352]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d005      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e78:	4b53      	ldr	r3, [pc, #332]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	4a52      	ldr	r2, [pc, #328]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e84:	4b50      	ldr	r3, [pc, #320]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	494d      	ldr	r1, [pc, #308]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d044      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d107      	bne.n	8003eba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eaa:	4b47      	ldr	r3, [pc, #284]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d119      	bne.n	8003eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e07f      	b.n	8003fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d003      	beq.n	8003eca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	d107      	bne.n	8003eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eca:	4b3f      	ldr	r3, [pc, #252]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d109      	bne.n	8003eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e06f      	b.n	8003fba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eda:	4b3b      	ldr	r3, [pc, #236]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e067      	b.n	8003fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eea:	4b37      	ldr	r3, [pc, #220]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f023 0203 	bic.w	r2, r3, #3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	4934      	ldr	r1, [pc, #208]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003efc:	f7fe fce6 	bl	80028cc <HAL_GetTick>
 8003f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f02:	e00a      	b.n	8003f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f04:	f7fe fce2 	bl	80028cc <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e04f      	b.n	8003fba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1a:	4b2b      	ldr	r3, [pc, #172]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 020c 	and.w	r2, r3, #12
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d1eb      	bne.n	8003f04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f2c:	4b25      	ldr	r3, [pc, #148]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d20c      	bcs.n	8003f54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3a:	4b22      	ldr	r3, [pc, #136]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f42:	4b20      	ldr	r3, [pc, #128]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d001      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e032      	b.n	8003fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d008      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f60:	4b19      	ldr	r3, [pc, #100]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4916      	ldr	r1, [pc, #88]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f7e:	4b12      	ldr	r3, [pc, #72]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	490e      	ldr	r1, [pc, #56]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f92:	f000 f821 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8003f96:	4602      	mov	r2, r0
 8003f98:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	091b      	lsrs	r3, r3, #4
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	490a      	ldr	r1, [pc, #40]	; (8003fcc <HAL_RCC_ClockConfig+0x1c0>)
 8003fa4:	5ccb      	ldrb	r3, [r1, r3]
 8003fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8003faa:	4a09      	ldr	r2, [pc, #36]	; (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fae:	4b09      	ldr	r3, [pc, #36]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fe faa0 	bl	80024f8 <HAL_InitTick>

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40023c00 	.word	0x40023c00
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	08008900 	.word	0x08008900
 8003fd0:	20000024 	.word	0x20000024
 8003fd4:	20000040 	.word	0x20000040

08003fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fdc:	b090      	sub	sp, #64	; 0x40
 8003fde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fe8:	2300      	movs	r3, #0
 8003fea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ff0:	4b59      	ldr	r3, [pc, #356]	; (8004158 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f003 030c 	and.w	r3, r3, #12
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d00d      	beq.n	8004018 <HAL_RCC_GetSysClockFreq+0x40>
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	f200 80a1 	bhi.w	8004144 <HAL_RCC_GetSysClockFreq+0x16c>
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <HAL_RCC_GetSysClockFreq+0x34>
 8004006:	2b04      	cmp	r3, #4
 8004008:	d003      	beq.n	8004012 <HAL_RCC_GetSysClockFreq+0x3a>
 800400a:	e09b      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800400c:	4b53      	ldr	r3, [pc, #332]	; (800415c <HAL_RCC_GetSysClockFreq+0x184>)
 800400e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004010:	e09b      	b.n	800414a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004012:	4b53      	ldr	r3, [pc, #332]	; (8004160 <HAL_RCC_GetSysClockFreq+0x188>)
 8004014:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004016:	e098      	b.n	800414a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004018:	4b4f      	ldr	r3, [pc, #316]	; (8004158 <HAL_RCC_GetSysClockFreq+0x180>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004020:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004022:	4b4d      	ldr	r3, [pc, #308]	; (8004158 <HAL_RCC_GetSysClockFreq+0x180>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d028      	beq.n	8004080 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800402e:	4b4a      	ldr	r3, [pc, #296]	; (8004158 <HAL_RCC_GetSysClockFreq+0x180>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	099b      	lsrs	r3, r3, #6
 8004034:	2200      	movs	r2, #0
 8004036:	623b      	str	r3, [r7, #32]
 8004038:	627a      	str	r2, [r7, #36]	; 0x24
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004040:	2100      	movs	r1, #0
 8004042:	4b47      	ldr	r3, [pc, #284]	; (8004160 <HAL_RCC_GetSysClockFreq+0x188>)
 8004044:	fb03 f201 	mul.w	r2, r3, r1
 8004048:	2300      	movs	r3, #0
 800404a:	fb00 f303 	mul.w	r3, r0, r3
 800404e:	4413      	add	r3, r2
 8004050:	4a43      	ldr	r2, [pc, #268]	; (8004160 <HAL_RCC_GetSysClockFreq+0x188>)
 8004052:	fba0 1202 	umull	r1, r2, r0, r2
 8004056:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004058:	460a      	mov	r2, r1
 800405a:	62ba      	str	r2, [r7, #40]	; 0x28
 800405c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800405e:	4413      	add	r3, r2
 8004060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004064:	2200      	movs	r2, #0
 8004066:	61bb      	str	r3, [r7, #24]
 8004068:	61fa      	str	r2, [r7, #28]
 800406a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800406e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004072:	f7fc f905 	bl	8000280 <__aeabi_uldivmod>
 8004076:	4602      	mov	r2, r0
 8004078:	460b      	mov	r3, r1
 800407a:	4613      	mov	r3, r2
 800407c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800407e:	e053      	b.n	8004128 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004080:	4b35      	ldr	r3, [pc, #212]	; (8004158 <HAL_RCC_GetSysClockFreq+0x180>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	099b      	lsrs	r3, r3, #6
 8004086:	2200      	movs	r2, #0
 8004088:	613b      	str	r3, [r7, #16]
 800408a:	617a      	str	r2, [r7, #20]
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004092:	f04f 0b00 	mov.w	fp, #0
 8004096:	4652      	mov	r2, sl
 8004098:	465b      	mov	r3, fp
 800409a:	f04f 0000 	mov.w	r0, #0
 800409e:	f04f 0100 	mov.w	r1, #0
 80040a2:	0159      	lsls	r1, r3, #5
 80040a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040a8:	0150      	lsls	r0, r2, #5
 80040aa:	4602      	mov	r2, r0
 80040ac:	460b      	mov	r3, r1
 80040ae:	ebb2 080a 	subs.w	r8, r2, sl
 80040b2:	eb63 090b 	sbc.w	r9, r3, fp
 80040b6:	f04f 0200 	mov.w	r2, #0
 80040ba:	f04f 0300 	mov.w	r3, #0
 80040be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80040c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80040c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80040ca:	ebb2 0408 	subs.w	r4, r2, r8
 80040ce:	eb63 0509 	sbc.w	r5, r3, r9
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	f04f 0300 	mov.w	r3, #0
 80040da:	00eb      	lsls	r3, r5, #3
 80040dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040e0:	00e2      	lsls	r2, r4, #3
 80040e2:	4614      	mov	r4, r2
 80040e4:	461d      	mov	r5, r3
 80040e6:	eb14 030a 	adds.w	r3, r4, sl
 80040ea:	603b      	str	r3, [r7, #0]
 80040ec:	eb45 030b 	adc.w	r3, r5, fp
 80040f0:	607b      	str	r3, [r7, #4]
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040fe:	4629      	mov	r1, r5
 8004100:	028b      	lsls	r3, r1, #10
 8004102:	4621      	mov	r1, r4
 8004104:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004108:	4621      	mov	r1, r4
 800410a:	028a      	lsls	r2, r1, #10
 800410c:	4610      	mov	r0, r2
 800410e:	4619      	mov	r1, r3
 8004110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004112:	2200      	movs	r2, #0
 8004114:	60bb      	str	r3, [r7, #8]
 8004116:	60fa      	str	r2, [r7, #12]
 8004118:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800411c:	f7fc f8b0 	bl	8000280 <__aeabi_uldivmod>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	4613      	mov	r3, r2
 8004126:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004128:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <HAL_RCC_GetSysClockFreq+0x180>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	0c1b      	lsrs	r3, r3, #16
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	3301      	adds	r3, #1
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004138:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800413a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004140:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004142:	e002      	b.n	800414a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004144:	4b05      	ldr	r3, [pc, #20]	; (800415c <HAL_RCC_GetSysClockFreq+0x184>)
 8004146:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004148:	bf00      	nop
    }
  }
  return sysclockfreq;
 800414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800414c:	4618      	mov	r0, r3
 800414e:	3740      	adds	r7, #64	; 0x40
 8004150:	46bd      	mov	sp, r7
 8004152:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004156:	bf00      	nop
 8004158:	40023800 	.word	0x40023800
 800415c:	00f42400 	.word	0x00f42400
 8004160:	017d7840 	.word	0x017d7840

08004164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004168:	4b03      	ldr	r3, [pc, #12]	; (8004178 <HAL_RCC_GetHCLKFreq+0x14>)
 800416a:	681b      	ldr	r3, [r3, #0]
}
 800416c:	4618      	mov	r0, r3
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	20000024 	.word	0x20000024

0800417c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004180:	f7ff fff0 	bl	8004164 <HAL_RCC_GetHCLKFreq>
 8004184:	4602      	mov	r2, r0
 8004186:	4b05      	ldr	r3, [pc, #20]	; (800419c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	0a9b      	lsrs	r3, r3, #10
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	4903      	ldr	r1, [pc, #12]	; (80041a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004192:	5ccb      	ldrb	r3, [r1, r3]
 8004194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004198:	4618      	mov	r0, r3
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40023800 	.word	0x40023800
 80041a0:	08008910 	.word	0x08008910

080041a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041a8:	f7ff ffdc 	bl	8004164 <HAL_RCC_GetHCLKFreq>
 80041ac:	4602      	mov	r2, r0
 80041ae:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	0b5b      	lsrs	r3, r3, #13
 80041b4:	f003 0307 	and.w	r3, r3, #7
 80041b8:	4903      	ldr	r1, [pc, #12]	; (80041c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041ba:	5ccb      	ldrb	r3, [r1, r3]
 80041bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40023800 	.word	0x40023800
 80041c8:	08008910 	.word	0x08008910

080041cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	220f      	movs	r2, #15
 80041da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80041dc:	4b12      	ldr	r3, [pc, #72]	; (8004228 <HAL_RCC_GetClockConfig+0x5c>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 0203 	and.w	r2, r3, #3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80041e8:	4b0f      	ldr	r3, [pc, #60]	; (8004228 <HAL_RCC_GetClockConfig+0x5c>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80041f4:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <HAL_RCC_GetClockConfig+0x5c>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004200:	4b09      	ldr	r3, [pc, #36]	; (8004228 <HAL_RCC_GetClockConfig+0x5c>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	08db      	lsrs	r3, r3, #3
 8004206:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800420e:	4b07      	ldr	r3, [pc, #28]	; (800422c <HAL_RCC_GetClockConfig+0x60>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0207 	and.w	r2, r3, #7
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	601a      	str	r2, [r3, #0]
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	40023800 	.word	0x40023800
 800422c:	40023c00 	.word	0x40023c00

08004230 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e07b      	b.n	800433a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	2b00      	cmp	r3, #0
 8004248:	d108      	bne.n	800425c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004252:	d009      	beq.n	8004268 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	61da      	str	r2, [r3, #28]
 800425a:	e005      	b.n	8004268 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fe f88a 	bl	800239c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800429e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042b0:	431a      	orrs	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	431a      	orrs	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042d8:	431a      	orrs	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ec:	ea42 0103 	orr.w	r1, r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	0c1b      	lsrs	r3, r3, #16
 8004306:	f003 0104 	and.w	r1, r3, #4
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	f003 0210 	and.w	r2, r3, #16
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69da      	ldr	r2, [r3, #28]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004328:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b082      	sub	sp, #8
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e01a      	b.n	800438a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800436a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7fe f85d 	bl	800242c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b08c      	sub	sp, #48	; 0x30
 8004396:	af00      	add	r7, sp, #0
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	607a      	str	r2, [r7, #4]
 800439e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80043a0:	2301      	movs	r3, #1
 80043a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d101      	bne.n	80043b8 <HAL_SPI_TransmitReceive+0x26>
 80043b4:	2302      	movs	r3, #2
 80043b6:	e18a      	b.n	80046ce <HAL_SPI_TransmitReceive+0x33c>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043c0:	f7fe fa84 	bl	80028cc <HAL_GetTick>
 80043c4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80043d6:	887b      	ldrh	r3, [r7, #2]
 80043d8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d00f      	beq.n	8004402 <HAL_SPI_TransmitReceive+0x70>
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043e8:	d107      	bne.n	80043fa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d103      	bne.n	80043fa <HAL_SPI_TransmitReceive+0x68>
 80043f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d003      	beq.n	8004402 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80043fa:	2302      	movs	r3, #2
 80043fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004400:	e15b      	b.n	80046ba <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <HAL_SPI_TransmitReceive+0x82>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <HAL_SPI_TransmitReceive+0x82>
 800440e:	887b      	ldrh	r3, [r7, #2]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d103      	bne.n	800441c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800441a:	e14e      	b.n	80046ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b04      	cmp	r3, #4
 8004426:	d003      	beq.n	8004430 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2205      	movs	r2, #5
 800442c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	887a      	ldrh	r2, [r7, #2]
 8004440:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	887a      	ldrh	r2, [r7, #2]
 8004446:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	887a      	ldrh	r2, [r7, #2]
 8004452:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	887a      	ldrh	r2, [r7, #2]
 8004458:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004470:	2b40      	cmp	r3, #64	; 0x40
 8004472:	d007      	beq.n	8004484 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004482:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800448c:	d178      	bne.n	8004580 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <HAL_SPI_TransmitReceive+0x10a>
 8004496:	8b7b      	ldrh	r3, [r7, #26]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d166      	bne.n	800456a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	881a      	ldrh	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	1c9a      	adds	r2, r3, #2
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044c0:	e053      	b.n	800456a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d11b      	bne.n	8004508 <HAL_SPI_TransmitReceive+0x176>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d016      	beq.n	8004508 <HAL_SPI_TransmitReceive+0x176>
 80044da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d113      	bne.n	8004508 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	881a      	ldrh	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	1c9a      	adds	r2, r3, #2
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b29a      	uxth	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b01      	cmp	r3, #1
 8004514:	d119      	bne.n	800454a <HAL_SPI_TransmitReceive+0x1b8>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d014      	beq.n	800454a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452a:	b292      	uxth	r2, r2
 800452c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	1c9a      	adds	r2, r3, #2
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800453c:	b29b      	uxth	r3, r3
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004546:	2301      	movs	r3, #1
 8004548:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800454a:	f7fe f9bf 	bl	80028cc <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004556:	429a      	cmp	r2, r3
 8004558:	d807      	bhi.n	800456a <HAL_SPI_TransmitReceive+0x1d8>
 800455a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004560:	d003      	beq.n	800456a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004568:	e0a7      	b.n	80046ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800456e:	b29b      	uxth	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1a6      	bne.n	80044c2 <HAL_SPI_TransmitReceive+0x130>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1a1      	bne.n	80044c2 <HAL_SPI_TransmitReceive+0x130>
 800457e:	e07c      	b.n	800467a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <HAL_SPI_TransmitReceive+0x1fc>
 8004588:	8b7b      	ldrh	r3, [r7, #26]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d16b      	bne.n	8004666 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	330c      	adds	r3, #12
 8004598:	7812      	ldrb	r2, [r2, #0]
 800459a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045b4:	e057      	b.n	8004666 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d11c      	bne.n	80045fe <HAL_SPI_TransmitReceive+0x26c>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d017      	beq.n	80045fe <HAL_SPI_TransmitReceive+0x26c>
 80045ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d114      	bne.n	80045fe <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	330c      	adds	r3, #12
 80045de:	7812      	ldrb	r2, [r2, #0]
 80045e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b01      	cmp	r3, #1
 800460a:	d119      	bne.n	8004640 <HAL_SPI_TransmitReceive+0x2ae>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d014      	beq.n	8004640 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800463c:	2301      	movs	r3, #1
 800463e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004640:	f7fe f944 	bl	80028cc <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800464c:	429a      	cmp	r2, r3
 800464e:	d803      	bhi.n	8004658 <HAL_SPI_TransmitReceive+0x2c6>
 8004650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004652:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004656:	d102      	bne.n	800465e <HAL_SPI_TransmitReceive+0x2cc>
 8004658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465a:	2b00      	cmp	r3, #0
 800465c:	d103      	bne.n	8004666 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004664:	e029      	b.n	80046ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800466a:	b29b      	uxth	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1a2      	bne.n	80045b6 <HAL_SPI_TransmitReceive+0x224>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004674:	b29b      	uxth	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d19d      	bne.n	80045b6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800467a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800467c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 f8b2 	bl	80047e8 <SPI_EndRxTxTransaction>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d006      	beq.n	8004698 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2220      	movs	r2, #32
 8004694:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004696:	e010      	b.n	80046ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10b      	bne.n	80046b8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046a0:	2300      	movs	r3, #0
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	e000      	b.n	80046ba <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80046b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3730      	adds	r7, #48	; 0x30
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b088      	sub	sp, #32
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	4613      	mov	r3, r2
 80046e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046e8:	f7fe f8f0 	bl	80028cc <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f0:	1a9b      	subs	r3, r3, r2
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	4413      	add	r3, r2
 80046f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046f8:	f7fe f8e8 	bl	80028cc <HAL_GetTick>
 80046fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046fe:	4b39      	ldr	r3, [pc, #228]	; (80047e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	015b      	lsls	r3, r3, #5
 8004704:	0d1b      	lsrs	r3, r3, #20
 8004706:	69fa      	ldr	r2, [r7, #28]
 8004708:	fb02 f303 	mul.w	r3, r2, r3
 800470c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800470e:	e054      	b.n	80047ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004716:	d050      	beq.n	80047ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004718:	f7fe f8d8 	bl	80028cc <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	69fa      	ldr	r2, [r7, #28]
 8004724:	429a      	cmp	r2, r3
 8004726:	d902      	bls.n	800472e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d13d      	bne.n	80047aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800473c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004746:	d111      	bne.n	800476c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004750:	d004      	beq.n	800475c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475a:	d107      	bne.n	800476c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800476a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004774:	d10f      	bne.n	8004796 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004794:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e017      	b.n	80047da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	4013      	ands	r3, r2
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	bf0c      	ite	eq
 80047ca:	2301      	moveq	r3, #1
 80047cc:	2300      	movne	r3, #0
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	79fb      	ldrb	r3, [r7, #7]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d19b      	bne.n	8004710 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3720      	adds	r7, #32
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20000024 	.word	0x20000024

080047e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b088      	sub	sp, #32
 80047ec:	af02      	add	r7, sp, #8
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047f4:	4b1b      	ldr	r3, [pc, #108]	; (8004864 <SPI_EndRxTxTransaction+0x7c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a1b      	ldr	r2, [pc, #108]	; (8004868 <SPI_EndRxTxTransaction+0x80>)
 80047fa:	fba2 2303 	umull	r2, r3, r2, r3
 80047fe:	0d5b      	lsrs	r3, r3, #21
 8004800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004804:	fb02 f303 	mul.w	r3, r2, r3
 8004808:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004812:	d112      	bne.n	800483a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2200      	movs	r2, #0
 800481c:	2180      	movs	r1, #128	; 0x80
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f7ff ff5a 	bl	80046d8 <SPI_WaitFlagStateUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d016      	beq.n	8004858 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482e:	f043 0220 	orr.w	r2, r3, #32
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e00f      	b.n	800485a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	3b01      	subs	r3, #1
 8004844:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004850:	2b80      	cmp	r3, #128	; 0x80
 8004852:	d0f2      	beq.n	800483a <SPI_EndRxTxTransaction+0x52>
 8004854:	e000      	b.n	8004858 <SPI_EndRxTxTransaction+0x70>
        break;
 8004856:	bf00      	nop
  }

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	20000024 	.word	0x20000024
 8004868:	165e9f81 	.word	0x165e9f81

0800486c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e041      	b.n	8004902 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d106      	bne.n	8004898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f839 	bl	800490a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2202      	movs	r2, #2
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3304      	adds	r3, #4
 80048a8:	4619      	mov	r1, r3
 80048aa:	4610      	mov	r0, r2
 80048ac:	f000 f9d8 	bl	8004c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
	...

08004920 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b01      	cmp	r3, #1
 8004932:	d001      	beq.n	8004938 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e04e      	b.n	80049d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0201 	orr.w	r2, r2, #1
 800494e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a23      	ldr	r2, [pc, #140]	; (80049e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d022      	beq.n	80049a0 <HAL_TIM_Base_Start_IT+0x80>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004962:	d01d      	beq.n	80049a0 <HAL_TIM_Base_Start_IT+0x80>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a1f      	ldr	r2, [pc, #124]	; (80049e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d018      	beq.n	80049a0 <HAL_TIM_Base_Start_IT+0x80>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a1e      	ldr	r2, [pc, #120]	; (80049ec <HAL_TIM_Base_Start_IT+0xcc>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d013      	beq.n	80049a0 <HAL_TIM_Base_Start_IT+0x80>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a1c      	ldr	r2, [pc, #112]	; (80049f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00e      	beq.n	80049a0 <HAL_TIM_Base_Start_IT+0x80>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a1b      	ldr	r2, [pc, #108]	; (80049f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d009      	beq.n	80049a0 <HAL_TIM_Base_Start_IT+0x80>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a19      	ldr	r2, [pc, #100]	; (80049f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d004      	beq.n	80049a0 <HAL_TIM_Base_Start_IT+0x80>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a18      	ldr	r2, [pc, #96]	; (80049fc <HAL_TIM_Base_Start_IT+0xdc>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d111      	bne.n	80049c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b06      	cmp	r3, #6
 80049b0:	d010      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0201 	orr.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c2:	e007      	b.n	80049d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0201 	orr.w	r2, r2, #1
 80049d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40010000 	.word	0x40010000
 80049e8:	40000400 	.word	0x40000400
 80049ec:	40000800 	.word	0x40000800
 80049f0:	40000c00 	.word	0x40000c00
 80049f4:	40010400 	.word	0x40010400
 80049f8:	40014000 	.word	0x40014000
 80049fc:	40001800 	.word	0x40001800

08004a00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d122      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d11b      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f06f 0202 	mvn.w	r2, #2
 8004a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f8ee 	bl	8004c24 <HAL_TIM_IC_CaptureCallback>
 8004a48:	e005      	b.n	8004a56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f8e0 	bl	8004c10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f8f1 	bl	8004c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	f003 0304 	and.w	r3, r3, #4
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d122      	bne.n	8004ab0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d11b      	bne.n	8004ab0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f06f 0204 	mvn.w	r2, #4
 8004a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2202      	movs	r2, #2
 8004a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f8c4 	bl	8004c24 <HAL_TIM_IC_CaptureCallback>
 8004a9c:	e005      	b.n	8004aaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f8b6 	bl	8004c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f8c7 	bl	8004c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d122      	bne.n	8004b04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d11b      	bne.n	8004b04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f06f 0208 	mvn.w	r2, #8
 8004ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2204      	movs	r2, #4
 8004ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f89a 	bl	8004c24 <HAL_TIM_IC_CaptureCallback>
 8004af0:	e005      	b.n	8004afe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f88c 	bl	8004c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f89d 	bl	8004c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f003 0310 	and.w	r3, r3, #16
 8004b0e:	2b10      	cmp	r3, #16
 8004b10:	d122      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f003 0310 	and.w	r3, r3, #16
 8004b1c:	2b10      	cmp	r3, #16
 8004b1e:	d11b      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f06f 0210 	mvn.w	r2, #16
 8004b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2208      	movs	r2, #8
 8004b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f870 	bl	8004c24 <HAL_TIM_IC_CaptureCallback>
 8004b44:	e005      	b.n	8004b52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f862 	bl	8004c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f873 	bl	8004c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d10e      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d107      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f06f 0201 	mvn.w	r2, #1
 8004b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fd f800 	bl	8001b84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8e:	2b80      	cmp	r3, #128	; 0x80
 8004b90:	d10e      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9c:	2b80      	cmp	r3, #128	; 0x80
 8004b9e:	d107      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f902 	bl	8004db4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bba:	2b40      	cmp	r3, #64	; 0x40
 8004bbc:	d10e      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc8:	2b40      	cmp	r3, #64	; 0x40
 8004bca:	d107      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f838 	bl	8004c4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	2b20      	cmp	r3, #32
 8004be8:	d10e      	bne.n	8004c08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f003 0320 	and.w	r3, r3, #32
 8004bf4:	2b20      	cmp	r3, #32
 8004bf6:	d107      	bne.n	8004c08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f06f 0220 	mvn.w	r2, #32
 8004c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f8cc 	bl	8004da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c08:	bf00      	nop
 8004c0a:	3708      	adds	r7, #8
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a40      	ldr	r2, [pc, #256]	; (8004d74 <TIM_Base_SetConfig+0x114>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d013      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c7e:	d00f      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a3d      	ldr	r2, [pc, #244]	; (8004d78 <TIM_Base_SetConfig+0x118>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d00b      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a3c      	ldr	r2, [pc, #240]	; (8004d7c <TIM_Base_SetConfig+0x11c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d007      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a3b      	ldr	r2, [pc, #236]	; (8004d80 <TIM_Base_SetConfig+0x120>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d003      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a3a      	ldr	r2, [pc, #232]	; (8004d84 <TIM_Base_SetConfig+0x124>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d108      	bne.n	8004cb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a2f      	ldr	r2, [pc, #188]	; (8004d74 <TIM_Base_SetConfig+0x114>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d02b      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc0:	d027      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a2c      	ldr	r2, [pc, #176]	; (8004d78 <TIM_Base_SetConfig+0x118>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d023      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a2b      	ldr	r2, [pc, #172]	; (8004d7c <TIM_Base_SetConfig+0x11c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d01f      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a2a      	ldr	r2, [pc, #168]	; (8004d80 <TIM_Base_SetConfig+0x120>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d01b      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a29      	ldr	r2, [pc, #164]	; (8004d84 <TIM_Base_SetConfig+0x124>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d017      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a28      	ldr	r2, [pc, #160]	; (8004d88 <TIM_Base_SetConfig+0x128>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d013      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a27      	ldr	r2, [pc, #156]	; (8004d8c <TIM_Base_SetConfig+0x12c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00f      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a26      	ldr	r2, [pc, #152]	; (8004d90 <TIM_Base_SetConfig+0x130>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00b      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a25      	ldr	r2, [pc, #148]	; (8004d94 <TIM_Base_SetConfig+0x134>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d007      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a24      	ldr	r2, [pc, #144]	; (8004d98 <TIM_Base_SetConfig+0x138>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d003      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a23      	ldr	r2, [pc, #140]	; (8004d9c <TIM_Base_SetConfig+0x13c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d108      	bne.n	8004d24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a0a      	ldr	r2, [pc, #40]	; (8004d74 <TIM_Base_SetConfig+0x114>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <TIM_Base_SetConfig+0xf8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a0c      	ldr	r2, [pc, #48]	; (8004d84 <TIM_Base_SetConfig+0x124>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d103      	bne.n	8004d60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	615a      	str	r2, [r3, #20]
}
 8004d66:	bf00      	nop
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40010000 	.word	0x40010000
 8004d78:	40000400 	.word	0x40000400
 8004d7c:	40000800 	.word	0x40000800
 8004d80:	40000c00 	.word	0x40000c00
 8004d84:	40010400 	.word	0x40010400
 8004d88:	40014000 	.word	0x40014000
 8004d8c:	40014400 	.word	0x40014400
 8004d90:	40014800 	.word	0x40014800
 8004d94:	40001800 	.word	0x40001800
 8004d98:	40001c00 	.word	0x40001c00
 8004d9c:	40002000 	.word	0x40002000

08004da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e03f      	b.n	8004e5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d106      	bne.n	8004df4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7fd fb3a 	bl	8002468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2224      	movs	r2, #36	; 0x24
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f929 	bl	8005064 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695a      	ldr	r2, [r3, #20]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b08a      	sub	sp, #40	; 0x28
 8004e66:	af02      	add	r7, sp, #8
 8004e68:	60f8      	str	r0, [r7, #12]
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	603b      	str	r3, [r7, #0]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b20      	cmp	r3, #32
 8004e80:	d17c      	bne.n	8004f7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <HAL_UART_Transmit+0x2c>
 8004e88:	88fb      	ldrh	r3, [r7, #6]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e075      	b.n	8004f7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_UART_Transmit+0x3e>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e06e      	b.n	8004f7e <HAL_UART_Transmit+0x11c>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2221      	movs	r2, #33	; 0x21
 8004eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eb6:	f7fd fd09 	bl	80028cc <HAL_GetTick>
 8004eba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	88fa      	ldrh	r2, [r7, #6]
 8004ec0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	88fa      	ldrh	r2, [r7, #6]
 8004ec6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed0:	d108      	bne.n	8004ee4 <HAL_UART_Transmit+0x82>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d104      	bne.n	8004ee4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004eda:	2300      	movs	r3, #0
 8004edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	61bb      	str	r3, [r7, #24]
 8004ee2:	e003      	b.n	8004eec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ef4:	e02a      	b.n	8004f4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2200      	movs	r2, #0
 8004efe:	2180      	movs	r1, #128	; 0x80
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 f840 	bl	8004f86 <UART_WaitOnFlagUntilTimeout>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e036      	b.n	8004f7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10b      	bne.n	8004f2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	3302      	adds	r3, #2
 8004f2a:	61bb      	str	r3, [r7, #24]
 8004f2c:	e007      	b.n	8004f3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	781a      	ldrb	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1cf      	bne.n	8004ef6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2140      	movs	r1, #64	; 0x40
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 f810 	bl	8004f86 <UART_WaitOnFlagUntilTimeout>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e006      	b.n	8004f7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	e000      	b.n	8004f7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f7c:	2302      	movs	r3, #2
  }
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3720      	adds	r7, #32
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b090      	sub	sp, #64	; 0x40
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	60f8      	str	r0, [r7, #12]
 8004f8e:	60b9      	str	r1, [r7, #8]
 8004f90:	603b      	str	r3, [r7, #0]
 8004f92:	4613      	mov	r3, r2
 8004f94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f96:	e050      	b.n	800503a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f9e:	d04c      	beq.n	800503a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d007      	beq.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fa6:	f7fd fc91 	bl	80028cc <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d241      	bcs.n	800503a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	330c      	adds	r3, #12
 8004fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc0:	e853 3f00 	ldrex	r3, [r3]
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	330c      	adds	r3, #12
 8004fd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fd6:	637a      	str	r2, [r7, #52]	; 0x34
 8004fd8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fde:	e841 2300 	strex	r3, r2, [r1]
 8004fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1e5      	bne.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3314      	adds	r3, #20
 8004ff0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	e853 3f00 	ldrex	r3, [r3]
 8004ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f023 0301 	bic.w	r3, r3, #1
 8005000:	63bb      	str	r3, [r7, #56]	; 0x38
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3314      	adds	r3, #20
 8005008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800500a:	623a      	str	r2, [r7, #32]
 800500c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500e:	69f9      	ldr	r1, [r7, #28]
 8005010:	6a3a      	ldr	r2, [r7, #32]
 8005012:	e841 2300 	strex	r3, r2, [r1]
 8005016:	61bb      	str	r3, [r7, #24]
   return(result);
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1e5      	bne.n	8004fea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2220      	movs	r2, #32
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2220      	movs	r2, #32
 800502a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e00f      	b.n	800505a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	4013      	ands	r3, r2
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	429a      	cmp	r2, r3
 8005048:	bf0c      	ite	eq
 800504a:	2301      	moveq	r3, #1
 800504c:	2300      	movne	r3, #0
 800504e:	b2db      	uxtb	r3, r3
 8005050:	461a      	mov	r2, r3
 8005052:	79fb      	ldrb	r3, [r7, #7]
 8005054:	429a      	cmp	r2, r3
 8005056:	d09f      	beq.n	8004f98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3740      	adds	r7, #64	; 0x40
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
	...

08005064 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005068:	b0c0      	sub	sp, #256	; 0x100
 800506a:	af00      	add	r7, sp, #0
 800506c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800507c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005080:	68d9      	ldr	r1, [r3, #12]
 8005082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	ea40 0301 	orr.w	r3, r0, r1
 800508c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800508e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	431a      	orrs	r2, r3
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	431a      	orrs	r2, r3
 80050a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050bc:	f021 010c 	bic.w	r1, r1, #12
 80050c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050ca:	430b      	orrs	r3, r1
 80050cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050de:	6999      	ldr	r1, [r3, #24]
 80050e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	ea40 0301 	orr.w	r3, r0, r1
 80050ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	4b8f      	ldr	r3, [pc, #572]	; (8005330 <UART_SetConfig+0x2cc>)
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d005      	beq.n	8005104 <UART_SetConfig+0xa0>
 80050f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	4b8d      	ldr	r3, [pc, #564]	; (8005334 <UART_SetConfig+0x2d0>)
 8005100:	429a      	cmp	r2, r3
 8005102:	d104      	bne.n	800510e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005104:	f7ff f84e 	bl	80041a4 <HAL_RCC_GetPCLK2Freq>
 8005108:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800510c:	e003      	b.n	8005116 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800510e:	f7ff f835 	bl	800417c <HAL_RCC_GetPCLK1Freq>
 8005112:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005120:	f040 810c 	bne.w	800533c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005128:	2200      	movs	r2, #0
 800512a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800512e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005132:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005136:	4622      	mov	r2, r4
 8005138:	462b      	mov	r3, r5
 800513a:	1891      	adds	r1, r2, r2
 800513c:	65b9      	str	r1, [r7, #88]	; 0x58
 800513e:	415b      	adcs	r3, r3
 8005140:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005142:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005146:	4621      	mov	r1, r4
 8005148:	eb12 0801 	adds.w	r8, r2, r1
 800514c:	4629      	mov	r1, r5
 800514e:	eb43 0901 	adc.w	r9, r3, r1
 8005152:	f04f 0200 	mov.w	r2, #0
 8005156:	f04f 0300 	mov.w	r3, #0
 800515a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800515e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005162:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005166:	4690      	mov	r8, r2
 8005168:	4699      	mov	r9, r3
 800516a:	4623      	mov	r3, r4
 800516c:	eb18 0303 	adds.w	r3, r8, r3
 8005170:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005174:	462b      	mov	r3, r5
 8005176:	eb49 0303 	adc.w	r3, r9, r3
 800517a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800517e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800518a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800518e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005192:	460b      	mov	r3, r1
 8005194:	18db      	adds	r3, r3, r3
 8005196:	653b      	str	r3, [r7, #80]	; 0x50
 8005198:	4613      	mov	r3, r2
 800519a:	eb42 0303 	adc.w	r3, r2, r3
 800519e:	657b      	str	r3, [r7, #84]	; 0x54
 80051a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80051a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80051a8:	f7fb f86a 	bl	8000280 <__aeabi_uldivmod>
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	4b61      	ldr	r3, [pc, #388]	; (8005338 <UART_SetConfig+0x2d4>)
 80051b2:	fba3 2302 	umull	r2, r3, r3, r2
 80051b6:	095b      	lsrs	r3, r3, #5
 80051b8:	011c      	lsls	r4, r3, #4
 80051ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051be:	2200      	movs	r2, #0
 80051c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80051c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80051cc:	4642      	mov	r2, r8
 80051ce:	464b      	mov	r3, r9
 80051d0:	1891      	adds	r1, r2, r2
 80051d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80051d4:	415b      	adcs	r3, r3
 80051d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051dc:	4641      	mov	r1, r8
 80051de:	eb12 0a01 	adds.w	sl, r2, r1
 80051e2:	4649      	mov	r1, r9
 80051e4:	eb43 0b01 	adc.w	fp, r3, r1
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051fc:	4692      	mov	sl, r2
 80051fe:	469b      	mov	fp, r3
 8005200:	4643      	mov	r3, r8
 8005202:	eb1a 0303 	adds.w	r3, sl, r3
 8005206:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800520a:	464b      	mov	r3, r9
 800520c:	eb4b 0303 	adc.w	r3, fp, r3
 8005210:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005220:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005224:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005228:	460b      	mov	r3, r1
 800522a:	18db      	adds	r3, r3, r3
 800522c:	643b      	str	r3, [r7, #64]	; 0x40
 800522e:	4613      	mov	r3, r2
 8005230:	eb42 0303 	adc.w	r3, r2, r3
 8005234:	647b      	str	r3, [r7, #68]	; 0x44
 8005236:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800523a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800523e:	f7fb f81f 	bl	8000280 <__aeabi_uldivmod>
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	4611      	mov	r1, r2
 8005248:	4b3b      	ldr	r3, [pc, #236]	; (8005338 <UART_SetConfig+0x2d4>)
 800524a:	fba3 2301 	umull	r2, r3, r3, r1
 800524e:	095b      	lsrs	r3, r3, #5
 8005250:	2264      	movs	r2, #100	; 0x64
 8005252:	fb02 f303 	mul.w	r3, r2, r3
 8005256:	1acb      	subs	r3, r1, r3
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800525e:	4b36      	ldr	r3, [pc, #216]	; (8005338 <UART_SetConfig+0x2d4>)
 8005260:	fba3 2302 	umull	r2, r3, r3, r2
 8005264:	095b      	lsrs	r3, r3, #5
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800526c:	441c      	add	r4, r3
 800526e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005272:	2200      	movs	r2, #0
 8005274:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005278:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800527c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005280:	4642      	mov	r2, r8
 8005282:	464b      	mov	r3, r9
 8005284:	1891      	adds	r1, r2, r2
 8005286:	63b9      	str	r1, [r7, #56]	; 0x38
 8005288:	415b      	adcs	r3, r3
 800528a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800528c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005290:	4641      	mov	r1, r8
 8005292:	1851      	adds	r1, r2, r1
 8005294:	6339      	str	r1, [r7, #48]	; 0x30
 8005296:	4649      	mov	r1, r9
 8005298:	414b      	adcs	r3, r1
 800529a:	637b      	str	r3, [r7, #52]	; 0x34
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	f04f 0300 	mov.w	r3, #0
 80052a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80052a8:	4659      	mov	r1, fp
 80052aa:	00cb      	lsls	r3, r1, #3
 80052ac:	4651      	mov	r1, sl
 80052ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052b2:	4651      	mov	r1, sl
 80052b4:	00ca      	lsls	r2, r1, #3
 80052b6:	4610      	mov	r0, r2
 80052b8:	4619      	mov	r1, r3
 80052ba:	4603      	mov	r3, r0
 80052bc:	4642      	mov	r2, r8
 80052be:	189b      	adds	r3, r3, r2
 80052c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052c4:	464b      	mov	r3, r9
 80052c6:	460a      	mov	r2, r1
 80052c8:	eb42 0303 	adc.w	r3, r2, r3
 80052cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80052e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80052e4:	460b      	mov	r3, r1
 80052e6:	18db      	adds	r3, r3, r3
 80052e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ea:	4613      	mov	r3, r2
 80052ec:	eb42 0303 	adc.w	r3, r2, r3
 80052f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80052fa:	f7fa ffc1 	bl	8000280 <__aeabi_uldivmod>
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	4b0d      	ldr	r3, [pc, #52]	; (8005338 <UART_SetConfig+0x2d4>)
 8005304:	fba3 1302 	umull	r1, r3, r3, r2
 8005308:	095b      	lsrs	r3, r3, #5
 800530a:	2164      	movs	r1, #100	; 0x64
 800530c:	fb01 f303 	mul.w	r3, r1, r3
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	3332      	adds	r3, #50	; 0x32
 8005316:	4a08      	ldr	r2, [pc, #32]	; (8005338 <UART_SetConfig+0x2d4>)
 8005318:	fba2 2303 	umull	r2, r3, r2, r3
 800531c:	095b      	lsrs	r3, r3, #5
 800531e:	f003 0207 	and.w	r2, r3, #7
 8005322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4422      	add	r2, r4
 800532a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800532c:	e105      	b.n	800553a <UART_SetConfig+0x4d6>
 800532e:	bf00      	nop
 8005330:	40011000 	.word	0x40011000
 8005334:	40011400 	.word	0x40011400
 8005338:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800533c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005340:	2200      	movs	r2, #0
 8005342:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005346:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800534a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800534e:	4642      	mov	r2, r8
 8005350:	464b      	mov	r3, r9
 8005352:	1891      	adds	r1, r2, r2
 8005354:	6239      	str	r1, [r7, #32]
 8005356:	415b      	adcs	r3, r3
 8005358:	627b      	str	r3, [r7, #36]	; 0x24
 800535a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800535e:	4641      	mov	r1, r8
 8005360:	1854      	adds	r4, r2, r1
 8005362:	4649      	mov	r1, r9
 8005364:	eb43 0501 	adc.w	r5, r3, r1
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	00eb      	lsls	r3, r5, #3
 8005372:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005376:	00e2      	lsls	r2, r4, #3
 8005378:	4614      	mov	r4, r2
 800537a:	461d      	mov	r5, r3
 800537c:	4643      	mov	r3, r8
 800537e:	18e3      	adds	r3, r4, r3
 8005380:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005384:	464b      	mov	r3, r9
 8005386:	eb45 0303 	adc.w	r3, r5, r3
 800538a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800538e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800539a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800539e:	f04f 0200 	mov.w	r2, #0
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80053aa:	4629      	mov	r1, r5
 80053ac:	008b      	lsls	r3, r1, #2
 80053ae:	4621      	mov	r1, r4
 80053b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053b4:	4621      	mov	r1, r4
 80053b6:	008a      	lsls	r2, r1, #2
 80053b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80053bc:	f7fa ff60 	bl	8000280 <__aeabi_uldivmod>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4b60      	ldr	r3, [pc, #384]	; (8005548 <UART_SetConfig+0x4e4>)
 80053c6:	fba3 2302 	umull	r2, r3, r3, r2
 80053ca:	095b      	lsrs	r3, r3, #5
 80053cc:	011c      	lsls	r4, r3, #4
 80053ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053d2:	2200      	movs	r2, #0
 80053d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80053dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80053e0:	4642      	mov	r2, r8
 80053e2:	464b      	mov	r3, r9
 80053e4:	1891      	adds	r1, r2, r2
 80053e6:	61b9      	str	r1, [r7, #24]
 80053e8:	415b      	adcs	r3, r3
 80053ea:	61fb      	str	r3, [r7, #28]
 80053ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053f0:	4641      	mov	r1, r8
 80053f2:	1851      	adds	r1, r2, r1
 80053f4:	6139      	str	r1, [r7, #16]
 80053f6:	4649      	mov	r1, r9
 80053f8:	414b      	adcs	r3, r1
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	f04f 0200 	mov.w	r2, #0
 8005400:	f04f 0300 	mov.w	r3, #0
 8005404:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005408:	4659      	mov	r1, fp
 800540a:	00cb      	lsls	r3, r1, #3
 800540c:	4651      	mov	r1, sl
 800540e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005412:	4651      	mov	r1, sl
 8005414:	00ca      	lsls	r2, r1, #3
 8005416:	4610      	mov	r0, r2
 8005418:	4619      	mov	r1, r3
 800541a:	4603      	mov	r3, r0
 800541c:	4642      	mov	r2, r8
 800541e:	189b      	adds	r3, r3, r2
 8005420:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005424:	464b      	mov	r3, r9
 8005426:	460a      	mov	r2, r1
 8005428:	eb42 0303 	adc.w	r3, r2, r3
 800542c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	67bb      	str	r3, [r7, #120]	; 0x78
 800543a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	f04f 0300 	mov.w	r3, #0
 8005444:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005448:	4649      	mov	r1, r9
 800544a:	008b      	lsls	r3, r1, #2
 800544c:	4641      	mov	r1, r8
 800544e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005452:	4641      	mov	r1, r8
 8005454:	008a      	lsls	r2, r1, #2
 8005456:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800545a:	f7fa ff11 	bl	8000280 <__aeabi_uldivmod>
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	4b39      	ldr	r3, [pc, #228]	; (8005548 <UART_SetConfig+0x4e4>)
 8005464:	fba3 1302 	umull	r1, r3, r3, r2
 8005468:	095b      	lsrs	r3, r3, #5
 800546a:	2164      	movs	r1, #100	; 0x64
 800546c:	fb01 f303 	mul.w	r3, r1, r3
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	011b      	lsls	r3, r3, #4
 8005474:	3332      	adds	r3, #50	; 0x32
 8005476:	4a34      	ldr	r2, [pc, #208]	; (8005548 <UART_SetConfig+0x4e4>)
 8005478:	fba2 2303 	umull	r2, r3, r2, r3
 800547c:	095b      	lsrs	r3, r3, #5
 800547e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005482:	441c      	add	r4, r3
 8005484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005488:	2200      	movs	r2, #0
 800548a:	673b      	str	r3, [r7, #112]	; 0x70
 800548c:	677a      	str	r2, [r7, #116]	; 0x74
 800548e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005492:	4642      	mov	r2, r8
 8005494:	464b      	mov	r3, r9
 8005496:	1891      	adds	r1, r2, r2
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	415b      	adcs	r3, r3
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054a2:	4641      	mov	r1, r8
 80054a4:	1851      	adds	r1, r2, r1
 80054a6:	6039      	str	r1, [r7, #0]
 80054a8:	4649      	mov	r1, r9
 80054aa:	414b      	adcs	r3, r1
 80054ac:	607b      	str	r3, [r7, #4]
 80054ae:	f04f 0200 	mov.w	r2, #0
 80054b2:	f04f 0300 	mov.w	r3, #0
 80054b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80054ba:	4659      	mov	r1, fp
 80054bc:	00cb      	lsls	r3, r1, #3
 80054be:	4651      	mov	r1, sl
 80054c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054c4:	4651      	mov	r1, sl
 80054c6:	00ca      	lsls	r2, r1, #3
 80054c8:	4610      	mov	r0, r2
 80054ca:	4619      	mov	r1, r3
 80054cc:	4603      	mov	r3, r0
 80054ce:	4642      	mov	r2, r8
 80054d0:	189b      	adds	r3, r3, r2
 80054d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80054d4:	464b      	mov	r3, r9
 80054d6:	460a      	mov	r2, r1
 80054d8:	eb42 0303 	adc.w	r3, r2, r3
 80054dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	663b      	str	r3, [r7, #96]	; 0x60
 80054e8:	667a      	str	r2, [r7, #100]	; 0x64
 80054ea:	f04f 0200 	mov.w	r2, #0
 80054ee:	f04f 0300 	mov.w	r3, #0
 80054f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80054f6:	4649      	mov	r1, r9
 80054f8:	008b      	lsls	r3, r1, #2
 80054fa:	4641      	mov	r1, r8
 80054fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005500:	4641      	mov	r1, r8
 8005502:	008a      	lsls	r2, r1, #2
 8005504:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005508:	f7fa feba 	bl	8000280 <__aeabi_uldivmod>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4b0d      	ldr	r3, [pc, #52]	; (8005548 <UART_SetConfig+0x4e4>)
 8005512:	fba3 1302 	umull	r1, r3, r3, r2
 8005516:	095b      	lsrs	r3, r3, #5
 8005518:	2164      	movs	r1, #100	; 0x64
 800551a:	fb01 f303 	mul.w	r3, r1, r3
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	011b      	lsls	r3, r3, #4
 8005522:	3332      	adds	r3, #50	; 0x32
 8005524:	4a08      	ldr	r2, [pc, #32]	; (8005548 <UART_SetConfig+0x4e4>)
 8005526:	fba2 2303 	umull	r2, r3, r2, r3
 800552a:	095b      	lsrs	r3, r3, #5
 800552c:	f003 020f 	and.w	r2, r3, #15
 8005530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4422      	add	r2, r4
 8005538:	609a      	str	r2, [r3, #8]
}
 800553a:	bf00      	nop
 800553c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005540:	46bd      	mov	sp, r7
 8005542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005546:	bf00      	nop
 8005548:	51eb851f 	.word	0x51eb851f

0800554c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f103 0208 	add.w	r2, r3, #8
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005564:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f103 0208 	add.w	r2, r3, #8
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f103 0208 	add.w	r2, r3, #8
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055a6:	b480      	push	{r7}
 80055a8:	b085      	sub	sp, #20
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
 80055ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	683a      	ldr	r2, [r7, #0]
 80055d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	1c5a      	adds	r2, r3, #1
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	601a      	str	r2, [r3, #0]
}
 80055e2:	bf00      	nop
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055ee:	b480      	push	{r7}
 80055f0:	b085      	sub	sp, #20
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005604:	d103      	bne.n	800560e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	e00c      	b.n	8005628 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	3308      	adds	r3, #8
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	e002      	b.n	800561c <vListInsert+0x2e>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	429a      	cmp	r2, r3
 8005626:	d2f6      	bcs.n	8005616 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	601a      	str	r2, [r3, #0]
}
 8005654:	bf00      	nop
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	6892      	ldr	r2, [r2, #8]
 8005676:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6852      	ldr	r2, [r2, #4]
 8005680:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	429a      	cmp	r2, r3
 800568a:	d103      	bne.n	8005694 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	1e5a      	subs	r2, r3, #1
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10a      	bne.n	80056de <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80056da:	bf00      	nop
 80056dc:	e7fe      	b.n	80056dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80056de:	f001 ff59 	bl	8007594 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ea:	68f9      	ldr	r1, [r7, #12]
 80056ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056ee:	fb01 f303 	mul.w	r3, r1, r3
 80056f2:	441a      	add	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570e:	3b01      	subs	r3, #1
 8005710:	68f9      	ldr	r1, [r7, #12]
 8005712:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005714:	fb01 f303 	mul.w	r3, r1, r3
 8005718:	441a      	add	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	22ff      	movs	r2, #255	; 0xff
 8005722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	22ff      	movs	r2, #255	; 0xff
 800572a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d114      	bne.n	800575e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d01a      	beq.n	8005772 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	3310      	adds	r3, #16
 8005740:	4618      	mov	r0, r3
 8005742:	f001 f841 	bl	80067c8 <xTaskRemoveFromEventList>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d012      	beq.n	8005772 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800574c:	4b0c      	ldr	r3, [pc, #48]	; (8005780 <xQueueGenericReset+0xcc>)
 800574e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	e009      	b.n	8005772 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	3310      	adds	r3, #16
 8005762:	4618      	mov	r0, r3
 8005764:	f7ff fef2 	bl	800554c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	3324      	adds	r3, #36	; 0x24
 800576c:	4618      	mov	r0, r3
 800576e:	f7ff feed 	bl	800554c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005772:	f001 ff3f 	bl	80075f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005776:	2301      	movs	r3, #1
}
 8005778:	4618      	mov	r0, r3
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	e000ed04 	.word	0xe000ed04

08005784 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005784:	b580      	push	{r7, lr}
 8005786:	b08a      	sub	sp, #40	; 0x28
 8005788:	af02      	add	r7, sp, #8
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	4613      	mov	r3, r2
 8005790:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10a      	bne.n	80057ae <xQueueGenericCreate+0x2a>
	__asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	613b      	str	r3, [r7, #16]
}
 80057aa:	bf00      	nop
 80057ac:	e7fe      	b.n	80057ac <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d102      	bne.n	80057ba <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80057b4:	2300      	movs	r3, #0
 80057b6:	61fb      	str	r3, [r7, #28]
 80057b8:	e004      	b.n	80057c4 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	fb02 f303 	mul.w	r3, r2, r3
 80057c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	3350      	adds	r3, #80	; 0x50
 80057c8:	4618      	mov	r0, r3
 80057ca:	f002 f805 	bl	80077d8 <pvPortMalloc>
 80057ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00d      	beq.n	80057f2 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	3350      	adds	r3, #80	; 0x50
 80057de:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80057e0:	79fa      	ldrb	r2, [r7, #7]
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	4613      	mov	r3, r2
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	68b9      	ldr	r1, [r7, #8]
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 f805 	bl	80057fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80057f2:	69bb      	ldr	r3, [r7, #24]
	}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3720      	adds	r7, #32
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
 8005808:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d103      	bne.n	8005818 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	e002      	b.n	800581e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800582a:	2101      	movs	r1, #1
 800582c:	69b8      	ldr	r0, [r7, #24]
 800582e:	f7ff ff41 	bl	80056b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	78fa      	ldrb	r2, [r7, #3]
 8005836:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800583a:	bf00      	nop
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
	...

08005844 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b08e      	sub	sp, #56	; 0x38
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
 8005850:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005852:	2300      	movs	r3, #0
 8005854:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10a      	bne.n	8005876 <xQueueGenericSend+0x32>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005872:	bf00      	nop
 8005874:	e7fe      	b.n	8005874 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d103      	bne.n	8005884 <xQueueGenericSend+0x40>
 800587c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <xQueueGenericSend+0x44>
 8005884:	2301      	movs	r3, #1
 8005886:	e000      	b.n	800588a <xQueueGenericSend+0x46>
 8005888:	2300      	movs	r3, #0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10a      	bne.n	80058a4 <xQueueGenericSend+0x60>
	__asm volatile
 800588e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005892:	f383 8811 	msr	BASEPRI, r3
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058a0:	bf00      	nop
 80058a2:	e7fe      	b.n	80058a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d103      	bne.n	80058b2 <xQueueGenericSend+0x6e>
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d101      	bne.n	80058b6 <xQueueGenericSend+0x72>
 80058b2:	2301      	movs	r3, #1
 80058b4:	e000      	b.n	80058b8 <xQueueGenericSend+0x74>
 80058b6:	2300      	movs	r3, #0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10a      	bne.n	80058d2 <xQueueGenericSend+0x8e>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	623b      	str	r3, [r7, #32]
}
 80058ce:	bf00      	nop
 80058d0:	e7fe      	b.n	80058d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058d2:	f001 f915 	bl	8006b00 <xTaskGetSchedulerState>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d102      	bne.n	80058e2 <xQueueGenericSend+0x9e>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <xQueueGenericSend+0xa2>
 80058e2:	2301      	movs	r3, #1
 80058e4:	e000      	b.n	80058e8 <xQueueGenericSend+0xa4>
 80058e6:	2300      	movs	r3, #0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10a      	bne.n	8005902 <xQueueGenericSend+0xbe>
	__asm volatile
 80058ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	61fb      	str	r3, [r7, #28]
}
 80058fe:	bf00      	nop
 8005900:	e7fe      	b.n	8005900 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005902:	f001 fe47 	bl	8007594 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800590a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590e:	429a      	cmp	r2, r3
 8005910:	d302      	bcc.n	8005918 <xQueueGenericSend+0xd4>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b02      	cmp	r3, #2
 8005916:	d129      	bne.n	800596c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	68b9      	ldr	r1, [r7, #8]
 800591c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800591e:	f000 fa07 	bl	8005d30 <prvCopyDataToQueue>
 8005922:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	2b00      	cmp	r3, #0
 800592a:	d010      	beq.n	800594e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800592c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592e:	3324      	adds	r3, #36	; 0x24
 8005930:	4618      	mov	r0, r3
 8005932:	f000 ff49 	bl	80067c8 <xTaskRemoveFromEventList>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d013      	beq.n	8005964 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800593c:	4b3f      	ldr	r3, [pc, #252]	; (8005a3c <xQueueGenericSend+0x1f8>)
 800593e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	f3bf 8f6f 	isb	sy
 800594c:	e00a      	b.n	8005964 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800594e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005950:	2b00      	cmp	r3, #0
 8005952:	d007      	beq.n	8005964 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005954:	4b39      	ldr	r3, [pc, #228]	; (8005a3c <xQueueGenericSend+0x1f8>)
 8005956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005964:	f001 fe46 	bl	80075f4 <vPortExitCritical>
				return pdPASS;
 8005968:	2301      	movs	r3, #1
 800596a:	e063      	b.n	8005a34 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d103      	bne.n	800597a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005972:	f001 fe3f 	bl	80075f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005976:	2300      	movs	r3, #0
 8005978:	e05c      	b.n	8005a34 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800597a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597c:	2b00      	cmp	r3, #0
 800597e:	d106      	bne.n	800598e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005980:	f107 0314 	add.w	r3, r7, #20
 8005984:	4618      	mov	r0, r3
 8005986:	f000 ff81 	bl	800688c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800598a:	2301      	movs	r3, #1
 800598c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800598e:	f001 fe31 	bl	80075f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005992:	f000 fcfb 	bl	800638c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005996:	f001 fdfd 	bl	8007594 <vPortEnterCritical>
 800599a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059a0:	b25b      	sxtb	r3, r3
 80059a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059a6:	d103      	bne.n	80059b0 <xQueueGenericSend+0x16c>
 80059a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059b6:	b25b      	sxtb	r3, r3
 80059b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059bc:	d103      	bne.n	80059c6 <xQueueGenericSend+0x182>
 80059be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059c6:	f001 fe15 	bl	80075f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059ca:	1d3a      	adds	r2, r7, #4
 80059cc:	f107 0314 	add.w	r3, r7, #20
 80059d0:	4611      	mov	r1, r2
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 ff70 	bl	80068b8 <xTaskCheckForTimeOut>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d124      	bne.n	8005a28 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80059de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059e0:	f000 fa9e 	bl	8005f20 <prvIsQueueFull>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d018      	beq.n	8005a1c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	3310      	adds	r3, #16
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	4611      	mov	r1, r2
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 fe98 	bl	8006728 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80059f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059fa:	f000 fa29 	bl	8005e50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80059fe:	f000 fcd3 	bl	80063a8 <xTaskResumeAll>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f47f af7c 	bne.w	8005902 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005a0a:	4b0c      	ldr	r3, [pc, #48]	; (8005a3c <xQueueGenericSend+0x1f8>)
 8005a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	f3bf 8f4f 	dsb	sy
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	e772      	b.n	8005902 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a1e:	f000 fa17 	bl	8005e50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a22:	f000 fcc1 	bl	80063a8 <xTaskResumeAll>
 8005a26:	e76c      	b.n	8005902 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a2a:	f000 fa11 	bl	8005e50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a2e:	f000 fcbb 	bl	80063a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3738      	adds	r7, #56	; 0x38
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	e000ed04 	.word	0xe000ed04

08005a40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b08e      	sub	sp, #56	; 0x38
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
 8005a4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10a      	bne.n	8005a6e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5c:	f383 8811 	msr	BASEPRI, r3
 8005a60:	f3bf 8f6f 	isb	sy
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a6a:	bf00      	nop
 8005a6c:	e7fe      	b.n	8005a6c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d103      	bne.n	8005a7c <xQueueGenericSendFromISR+0x3c>
 8005a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <xQueueGenericSendFromISR+0x40>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e000      	b.n	8005a82 <xQueueGenericSendFromISR+0x42>
 8005a80:	2300      	movs	r3, #0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10a      	bne.n	8005a9c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	623b      	str	r3, [r7, #32]
}
 8005a98:	bf00      	nop
 8005a9a:	e7fe      	b.n	8005a9a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d103      	bne.n	8005aaa <xQueueGenericSendFromISR+0x6a>
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <xQueueGenericSendFromISR+0x6e>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e000      	b.n	8005ab0 <xQueueGenericSendFromISR+0x70>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10a      	bne.n	8005aca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	61fb      	str	r3, [r7, #28]
}
 8005ac6:	bf00      	nop
 8005ac8:	e7fe      	b.n	8005ac8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005aca:	f001 fe45 	bl	8007758 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005ace:	f3ef 8211 	mrs	r2, BASEPRI
 8005ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	61ba      	str	r2, [r7, #24]
 8005ae4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ae6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d302      	bcc.n	8005afc <xQueueGenericSendFromISR+0xbc>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d12c      	bne.n	8005b56 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	68b9      	ldr	r1, [r7, #8]
 8005b0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b0c:	f000 f910 	bl	8005d30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b10:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005b14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b18:	d112      	bne.n	8005b40 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d016      	beq.n	8005b50 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b24:	3324      	adds	r3, #36	; 0x24
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 fe4e 	bl	80067c8 <xTaskRemoveFromEventList>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00e      	beq.n	8005b50 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00b      	beq.n	8005b50 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	e007      	b.n	8005b50 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b44:	3301      	adds	r3, #1
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	b25a      	sxtb	r2, r3
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005b50:	2301      	movs	r3, #1
 8005b52:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005b54:	e001      	b.n	8005b5a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b56:	2300      	movs	r3, #0
 8005b58:	637b      	str	r3, [r7, #52]	; 0x34
 8005b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b64:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3738      	adds	r7, #56	; 0x38
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08c      	sub	sp, #48	; 0x30
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10a      	bne.n	8005ba0 <xQueueReceive+0x30>
	__asm volatile
 8005b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	623b      	str	r3, [r7, #32]
}
 8005b9c:	bf00      	nop
 8005b9e:	e7fe      	b.n	8005b9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d103      	bne.n	8005bae <xQueueReceive+0x3e>
 8005ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d101      	bne.n	8005bb2 <xQueueReceive+0x42>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e000      	b.n	8005bb4 <xQueueReceive+0x44>
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10a      	bne.n	8005bce <xQueueReceive+0x5e>
	__asm volatile
 8005bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbc:	f383 8811 	msr	BASEPRI, r3
 8005bc0:	f3bf 8f6f 	isb	sy
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	61fb      	str	r3, [r7, #28]
}
 8005bca:	bf00      	nop
 8005bcc:	e7fe      	b.n	8005bcc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bce:	f000 ff97 	bl	8006b00 <xTaskGetSchedulerState>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d102      	bne.n	8005bde <xQueueReceive+0x6e>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <xQueueReceive+0x72>
 8005bde:	2301      	movs	r3, #1
 8005be0:	e000      	b.n	8005be4 <xQueueReceive+0x74>
 8005be2:	2300      	movs	r3, #0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10a      	bne.n	8005bfe <xQueueReceive+0x8e>
	__asm volatile
 8005be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bec:	f383 8811 	msr	BASEPRI, r3
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	61bb      	str	r3, [r7, #24]
}
 8005bfa:	bf00      	nop
 8005bfc:	e7fe      	b.n	8005bfc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bfe:	f001 fcc9 	bl	8007594 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c06:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d01f      	beq.n	8005c4e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c0e:	68b9      	ldr	r1, [r7, #8]
 8005c10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c12:	f000 f8f7 	bl	8005e04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	1e5a      	subs	r2, r3, #1
 8005c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00f      	beq.n	8005c46 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c28:	3310      	adds	r3, #16
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 fdcc 	bl	80067c8 <xTaskRemoveFromEventList>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d007      	beq.n	8005c46 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c36:	4b3d      	ldr	r3, [pc, #244]	; (8005d2c <xQueueReceive+0x1bc>)
 8005c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c46:	f001 fcd5 	bl	80075f4 <vPortExitCritical>
				return pdPASS;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e069      	b.n	8005d22 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d103      	bne.n	8005c5c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c54:	f001 fcce 	bl	80075f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	e062      	b.n	8005d22 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d106      	bne.n	8005c70 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c62:	f107 0310 	add.w	r3, r7, #16
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 fe10 	bl	800688c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c70:	f001 fcc0 	bl	80075f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c74:	f000 fb8a 	bl	800638c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c78:	f001 fc8c 	bl	8007594 <vPortEnterCritical>
 8005c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c82:	b25b      	sxtb	r3, r3
 8005c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c88:	d103      	bne.n	8005c92 <xQueueReceive+0x122>
 8005c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c98:	b25b      	sxtb	r3, r3
 8005c9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c9e:	d103      	bne.n	8005ca8 <xQueueReceive+0x138>
 8005ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ca8:	f001 fca4 	bl	80075f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cac:	1d3a      	adds	r2, r7, #4
 8005cae:	f107 0310 	add.w	r3, r7, #16
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 fdff 	bl	80068b8 <xTaskCheckForTimeOut>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d123      	bne.n	8005d08 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cc2:	f000 f917 	bl	8005ef4 <prvIsQueueEmpty>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d017      	beq.n	8005cfc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cce:	3324      	adds	r3, #36	; 0x24
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	4611      	mov	r1, r2
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 fd27 	bl	8006728 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cdc:	f000 f8b8 	bl	8005e50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ce0:	f000 fb62 	bl	80063a8 <xTaskResumeAll>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d189      	bne.n	8005bfe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005cea:	4b10      	ldr	r3, [pc, #64]	; (8005d2c <xQueueReceive+0x1bc>)
 8005cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	e780      	b.n	8005bfe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cfe:	f000 f8a7 	bl	8005e50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d02:	f000 fb51 	bl	80063a8 <xTaskResumeAll>
 8005d06:	e77a      	b.n	8005bfe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005d08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d0a:	f000 f8a1 	bl	8005e50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d0e:	f000 fb4b 	bl	80063a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d14:	f000 f8ee 	bl	8005ef4 <prvIsQueueEmpty>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f43f af6f 	beq.w	8005bfe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3730      	adds	r7, #48	; 0x30
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	e000ed04 	.word	0xe000ed04

08005d30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10d      	bne.n	8005d6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d14d      	bne.n	8005df2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 feee 	bl	8006b3c <xTaskPriorityDisinherit>
 8005d60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	609a      	str	r2, [r3, #8]
 8005d68:	e043      	b.n	8005df2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d119      	bne.n	8005da4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6858      	ldr	r0, [r3, #4]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d78:	461a      	mov	r2, r3
 8005d7a:	68b9      	ldr	r1, [r7, #8]
 8005d7c:	f001 ff30 	bl	8007be0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d88:	441a      	add	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d32b      	bcc.n	8005df2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	605a      	str	r2, [r3, #4]
 8005da2:	e026      	b.n	8005df2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	68d8      	ldr	r0, [r3, #12]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dac:	461a      	mov	r2, r3
 8005dae:	68b9      	ldr	r1, [r7, #8]
 8005db0:	f001 ff16 	bl	8007be0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	68da      	ldr	r2, [r3, #12]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbc:	425b      	negs	r3, r3
 8005dbe:	441a      	add	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	68da      	ldr	r2, [r3, #12]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d207      	bcs.n	8005de0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd8:	425b      	negs	r3, r3
 8005dda:	441a      	add	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d105      	bne.n	8005df2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d002      	beq.n	8005df2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	3b01      	subs	r3, #1
 8005df0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	1c5a      	adds	r2, r3, #1
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005dfa:	697b      	ldr	r3, [r7, #20]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3718      	adds	r7, #24
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d018      	beq.n	8005e48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68da      	ldr	r2, [r3, #12]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	441a      	add	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68da      	ldr	r2, [r3, #12]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d303      	bcc.n	8005e38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68d9      	ldr	r1, [r3, #12]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e40:	461a      	mov	r2, r3
 8005e42:	6838      	ldr	r0, [r7, #0]
 8005e44:	f001 fecc 	bl	8007be0 <memcpy>
	}
}
 8005e48:	bf00      	nop
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005e58:	f001 fb9c 	bl	8007594 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e64:	e011      	b.n	8005e8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d012      	beq.n	8005e94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3324      	adds	r3, #36	; 0x24
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 fca8 	bl	80067c8 <xTaskRemoveFromEventList>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005e7e:	f000 fd7d 	bl	800697c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
 8005e84:	3b01      	subs	r3, #1
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	dce9      	bgt.n	8005e66 <prvUnlockQueue+0x16>
 8005e92:	e000      	b.n	8005e96 <prvUnlockQueue+0x46>
					break;
 8005e94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	22ff      	movs	r2, #255	; 0xff
 8005e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005e9e:	f001 fba9 	bl	80075f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ea2:	f001 fb77 	bl	8007594 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005eac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005eae:	e011      	b.n	8005ed4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d012      	beq.n	8005ede <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	3310      	adds	r3, #16
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 fc83 	bl	80067c8 <xTaskRemoveFromEventList>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ec8:	f000 fd58 	bl	800697c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ecc:	7bbb      	ldrb	r3, [r7, #14]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ed4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	dce9      	bgt.n	8005eb0 <prvUnlockQueue+0x60>
 8005edc:	e000      	b.n	8005ee0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ede:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	22ff      	movs	r2, #255	; 0xff
 8005ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005ee8:	f001 fb84 	bl	80075f4 <vPortExitCritical>
}
 8005eec:	bf00      	nop
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005efc:	f001 fb4a 	bl	8007594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d102      	bne.n	8005f0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	60fb      	str	r3, [r7, #12]
 8005f0c:	e001      	b.n	8005f12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f12:	f001 fb6f 	bl	80075f4 <vPortExitCritical>

	return xReturn;
 8005f16:	68fb      	ldr	r3, [r7, #12]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f28:	f001 fb34 	bl	8007594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d102      	bne.n	8005f3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	e001      	b.n	8005f42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f42:	f001 fb57 	bl	80075f4 <vPortExitCritical>

	return xReturn;
 8005f46:	68fb      	ldr	r3, [r7, #12]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	60fb      	str	r3, [r7, #12]
 8005f5e:	e014      	b.n	8005f8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005f60:	4a0f      	ldr	r2, [pc, #60]	; (8005fa0 <vQueueAddToRegistry+0x50>)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10b      	bne.n	8005f84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005f6c:	490c      	ldr	r1, [pc, #48]	; (8005fa0 <vQueueAddToRegistry+0x50>)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005f76:	4a0a      	ldr	r2, [pc, #40]	; (8005fa0 <vQueueAddToRegistry+0x50>)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	00db      	lsls	r3, r3, #3
 8005f7c:	4413      	add	r3, r2
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005f82:	e006      	b.n	8005f92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	3301      	adds	r3, #1
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2b07      	cmp	r3, #7
 8005f8e:	d9e7      	bls.n	8005f60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005f90:	bf00      	nop
 8005f92:	bf00      	nop
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	20000678 	.word	0x20000678

08005fa4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005fb4:	f001 faee 	bl	8007594 <vPortEnterCritical>
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fbe:	b25b      	sxtb	r3, r3
 8005fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fc4:	d103      	bne.n	8005fce <vQueueWaitForMessageRestricted+0x2a>
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fd4:	b25b      	sxtb	r3, r3
 8005fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fda:	d103      	bne.n	8005fe4 <vQueueWaitForMessageRestricted+0x40>
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fe4:	f001 fb06 	bl	80075f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d106      	bne.n	8005ffe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	3324      	adds	r3, #36	; 0x24
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	68b9      	ldr	r1, [r7, #8]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 fbb9 	bl	8006770 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005ffe:	6978      	ldr	r0, [r7, #20]
 8006000:	f7ff ff26 	bl	8005e50 <prvUnlockQueue>
	}
 8006004:	bf00      	nop
 8006006:	3718      	adds	r7, #24
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800600c:	b580      	push	{r7, lr}
 800600e:	b08c      	sub	sp, #48	; 0x30
 8006010:	af04      	add	r7, sp, #16
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	603b      	str	r3, [r7, #0]
 8006018:	4613      	mov	r3, r2
 800601a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800601c:	88fb      	ldrh	r3, [r7, #6]
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4618      	mov	r0, r3
 8006022:	f001 fbd9 	bl	80077d8 <pvPortMalloc>
 8006026:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00e      	beq.n	800604c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800602e:	2058      	movs	r0, #88	; 0x58
 8006030:	f001 fbd2 	bl	80077d8 <pvPortMalloc>
 8006034:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	631a      	str	r2, [r3, #48]	; 0x30
 8006042:	e005      	b.n	8006050 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006044:	6978      	ldr	r0, [r7, #20]
 8006046:	f001 fc8b 	bl	8007960 <vPortFree>
 800604a:	e001      	b.n	8006050 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800604c:	2300      	movs	r3, #0
 800604e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d013      	beq.n	800607e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006056:	88fa      	ldrh	r2, [r7, #6]
 8006058:	2300      	movs	r3, #0
 800605a:	9303      	str	r3, [sp, #12]
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	9302      	str	r3, [sp, #8]
 8006060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006062:	9301      	str	r3, [sp, #4]
 8006064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	68b9      	ldr	r1, [r7, #8]
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f000 f80e 	bl	800608e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006072:	69f8      	ldr	r0, [r7, #28]
 8006074:	f000 f89a 	bl	80061ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006078:	2301      	movs	r3, #1
 800607a:	61bb      	str	r3, [r7, #24]
 800607c:	e002      	b.n	8006084 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800607e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006082:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006084:	69bb      	ldr	r3, [r7, #24]
	}
 8006086:	4618      	mov	r0, r3
 8006088:	3720      	adds	r7, #32
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b088      	sub	sp, #32
 8006092:	af00      	add	r7, sp, #0
 8006094:	60f8      	str	r0, [r7, #12]
 8006096:	60b9      	str	r1, [r7, #8]
 8006098:	607a      	str	r2, [r7, #4]
 800609a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800609c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	461a      	mov	r2, r3
 80060a6:	21a5      	movs	r1, #165	; 0xa5
 80060a8:	f001 fda8 	bl	8007bfc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80060ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80060b6:	3b01      	subs	r3, #1
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	f023 0307 	bic.w	r3, r3, #7
 80060c4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	f003 0307 	and.w	r3, r3, #7
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00a      	beq.n	80060e6 <prvInitialiseNewTask+0x58>
	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	617b      	str	r3, [r7, #20]
}
 80060e2:	bf00      	nop
 80060e4:	e7fe      	b.n	80060e4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d01f      	beq.n	800612c <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060ec:	2300      	movs	r3, #0
 80060ee:	61fb      	str	r3, [r7, #28]
 80060f0:	e012      	b.n	8006118 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	4413      	add	r3, r2
 80060f8:	7819      	ldrb	r1, [r3, #0]
 80060fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	4413      	add	r3, r2
 8006100:	3334      	adds	r3, #52	; 0x34
 8006102:	460a      	mov	r2, r1
 8006104:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	4413      	add	r3, r2
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d006      	beq.n	8006120 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	3301      	adds	r3, #1
 8006116:	61fb      	str	r3, [r7, #28]
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	2b09      	cmp	r3, #9
 800611c:	d9e9      	bls.n	80060f2 <prvInitialiseNewTask+0x64>
 800611e:	e000      	b.n	8006122 <prvInitialiseNewTask+0x94>
			{
				break;
 8006120:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006124:	2200      	movs	r2, #0
 8006126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800612a:	e003      	b.n	8006134 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800612c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006136:	2b0f      	cmp	r3, #15
 8006138:	d901      	bls.n	800613e <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800613a:	230f      	movs	r3, #15
 800613c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800613e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006142:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006148:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 800614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614c:	2200      	movs	r2, #0
 800614e:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006152:	3304      	adds	r3, #4
 8006154:	4618      	mov	r0, r3
 8006156:	f7ff fa19 	bl	800558c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615c:	3318      	adds	r3, #24
 800615e:	4618      	mov	r0, r3
 8006160:	f7ff fa14 	bl	800558c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006168:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800616a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616c:	f1c3 0210 	rsb	r2, r3, #16
 8006170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006172:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006178:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800617a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617c:	2200      	movs	r2, #0
 800617e:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	68f9      	ldr	r1, [r7, #12]
 800618c:	69b8      	ldr	r0, [r7, #24]
 800618e:	f001 f8d3 	bl	8007338 <pxPortInitialiseStack>
 8006192:	4602      	mov	r2, r0
 8006194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006196:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619a:	2b00      	cmp	r3, #0
 800619c:	d002      	beq.n	80061a4 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061a4:	bf00      	nop
 80061a6:	3720      	adds	r7, #32
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80061b4:	f001 f9ee 	bl	8007594 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80061b8:	4b2c      	ldr	r3, [pc, #176]	; (800626c <prvAddNewTaskToReadyList+0xc0>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	3301      	adds	r3, #1
 80061be:	4a2b      	ldr	r2, [pc, #172]	; (800626c <prvAddNewTaskToReadyList+0xc0>)
 80061c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80061c2:	4b2b      	ldr	r3, [pc, #172]	; (8006270 <prvAddNewTaskToReadyList+0xc4>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d109      	bne.n	80061de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80061ca:	4a29      	ldr	r2, [pc, #164]	; (8006270 <prvAddNewTaskToReadyList+0xc4>)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80061d0:	4b26      	ldr	r3, [pc, #152]	; (800626c <prvAddNewTaskToReadyList+0xc0>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d110      	bne.n	80061fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80061d8:	f000 fbf4 	bl	80069c4 <prvInitialiseTaskLists>
 80061dc:	e00d      	b.n	80061fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80061de:	4b25      	ldr	r3, [pc, #148]	; (8006274 <prvAddNewTaskToReadyList+0xc8>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d109      	bne.n	80061fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80061e6:	4b22      	ldr	r3, [pc, #136]	; (8006270 <prvAddNewTaskToReadyList+0xc4>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d802      	bhi.n	80061fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80061f4:	4a1e      	ldr	r2, [pc, #120]	; (8006270 <prvAddNewTaskToReadyList+0xc4>)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80061fa:	4b1f      	ldr	r3, [pc, #124]	; (8006278 <prvAddNewTaskToReadyList+0xcc>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	3301      	adds	r3, #1
 8006200:	4a1d      	ldr	r2, [pc, #116]	; (8006278 <prvAddNewTaskToReadyList+0xcc>)
 8006202:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006204:	4b1c      	ldr	r3, [pc, #112]	; (8006278 <prvAddNewTaskToReadyList+0xcc>)
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006210:	2201      	movs	r2, #1
 8006212:	409a      	lsls	r2, r3
 8006214:	4b19      	ldr	r3, [pc, #100]	; (800627c <prvAddNewTaskToReadyList+0xd0>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4313      	orrs	r3, r2
 800621a:	4a18      	ldr	r2, [pc, #96]	; (800627c <prvAddNewTaskToReadyList+0xd0>)
 800621c:	6013      	str	r3, [r2, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006222:	4613      	mov	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4a15      	ldr	r2, [pc, #84]	; (8006280 <prvAddNewTaskToReadyList+0xd4>)
 800622c:	441a      	add	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	3304      	adds	r3, #4
 8006232:	4619      	mov	r1, r3
 8006234:	4610      	mov	r0, r2
 8006236:	f7ff f9b6 	bl	80055a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800623a:	f001 f9db 	bl	80075f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800623e:	4b0d      	ldr	r3, [pc, #52]	; (8006274 <prvAddNewTaskToReadyList+0xc8>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00e      	beq.n	8006264 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006246:	4b0a      	ldr	r3, [pc, #40]	; (8006270 <prvAddNewTaskToReadyList+0xc4>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006250:	429a      	cmp	r2, r3
 8006252:	d207      	bcs.n	8006264 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006254:	4b0b      	ldr	r3, [pc, #44]	; (8006284 <prvAddNewTaskToReadyList+0xd8>)
 8006256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006264:	bf00      	nop
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	2000086c 	.word	0x2000086c
 8006270:	200006b8 	.word	0x200006b8
 8006274:	20000878 	.word	0x20000878
 8006278:	20000888 	.word	0x20000888
 800627c:	20000874 	.word	0x20000874
 8006280:	200006bc 	.word	0x200006bc
 8006284:	e000ed04 	.word	0xe000ed04

08006288 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006290:	2300      	movs	r3, #0
 8006292:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d017      	beq.n	80062ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800629a:	4b13      	ldr	r3, [pc, #76]	; (80062e8 <vTaskDelay+0x60>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00a      	beq.n	80062b8 <vTaskDelay+0x30>
	__asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	60bb      	str	r3, [r7, #8]
}
 80062b4:	bf00      	nop
 80062b6:	e7fe      	b.n	80062b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80062b8:	f000 f868 	bl	800638c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80062bc:	2100      	movs	r1, #0
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 fcc2 	bl	8006c48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80062c4:	f000 f870 	bl	80063a8 <xTaskResumeAll>
 80062c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d107      	bne.n	80062e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80062d0:	4b06      	ldr	r3, [pc, #24]	; (80062ec <vTaskDelay+0x64>)
 80062d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062e0:	bf00      	nop
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	20000894 	.word	0x20000894
 80062ec:	e000ed04 	.word	0xe000ed04

080062f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80062f6:	4b1f      	ldr	r3, [pc, #124]	; (8006374 <vTaskStartScheduler+0x84>)
 80062f8:	9301      	str	r3, [sp, #4]
 80062fa:	2300      	movs	r3, #0
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	2300      	movs	r3, #0
 8006300:	2282      	movs	r2, #130	; 0x82
 8006302:	491d      	ldr	r1, [pc, #116]	; (8006378 <vTaskStartScheduler+0x88>)
 8006304:	481d      	ldr	r0, [pc, #116]	; (800637c <vTaskStartScheduler+0x8c>)
 8006306:	f7ff fe81 	bl	800600c <xTaskCreate>
 800630a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d102      	bne.n	8006318 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8006312:	f000 fcff 	bl	8006d14 <xTimerCreateTimerTask>
 8006316:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d116      	bne.n	800634c <vTaskStartScheduler+0x5c>
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	60bb      	str	r3, [r7, #8]
}
 8006330:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006332:	4b13      	ldr	r3, [pc, #76]	; (8006380 <vTaskStartScheduler+0x90>)
 8006334:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006338:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800633a:	4b12      	ldr	r3, [pc, #72]	; (8006384 <vTaskStartScheduler+0x94>)
 800633c:	2201      	movs	r2, #1
 800633e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006340:	4b11      	ldr	r3, [pc, #68]	; (8006388 <vTaskStartScheduler+0x98>)
 8006342:	2200      	movs	r2, #0
 8006344:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006346:	f001 f883 	bl	8007450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800634a:	e00e      	b.n	800636a <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006352:	d10a      	bne.n	800636a <vTaskStartScheduler+0x7a>
	__asm volatile
 8006354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	607b      	str	r3, [r7, #4]
}
 8006366:	bf00      	nop
 8006368:	e7fe      	b.n	8006368 <vTaskStartScheduler+0x78>
}
 800636a:	bf00      	nop
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	20000890 	.word	0x20000890
 8006378:	08008708 	.word	0x08008708
 800637c:	08006995 	.word	0x08006995
 8006380:	2000088c 	.word	0x2000088c
 8006384:	20000878 	.word	0x20000878
 8006388:	20000870 	.word	0x20000870

0800638c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006390:	4b04      	ldr	r3, [pc, #16]	; (80063a4 <vTaskSuspendAll+0x18>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3301      	adds	r3, #1
 8006396:	4a03      	ldr	r2, [pc, #12]	; (80063a4 <vTaskSuspendAll+0x18>)
 8006398:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800639a:	bf00      	nop
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	20000894 	.word	0x20000894

080063a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80063ae:	2300      	movs	r3, #0
 80063b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80063b2:	2300      	movs	r3, #0
 80063b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80063b6:	4b41      	ldr	r3, [pc, #260]	; (80064bc <xTaskResumeAll+0x114>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10a      	bne.n	80063d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80063be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	603b      	str	r3, [r7, #0]
}
 80063d0:	bf00      	nop
 80063d2:	e7fe      	b.n	80063d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80063d4:	f001 f8de 	bl	8007594 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80063d8:	4b38      	ldr	r3, [pc, #224]	; (80064bc <xTaskResumeAll+0x114>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3b01      	subs	r3, #1
 80063de:	4a37      	ldr	r2, [pc, #220]	; (80064bc <xTaskResumeAll+0x114>)
 80063e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063e2:	4b36      	ldr	r3, [pc, #216]	; (80064bc <xTaskResumeAll+0x114>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d161      	bne.n	80064ae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063ea:	4b35      	ldr	r3, [pc, #212]	; (80064c0 <xTaskResumeAll+0x118>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d05d      	beq.n	80064ae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063f2:	e02e      	b.n	8006452 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063f4:	4b33      	ldr	r3, [pc, #204]	; (80064c4 <xTaskResumeAll+0x11c>)
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	3318      	adds	r3, #24
 8006400:	4618      	mov	r0, r3
 8006402:	f7ff f92d 	bl	8005660 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	3304      	adds	r3, #4
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff f928 	bl	8005660 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	2201      	movs	r2, #1
 8006416:	409a      	lsls	r2, r3
 8006418:	4b2b      	ldr	r3, [pc, #172]	; (80064c8 <xTaskResumeAll+0x120>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4313      	orrs	r3, r2
 800641e:	4a2a      	ldr	r2, [pc, #168]	; (80064c8 <xTaskResumeAll+0x120>)
 8006420:	6013      	str	r3, [r2, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006426:	4613      	mov	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4a27      	ldr	r2, [pc, #156]	; (80064cc <xTaskResumeAll+0x124>)
 8006430:	441a      	add	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	3304      	adds	r3, #4
 8006436:	4619      	mov	r1, r3
 8006438:	4610      	mov	r0, r2
 800643a:	f7ff f8b4 	bl	80055a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006442:	4b23      	ldr	r3, [pc, #140]	; (80064d0 <xTaskResumeAll+0x128>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006448:	429a      	cmp	r2, r3
 800644a:	d302      	bcc.n	8006452 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800644c:	4b21      	ldr	r3, [pc, #132]	; (80064d4 <xTaskResumeAll+0x12c>)
 800644e:	2201      	movs	r2, #1
 8006450:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006452:	4b1c      	ldr	r3, [pc, #112]	; (80064c4 <xTaskResumeAll+0x11c>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1cc      	bne.n	80063f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d001      	beq.n	8006464 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006460:	f000 fb2e 	bl	8006ac0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006464:	4b1c      	ldr	r3, [pc, #112]	; (80064d8 <xTaskResumeAll+0x130>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d010      	beq.n	8006492 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006470:	f000 f846 	bl	8006500 <xTaskIncrementTick>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d002      	beq.n	8006480 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800647a:	4b16      	ldr	r3, [pc, #88]	; (80064d4 <xTaskResumeAll+0x12c>)
 800647c:	2201      	movs	r2, #1
 800647e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3b01      	subs	r3, #1
 8006484:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1f1      	bne.n	8006470 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800648c:	4b12      	ldr	r3, [pc, #72]	; (80064d8 <xTaskResumeAll+0x130>)
 800648e:	2200      	movs	r2, #0
 8006490:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006492:	4b10      	ldr	r3, [pc, #64]	; (80064d4 <xTaskResumeAll+0x12c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d009      	beq.n	80064ae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800649a:	2301      	movs	r3, #1
 800649c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800649e:	4b0f      	ldr	r3, [pc, #60]	; (80064dc <xTaskResumeAll+0x134>)
 80064a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064a4:	601a      	str	r2, [r3, #0]
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064ae:	f001 f8a1 	bl	80075f4 <vPortExitCritical>

	return xAlreadyYielded;
 80064b2:	68bb      	ldr	r3, [r7, #8]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	20000894 	.word	0x20000894
 80064c0:	2000086c 	.word	0x2000086c
 80064c4:	2000082c 	.word	0x2000082c
 80064c8:	20000874 	.word	0x20000874
 80064cc:	200006bc 	.word	0x200006bc
 80064d0:	200006b8 	.word	0x200006b8
 80064d4:	20000880 	.word	0x20000880
 80064d8:	2000087c 	.word	0x2000087c
 80064dc:	e000ed04 	.word	0xe000ed04

080064e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80064e6:	4b05      	ldr	r3, [pc, #20]	; (80064fc <xTaskGetTickCount+0x1c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80064ec:	687b      	ldr	r3, [r7, #4]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	370c      	adds	r7, #12
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	20000870 	.word	0x20000870

08006500 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006506:	2300      	movs	r3, #0
 8006508:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800650a:	4b4e      	ldr	r3, [pc, #312]	; (8006644 <xTaskIncrementTick+0x144>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	f040 8088 	bne.w	8006624 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006514:	4b4c      	ldr	r3, [pc, #304]	; (8006648 <xTaskIncrementTick+0x148>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3301      	adds	r3, #1
 800651a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800651c:	4a4a      	ldr	r2, [pc, #296]	; (8006648 <xTaskIncrementTick+0x148>)
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d120      	bne.n	800656a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006528:	4b48      	ldr	r3, [pc, #288]	; (800664c <xTaskIncrementTick+0x14c>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <xTaskIncrementTick+0x48>
	__asm volatile
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	603b      	str	r3, [r7, #0]
}
 8006544:	bf00      	nop
 8006546:	e7fe      	b.n	8006546 <xTaskIncrementTick+0x46>
 8006548:	4b40      	ldr	r3, [pc, #256]	; (800664c <xTaskIncrementTick+0x14c>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	60fb      	str	r3, [r7, #12]
 800654e:	4b40      	ldr	r3, [pc, #256]	; (8006650 <xTaskIncrementTick+0x150>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a3e      	ldr	r2, [pc, #248]	; (800664c <xTaskIncrementTick+0x14c>)
 8006554:	6013      	str	r3, [r2, #0]
 8006556:	4a3e      	ldr	r2, [pc, #248]	; (8006650 <xTaskIncrementTick+0x150>)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6013      	str	r3, [r2, #0]
 800655c:	4b3d      	ldr	r3, [pc, #244]	; (8006654 <xTaskIncrementTick+0x154>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	3301      	adds	r3, #1
 8006562:	4a3c      	ldr	r2, [pc, #240]	; (8006654 <xTaskIncrementTick+0x154>)
 8006564:	6013      	str	r3, [r2, #0]
 8006566:	f000 faab 	bl	8006ac0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800656a:	4b3b      	ldr	r3, [pc, #236]	; (8006658 <xTaskIncrementTick+0x158>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	429a      	cmp	r2, r3
 8006572:	d348      	bcc.n	8006606 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006574:	4b35      	ldr	r3, [pc, #212]	; (800664c <xTaskIncrementTick+0x14c>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d104      	bne.n	8006588 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800657e:	4b36      	ldr	r3, [pc, #216]	; (8006658 <xTaskIncrementTick+0x158>)
 8006580:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006584:	601a      	str	r2, [r3, #0]
					break;
 8006586:	e03e      	b.n	8006606 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006588:	4b30      	ldr	r3, [pc, #192]	; (800664c <xTaskIncrementTick+0x14c>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	429a      	cmp	r2, r3
 800659e:	d203      	bcs.n	80065a8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80065a0:	4a2d      	ldr	r2, [pc, #180]	; (8006658 <xTaskIncrementTick+0x158>)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80065a6:	e02e      	b.n	8006606 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	3304      	adds	r3, #4
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7ff f857 	bl	8005660 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d004      	beq.n	80065c4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	3318      	adds	r3, #24
 80065be:	4618      	mov	r0, r3
 80065c0:	f7ff f84e 	bl	8005660 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c8:	2201      	movs	r2, #1
 80065ca:	409a      	lsls	r2, r3
 80065cc:	4b23      	ldr	r3, [pc, #140]	; (800665c <xTaskIncrementTick+0x15c>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	4a22      	ldr	r2, [pc, #136]	; (800665c <xTaskIncrementTick+0x15c>)
 80065d4:	6013      	str	r3, [r2, #0]
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065da:	4613      	mov	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4413      	add	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4a1f      	ldr	r2, [pc, #124]	; (8006660 <xTaskIncrementTick+0x160>)
 80065e4:	441a      	add	r2, r3
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	3304      	adds	r3, #4
 80065ea:	4619      	mov	r1, r3
 80065ec:	4610      	mov	r0, r2
 80065ee:	f7fe ffda 	bl	80055a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f6:	4b1b      	ldr	r3, [pc, #108]	; (8006664 <xTaskIncrementTick+0x164>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d3b9      	bcc.n	8006574 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006600:	2301      	movs	r3, #1
 8006602:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006604:	e7b6      	b.n	8006574 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006606:	4b17      	ldr	r3, [pc, #92]	; (8006664 <xTaskIncrementTick+0x164>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660c:	4914      	ldr	r1, [pc, #80]	; (8006660 <xTaskIncrementTick+0x160>)
 800660e:	4613      	mov	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	440b      	add	r3, r1
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d907      	bls.n	800662e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800661e:	2301      	movs	r3, #1
 8006620:	617b      	str	r3, [r7, #20]
 8006622:	e004      	b.n	800662e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006624:	4b10      	ldr	r3, [pc, #64]	; (8006668 <xTaskIncrementTick+0x168>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3301      	adds	r3, #1
 800662a:	4a0f      	ldr	r2, [pc, #60]	; (8006668 <xTaskIncrementTick+0x168>)
 800662c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800662e:	4b0f      	ldr	r3, [pc, #60]	; (800666c <xTaskIncrementTick+0x16c>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8006636:	2301      	movs	r3, #1
 8006638:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800663a:	697b      	ldr	r3, [r7, #20]
}
 800663c:	4618      	mov	r0, r3
 800663e:	3718      	adds	r7, #24
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	20000894 	.word	0x20000894
 8006648:	20000870 	.word	0x20000870
 800664c:	20000824 	.word	0x20000824
 8006650:	20000828 	.word	0x20000828
 8006654:	20000884 	.word	0x20000884
 8006658:	2000088c 	.word	0x2000088c
 800665c:	20000874 	.word	0x20000874
 8006660:	200006bc 	.word	0x200006bc
 8006664:	200006b8 	.word	0x200006b8
 8006668:	2000087c 	.word	0x2000087c
 800666c:	20000880 	.word	0x20000880

08006670 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006676:	4b27      	ldr	r3, [pc, #156]	; (8006714 <vTaskSwitchContext+0xa4>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800667e:	4b26      	ldr	r3, [pc, #152]	; (8006718 <vTaskSwitchContext+0xa8>)
 8006680:	2201      	movs	r2, #1
 8006682:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006684:	e03f      	b.n	8006706 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006686:	4b24      	ldr	r3, [pc, #144]	; (8006718 <vTaskSwitchContext+0xa8>)
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800668c:	4b23      	ldr	r3, [pc, #140]	; (800671c <vTaskSwitchContext+0xac>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	fab3 f383 	clz	r3, r3
 8006698:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800669a:	7afb      	ldrb	r3, [r7, #11]
 800669c:	f1c3 031f 	rsb	r3, r3, #31
 80066a0:	617b      	str	r3, [r7, #20]
 80066a2:	491f      	ldr	r1, [pc, #124]	; (8006720 <vTaskSwitchContext+0xb0>)
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	4613      	mov	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	440b      	add	r3, r1
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10a      	bne.n	80066cc <vTaskSwitchContext+0x5c>
	__asm volatile
 80066b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ba:	f383 8811 	msr	BASEPRI, r3
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	607b      	str	r3, [r7, #4]
}
 80066c8:	bf00      	nop
 80066ca:	e7fe      	b.n	80066ca <vTaskSwitchContext+0x5a>
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	4613      	mov	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4a12      	ldr	r2, [pc, #72]	; (8006720 <vTaskSwitchContext+0xb0>)
 80066d8:	4413      	add	r3, r2
 80066da:	613b      	str	r3, [r7, #16]
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	685a      	ldr	r2, [r3, #4]
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	605a      	str	r2, [r3, #4]
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	3308      	adds	r3, #8
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d104      	bne.n	80066fc <vTaskSwitchContext+0x8c>
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	605a      	str	r2, [r3, #4]
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	4a08      	ldr	r2, [pc, #32]	; (8006724 <vTaskSwitchContext+0xb4>)
 8006704:	6013      	str	r3, [r2, #0]
}
 8006706:	bf00      	nop
 8006708:	371c      	adds	r7, #28
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	20000894 	.word	0x20000894
 8006718:	20000880 	.word	0x20000880
 800671c:	20000874 	.word	0x20000874
 8006720:	200006bc 	.word	0x200006bc
 8006724:	200006b8 	.word	0x200006b8

08006728 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10a      	bne.n	800674e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673c:	f383 8811 	msr	BASEPRI, r3
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	60fb      	str	r3, [r7, #12]
}
 800674a:	bf00      	nop
 800674c:	e7fe      	b.n	800674c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800674e:	4b07      	ldr	r3, [pc, #28]	; (800676c <vTaskPlaceOnEventList+0x44>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3318      	adds	r3, #24
 8006754:	4619      	mov	r1, r3
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7fe ff49 	bl	80055ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800675c:	2101      	movs	r1, #1
 800675e:	6838      	ldr	r0, [r7, #0]
 8006760:	f000 fa72 	bl	8006c48 <prvAddCurrentTaskToDelayedList>
}
 8006764:	bf00      	nop
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	200006b8 	.word	0x200006b8

08006770 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10a      	bne.n	8006798 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	617b      	str	r3, [r7, #20]
}
 8006794:	bf00      	nop
 8006796:	e7fe      	b.n	8006796 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006798:	4b0a      	ldr	r3, [pc, #40]	; (80067c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3318      	adds	r3, #24
 800679e:	4619      	mov	r1, r3
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f7fe ff00 	bl	80055a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80067ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80067b2:	6879      	ldr	r1, [r7, #4]
 80067b4:	68b8      	ldr	r0, [r7, #8]
 80067b6:	f000 fa47 	bl	8006c48 <prvAddCurrentTaskToDelayedList>
	}
 80067ba:	bf00      	nop
 80067bc:	3718      	adds	r7, #24
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	200006b8 	.word	0x200006b8

080067c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10a      	bne.n	80067f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	60fb      	str	r3, [r7, #12]
}
 80067f0:	bf00      	nop
 80067f2:	e7fe      	b.n	80067f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	3318      	adds	r3, #24
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7fe ff31 	bl	8005660 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067fe:	4b1d      	ldr	r3, [pc, #116]	; (8006874 <xTaskRemoveFromEventList+0xac>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d11c      	bne.n	8006840 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	3304      	adds	r3, #4
 800680a:	4618      	mov	r0, r3
 800680c:	f7fe ff28 	bl	8005660 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006814:	2201      	movs	r2, #1
 8006816:	409a      	lsls	r2, r3
 8006818:	4b17      	ldr	r3, [pc, #92]	; (8006878 <xTaskRemoveFromEventList+0xb0>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4313      	orrs	r3, r2
 800681e:	4a16      	ldr	r2, [pc, #88]	; (8006878 <xTaskRemoveFromEventList+0xb0>)
 8006820:	6013      	str	r3, [r2, #0]
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006826:	4613      	mov	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4413      	add	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4a13      	ldr	r2, [pc, #76]	; (800687c <xTaskRemoveFromEventList+0xb4>)
 8006830:	441a      	add	r2, r3
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	3304      	adds	r3, #4
 8006836:	4619      	mov	r1, r3
 8006838:	4610      	mov	r0, r2
 800683a:	f7fe feb4 	bl	80055a6 <vListInsertEnd>
 800683e:	e005      	b.n	800684c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	3318      	adds	r3, #24
 8006844:	4619      	mov	r1, r3
 8006846:	480e      	ldr	r0, [pc, #56]	; (8006880 <xTaskRemoveFromEventList+0xb8>)
 8006848:	f7fe fead 	bl	80055a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006850:	4b0c      	ldr	r3, [pc, #48]	; (8006884 <xTaskRemoveFromEventList+0xbc>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006856:	429a      	cmp	r2, r3
 8006858:	d905      	bls.n	8006866 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800685a:	2301      	movs	r3, #1
 800685c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800685e:	4b0a      	ldr	r3, [pc, #40]	; (8006888 <xTaskRemoveFromEventList+0xc0>)
 8006860:	2201      	movs	r2, #1
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	e001      	b.n	800686a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006866:	2300      	movs	r3, #0
 8006868:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800686a:	697b      	ldr	r3, [r7, #20]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3718      	adds	r7, #24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	20000894 	.word	0x20000894
 8006878:	20000874 	.word	0x20000874
 800687c:	200006bc 	.word	0x200006bc
 8006880:	2000082c 	.word	0x2000082c
 8006884:	200006b8 	.word	0x200006b8
 8006888:	20000880 	.word	0x20000880

0800688c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006894:	4b06      	ldr	r3, [pc, #24]	; (80068b0 <vTaskInternalSetTimeOutState+0x24>)
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800689c:	4b05      	ldr	r3, [pc, #20]	; (80068b4 <vTaskInternalSetTimeOutState+0x28>)
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	605a      	str	r2, [r3, #4]
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	20000884 	.word	0x20000884
 80068b4:	20000870 	.word	0x20000870

080068b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b088      	sub	sp, #32
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10a      	bne.n	80068de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80068c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068cc:	f383 8811 	msr	BASEPRI, r3
 80068d0:	f3bf 8f6f 	isb	sy
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	613b      	str	r3, [r7, #16]
}
 80068da:	bf00      	nop
 80068dc:	e7fe      	b.n	80068dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10a      	bne.n	80068fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80068e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	60fb      	str	r3, [r7, #12]
}
 80068f6:	bf00      	nop
 80068f8:	e7fe      	b.n	80068f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80068fa:	f000 fe4b 	bl	8007594 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80068fe:	4b1d      	ldr	r3, [pc, #116]	; (8006974 <xTaskCheckForTimeOut+0xbc>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	69ba      	ldr	r2, [r7, #24]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006916:	d102      	bne.n	800691e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006918:	2300      	movs	r3, #0
 800691a:	61fb      	str	r3, [r7, #28]
 800691c:	e023      	b.n	8006966 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	4b15      	ldr	r3, [pc, #84]	; (8006978 <xTaskCheckForTimeOut+0xc0>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	429a      	cmp	r2, r3
 8006928:	d007      	beq.n	800693a <xTaskCheckForTimeOut+0x82>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	69ba      	ldr	r2, [r7, #24]
 8006930:	429a      	cmp	r2, r3
 8006932:	d302      	bcc.n	800693a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006934:	2301      	movs	r3, #1
 8006936:	61fb      	str	r3, [r7, #28]
 8006938:	e015      	b.n	8006966 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	429a      	cmp	r2, r3
 8006942:	d20b      	bcs.n	800695c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	1ad2      	subs	r2, r2, r3
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7ff ff9b 	bl	800688c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006956:	2300      	movs	r3, #0
 8006958:	61fb      	str	r3, [r7, #28]
 800695a:	e004      	b.n	8006966 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	2200      	movs	r2, #0
 8006960:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006962:	2301      	movs	r3, #1
 8006964:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006966:	f000 fe45 	bl	80075f4 <vPortExitCritical>

	return xReturn;
 800696a:	69fb      	ldr	r3, [r7, #28]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3720      	adds	r7, #32
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	20000870 	.word	0x20000870
 8006978:	20000884 	.word	0x20000884

0800697c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800697c:	b480      	push	{r7}
 800697e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006980:	4b03      	ldr	r3, [pc, #12]	; (8006990 <vTaskMissedYield+0x14>)
 8006982:	2201      	movs	r2, #1
 8006984:	601a      	str	r2, [r3, #0]
}
 8006986:	bf00      	nop
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	20000880 	.word	0x20000880

08006994 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800699c:	f000 f852 	bl	8006a44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069a0:	4b06      	ldr	r3, [pc, #24]	; (80069bc <prvIdleTask+0x28>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d9f9      	bls.n	800699c <prvIdleTask+0x8>
			{
				taskYIELD();
 80069a8:	4b05      	ldr	r3, [pc, #20]	; (80069c0 <prvIdleTask+0x2c>)
 80069aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80069b8:	e7f0      	b.n	800699c <prvIdleTask+0x8>
 80069ba:	bf00      	nop
 80069bc:	200006bc 	.word	0x200006bc
 80069c0:	e000ed04 	.word	0xe000ed04

080069c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069ca:	2300      	movs	r3, #0
 80069cc:	607b      	str	r3, [r7, #4]
 80069ce:	e00c      	b.n	80069ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	4613      	mov	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4a12      	ldr	r2, [pc, #72]	; (8006a24 <prvInitialiseTaskLists+0x60>)
 80069dc:	4413      	add	r3, r2
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fe fdb4 	bl	800554c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	3301      	adds	r3, #1
 80069e8:	607b      	str	r3, [r7, #4]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2b0f      	cmp	r3, #15
 80069ee:	d9ef      	bls.n	80069d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80069f0:	480d      	ldr	r0, [pc, #52]	; (8006a28 <prvInitialiseTaskLists+0x64>)
 80069f2:	f7fe fdab 	bl	800554c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80069f6:	480d      	ldr	r0, [pc, #52]	; (8006a2c <prvInitialiseTaskLists+0x68>)
 80069f8:	f7fe fda8 	bl	800554c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80069fc:	480c      	ldr	r0, [pc, #48]	; (8006a30 <prvInitialiseTaskLists+0x6c>)
 80069fe:	f7fe fda5 	bl	800554c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a02:	480c      	ldr	r0, [pc, #48]	; (8006a34 <prvInitialiseTaskLists+0x70>)
 8006a04:	f7fe fda2 	bl	800554c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a08:	480b      	ldr	r0, [pc, #44]	; (8006a38 <prvInitialiseTaskLists+0x74>)
 8006a0a:	f7fe fd9f 	bl	800554c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a0e:	4b0b      	ldr	r3, [pc, #44]	; (8006a3c <prvInitialiseTaskLists+0x78>)
 8006a10:	4a05      	ldr	r2, [pc, #20]	; (8006a28 <prvInitialiseTaskLists+0x64>)
 8006a12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a14:	4b0a      	ldr	r3, [pc, #40]	; (8006a40 <prvInitialiseTaskLists+0x7c>)
 8006a16:	4a05      	ldr	r2, [pc, #20]	; (8006a2c <prvInitialiseTaskLists+0x68>)
 8006a18:	601a      	str	r2, [r3, #0]
}
 8006a1a:	bf00      	nop
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	200006bc 	.word	0x200006bc
 8006a28:	200007fc 	.word	0x200007fc
 8006a2c:	20000810 	.word	0x20000810
 8006a30:	2000082c 	.word	0x2000082c
 8006a34:	20000840 	.word	0x20000840
 8006a38:	20000858 	.word	0x20000858
 8006a3c:	20000824 	.word	0x20000824
 8006a40:	20000828 	.word	0x20000828

08006a44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a4a:	e019      	b.n	8006a80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a4c:	f000 fda2 	bl	8007594 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a50:	4b10      	ldr	r3, [pc, #64]	; (8006a94 <prvCheckTasksWaitingTermination+0x50>)
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7fe fdff 	bl	8005660 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a62:	4b0d      	ldr	r3, [pc, #52]	; (8006a98 <prvCheckTasksWaitingTermination+0x54>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	3b01      	subs	r3, #1
 8006a68:	4a0b      	ldr	r2, [pc, #44]	; (8006a98 <prvCheckTasksWaitingTermination+0x54>)
 8006a6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a6c:	4b0b      	ldr	r3, [pc, #44]	; (8006a9c <prvCheckTasksWaitingTermination+0x58>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3b01      	subs	r3, #1
 8006a72:	4a0a      	ldr	r2, [pc, #40]	; (8006a9c <prvCheckTasksWaitingTermination+0x58>)
 8006a74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a76:	f000 fdbd 	bl	80075f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f810 	bl	8006aa0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a80:	4b06      	ldr	r3, [pc, #24]	; (8006a9c <prvCheckTasksWaitingTermination+0x58>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1e1      	bne.n	8006a4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a88:	bf00      	nop
 8006a8a:	bf00      	nop
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	20000840 	.word	0x20000840
 8006a98:	2000086c 	.word	0x2000086c
 8006a9c:	20000854 	.word	0x20000854

08006aa0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aac:	4618      	mov	r0, r3
 8006aae:	f000 ff57 	bl	8007960 <vPortFree>
			vPortFree( pxTCB );
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 ff54 	bl	8007960 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ab8:	bf00      	nop
 8006aba:	3708      	adds	r7, #8
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ac6:	4b0c      	ldr	r3, [pc, #48]	; (8006af8 <prvResetNextTaskUnblockTime+0x38>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d104      	bne.n	8006ada <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ad0:	4b0a      	ldr	r3, [pc, #40]	; (8006afc <prvResetNextTaskUnblockTime+0x3c>)
 8006ad2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ad6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ad8:	e008      	b.n	8006aec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ada:	4b07      	ldr	r3, [pc, #28]	; (8006af8 <prvResetNextTaskUnblockTime+0x38>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	4a04      	ldr	r2, [pc, #16]	; (8006afc <prvResetNextTaskUnblockTime+0x3c>)
 8006aea:	6013      	str	r3, [r2, #0]
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	20000824 	.word	0x20000824
 8006afc:	2000088c 	.word	0x2000088c

08006b00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b06:	4b0b      	ldr	r3, [pc, #44]	; (8006b34 <xTaskGetSchedulerState+0x34>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d102      	bne.n	8006b14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	607b      	str	r3, [r7, #4]
 8006b12:	e008      	b.n	8006b26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b14:	4b08      	ldr	r3, [pc, #32]	; (8006b38 <xTaskGetSchedulerState+0x38>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d102      	bne.n	8006b22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	607b      	str	r3, [r7, #4]
 8006b20:	e001      	b.n	8006b26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b22:	2300      	movs	r3, #0
 8006b24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b26:	687b      	ldr	r3, [r7, #4]
	}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	20000878 	.word	0x20000878
 8006b38:	20000894 	.word	0x20000894

08006b3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d06e      	beq.n	8006c30 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b52:	4b3a      	ldr	r3, [pc, #232]	; (8006c3c <xTaskPriorityDisinherit+0x100>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d00a      	beq.n	8006b72 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	60fb      	str	r3, [r7, #12]
}
 8006b6e:	bf00      	nop
 8006b70:	e7fe      	b.n	8006b70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10a      	bne.n	8006b90 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	60bb      	str	r3, [r7, #8]
}
 8006b8c:	bf00      	nop
 8006b8e:	e7fe      	b.n	8006b8e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b94:	1e5a      	subs	r2, r3, #1
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d044      	beq.n	8006c30 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d140      	bne.n	8006c30 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	3304      	adds	r3, #4
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7fe fd54 	bl	8005660 <uxListRemove>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d115      	bne.n	8006bea <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc2:	491f      	ldr	r1, [pc, #124]	; (8006c40 <xTaskPriorityDisinherit+0x104>)
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	440b      	add	r3, r1
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10a      	bne.n	8006bea <xTaskPriorityDisinherit+0xae>
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd8:	2201      	movs	r2, #1
 8006bda:	fa02 f303 	lsl.w	r3, r2, r3
 8006bde:	43da      	mvns	r2, r3
 8006be0:	4b18      	ldr	r3, [pc, #96]	; (8006c44 <xTaskPriorityDisinherit+0x108>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4013      	ands	r3, r2
 8006be6:	4a17      	ldr	r2, [pc, #92]	; (8006c44 <xTaskPriorityDisinherit+0x108>)
 8006be8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf6:	f1c3 0210 	rsb	r2, r3, #16
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c02:	2201      	movs	r2, #1
 8006c04:	409a      	lsls	r2, r3
 8006c06:	4b0f      	ldr	r3, [pc, #60]	; (8006c44 <xTaskPriorityDisinherit+0x108>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	4a0d      	ldr	r2, [pc, #52]	; (8006c44 <xTaskPriorityDisinherit+0x108>)
 8006c0e:	6013      	str	r3, [r2, #0]
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c14:	4613      	mov	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4a08      	ldr	r2, [pc, #32]	; (8006c40 <xTaskPriorityDisinherit+0x104>)
 8006c1e:	441a      	add	r2, r3
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	3304      	adds	r3, #4
 8006c24:	4619      	mov	r1, r3
 8006c26:	4610      	mov	r0, r2
 8006c28:	f7fe fcbd 	bl	80055a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c30:	697b      	ldr	r3, [r7, #20]
	}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3718      	adds	r7, #24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	200006b8 	.word	0x200006b8
 8006c40:	200006bc 	.word	0x200006bc
 8006c44:	20000874 	.word	0x20000874

08006c48 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c52:	4b29      	ldr	r3, [pc, #164]	; (8006cf8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c58:	4b28      	ldr	r3, [pc, #160]	; (8006cfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fe fcfe 	bl	8005660 <uxListRemove>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10b      	bne.n	8006c82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006c6a:	4b24      	ldr	r3, [pc, #144]	; (8006cfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c70:	2201      	movs	r2, #1
 8006c72:	fa02 f303 	lsl.w	r3, r2, r3
 8006c76:	43da      	mvns	r2, r3
 8006c78:	4b21      	ldr	r3, [pc, #132]	; (8006d00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	4a20      	ldr	r2, [pc, #128]	; (8006d00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c88:	d10a      	bne.n	8006ca0 <prvAddCurrentTaskToDelayedList+0x58>
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d007      	beq.n	8006ca0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c90:	4b1a      	ldr	r3, [pc, #104]	; (8006cfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	3304      	adds	r3, #4
 8006c96:	4619      	mov	r1, r3
 8006c98:	481a      	ldr	r0, [pc, #104]	; (8006d04 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006c9a:	f7fe fc84 	bl	80055a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c9e:	e026      	b.n	8006cee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ca8:	4b14      	ldr	r3, [pc, #80]	; (8006cfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d209      	bcs.n	8006ccc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cb8:	4b13      	ldr	r3, [pc, #76]	; (8006d08 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	4b0f      	ldr	r3, [pc, #60]	; (8006cfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3304      	adds	r3, #4
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	4610      	mov	r0, r2
 8006cc6:	f7fe fc92 	bl	80055ee <vListInsert>
}
 8006cca:	e010      	b.n	8006cee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ccc:	4b0f      	ldr	r3, [pc, #60]	; (8006d0c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	4b0a      	ldr	r3, [pc, #40]	; (8006cfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	4610      	mov	r0, r2
 8006cda:	f7fe fc88 	bl	80055ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006cde:	4b0c      	ldr	r3, [pc, #48]	; (8006d10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d202      	bcs.n	8006cee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006ce8:	4a09      	ldr	r2, [pc, #36]	; (8006d10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	6013      	str	r3, [r2, #0]
}
 8006cee:	bf00      	nop
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20000870 	.word	0x20000870
 8006cfc:	200006b8 	.word	0x200006b8
 8006d00:	20000874 	.word	0x20000874
 8006d04:	20000858 	.word	0x20000858
 8006d08:	20000828 	.word	0x20000828
 8006d0c:	20000824 	.word	0x20000824
 8006d10:	2000088c 	.word	0x2000088c

08006d14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d1e:	f000 fad5 	bl	80072cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d22:	4b11      	ldr	r3, [pc, #68]	; (8006d68 <xTimerCreateTimerTask+0x54>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00b      	beq.n	8006d42 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8006d2a:	4b10      	ldr	r3, [pc, #64]	; (8006d6c <xTimerCreateTimerTask+0x58>)
 8006d2c:	9301      	str	r3, [sp, #4]
 8006d2e:	2302      	movs	r3, #2
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	2300      	movs	r3, #0
 8006d34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006d38:	490d      	ldr	r1, [pc, #52]	; (8006d70 <xTimerCreateTimerTask+0x5c>)
 8006d3a:	480e      	ldr	r0, [pc, #56]	; (8006d74 <xTimerCreateTimerTask+0x60>)
 8006d3c:	f7ff f966 	bl	800600c <xTaskCreate>
 8006d40:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10a      	bne.n	8006d5e <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8006d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4c:	f383 8811 	msr	BASEPRI, r3
 8006d50:	f3bf 8f6f 	isb	sy
 8006d54:	f3bf 8f4f 	dsb	sy
 8006d58:	603b      	str	r3, [r7, #0]
}
 8006d5a:	bf00      	nop
 8006d5c:	e7fe      	b.n	8006d5c <xTimerCreateTimerTask+0x48>
	return xReturn;
 8006d5e:	687b      	ldr	r3, [r7, #4]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	200008c8 	.word	0x200008c8
 8006d6c:	200008cc 	.word	0x200008cc
 8006d70:	08008710 	.word	0x08008710
 8006d74:	08006ead 	.word	0x08006ead

08006d78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b08a      	sub	sp, #40	; 0x28
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
 8006d84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10a      	bne.n	8006da6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	623b      	str	r3, [r7, #32]
}
 8006da2:	bf00      	nop
 8006da4:	e7fe      	b.n	8006da4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006da6:	4b1a      	ldr	r3, [pc, #104]	; (8006e10 <xTimerGenericCommand+0x98>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d02a      	beq.n	8006e04 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2b05      	cmp	r3, #5
 8006dbe:	dc18      	bgt.n	8006df2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006dc0:	f7ff fe9e 	bl	8006b00 <xTaskGetSchedulerState>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d109      	bne.n	8006dde <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006dca:	4b11      	ldr	r3, [pc, #68]	; (8006e10 <xTimerGenericCommand+0x98>)
 8006dcc:	6818      	ldr	r0, [r3, #0]
 8006dce:	f107 0114 	add.w	r1, r7, #20
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dd6:	f7fe fd35 	bl	8005844 <xQueueGenericSend>
 8006dda:	6278      	str	r0, [r7, #36]	; 0x24
 8006ddc:	e012      	b.n	8006e04 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006dde:	4b0c      	ldr	r3, [pc, #48]	; (8006e10 <xTimerGenericCommand+0x98>)
 8006de0:	6818      	ldr	r0, [r3, #0]
 8006de2:	f107 0114 	add.w	r1, r7, #20
 8006de6:	2300      	movs	r3, #0
 8006de8:	2200      	movs	r2, #0
 8006dea:	f7fe fd2b 	bl	8005844 <xQueueGenericSend>
 8006dee:	6278      	str	r0, [r7, #36]	; 0x24
 8006df0:	e008      	b.n	8006e04 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006df2:	4b07      	ldr	r3, [pc, #28]	; (8006e10 <xTimerGenericCommand+0x98>)
 8006df4:	6818      	ldr	r0, [r3, #0]
 8006df6:	f107 0114 	add.w	r1, r7, #20
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	f7fe fe1f 	bl	8005a40 <xQueueGenericSendFromISR>
 8006e02:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3728      	adds	r7, #40	; 0x28
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	200008c8 	.word	0x200008c8

08006e14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af02      	add	r7, sp, #8
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e1e:	4b22      	ldr	r3, [pc, #136]	; (8006ea8 <prvProcessExpiredTimer+0x94>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	3304      	adds	r3, #4
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fe fc17 	bl	8005660 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e38:	f003 0304 	and.w	r3, r3, #4
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d022      	beq.n	8006e86 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	699a      	ldr	r2, [r3, #24]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	18d1      	adds	r1, r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	6978      	ldr	r0, [r7, #20]
 8006e4e:	f000 f8d1 	bl	8006ff4 <prvInsertTimerInActiveList>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d01f      	beq.n	8006e98 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e58:	2300      	movs	r3, #0
 8006e5a:	9300      	str	r3, [sp, #0]
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	2100      	movs	r1, #0
 8006e62:	6978      	ldr	r0, [r7, #20]
 8006e64:	f7ff ff88 	bl	8006d78 <xTimerGenericCommand>
 8006e68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d113      	bne.n	8006e98 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	60fb      	str	r3, [r7, #12]
}
 8006e82:	bf00      	nop
 8006e84:	e7fe      	b.n	8006e84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e8c:	f023 0301 	bic.w	r3, r3, #1
 8006e90:	b2da      	uxtb	r2, r3
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	6978      	ldr	r0, [r7, #20]
 8006e9e:	4798      	blx	r3
}
 8006ea0:	bf00      	nop
 8006ea2:	3718      	adds	r7, #24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	200008c0 	.word	0x200008c0

08006eac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006eb4:	f107 0308 	add.w	r3, r7, #8
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 f857 	bl	8006f6c <prvGetNextExpireTime>
 8006ebe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 f803 	bl	8006ed0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006eca:	f000 f8d5 	bl	8007078 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ece:	e7f1      	b.n	8006eb4 <prvTimerTask+0x8>

08006ed0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006eda:	f7ff fa57 	bl	800638c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ede:	f107 0308 	add.w	r3, r7, #8
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f000 f866 	bl	8006fb4 <prvSampleTimeNow>
 8006ee8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d130      	bne.n	8006f52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10a      	bne.n	8006f0c <prvProcessTimerOrBlockTask+0x3c>
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d806      	bhi.n	8006f0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006efe:	f7ff fa53 	bl	80063a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f02:	68f9      	ldr	r1, [r7, #12]
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7ff ff85 	bl	8006e14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f0a:	e024      	b.n	8006f56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d008      	beq.n	8006f24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f12:	4b13      	ldr	r3, [pc, #76]	; (8006f60 <prvProcessTimerOrBlockTask+0x90>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d101      	bne.n	8006f20 <prvProcessTimerOrBlockTask+0x50>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e000      	b.n	8006f22 <prvProcessTimerOrBlockTask+0x52>
 8006f20:	2300      	movs	r3, #0
 8006f22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f24:	4b0f      	ldr	r3, [pc, #60]	; (8006f64 <prvProcessTimerOrBlockTask+0x94>)
 8006f26:	6818      	ldr	r0, [r3, #0]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	4619      	mov	r1, r3
 8006f32:	f7ff f837 	bl	8005fa4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f36:	f7ff fa37 	bl	80063a8 <xTaskResumeAll>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10a      	bne.n	8006f56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f40:	4b09      	ldr	r3, [pc, #36]	; (8006f68 <prvProcessTimerOrBlockTask+0x98>)
 8006f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	f3bf 8f6f 	isb	sy
}
 8006f50:	e001      	b.n	8006f56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f52:	f7ff fa29 	bl	80063a8 <xTaskResumeAll>
}
 8006f56:	bf00      	nop
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	200008c4 	.word	0x200008c4
 8006f64:	200008c8 	.word	0x200008c8
 8006f68:	e000ed04 	.word	0xe000ed04

08006f6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f74:	4b0e      	ldr	r3, [pc, #56]	; (8006fb0 <prvGetNextExpireTime+0x44>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <prvGetNextExpireTime+0x16>
 8006f7e:	2201      	movs	r2, #1
 8006f80:	e000      	b.n	8006f84 <prvGetNextExpireTime+0x18>
 8006f82:	2200      	movs	r2, #0
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d105      	bne.n	8006f9c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f90:	4b07      	ldr	r3, [pc, #28]	; (8006fb0 <prvGetNextExpireTime+0x44>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	60fb      	str	r3, [r7, #12]
 8006f9a:	e001      	b.n	8006fa0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3714      	adds	r7, #20
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	200008c0 	.word	0x200008c0

08006fb4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006fbc:	f7ff fa90 	bl	80064e0 <xTaskGetTickCount>
 8006fc0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006fc2:	4b0b      	ldr	r3, [pc, #44]	; (8006ff0 <prvSampleTimeNow+0x3c>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d205      	bcs.n	8006fd8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006fcc:	f000 f91a 	bl	8007204 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	601a      	str	r2, [r3, #0]
 8006fd6:	e002      	b.n	8006fde <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006fde:	4a04      	ldr	r2, [pc, #16]	; (8006ff0 <prvSampleTimeNow+0x3c>)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	200008d0 	.word	0x200008d0

08006ff4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
 8007000:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007002:	2300      	movs	r3, #0
 8007004:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	429a      	cmp	r2, r3
 8007018:	d812      	bhi.n	8007040 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	1ad2      	subs	r2, r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	429a      	cmp	r2, r3
 8007026:	d302      	bcc.n	800702e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007028:	2301      	movs	r3, #1
 800702a:	617b      	str	r3, [r7, #20]
 800702c:	e01b      	b.n	8007066 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800702e:	4b10      	ldr	r3, [pc, #64]	; (8007070 <prvInsertTimerInActiveList+0x7c>)
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	3304      	adds	r3, #4
 8007036:	4619      	mov	r1, r3
 8007038:	4610      	mov	r0, r2
 800703a:	f7fe fad8 	bl	80055ee <vListInsert>
 800703e:	e012      	b.n	8007066 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	429a      	cmp	r2, r3
 8007046:	d206      	bcs.n	8007056 <prvInsertTimerInActiveList+0x62>
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	429a      	cmp	r2, r3
 800704e:	d302      	bcc.n	8007056 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007050:	2301      	movs	r3, #1
 8007052:	617b      	str	r3, [r7, #20]
 8007054:	e007      	b.n	8007066 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007056:	4b07      	ldr	r3, [pc, #28]	; (8007074 <prvInsertTimerInActiveList+0x80>)
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3304      	adds	r3, #4
 800705e:	4619      	mov	r1, r3
 8007060:	4610      	mov	r0, r2
 8007062:	f7fe fac4 	bl	80055ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007066:	697b      	ldr	r3, [r7, #20]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	200008c4 	.word	0x200008c4
 8007074:	200008c0 	.word	0x200008c0

08007078 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b08c      	sub	sp, #48	; 0x30
 800707c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800707e:	e0ae      	b.n	80071de <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	2b00      	cmp	r3, #0
 8007084:	f2c0 80aa 	blt.w	80071dc <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800708c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d004      	beq.n	800709e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007096:	3304      	adds	r3, #4
 8007098:	4618      	mov	r0, r3
 800709a:	f7fe fae1 	bl	8005660 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800709e:	1d3b      	adds	r3, r7, #4
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7ff ff87 	bl	8006fb4 <prvSampleTimeNow>
 80070a6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	2b09      	cmp	r3, #9
 80070ac:	f200 8097 	bhi.w	80071de <prvProcessReceivedCommands+0x166>
 80070b0:	a201      	add	r2, pc, #4	; (adr r2, 80070b8 <prvProcessReceivedCommands+0x40>)
 80070b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b6:	bf00      	nop
 80070b8:	080070e1 	.word	0x080070e1
 80070bc:	080070e1 	.word	0x080070e1
 80070c0:	080070e1 	.word	0x080070e1
 80070c4:	08007155 	.word	0x08007155
 80070c8:	08007169 	.word	0x08007169
 80070cc:	080071b3 	.word	0x080071b3
 80070d0:	080070e1 	.word	0x080070e1
 80070d4:	080070e1 	.word	0x080070e1
 80070d8:	08007155 	.word	0x08007155
 80070dc:	08007169 	.word	0x08007169
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070e6:	f043 0301 	orr.w	r3, r3, #1
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	18d1      	adds	r1, r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6a3a      	ldr	r2, [r7, #32]
 80070fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007100:	f7ff ff78 	bl	8006ff4 <prvInsertTimerInActiveList>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d069      	beq.n	80071de <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007110:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007118:	f003 0304 	and.w	r3, r3, #4
 800711c:	2b00      	cmp	r3, #0
 800711e:	d05e      	beq.n	80071de <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	441a      	add	r2, r3
 8007128:	2300      	movs	r3, #0
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	2300      	movs	r3, #0
 800712e:	2100      	movs	r1, #0
 8007130:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007132:	f7ff fe21 	bl	8006d78 <xTimerGenericCommand>
 8007136:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d14f      	bne.n	80071de <prvProcessReceivedCommands+0x166>
	__asm volatile
 800713e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	61bb      	str	r3, [r7, #24]
}
 8007150:	bf00      	nop
 8007152:	e7fe      	b.n	8007152 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800715a:	f023 0301 	bic.w	r3, r3, #1
 800715e:	b2da      	uxtb	r2, r3
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007166:	e03a      	b.n	80071de <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800716e:	f043 0301 	orr.w	r3, r3, #1
 8007172:	b2da      	uxtb	r2, r3
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10a      	bne.n	800719e <prvProcessReceivedCommands+0x126>
	__asm volatile
 8007188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718c:	f383 8811 	msr	BASEPRI, r3
 8007190:	f3bf 8f6f 	isb	sy
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	617b      	str	r3, [r7, #20]
}
 800719a:	bf00      	nop
 800719c:	e7fe      	b.n	800719c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a0:	699a      	ldr	r2, [r3, #24]
 80071a2:	6a3b      	ldr	r3, [r7, #32]
 80071a4:	18d1      	adds	r1, r2, r3
 80071a6:	6a3b      	ldr	r3, [r7, #32]
 80071a8:	6a3a      	ldr	r2, [r7, #32]
 80071aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071ac:	f7ff ff22 	bl	8006ff4 <prvInsertTimerInActiveList>
					break;
 80071b0:	e015      	b.n	80071de <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d103      	bne.n	80071c8 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 80071c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071c2:	f000 fbcd 	bl	8007960 <vPortFree>
 80071c6:	e00a      	b.n	80071de <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071ce:	f023 0301 	bic.w	r3, r3, #1
 80071d2:	b2da      	uxtb	r2, r3
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80071da:	e000      	b.n	80071de <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80071dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80071de:	4b08      	ldr	r3, [pc, #32]	; (8007200 <prvProcessReceivedCommands+0x188>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f107 0108 	add.w	r1, r7, #8
 80071e6:	2200      	movs	r2, #0
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7fe fcc1 	bl	8005b70 <xQueueReceive>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f47f af45 	bne.w	8007080 <prvProcessReceivedCommands+0x8>
	}
}
 80071f6:	bf00      	nop
 80071f8:	bf00      	nop
 80071fa:	3728      	adds	r7, #40	; 0x28
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	200008c8 	.word	0x200008c8

08007204 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b088      	sub	sp, #32
 8007208:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800720a:	e048      	b.n	800729e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800720c:	4b2d      	ldr	r3, [pc, #180]	; (80072c4 <prvSwitchTimerLists+0xc0>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007216:	4b2b      	ldr	r3, [pc, #172]	; (80072c4 <prvSwitchTimerLists+0xc0>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	3304      	adds	r3, #4
 8007224:	4618      	mov	r0, r3
 8007226:	f7fe fa1b 	bl	8005660 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007238:	f003 0304 	and.w	r3, r3, #4
 800723c:	2b00      	cmp	r3, #0
 800723e:	d02e      	beq.n	800729e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	4413      	add	r3, r2
 8007248:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	429a      	cmp	r2, r3
 8007250:	d90e      	bls.n	8007270 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800725e:	4b19      	ldr	r3, [pc, #100]	; (80072c4 <prvSwitchTimerLists+0xc0>)
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	3304      	adds	r3, #4
 8007266:	4619      	mov	r1, r3
 8007268:	4610      	mov	r0, r2
 800726a:	f7fe f9c0 	bl	80055ee <vListInsert>
 800726e:	e016      	b.n	800729e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007270:	2300      	movs	r3, #0
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	2300      	movs	r3, #0
 8007276:	693a      	ldr	r2, [r7, #16]
 8007278:	2100      	movs	r1, #0
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f7ff fd7c 	bl	8006d78 <xTimerGenericCommand>
 8007280:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10a      	bne.n	800729e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728c:	f383 8811 	msr	BASEPRI, r3
 8007290:	f3bf 8f6f 	isb	sy
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	603b      	str	r3, [r7, #0]
}
 800729a:	bf00      	nop
 800729c:	e7fe      	b.n	800729c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800729e:	4b09      	ldr	r3, [pc, #36]	; (80072c4 <prvSwitchTimerLists+0xc0>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1b1      	bne.n	800720c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80072a8:	4b06      	ldr	r3, [pc, #24]	; (80072c4 <prvSwitchTimerLists+0xc0>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80072ae:	4b06      	ldr	r3, [pc, #24]	; (80072c8 <prvSwitchTimerLists+0xc4>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a04      	ldr	r2, [pc, #16]	; (80072c4 <prvSwitchTimerLists+0xc0>)
 80072b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80072b6:	4a04      	ldr	r2, [pc, #16]	; (80072c8 <prvSwitchTimerLists+0xc4>)
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	6013      	str	r3, [r2, #0]
}
 80072bc:	bf00      	nop
 80072be:	3718      	adds	r7, #24
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	200008c0 	.word	0x200008c0
 80072c8:	200008c4 	.word	0x200008c4

080072cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80072d0:	f000 f960 	bl	8007594 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80072d4:	4b12      	ldr	r3, [pc, #72]	; (8007320 <prvCheckForValidListAndQueue+0x54>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d11d      	bne.n	8007318 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80072dc:	4811      	ldr	r0, [pc, #68]	; (8007324 <prvCheckForValidListAndQueue+0x58>)
 80072de:	f7fe f935 	bl	800554c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80072e2:	4811      	ldr	r0, [pc, #68]	; (8007328 <prvCheckForValidListAndQueue+0x5c>)
 80072e4:	f7fe f932 	bl	800554c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80072e8:	4b10      	ldr	r3, [pc, #64]	; (800732c <prvCheckForValidListAndQueue+0x60>)
 80072ea:	4a0e      	ldr	r2, [pc, #56]	; (8007324 <prvCheckForValidListAndQueue+0x58>)
 80072ec:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80072ee:	4b10      	ldr	r3, [pc, #64]	; (8007330 <prvCheckForValidListAndQueue+0x64>)
 80072f0:	4a0d      	ldr	r2, [pc, #52]	; (8007328 <prvCheckForValidListAndQueue+0x5c>)
 80072f2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80072f4:	2200      	movs	r2, #0
 80072f6:	210c      	movs	r1, #12
 80072f8:	200a      	movs	r0, #10
 80072fa:	f7fe fa43 	bl	8005784 <xQueueGenericCreate>
 80072fe:	4603      	mov	r3, r0
 8007300:	4a07      	ldr	r2, [pc, #28]	; (8007320 <prvCheckForValidListAndQueue+0x54>)
 8007302:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007304:	4b06      	ldr	r3, [pc, #24]	; (8007320 <prvCheckForValidListAndQueue+0x54>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d005      	beq.n	8007318 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800730c:	4b04      	ldr	r3, [pc, #16]	; (8007320 <prvCheckForValidListAndQueue+0x54>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4908      	ldr	r1, [pc, #32]	; (8007334 <prvCheckForValidListAndQueue+0x68>)
 8007312:	4618      	mov	r0, r3
 8007314:	f7fe fe1c 	bl	8005f50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007318:	f000 f96c 	bl	80075f4 <vPortExitCritical>
}
 800731c:	bf00      	nop
 800731e:	bd80      	pop	{r7, pc}
 8007320:	200008c8 	.word	0x200008c8
 8007324:	20000898 	.word	0x20000898
 8007328:	200008ac 	.word	0x200008ac
 800732c:	200008c0 	.word	0x200008c0
 8007330:	200008c4 	.word	0x200008c4
 8007334:	08008718 	.word	0x08008718

08007338 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	3b04      	subs	r3, #4
 8007348:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	3b04      	subs	r3, #4
 8007356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	f023 0201 	bic.w	r2, r3, #1
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3b04      	subs	r3, #4
 8007366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007368:	4a0c      	ldr	r2, [pc, #48]	; (800739c <pxPortInitialiseStack+0x64>)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3b14      	subs	r3, #20
 8007372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	3b04      	subs	r3, #4
 800737e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f06f 0202 	mvn.w	r2, #2
 8007386:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	3b20      	subs	r3, #32
 800738c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800738e:	68fb      	ldr	r3, [r7, #12]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	080073a1 	.word	0x080073a1

080073a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80073a6:	2300      	movs	r3, #0
 80073a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80073aa:	4b12      	ldr	r3, [pc, #72]	; (80073f4 <prvTaskExitError+0x54>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073b2:	d00a      	beq.n	80073ca <prvTaskExitError+0x2a>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	60fb      	str	r3, [r7, #12]
}
 80073c6:	bf00      	nop
 80073c8:	e7fe      	b.n	80073c8 <prvTaskExitError+0x28>
	__asm volatile
 80073ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	60bb      	str	r3, [r7, #8]
}
 80073dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073de:	bf00      	nop
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d0fc      	beq.n	80073e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80073e6:	bf00      	nop
 80073e8:	bf00      	nop
 80073ea:	3714      	adds	r7, #20
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr
 80073f4:	20000048 	.word	0x20000048
	...

08007400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007400:	4b07      	ldr	r3, [pc, #28]	; (8007420 <pxCurrentTCBConst2>)
 8007402:	6819      	ldr	r1, [r3, #0]
 8007404:	6808      	ldr	r0, [r1, #0]
 8007406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800740a:	f380 8809 	msr	PSP, r0
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f04f 0000 	mov.w	r0, #0
 8007416:	f380 8811 	msr	BASEPRI, r0
 800741a:	4770      	bx	lr
 800741c:	f3af 8000 	nop.w

08007420 <pxCurrentTCBConst2>:
 8007420:	200006b8 	.word	0x200006b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007424:	bf00      	nop
 8007426:	bf00      	nop

08007428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007428:	4808      	ldr	r0, [pc, #32]	; (800744c <prvPortStartFirstTask+0x24>)
 800742a:	6800      	ldr	r0, [r0, #0]
 800742c:	6800      	ldr	r0, [r0, #0]
 800742e:	f380 8808 	msr	MSP, r0
 8007432:	f04f 0000 	mov.w	r0, #0
 8007436:	f380 8814 	msr	CONTROL, r0
 800743a:	b662      	cpsie	i
 800743c:	b661      	cpsie	f
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	df00      	svc	0
 8007448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800744a:	bf00      	nop
 800744c:	e000ed08 	.word	0xe000ed08

08007450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007456:	4b46      	ldr	r3, [pc, #280]	; (8007570 <xPortStartScheduler+0x120>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a46      	ldr	r2, [pc, #280]	; (8007574 <xPortStartScheduler+0x124>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d10a      	bne.n	8007476 <xPortStartScheduler+0x26>
	__asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	613b      	str	r3, [r7, #16]
}
 8007472:	bf00      	nop
 8007474:	e7fe      	b.n	8007474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007476:	4b3e      	ldr	r3, [pc, #248]	; (8007570 <xPortStartScheduler+0x120>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a3f      	ldr	r2, [pc, #252]	; (8007578 <xPortStartScheduler+0x128>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d10a      	bne.n	8007496 <xPortStartScheduler+0x46>
	__asm volatile
 8007480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	60fb      	str	r3, [r7, #12]
}
 8007492:	bf00      	nop
 8007494:	e7fe      	b.n	8007494 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007496:	4b39      	ldr	r3, [pc, #228]	; (800757c <xPortStartScheduler+0x12c>)
 8007498:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	22ff      	movs	r2, #255	; 0xff
 80074a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80074b0:	78fb      	ldrb	r3, [r7, #3]
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	4b31      	ldr	r3, [pc, #196]	; (8007580 <xPortStartScheduler+0x130>)
 80074bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80074be:	4b31      	ldr	r3, [pc, #196]	; (8007584 <xPortStartScheduler+0x134>)
 80074c0:	2207      	movs	r2, #7
 80074c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074c4:	e009      	b.n	80074da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80074c6:	4b2f      	ldr	r3, [pc, #188]	; (8007584 <xPortStartScheduler+0x134>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	4a2d      	ldr	r2, [pc, #180]	; (8007584 <xPortStartScheduler+0x134>)
 80074ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80074d0:	78fb      	ldrb	r3, [r7, #3]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074da:	78fb      	ldrb	r3, [r7, #3]
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e2:	2b80      	cmp	r3, #128	; 0x80
 80074e4:	d0ef      	beq.n	80074c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80074e6:	4b27      	ldr	r3, [pc, #156]	; (8007584 <xPortStartScheduler+0x134>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f1c3 0307 	rsb	r3, r3, #7
 80074ee:	2b04      	cmp	r3, #4
 80074f0:	d00a      	beq.n	8007508 <xPortStartScheduler+0xb8>
	__asm volatile
 80074f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	60bb      	str	r3, [r7, #8]
}
 8007504:	bf00      	nop
 8007506:	e7fe      	b.n	8007506 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007508:	4b1e      	ldr	r3, [pc, #120]	; (8007584 <xPortStartScheduler+0x134>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	021b      	lsls	r3, r3, #8
 800750e:	4a1d      	ldr	r2, [pc, #116]	; (8007584 <xPortStartScheduler+0x134>)
 8007510:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007512:	4b1c      	ldr	r3, [pc, #112]	; (8007584 <xPortStartScheduler+0x134>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800751a:	4a1a      	ldr	r2, [pc, #104]	; (8007584 <xPortStartScheduler+0x134>)
 800751c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	b2da      	uxtb	r2, r3
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007526:	4b18      	ldr	r3, [pc, #96]	; (8007588 <xPortStartScheduler+0x138>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a17      	ldr	r2, [pc, #92]	; (8007588 <xPortStartScheduler+0x138>)
 800752c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007530:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007532:	4b15      	ldr	r3, [pc, #84]	; (8007588 <xPortStartScheduler+0x138>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a14      	ldr	r2, [pc, #80]	; (8007588 <xPortStartScheduler+0x138>)
 8007538:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800753c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800753e:	f000 f8dd 	bl	80076fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007542:	4b12      	ldr	r3, [pc, #72]	; (800758c <xPortStartScheduler+0x13c>)
 8007544:	2200      	movs	r2, #0
 8007546:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007548:	f000 f8fc 	bl	8007744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800754c:	4b10      	ldr	r3, [pc, #64]	; (8007590 <xPortStartScheduler+0x140>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a0f      	ldr	r2, [pc, #60]	; (8007590 <xPortStartScheduler+0x140>)
 8007552:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007556:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007558:	f7ff ff66 	bl	8007428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800755c:	f7ff f888 	bl	8006670 <vTaskSwitchContext>
	prvTaskExitError();
 8007560:	f7ff ff1e 	bl	80073a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3718      	adds	r7, #24
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	e000ed00 	.word	0xe000ed00
 8007574:	410fc271 	.word	0x410fc271
 8007578:	410fc270 	.word	0x410fc270
 800757c:	e000e400 	.word	0xe000e400
 8007580:	200008d4 	.word	0x200008d4
 8007584:	200008d8 	.word	0x200008d8
 8007588:	e000ed20 	.word	0xe000ed20
 800758c:	20000048 	.word	0x20000048
 8007590:	e000ef34 	.word	0xe000ef34

08007594 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
	__asm volatile
 800759a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759e:	f383 8811 	msr	BASEPRI, r3
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	607b      	str	r3, [r7, #4]
}
 80075ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80075ae:	4b0f      	ldr	r3, [pc, #60]	; (80075ec <vPortEnterCritical+0x58>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3301      	adds	r3, #1
 80075b4:	4a0d      	ldr	r2, [pc, #52]	; (80075ec <vPortEnterCritical+0x58>)
 80075b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075b8:	4b0c      	ldr	r3, [pc, #48]	; (80075ec <vPortEnterCritical+0x58>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d10f      	bne.n	80075e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075c0:	4b0b      	ldr	r3, [pc, #44]	; (80075f0 <vPortEnterCritical+0x5c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00a      	beq.n	80075e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	603b      	str	r3, [r7, #0]
}
 80075dc:	bf00      	nop
 80075de:	e7fe      	b.n	80075de <vPortEnterCritical+0x4a>
	}
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	20000048 	.word	0x20000048
 80075f0:	e000ed04 	.word	0xe000ed04

080075f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80075fa:	4b12      	ldr	r3, [pc, #72]	; (8007644 <vPortExitCritical+0x50>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10a      	bne.n	8007618 <vPortExitCritical+0x24>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	607b      	str	r3, [r7, #4]
}
 8007614:	bf00      	nop
 8007616:	e7fe      	b.n	8007616 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007618:	4b0a      	ldr	r3, [pc, #40]	; (8007644 <vPortExitCritical+0x50>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3b01      	subs	r3, #1
 800761e:	4a09      	ldr	r2, [pc, #36]	; (8007644 <vPortExitCritical+0x50>)
 8007620:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007622:	4b08      	ldr	r3, [pc, #32]	; (8007644 <vPortExitCritical+0x50>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d105      	bne.n	8007636 <vPortExitCritical+0x42>
 800762a:	2300      	movs	r3, #0
 800762c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	f383 8811 	msr	BASEPRI, r3
}
 8007634:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007636:	bf00      	nop
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	20000048 	.word	0x20000048
	...

08007650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007650:	f3ef 8009 	mrs	r0, PSP
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	4b15      	ldr	r3, [pc, #84]	; (80076b0 <pxCurrentTCBConst>)
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	f01e 0f10 	tst.w	lr, #16
 8007660:	bf08      	it	eq
 8007662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766a:	6010      	str	r0, [r2, #0]
 800766c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007670:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007674:	f380 8811 	msr	BASEPRI, r0
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f7fe fff6 	bl	8006670 <vTaskSwitchContext>
 8007684:	f04f 0000 	mov.w	r0, #0
 8007688:	f380 8811 	msr	BASEPRI, r0
 800768c:	bc09      	pop	{r0, r3}
 800768e:	6819      	ldr	r1, [r3, #0]
 8007690:	6808      	ldr	r0, [r1, #0]
 8007692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007696:	f01e 0f10 	tst.w	lr, #16
 800769a:	bf08      	it	eq
 800769c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80076a0:	f380 8809 	msr	PSP, r0
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	f3af 8000 	nop.w

080076b0 <pxCurrentTCBConst>:
 80076b0:	200006b8 	.word	0x200006b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop

080076b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
	__asm volatile
 80076be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	607b      	str	r3, [r7, #4]
}
 80076d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80076d2:	f7fe ff15 	bl	8006500 <xTaskIncrementTick>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d003      	beq.n	80076e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076dc:	4b06      	ldr	r3, [pc, #24]	; (80076f8 <SysTick_Handler+0x40>)
 80076de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	2300      	movs	r3, #0
 80076e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	f383 8811 	msr	BASEPRI, r3
}
 80076ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80076f0:	bf00      	nop
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	e000ed04 	.word	0xe000ed04

080076fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076fc:	b480      	push	{r7}
 80076fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007700:	4b0b      	ldr	r3, [pc, #44]	; (8007730 <vPortSetupTimerInterrupt+0x34>)
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007706:	4b0b      	ldr	r3, [pc, #44]	; (8007734 <vPortSetupTimerInterrupt+0x38>)
 8007708:	2200      	movs	r2, #0
 800770a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800770c:	4b0a      	ldr	r3, [pc, #40]	; (8007738 <vPortSetupTimerInterrupt+0x3c>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a0a      	ldr	r2, [pc, #40]	; (800773c <vPortSetupTimerInterrupt+0x40>)
 8007712:	fba2 2303 	umull	r2, r3, r2, r3
 8007716:	099b      	lsrs	r3, r3, #6
 8007718:	4a09      	ldr	r2, [pc, #36]	; (8007740 <vPortSetupTimerInterrupt+0x44>)
 800771a:	3b01      	subs	r3, #1
 800771c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800771e:	4b04      	ldr	r3, [pc, #16]	; (8007730 <vPortSetupTimerInterrupt+0x34>)
 8007720:	2207      	movs	r2, #7
 8007722:	601a      	str	r2, [r3, #0]
}
 8007724:	bf00      	nop
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	e000e010 	.word	0xe000e010
 8007734:	e000e018 	.word	0xe000e018
 8007738:	20000024 	.word	0x20000024
 800773c:	10624dd3 	.word	0x10624dd3
 8007740:	e000e014 	.word	0xe000e014

08007744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007744:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007754 <vPortEnableVFP+0x10>
 8007748:	6801      	ldr	r1, [r0, #0]
 800774a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800774e:	6001      	str	r1, [r0, #0]
 8007750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007752:	bf00      	nop
 8007754:	e000ed88 	.word	0xe000ed88

08007758 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800775e:	f3ef 8305 	mrs	r3, IPSR
 8007762:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2b0f      	cmp	r3, #15
 8007768:	d914      	bls.n	8007794 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800776a:	4a17      	ldr	r2, [pc, #92]	; (80077c8 <vPortValidateInterruptPriority+0x70>)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4413      	add	r3, r2
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007774:	4b15      	ldr	r3, [pc, #84]	; (80077cc <vPortValidateInterruptPriority+0x74>)
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	7afa      	ldrb	r2, [r7, #11]
 800777a:	429a      	cmp	r2, r3
 800777c:	d20a      	bcs.n	8007794 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	607b      	str	r3, [r7, #4]
}
 8007790:	bf00      	nop
 8007792:	e7fe      	b.n	8007792 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007794:	4b0e      	ldr	r3, [pc, #56]	; (80077d0 <vPortValidateInterruptPriority+0x78>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800779c:	4b0d      	ldr	r3, [pc, #52]	; (80077d4 <vPortValidateInterruptPriority+0x7c>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d90a      	bls.n	80077ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80077a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a8:	f383 8811 	msr	BASEPRI, r3
 80077ac:	f3bf 8f6f 	isb	sy
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	603b      	str	r3, [r7, #0]
}
 80077b6:	bf00      	nop
 80077b8:	e7fe      	b.n	80077b8 <vPortValidateInterruptPriority+0x60>
	}
 80077ba:	bf00      	nop
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	e000e3f0 	.word	0xe000e3f0
 80077cc:	200008d4 	.word	0x200008d4
 80077d0:	e000ed0c 	.word	0xe000ed0c
 80077d4:	200008d8 	.word	0x200008d8

080077d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b08a      	sub	sp, #40	; 0x28
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80077e0:	2300      	movs	r3, #0
 80077e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80077e4:	f7fe fdd2 	bl	800638c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80077e8:	4b58      	ldr	r3, [pc, #352]	; (800794c <pvPortMalloc+0x174>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d101      	bne.n	80077f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077f0:	f000 f910 	bl	8007a14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077f4:	4b56      	ldr	r3, [pc, #344]	; (8007950 <pvPortMalloc+0x178>)
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4013      	ands	r3, r2
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f040 808e 	bne.w	800791e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d01d      	beq.n	8007844 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007808:	2208      	movs	r2, #8
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4413      	add	r3, r2
 800780e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f003 0307 	and.w	r3, r3, #7
 8007816:	2b00      	cmp	r3, #0
 8007818:	d014      	beq.n	8007844 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f023 0307 	bic.w	r3, r3, #7
 8007820:	3308      	adds	r3, #8
 8007822:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f003 0307 	and.w	r3, r3, #7
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00a      	beq.n	8007844 <pvPortMalloc+0x6c>
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	617b      	str	r3, [r7, #20]
}
 8007840:	bf00      	nop
 8007842:	e7fe      	b.n	8007842 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d069      	beq.n	800791e <pvPortMalloc+0x146>
 800784a:	4b42      	ldr	r3, [pc, #264]	; (8007954 <pvPortMalloc+0x17c>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	429a      	cmp	r2, r3
 8007852:	d864      	bhi.n	800791e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007854:	4b40      	ldr	r3, [pc, #256]	; (8007958 <pvPortMalloc+0x180>)
 8007856:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007858:	4b3f      	ldr	r3, [pc, #252]	; (8007958 <pvPortMalloc+0x180>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800785e:	e004      	b.n	800786a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	429a      	cmp	r2, r3
 8007872:	d903      	bls.n	800787c <pvPortMalloc+0xa4>
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1f1      	bne.n	8007860 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800787c:	4b33      	ldr	r3, [pc, #204]	; (800794c <pvPortMalloc+0x174>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007882:	429a      	cmp	r2, r3
 8007884:	d04b      	beq.n	800791e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007886:	6a3b      	ldr	r3, [r7, #32]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2208      	movs	r2, #8
 800788c:	4413      	add	r3, r2
 800788e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	1ad2      	subs	r2, r2, r3
 80078a0:	2308      	movs	r3, #8
 80078a2:	005b      	lsls	r3, r3, #1
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d91f      	bls.n	80078e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80078a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4413      	add	r3, r2
 80078ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	f003 0307 	and.w	r3, r3, #7
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00a      	beq.n	80078d0 <pvPortMalloc+0xf8>
	__asm volatile
 80078ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078be:	f383 8811 	msr	BASEPRI, r3
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	613b      	str	r3, [r7, #16]
}
 80078cc:	bf00      	nop
 80078ce:	e7fe      	b.n	80078ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d2:	685a      	ldr	r2, [r3, #4]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	1ad2      	subs	r2, r2, r3
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80078e2:	69b8      	ldr	r0, [r7, #24]
 80078e4:	f000 f8f8 	bl	8007ad8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078e8:	4b1a      	ldr	r3, [pc, #104]	; (8007954 <pvPortMalloc+0x17c>)
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	4a18      	ldr	r2, [pc, #96]	; (8007954 <pvPortMalloc+0x17c>)
 80078f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078f6:	4b17      	ldr	r3, [pc, #92]	; (8007954 <pvPortMalloc+0x17c>)
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	4b18      	ldr	r3, [pc, #96]	; (800795c <pvPortMalloc+0x184>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d203      	bcs.n	800790a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007902:	4b14      	ldr	r3, [pc, #80]	; (8007954 <pvPortMalloc+0x17c>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a15      	ldr	r2, [pc, #84]	; (800795c <pvPortMalloc+0x184>)
 8007908:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	685a      	ldr	r2, [r3, #4]
 800790e:	4b10      	ldr	r3, [pc, #64]	; (8007950 <pvPortMalloc+0x178>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	431a      	orrs	r2, r3
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791a:	2200      	movs	r2, #0
 800791c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800791e:	f7fe fd43 	bl	80063a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	f003 0307 	and.w	r3, r3, #7
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00a      	beq.n	8007942 <pvPortMalloc+0x16a>
	__asm volatile
 800792c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007930:	f383 8811 	msr	BASEPRI, r3
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	f3bf 8f4f 	dsb	sy
 800793c:	60fb      	str	r3, [r7, #12]
}
 800793e:	bf00      	nop
 8007940:	e7fe      	b.n	8007940 <pvPortMalloc+0x168>
	return pvReturn;
 8007942:	69fb      	ldr	r3, [r7, #28]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3728      	adds	r7, #40	; 0x28
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	200134e4 	.word	0x200134e4
 8007950:	200134f0 	.word	0x200134f0
 8007954:	200134e8 	.word	0x200134e8
 8007958:	200134dc 	.word	0x200134dc
 800795c:	200134ec 	.word	0x200134ec

08007960 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d048      	beq.n	8007a04 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007972:	2308      	movs	r3, #8
 8007974:	425b      	negs	r3, r3
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	4413      	add	r3, r2
 800797a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	685a      	ldr	r2, [r3, #4]
 8007984:	4b21      	ldr	r3, [pc, #132]	; (8007a0c <vPortFree+0xac>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4013      	ands	r3, r2
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10a      	bne.n	80079a4 <vPortFree+0x44>
	__asm volatile
 800798e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	60fb      	str	r3, [r7, #12]
}
 80079a0:	bf00      	nop
 80079a2:	e7fe      	b.n	80079a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00a      	beq.n	80079c2 <vPortFree+0x62>
	__asm volatile
 80079ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b0:	f383 8811 	msr	BASEPRI, r3
 80079b4:	f3bf 8f6f 	isb	sy
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	60bb      	str	r3, [r7, #8]
}
 80079be:	bf00      	nop
 80079c0:	e7fe      	b.n	80079c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	4b11      	ldr	r3, [pc, #68]	; (8007a0c <vPortFree+0xac>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4013      	ands	r3, r2
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d019      	beq.n	8007a04 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d115      	bne.n	8007a04 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	4b0b      	ldr	r3, [pc, #44]	; (8007a0c <vPortFree+0xac>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	43db      	mvns	r3, r3
 80079e2:	401a      	ands	r2, r3
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80079e8:	f7fe fcd0 	bl	800638c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	4b07      	ldr	r3, [pc, #28]	; (8007a10 <vPortFree+0xb0>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4413      	add	r3, r2
 80079f6:	4a06      	ldr	r2, [pc, #24]	; (8007a10 <vPortFree+0xb0>)
 80079f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079fa:	6938      	ldr	r0, [r7, #16]
 80079fc:	f000 f86c 	bl	8007ad8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007a00:	f7fe fcd2 	bl	80063a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a04:	bf00      	nop
 8007a06:	3718      	adds	r7, #24
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	200134f0 	.word	0x200134f0
 8007a10:	200134e8 	.word	0x200134e8

08007a14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a1a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8007a1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a20:	4b27      	ldr	r3, [pc, #156]	; (8007ac0 <prvHeapInit+0xac>)
 8007a22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f003 0307 	and.w	r3, r3, #7
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00c      	beq.n	8007a48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	3307      	adds	r3, #7
 8007a32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f023 0307 	bic.w	r3, r3, #7
 8007a3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	4a1f      	ldr	r2, [pc, #124]	; (8007ac0 <prvHeapInit+0xac>)
 8007a44:	4413      	add	r3, r2
 8007a46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a4c:	4a1d      	ldr	r2, [pc, #116]	; (8007ac4 <prvHeapInit+0xb0>)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a52:	4b1c      	ldr	r3, [pc, #112]	; (8007ac4 <prvHeapInit+0xb0>)
 8007a54:	2200      	movs	r2, #0
 8007a56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a60:	2208      	movs	r2, #8
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	1a9b      	subs	r3, r3, r2
 8007a66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f023 0307 	bic.w	r3, r3, #7
 8007a6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	4a15      	ldr	r2, [pc, #84]	; (8007ac8 <prvHeapInit+0xb4>)
 8007a74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a76:	4b14      	ldr	r3, [pc, #80]	; (8007ac8 <prvHeapInit+0xb4>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a7e:	4b12      	ldr	r3, [pc, #72]	; (8007ac8 <prvHeapInit+0xb4>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2200      	movs	r2, #0
 8007a84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	1ad2      	subs	r2, r2, r3
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a94:	4b0c      	ldr	r3, [pc, #48]	; (8007ac8 <prvHeapInit+0xb4>)
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	4a0a      	ldr	r2, [pc, #40]	; (8007acc <prvHeapInit+0xb8>)
 8007aa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	4a09      	ldr	r2, [pc, #36]	; (8007ad0 <prvHeapInit+0xbc>)
 8007aaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007aac:	4b09      	ldr	r3, [pc, #36]	; (8007ad4 <prvHeapInit+0xc0>)
 8007aae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ab2:	601a      	str	r2, [r3, #0]
}
 8007ab4:	bf00      	nop
 8007ab6:	3714      	adds	r7, #20
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr
 8007ac0:	200008dc 	.word	0x200008dc
 8007ac4:	200134dc 	.word	0x200134dc
 8007ac8:	200134e4 	.word	0x200134e4
 8007acc:	200134ec 	.word	0x200134ec
 8007ad0:	200134e8 	.word	0x200134e8
 8007ad4:	200134f0 	.word	0x200134f0

08007ad8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ae0:	4b28      	ldr	r3, [pc, #160]	; (8007b84 <prvInsertBlockIntoFreeList+0xac>)
 8007ae2:	60fb      	str	r3, [r7, #12]
 8007ae4:	e002      	b.n	8007aec <prvInsertBlockIntoFreeList+0x14>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	60fb      	str	r3, [r7, #12]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d8f7      	bhi.n	8007ae6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	4413      	add	r3, r2
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d108      	bne.n	8007b1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	685a      	ldr	r2, [r3, #4]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	441a      	add	r2, r3
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	441a      	add	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d118      	bne.n	8007b60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	4b15      	ldr	r3, [pc, #84]	; (8007b88 <prvInsertBlockIntoFreeList+0xb0>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d00d      	beq.n	8007b56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685a      	ldr	r2, [r3, #4]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	441a      	add	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	601a      	str	r2, [r3, #0]
 8007b54:	e008      	b.n	8007b68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b56:	4b0c      	ldr	r3, [pc, #48]	; (8007b88 <prvInsertBlockIntoFreeList+0xb0>)
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	601a      	str	r2, [r3, #0]
 8007b5e:	e003      	b.n	8007b68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d002      	beq.n	8007b76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b76:	bf00      	nop
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	200134dc 	.word	0x200134dc
 8007b88:	200134e4 	.word	0x200134e4

08007b8c <__errno>:
 8007b8c:	4b01      	ldr	r3, [pc, #4]	; (8007b94 <__errno+0x8>)
 8007b8e:	6818      	ldr	r0, [r3, #0]
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	2000004c 	.word	0x2000004c

08007b98 <__libc_init_array>:
 8007b98:	b570      	push	{r4, r5, r6, lr}
 8007b9a:	4d0d      	ldr	r5, [pc, #52]	; (8007bd0 <__libc_init_array+0x38>)
 8007b9c:	4c0d      	ldr	r4, [pc, #52]	; (8007bd4 <__libc_init_array+0x3c>)
 8007b9e:	1b64      	subs	r4, r4, r5
 8007ba0:	10a4      	asrs	r4, r4, #2
 8007ba2:	2600      	movs	r6, #0
 8007ba4:	42a6      	cmp	r6, r4
 8007ba6:	d109      	bne.n	8007bbc <__libc_init_array+0x24>
 8007ba8:	4d0b      	ldr	r5, [pc, #44]	; (8007bd8 <__libc_init_array+0x40>)
 8007baa:	4c0c      	ldr	r4, [pc, #48]	; (8007bdc <__libc_init_array+0x44>)
 8007bac:	f000 fc8e 	bl	80084cc <_init>
 8007bb0:	1b64      	subs	r4, r4, r5
 8007bb2:	10a4      	asrs	r4, r4, #2
 8007bb4:	2600      	movs	r6, #0
 8007bb6:	42a6      	cmp	r6, r4
 8007bb8:	d105      	bne.n	8007bc6 <__libc_init_array+0x2e>
 8007bba:	bd70      	pop	{r4, r5, r6, pc}
 8007bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bc0:	4798      	blx	r3
 8007bc2:	3601      	adds	r6, #1
 8007bc4:	e7ee      	b.n	8007ba4 <__libc_init_array+0xc>
 8007bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bca:	4798      	blx	r3
 8007bcc:	3601      	adds	r6, #1
 8007bce:	e7f2      	b.n	8007bb6 <__libc_init_array+0x1e>
 8007bd0:	08008954 	.word	0x08008954
 8007bd4:	08008954 	.word	0x08008954
 8007bd8:	08008954 	.word	0x08008954
 8007bdc:	08008958 	.word	0x08008958

08007be0 <memcpy>:
 8007be0:	440a      	add	r2, r1
 8007be2:	4291      	cmp	r1, r2
 8007be4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007be8:	d100      	bne.n	8007bec <memcpy+0xc>
 8007bea:	4770      	bx	lr
 8007bec:	b510      	push	{r4, lr}
 8007bee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bf6:	4291      	cmp	r1, r2
 8007bf8:	d1f9      	bne.n	8007bee <memcpy+0xe>
 8007bfa:	bd10      	pop	{r4, pc}

08007bfc <memset>:
 8007bfc:	4402      	add	r2, r0
 8007bfe:	4603      	mov	r3, r0
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d100      	bne.n	8007c06 <memset+0xa>
 8007c04:	4770      	bx	lr
 8007c06:	f803 1b01 	strb.w	r1, [r3], #1
 8007c0a:	e7f9      	b.n	8007c00 <memset+0x4>

08007c0c <siprintf>:
 8007c0c:	b40e      	push	{r1, r2, r3}
 8007c0e:	b500      	push	{lr}
 8007c10:	b09c      	sub	sp, #112	; 0x70
 8007c12:	ab1d      	add	r3, sp, #116	; 0x74
 8007c14:	9002      	str	r0, [sp, #8]
 8007c16:	9006      	str	r0, [sp, #24]
 8007c18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c1c:	4809      	ldr	r0, [pc, #36]	; (8007c44 <siprintf+0x38>)
 8007c1e:	9107      	str	r1, [sp, #28]
 8007c20:	9104      	str	r1, [sp, #16]
 8007c22:	4909      	ldr	r1, [pc, #36]	; (8007c48 <siprintf+0x3c>)
 8007c24:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c28:	9105      	str	r1, [sp, #20]
 8007c2a:	6800      	ldr	r0, [r0, #0]
 8007c2c:	9301      	str	r3, [sp, #4]
 8007c2e:	a902      	add	r1, sp, #8
 8007c30:	f000 f868 	bl	8007d04 <_svfiprintf_r>
 8007c34:	9b02      	ldr	r3, [sp, #8]
 8007c36:	2200      	movs	r2, #0
 8007c38:	701a      	strb	r2, [r3, #0]
 8007c3a:	b01c      	add	sp, #112	; 0x70
 8007c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c40:	b003      	add	sp, #12
 8007c42:	4770      	bx	lr
 8007c44:	2000004c 	.word	0x2000004c
 8007c48:	ffff0208 	.word	0xffff0208

08007c4c <__ssputs_r>:
 8007c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c50:	688e      	ldr	r6, [r1, #8]
 8007c52:	429e      	cmp	r6, r3
 8007c54:	4682      	mov	sl, r0
 8007c56:	460c      	mov	r4, r1
 8007c58:	4690      	mov	r8, r2
 8007c5a:	461f      	mov	r7, r3
 8007c5c:	d838      	bhi.n	8007cd0 <__ssputs_r+0x84>
 8007c5e:	898a      	ldrh	r2, [r1, #12]
 8007c60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c64:	d032      	beq.n	8007ccc <__ssputs_r+0x80>
 8007c66:	6825      	ldr	r5, [r4, #0]
 8007c68:	6909      	ldr	r1, [r1, #16]
 8007c6a:	eba5 0901 	sub.w	r9, r5, r1
 8007c6e:	6965      	ldr	r5, [r4, #20]
 8007c70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c78:	3301      	adds	r3, #1
 8007c7a:	444b      	add	r3, r9
 8007c7c:	106d      	asrs	r5, r5, #1
 8007c7e:	429d      	cmp	r5, r3
 8007c80:	bf38      	it	cc
 8007c82:	461d      	movcc	r5, r3
 8007c84:	0553      	lsls	r3, r2, #21
 8007c86:	d531      	bpl.n	8007cec <__ssputs_r+0xa0>
 8007c88:	4629      	mov	r1, r5
 8007c8a:	f000 fb55 	bl	8008338 <_malloc_r>
 8007c8e:	4606      	mov	r6, r0
 8007c90:	b950      	cbnz	r0, 8007ca8 <__ssputs_r+0x5c>
 8007c92:	230c      	movs	r3, #12
 8007c94:	f8ca 3000 	str.w	r3, [sl]
 8007c98:	89a3      	ldrh	r3, [r4, #12]
 8007c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c9e:	81a3      	strh	r3, [r4, #12]
 8007ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca8:	6921      	ldr	r1, [r4, #16]
 8007caa:	464a      	mov	r2, r9
 8007cac:	f7ff ff98 	bl	8007be0 <memcpy>
 8007cb0:	89a3      	ldrh	r3, [r4, #12]
 8007cb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cba:	81a3      	strh	r3, [r4, #12]
 8007cbc:	6126      	str	r6, [r4, #16]
 8007cbe:	6165      	str	r5, [r4, #20]
 8007cc0:	444e      	add	r6, r9
 8007cc2:	eba5 0509 	sub.w	r5, r5, r9
 8007cc6:	6026      	str	r6, [r4, #0]
 8007cc8:	60a5      	str	r5, [r4, #8]
 8007cca:	463e      	mov	r6, r7
 8007ccc:	42be      	cmp	r6, r7
 8007cce:	d900      	bls.n	8007cd2 <__ssputs_r+0x86>
 8007cd0:	463e      	mov	r6, r7
 8007cd2:	6820      	ldr	r0, [r4, #0]
 8007cd4:	4632      	mov	r2, r6
 8007cd6:	4641      	mov	r1, r8
 8007cd8:	f000 faa8 	bl	800822c <memmove>
 8007cdc:	68a3      	ldr	r3, [r4, #8]
 8007cde:	1b9b      	subs	r3, r3, r6
 8007ce0:	60a3      	str	r3, [r4, #8]
 8007ce2:	6823      	ldr	r3, [r4, #0]
 8007ce4:	4433      	add	r3, r6
 8007ce6:	6023      	str	r3, [r4, #0]
 8007ce8:	2000      	movs	r0, #0
 8007cea:	e7db      	b.n	8007ca4 <__ssputs_r+0x58>
 8007cec:	462a      	mov	r2, r5
 8007cee:	f000 fb97 	bl	8008420 <_realloc_r>
 8007cf2:	4606      	mov	r6, r0
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	d1e1      	bne.n	8007cbc <__ssputs_r+0x70>
 8007cf8:	6921      	ldr	r1, [r4, #16]
 8007cfa:	4650      	mov	r0, sl
 8007cfc:	f000 fab0 	bl	8008260 <_free_r>
 8007d00:	e7c7      	b.n	8007c92 <__ssputs_r+0x46>
	...

08007d04 <_svfiprintf_r>:
 8007d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d08:	4698      	mov	r8, r3
 8007d0a:	898b      	ldrh	r3, [r1, #12]
 8007d0c:	061b      	lsls	r3, r3, #24
 8007d0e:	b09d      	sub	sp, #116	; 0x74
 8007d10:	4607      	mov	r7, r0
 8007d12:	460d      	mov	r5, r1
 8007d14:	4614      	mov	r4, r2
 8007d16:	d50e      	bpl.n	8007d36 <_svfiprintf_r+0x32>
 8007d18:	690b      	ldr	r3, [r1, #16]
 8007d1a:	b963      	cbnz	r3, 8007d36 <_svfiprintf_r+0x32>
 8007d1c:	2140      	movs	r1, #64	; 0x40
 8007d1e:	f000 fb0b 	bl	8008338 <_malloc_r>
 8007d22:	6028      	str	r0, [r5, #0]
 8007d24:	6128      	str	r0, [r5, #16]
 8007d26:	b920      	cbnz	r0, 8007d32 <_svfiprintf_r+0x2e>
 8007d28:	230c      	movs	r3, #12
 8007d2a:	603b      	str	r3, [r7, #0]
 8007d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d30:	e0d1      	b.n	8007ed6 <_svfiprintf_r+0x1d2>
 8007d32:	2340      	movs	r3, #64	; 0x40
 8007d34:	616b      	str	r3, [r5, #20]
 8007d36:	2300      	movs	r3, #0
 8007d38:	9309      	str	r3, [sp, #36]	; 0x24
 8007d3a:	2320      	movs	r3, #32
 8007d3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d40:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d44:	2330      	movs	r3, #48	; 0x30
 8007d46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007ef0 <_svfiprintf_r+0x1ec>
 8007d4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d4e:	f04f 0901 	mov.w	r9, #1
 8007d52:	4623      	mov	r3, r4
 8007d54:	469a      	mov	sl, r3
 8007d56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d5a:	b10a      	cbz	r2, 8007d60 <_svfiprintf_r+0x5c>
 8007d5c:	2a25      	cmp	r2, #37	; 0x25
 8007d5e:	d1f9      	bne.n	8007d54 <_svfiprintf_r+0x50>
 8007d60:	ebba 0b04 	subs.w	fp, sl, r4
 8007d64:	d00b      	beq.n	8007d7e <_svfiprintf_r+0x7a>
 8007d66:	465b      	mov	r3, fp
 8007d68:	4622      	mov	r2, r4
 8007d6a:	4629      	mov	r1, r5
 8007d6c:	4638      	mov	r0, r7
 8007d6e:	f7ff ff6d 	bl	8007c4c <__ssputs_r>
 8007d72:	3001      	adds	r0, #1
 8007d74:	f000 80aa 	beq.w	8007ecc <_svfiprintf_r+0x1c8>
 8007d78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d7a:	445a      	add	r2, fp
 8007d7c:	9209      	str	r2, [sp, #36]	; 0x24
 8007d7e:	f89a 3000 	ldrb.w	r3, [sl]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f000 80a2 	beq.w	8007ecc <_svfiprintf_r+0x1c8>
 8007d88:	2300      	movs	r3, #0
 8007d8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d92:	f10a 0a01 	add.w	sl, sl, #1
 8007d96:	9304      	str	r3, [sp, #16]
 8007d98:	9307      	str	r3, [sp, #28]
 8007d9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d9e:	931a      	str	r3, [sp, #104]	; 0x68
 8007da0:	4654      	mov	r4, sl
 8007da2:	2205      	movs	r2, #5
 8007da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007da8:	4851      	ldr	r0, [pc, #324]	; (8007ef0 <_svfiprintf_r+0x1ec>)
 8007daa:	f7f8 fa19 	bl	80001e0 <memchr>
 8007dae:	9a04      	ldr	r2, [sp, #16]
 8007db0:	b9d8      	cbnz	r0, 8007dea <_svfiprintf_r+0xe6>
 8007db2:	06d0      	lsls	r0, r2, #27
 8007db4:	bf44      	itt	mi
 8007db6:	2320      	movmi	r3, #32
 8007db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dbc:	0711      	lsls	r1, r2, #28
 8007dbe:	bf44      	itt	mi
 8007dc0:	232b      	movmi	r3, #43	; 0x2b
 8007dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dc6:	f89a 3000 	ldrb.w	r3, [sl]
 8007dca:	2b2a      	cmp	r3, #42	; 0x2a
 8007dcc:	d015      	beq.n	8007dfa <_svfiprintf_r+0xf6>
 8007dce:	9a07      	ldr	r2, [sp, #28]
 8007dd0:	4654      	mov	r4, sl
 8007dd2:	2000      	movs	r0, #0
 8007dd4:	f04f 0c0a 	mov.w	ip, #10
 8007dd8:	4621      	mov	r1, r4
 8007dda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dde:	3b30      	subs	r3, #48	; 0x30
 8007de0:	2b09      	cmp	r3, #9
 8007de2:	d94e      	bls.n	8007e82 <_svfiprintf_r+0x17e>
 8007de4:	b1b0      	cbz	r0, 8007e14 <_svfiprintf_r+0x110>
 8007de6:	9207      	str	r2, [sp, #28]
 8007de8:	e014      	b.n	8007e14 <_svfiprintf_r+0x110>
 8007dea:	eba0 0308 	sub.w	r3, r0, r8
 8007dee:	fa09 f303 	lsl.w	r3, r9, r3
 8007df2:	4313      	orrs	r3, r2
 8007df4:	9304      	str	r3, [sp, #16]
 8007df6:	46a2      	mov	sl, r4
 8007df8:	e7d2      	b.n	8007da0 <_svfiprintf_r+0x9c>
 8007dfa:	9b03      	ldr	r3, [sp, #12]
 8007dfc:	1d19      	adds	r1, r3, #4
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	9103      	str	r1, [sp, #12]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	bfbb      	ittet	lt
 8007e06:	425b      	neglt	r3, r3
 8007e08:	f042 0202 	orrlt.w	r2, r2, #2
 8007e0c:	9307      	strge	r3, [sp, #28]
 8007e0e:	9307      	strlt	r3, [sp, #28]
 8007e10:	bfb8      	it	lt
 8007e12:	9204      	strlt	r2, [sp, #16]
 8007e14:	7823      	ldrb	r3, [r4, #0]
 8007e16:	2b2e      	cmp	r3, #46	; 0x2e
 8007e18:	d10c      	bne.n	8007e34 <_svfiprintf_r+0x130>
 8007e1a:	7863      	ldrb	r3, [r4, #1]
 8007e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8007e1e:	d135      	bne.n	8007e8c <_svfiprintf_r+0x188>
 8007e20:	9b03      	ldr	r3, [sp, #12]
 8007e22:	1d1a      	adds	r2, r3, #4
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	9203      	str	r2, [sp, #12]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	bfb8      	it	lt
 8007e2c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007e30:	3402      	adds	r4, #2
 8007e32:	9305      	str	r3, [sp, #20]
 8007e34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f00 <_svfiprintf_r+0x1fc>
 8007e38:	7821      	ldrb	r1, [r4, #0]
 8007e3a:	2203      	movs	r2, #3
 8007e3c:	4650      	mov	r0, sl
 8007e3e:	f7f8 f9cf 	bl	80001e0 <memchr>
 8007e42:	b140      	cbz	r0, 8007e56 <_svfiprintf_r+0x152>
 8007e44:	2340      	movs	r3, #64	; 0x40
 8007e46:	eba0 000a 	sub.w	r0, r0, sl
 8007e4a:	fa03 f000 	lsl.w	r0, r3, r0
 8007e4e:	9b04      	ldr	r3, [sp, #16]
 8007e50:	4303      	orrs	r3, r0
 8007e52:	3401      	adds	r4, #1
 8007e54:	9304      	str	r3, [sp, #16]
 8007e56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e5a:	4826      	ldr	r0, [pc, #152]	; (8007ef4 <_svfiprintf_r+0x1f0>)
 8007e5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e60:	2206      	movs	r2, #6
 8007e62:	f7f8 f9bd 	bl	80001e0 <memchr>
 8007e66:	2800      	cmp	r0, #0
 8007e68:	d038      	beq.n	8007edc <_svfiprintf_r+0x1d8>
 8007e6a:	4b23      	ldr	r3, [pc, #140]	; (8007ef8 <_svfiprintf_r+0x1f4>)
 8007e6c:	bb1b      	cbnz	r3, 8007eb6 <_svfiprintf_r+0x1b2>
 8007e6e:	9b03      	ldr	r3, [sp, #12]
 8007e70:	3307      	adds	r3, #7
 8007e72:	f023 0307 	bic.w	r3, r3, #7
 8007e76:	3308      	adds	r3, #8
 8007e78:	9303      	str	r3, [sp, #12]
 8007e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e7c:	4433      	add	r3, r6
 8007e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e80:	e767      	b.n	8007d52 <_svfiprintf_r+0x4e>
 8007e82:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e86:	460c      	mov	r4, r1
 8007e88:	2001      	movs	r0, #1
 8007e8a:	e7a5      	b.n	8007dd8 <_svfiprintf_r+0xd4>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	3401      	adds	r4, #1
 8007e90:	9305      	str	r3, [sp, #20]
 8007e92:	4619      	mov	r1, r3
 8007e94:	f04f 0c0a 	mov.w	ip, #10
 8007e98:	4620      	mov	r0, r4
 8007e9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e9e:	3a30      	subs	r2, #48	; 0x30
 8007ea0:	2a09      	cmp	r2, #9
 8007ea2:	d903      	bls.n	8007eac <_svfiprintf_r+0x1a8>
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d0c5      	beq.n	8007e34 <_svfiprintf_r+0x130>
 8007ea8:	9105      	str	r1, [sp, #20]
 8007eaa:	e7c3      	b.n	8007e34 <_svfiprintf_r+0x130>
 8007eac:	fb0c 2101 	mla	r1, ip, r1, r2
 8007eb0:	4604      	mov	r4, r0
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e7f0      	b.n	8007e98 <_svfiprintf_r+0x194>
 8007eb6:	ab03      	add	r3, sp, #12
 8007eb8:	9300      	str	r3, [sp, #0]
 8007eba:	462a      	mov	r2, r5
 8007ebc:	4b0f      	ldr	r3, [pc, #60]	; (8007efc <_svfiprintf_r+0x1f8>)
 8007ebe:	a904      	add	r1, sp, #16
 8007ec0:	4638      	mov	r0, r7
 8007ec2:	f3af 8000 	nop.w
 8007ec6:	1c42      	adds	r2, r0, #1
 8007ec8:	4606      	mov	r6, r0
 8007eca:	d1d6      	bne.n	8007e7a <_svfiprintf_r+0x176>
 8007ecc:	89ab      	ldrh	r3, [r5, #12]
 8007ece:	065b      	lsls	r3, r3, #25
 8007ed0:	f53f af2c 	bmi.w	8007d2c <_svfiprintf_r+0x28>
 8007ed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ed6:	b01d      	add	sp, #116	; 0x74
 8007ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007edc:	ab03      	add	r3, sp, #12
 8007ede:	9300      	str	r3, [sp, #0]
 8007ee0:	462a      	mov	r2, r5
 8007ee2:	4b06      	ldr	r3, [pc, #24]	; (8007efc <_svfiprintf_r+0x1f8>)
 8007ee4:	a904      	add	r1, sp, #16
 8007ee6:	4638      	mov	r0, r7
 8007ee8:	f000 f87a 	bl	8007fe0 <_printf_i>
 8007eec:	e7eb      	b.n	8007ec6 <_svfiprintf_r+0x1c2>
 8007eee:	bf00      	nop
 8007ef0:	08008918 	.word	0x08008918
 8007ef4:	08008922 	.word	0x08008922
 8007ef8:	00000000 	.word	0x00000000
 8007efc:	08007c4d 	.word	0x08007c4d
 8007f00:	0800891e 	.word	0x0800891e

08007f04 <_printf_common>:
 8007f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f08:	4616      	mov	r6, r2
 8007f0a:	4699      	mov	r9, r3
 8007f0c:	688a      	ldr	r2, [r1, #8]
 8007f0e:	690b      	ldr	r3, [r1, #16]
 8007f10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f14:	4293      	cmp	r3, r2
 8007f16:	bfb8      	it	lt
 8007f18:	4613      	movlt	r3, r2
 8007f1a:	6033      	str	r3, [r6, #0]
 8007f1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f20:	4607      	mov	r7, r0
 8007f22:	460c      	mov	r4, r1
 8007f24:	b10a      	cbz	r2, 8007f2a <_printf_common+0x26>
 8007f26:	3301      	adds	r3, #1
 8007f28:	6033      	str	r3, [r6, #0]
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	0699      	lsls	r1, r3, #26
 8007f2e:	bf42      	ittt	mi
 8007f30:	6833      	ldrmi	r3, [r6, #0]
 8007f32:	3302      	addmi	r3, #2
 8007f34:	6033      	strmi	r3, [r6, #0]
 8007f36:	6825      	ldr	r5, [r4, #0]
 8007f38:	f015 0506 	ands.w	r5, r5, #6
 8007f3c:	d106      	bne.n	8007f4c <_printf_common+0x48>
 8007f3e:	f104 0a19 	add.w	sl, r4, #25
 8007f42:	68e3      	ldr	r3, [r4, #12]
 8007f44:	6832      	ldr	r2, [r6, #0]
 8007f46:	1a9b      	subs	r3, r3, r2
 8007f48:	42ab      	cmp	r3, r5
 8007f4a:	dc26      	bgt.n	8007f9a <_printf_common+0x96>
 8007f4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f50:	1e13      	subs	r3, r2, #0
 8007f52:	6822      	ldr	r2, [r4, #0]
 8007f54:	bf18      	it	ne
 8007f56:	2301      	movne	r3, #1
 8007f58:	0692      	lsls	r2, r2, #26
 8007f5a:	d42b      	bmi.n	8007fb4 <_printf_common+0xb0>
 8007f5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f60:	4649      	mov	r1, r9
 8007f62:	4638      	mov	r0, r7
 8007f64:	47c0      	blx	r8
 8007f66:	3001      	adds	r0, #1
 8007f68:	d01e      	beq.n	8007fa8 <_printf_common+0xa4>
 8007f6a:	6823      	ldr	r3, [r4, #0]
 8007f6c:	68e5      	ldr	r5, [r4, #12]
 8007f6e:	6832      	ldr	r2, [r6, #0]
 8007f70:	f003 0306 	and.w	r3, r3, #6
 8007f74:	2b04      	cmp	r3, #4
 8007f76:	bf08      	it	eq
 8007f78:	1aad      	subeq	r5, r5, r2
 8007f7a:	68a3      	ldr	r3, [r4, #8]
 8007f7c:	6922      	ldr	r2, [r4, #16]
 8007f7e:	bf0c      	ite	eq
 8007f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f84:	2500      	movne	r5, #0
 8007f86:	4293      	cmp	r3, r2
 8007f88:	bfc4      	itt	gt
 8007f8a:	1a9b      	subgt	r3, r3, r2
 8007f8c:	18ed      	addgt	r5, r5, r3
 8007f8e:	2600      	movs	r6, #0
 8007f90:	341a      	adds	r4, #26
 8007f92:	42b5      	cmp	r5, r6
 8007f94:	d11a      	bne.n	8007fcc <_printf_common+0xc8>
 8007f96:	2000      	movs	r0, #0
 8007f98:	e008      	b.n	8007fac <_printf_common+0xa8>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	4652      	mov	r2, sl
 8007f9e:	4649      	mov	r1, r9
 8007fa0:	4638      	mov	r0, r7
 8007fa2:	47c0      	blx	r8
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	d103      	bne.n	8007fb0 <_printf_common+0xac>
 8007fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fb0:	3501      	adds	r5, #1
 8007fb2:	e7c6      	b.n	8007f42 <_printf_common+0x3e>
 8007fb4:	18e1      	adds	r1, r4, r3
 8007fb6:	1c5a      	adds	r2, r3, #1
 8007fb8:	2030      	movs	r0, #48	; 0x30
 8007fba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007fbe:	4422      	add	r2, r4
 8007fc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007fc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007fc8:	3302      	adds	r3, #2
 8007fca:	e7c7      	b.n	8007f5c <_printf_common+0x58>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	4622      	mov	r2, r4
 8007fd0:	4649      	mov	r1, r9
 8007fd2:	4638      	mov	r0, r7
 8007fd4:	47c0      	blx	r8
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	d0e6      	beq.n	8007fa8 <_printf_common+0xa4>
 8007fda:	3601      	adds	r6, #1
 8007fdc:	e7d9      	b.n	8007f92 <_printf_common+0x8e>
	...

08007fe0 <_printf_i>:
 8007fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fe4:	7e0f      	ldrb	r7, [r1, #24]
 8007fe6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007fe8:	2f78      	cmp	r7, #120	; 0x78
 8007fea:	4691      	mov	r9, r2
 8007fec:	4680      	mov	r8, r0
 8007fee:	460c      	mov	r4, r1
 8007ff0:	469a      	mov	sl, r3
 8007ff2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ff6:	d807      	bhi.n	8008008 <_printf_i+0x28>
 8007ff8:	2f62      	cmp	r7, #98	; 0x62
 8007ffa:	d80a      	bhi.n	8008012 <_printf_i+0x32>
 8007ffc:	2f00      	cmp	r7, #0
 8007ffe:	f000 80d8 	beq.w	80081b2 <_printf_i+0x1d2>
 8008002:	2f58      	cmp	r7, #88	; 0x58
 8008004:	f000 80a3 	beq.w	800814e <_printf_i+0x16e>
 8008008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800800c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008010:	e03a      	b.n	8008088 <_printf_i+0xa8>
 8008012:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008016:	2b15      	cmp	r3, #21
 8008018:	d8f6      	bhi.n	8008008 <_printf_i+0x28>
 800801a:	a101      	add	r1, pc, #4	; (adr r1, 8008020 <_printf_i+0x40>)
 800801c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008020:	08008079 	.word	0x08008079
 8008024:	0800808d 	.word	0x0800808d
 8008028:	08008009 	.word	0x08008009
 800802c:	08008009 	.word	0x08008009
 8008030:	08008009 	.word	0x08008009
 8008034:	08008009 	.word	0x08008009
 8008038:	0800808d 	.word	0x0800808d
 800803c:	08008009 	.word	0x08008009
 8008040:	08008009 	.word	0x08008009
 8008044:	08008009 	.word	0x08008009
 8008048:	08008009 	.word	0x08008009
 800804c:	08008199 	.word	0x08008199
 8008050:	080080bd 	.word	0x080080bd
 8008054:	0800817b 	.word	0x0800817b
 8008058:	08008009 	.word	0x08008009
 800805c:	08008009 	.word	0x08008009
 8008060:	080081bb 	.word	0x080081bb
 8008064:	08008009 	.word	0x08008009
 8008068:	080080bd 	.word	0x080080bd
 800806c:	08008009 	.word	0x08008009
 8008070:	08008009 	.word	0x08008009
 8008074:	08008183 	.word	0x08008183
 8008078:	682b      	ldr	r3, [r5, #0]
 800807a:	1d1a      	adds	r2, r3, #4
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	602a      	str	r2, [r5, #0]
 8008080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008084:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008088:	2301      	movs	r3, #1
 800808a:	e0a3      	b.n	80081d4 <_printf_i+0x1f4>
 800808c:	6820      	ldr	r0, [r4, #0]
 800808e:	6829      	ldr	r1, [r5, #0]
 8008090:	0606      	lsls	r6, r0, #24
 8008092:	f101 0304 	add.w	r3, r1, #4
 8008096:	d50a      	bpl.n	80080ae <_printf_i+0xce>
 8008098:	680e      	ldr	r6, [r1, #0]
 800809a:	602b      	str	r3, [r5, #0]
 800809c:	2e00      	cmp	r6, #0
 800809e:	da03      	bge.n	80080a8 <_printf_i+0xc8>
 80080a0:	232d      	movs	r3, #45	; 0x2d
 80080a2:	4276      	negs	r6, r6
 80080a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080a8:	485e      	ldr	r0, [pc, #376]	; (8008224 <_printf_i+0x244>)
 80080aa:	230a      	movs	r3, #10
 80080ac:	e019      	b.n	80080e2 <_printf_i+0x102>
 80080ae:	680e      	ldr	r6, [r1, #0]
 80080b0:	602b      	str	r3, [r5, #0]
 80080b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80080b6:	bf18      	it	ne
 80080b8:	b236      	sxthne	r6, r6
 80080ba:	e7ef      	b.n	800809c <_printf_i+0xbc>
 80080bc:	682b      	ldr	r3, [r5, #0]
 80080be:	6820      	ldr	r0, [r4, #0]
 80080c0:	1d19      	adds	r1, r3, #4
 80080c2:	6029      	str	r1, [r5, #0]
 80080c4:	0601      	lsls	r1, r0, #24
 80080c6:	d501      	bpl.n	80080cc <_printf_i+0xec>
 80080c8:	681e      	ldr	r6, [r3, #0]
 80080ca:	e002      	b.n	80080d2 <_printf_i+0xf2>
 80080cc:	0646      	lsls	r6, r0, #25
 80080ce:	d5fb      	bpl.n	80080c8 <_printf_i+0xe8>
 80080d0:	881e      	ldrh	r6, [r3, #0]
 80080d2:	4854      	ldr	r0, [pc, #336]	; (8008224 <_printf_i+0x244>)
 80080d4:	2f6f      	cmp	r7, #111	; 0x6f
 80080d6:	bf0c      	ite	eq
 80080d8:	2308      	moveq	r3, #8
 80080da:	230a      	movne	r3, #10
 80080dc:	2100      	movs	r1, #0
 80080de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080e2:	6865      	ldr	r5, [r4, #4]
 80080e4:	60a5      	str	r5, [r4, #8]
 80080e6:	2d00      	cmp	r5, #0
 80080e8:	bfa2      	ittt	ge
 80080ea:	6821      	ldrge	r1, [r4, #0]
 80080ec:	f021 0104 	bicge.w	r1, r1, #4
 80080f0:	6021      	strge	r1, [r4, #0]
 80080f2:	b90e      	cbnz	r6, 80080f8 <_printf_i+0x118>
 80080f4:	2d00      	cmp	r5, #0
 80080f6:	d04d      	beq.n	8008194 <_printf_i+0x1b4>
 80080f8:	4615      	mov	r5, r2
 80080fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80080fe:	fb03 6711 	mls	r7, r3, r1, r6
 8008102:	5dc7      	ldrb	r7, [r0, r7]
 8008104:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008108:	4637      	mov	r7, r6
 800810a:	42bb      	cmp	r3, r7
 800810c:	460e      	mov	r6, r1
 800810e:	d9f4      	bls.n	80080fa <_printf_i+0x11a>
 8008110:	2b08      	cmp	r3, #8
 8008112:	d10b      	bne.n	800812c <_printf_i+0x14c>
 8008114:	6823      	ldr	r3, [r4, #0]
 8008116:	07de      	lsls	r6, r3, #31
 8008118:	d508      	bpl.n	800812c <_printf_i+0x14c>
 800811a:	6923      	ldr	r3, [r4, #16]
 800811c:	6861      	ldr	r1, [r4, #4]
 800811e:	4299      	cmp	r1, r3
 8008120:	bfde      	ittt	le
 8008122:	2330      	movle	r3, #48	; 0x30
 8008124:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008128:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800812c:	1b52      	subs	r2, r2, r5
 800812e:	6122      	str	r2, [r4, #16]
 8008130:	f8cd a000 	str.w	sl, [sp]
 8008134:	464b      	mov	r3, r9
 8008136:	aa03      	add	r2, sp, #12
 8008138:	4621      	mov	r1, r4
 800813a:	4640      	mov	r0, r8
 800813c:	f7ff fee2 	bl	8007f04 <_printf_common>
 8008140:	3001      	adds	r0, #1
 8008142:	d14c      	bne.n	80081de <_printf_i+0x1fe>
 8008144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008148:	b004      	add	sp, #16
 800814a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800814e:	4835      	ldr	r0, [pc, #212]	; (8008224 <_printf_i+0x244>)
 8008150:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008154:	6829      	ldr	r1, [r5, #0]
 8008156:	6823      	ldr	r3, [r4, #0]
 8008158:	f851 6b04 	ldr.w	r6, [r1], #4
 800815c:	6029      	str	r1, [r5, #0]
 800815e:	061d      	lsls	r5, r3, #24
 8008160:	d514      	bpl.n	800818c <_printf_i+0x1ac>
 8008162:	07df      	lsls	r7, r3, #31
 8008164:	bf44      	itt	mi
 8008166:	f043 0320 	orrmi.w	r3, r3, #32
 800816a:	6023      	strmi	r3, [r4, #0]
 800816c:	b91e      	cbnz	r6, 8008176 <_printf_i+0x196>
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	f023 0320 	bic.w	r3, r3, #32
 8008174:	6023      	str	r3, [r4, #0]
 8008176:	2310      	movs	r3, #16
 8008178:	e7b0      	b.n	80080dc <_printf_i+0xfc>
 800817a:	6823      	ldr	r3, [r4, #0]
 800817c:	f043 0320 	orr.w	r3, r3, #32
 8008180:	6023      	str	r3, [r4, #0]
 8008182:	2378      	movs	r3, #120	; 0x78
 8008184:	4828      	ldr	r0, [pc, #160]	; (8008228 <_printf_i+0x248>)
 8008186:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800818a:	e7e3      	b.n	8008154 <_printf_i+0x174>
 800818c:	0659      	lsls	r1, r3, #25
 800818e:	bf48      	it	mi
 8008190:	b2b6      	uxthmi	r6, r6
 8008192:	e7e6      	b.n	8008162 <_printf_i+0x182>
 8008194:	4615      	mov	r5, r2
 8008196:	e7bb      	b.n	8008110 <_printf_i+0x130>
 8008198:	682b      	ldr	r3, [r5, #0]
 800819a:	6826      	ldr	r6, [r4, #0]
 800819c:	6961      	ldr	r1, [r4, #20]
 800819e:	1d18      	adds	r0, r3, #4
 80081a0:	6028      	str	r0, [r5, #0]
 80081a2:	0635      	lsls	r5, r6, #24
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	d501      	bpl.n	80081ac <_printf_i+0x1cc>
 80081a8:	6019      	str	r1, [r3, #0]
 80081aa:	e002      	b.n	80081b2 <_printf_i+0x1d2>
 80081ac:	0670      	lsls	r0, r6, #25
 80081ae:	d5fb      	bpl.n	80081a8 <_printf_i+0x1c8>
 80081b0:	8019      	strh	r1, [r3, #0]
 80081b2:	2300      	movs	r3, #0
 80081b4:	6123      	str	r3, [r4, #16]
 80081b6:	4615      	mov	r5, r2
 80081b8:	e7ba      	b.n	8008130 <_printf_i+0x150>
 80081ba:	682b      	ldr	r3, [r5, #0]
 80081bc:	1d1a      	adds	r2, r3, #4
 80081be:	602a      	str	r2, [r5, #0]
 80081c0:	681d      	ldr	r5, [r3, #0]
 80081c2:	6862      	ldr	r2, [r4, #4]
 80081c4:	2100      	movs	r1, #0
 80081c6:	4628      	mov	r0, r5
 80081c8:	f7f8 f80a 	bl	80001e0 <memchr>
 80081cc:	b108      	cbz	r0, 80081d2 <_printf_i+0x1f2>
 80081ce:	1b40      	subs	r0, r0, r5
 80081d0:	6060      	str	r0, [r4, #4]
 80081d2:	6863      	ldr	r3, [r4, #4]
 80081d4:	6123      	str	r3, [r4, #16]
 80081d6:	2300      	movs	r3, #0
 80081d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081dc:	e7a8      	b.n	8008130 <_printf_i+0x150>
 80081de:	6923      	ldr	r3, [r4, #16]
 80081e0:	462a      	mov	r2, r5
 80081e2:	4649      	mov	r1, r9
 80081e4:	4640      	mov	r0, r8
 80081e6:	47d0      	blx	sl
 80081e8:	3001      	adds	r0, #1
 80081ea:	d0ab      	beq.n	8008144 <_printf_i+0x164>
 80081ec:	6823      	ldr	r3, [r4, #0]
 80081ee:	079b      	lsls	r3, r3, #30
 80081f0:	d413      	bmi.n	800821a <_printf_i+0x23a>
 80081f2:	68e0      	ldr	r0, [r4, #12]
 80081f4:	9b03      	ldr	r3, [sp, #12]
 80081f6:	4298      	cmp	r0, r3
 80081f8:	bfb8      	it	lt
 80081fa:	4618      	movlt	r0, r3
 80081fc:	e7a4      	b.n	8008148 <_printf_i+0x168>
 80081fe:	2301      	movs	r3, #1
 8008200:	4632      	mov	r2, r6
 8008202:	4649      	mov	r1, r9
 8008204:	4640      	mov	r0, r8
 8008206:	47d0      	blx	sl
 8008208:	3001      	adds	r0, #1
 800820a:	d09b      	beq.n	8008144 <_printf_i+0x164>
 800820c:	3501      	adds	r5, #1
 800820e:	68e3      	ldr	r3, [r4, #12]
 8008210:	9903      	ldr	r1, [sp, #12]
 8008212:	1a5b      	subs	r3, r3, r1
 8008214:	42ab      	cmp	r3, r5
 8008216:	dcf2      	bgt.n	80081fe <_printf_i+0x21e>
 8008218:	e7eb      	b.n	80081f2 <_printf_i+0x212>
 800821a:	2500      	movs	r5, #0
 800821c:	f104 0619 	add.w	r6, r4, #25
 8008220:	e7f5      	b.n	800820e <_printf_i+0x22e>
 8008222:	bf00      	nop
 8008224:	08008929 	.word	0x08008929
 8008228:	0800893a 	.word	0x0800893a

0800822c <memmove>:
 800822c:	4288      	cmp	r0, r1
 800822e:	b510      	push	{r4, lr}
 8008230:	eb01 0402 	add.w	r4, r1, r2
 8008234:	d902      	bls.n	800823c <memmove+0x10>
 8008236:	4284      	cmp	r4, r0
 8008238:	4623      	mov	r3, r4
 800823a:	d807      	bhi.n	800824c <memmove+0x20>
 800823c:	1e43      	subs	r3, r0, #1
 800823e:	42a1      	cmp	r1, r4
 8008240:	d008      	beq.n	8008254 <memmove+0x28>
 8008242:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008246:	f803 2f01 	strb.w	r2, [r3, #1]!
 800824a:	e7f8      	b.n	800823e <memmove+0x12>
 800824c:	4402      	add	r2, r0
 800824e:	4601      	mov	r1, r0
 8008250:	428a      	cmp	r2, r1
 8008252:	d100      	bne.n	8008256 <memmove+0x2a>
 8008254:	bd10      	pop	{r4, pc}
 8008256:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800825a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800825e:	e7f7      	b.n	8008250 <memmove+0x24>

08008260 <_free_r>:
 8008260:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008262:	2900      	cmp	r1, #0
 8008264:	d044      	beq.n	80082f0 <_free_r+0x90>
 8008266:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800826a:	9001      	str	r0, [sp, #4]
 800826c:	2b00      	cmp	r3, #0
 800826e:	f1a1 0404 	sub.w	r4, r1, #4
 8008272:	bfb8      	it	lt
 8008274:	18e4      	addlt	r4, r4, r3
 8008276:	f000 f913 	bl	80084a0 <__malloc_lock>
 800827a:	4a1e      	ldr	r2, [pc, #120]	; (80082f4 <_free_r+0x94>)
 800827c:	9801      	ldr	r0, [sp, #4]
 800827e:	6813      	ldr	r3, [r2, #0]
 8008280:	b933      	cbnz	r3, 8008290 <_free_r+0x30>
 8008282:	6063      	str	r3, [r4, #4]
 8008284:	6014      	str	r4, [r2, #0]
 8008286:	b003      	add	sp, #12
 8008288:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800828c:	f000 b90e 	b.w	80084ac <__malloc_unlock>
 8008290:	42a3      	cmp	r3, r4
 8008292:	d908      	bls.n	80082a6 <_free_r+0x46>
 8008294:	6825      	ldr	r5, [r4, #0]
 8008296:	1961      	adds	r1, r4, r5
 8008298:	428b      	cmp	r3, r1
 800829a:	bf01      	itttt	eq
 800829c:	6819      	ldreq	r1, [r3, #0]
 800829e:	685b      	ldreq	r3, [r3, #4]
 80082a0:	1949      	addeq	r1, r1, r5
 80082a2:	6021      	streq	r1, [r4, #0]
 80082a4:	e7ed      	b.n	8008282 <_free_r+0x22>
 80082a6:	461a      	mov	r2, r3
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	b10b      	cbz	r3, 80082b0 <_free_r+0x50>
 80082ac:	42a3      	cmp	r3, r4
 80082ae:	d9fa      	bls.n	80082a6 <_free_r+0x46>
 80082b0:	6811      	ldr	r1, [r2, #0]
 80082b2:	1855      	adds	r5, r2, r1
 80082b4:	42a5      	cmp	r5, r4
 80082b6:	d10b      	bne.n	80082d0 <_free_r+0x70>
 80082b8:	6824      	ldr	r4, [r4, #0]
 80082ba:	4421      	add	r1, r4
 80082bc:	1854      	adds	r4, r2, r1
 80082be:	42a3      	cmp	r3, r4
 80082c0:	6011      	str	r1, [r2, #0]
 80082c2:	d1e0      	bne.n	8008286 <_free_r+0x26>
 80082c4:	681c      	ldr	r4, [r3, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	6053      	str	r3, [r2, #4]
 80082ca:	4421      	add	r1, r4
 80082cc:	6011      	str	r1, [r2, #0]
 80082ce:	e7da      	b.n	8008286 <_free_r+0x26>
 80082d0:	d902      	bls.n	80082d8 <_free_r+0x78>
 80082d2:	230c      	movs	r3, #12
 80082d4:	6003      	str	r3, [r0, #0]
 80082d6:	e7d6      	b.n	8008286 <_free_r+0x26>
 80082d8:	6825      	ldr	r5, [r4, #0]
 80082da:	1961      	adds	r1, r4, r5
 80082dc:	428b      	cmp	r3, r1
 80082de:	bf04      	itt	eq
 80082e0:	6819      	ldreq	r1, [r3, #0]
 80082e2:	685b      	ldreq	r3, [r3, #4]
 80082e4:	6063      	str	r3, [r4, #4]
 80082e6:	bf04      	itt	eq
 80082e8:	1949      	addeq	r1, r1, r5
 80082ea:	6021      	streq	r1, [r4, #0]
 80082ec:	6054      	str	r4, [r2, #4]
 80082ee:	e7ca      	b.n	8008286 <_free_r+0x26>
 80082f0:	b003      	add	sp, #12
 80082f2:	bd30      	pop	{r4, r5, pc}
 80082f4:	200134f4 	.word	0x200134f4

080082f8 <sbrk_aligned>:
 80082f8:	b570      	push	{r4, r5, r6, lr}
 80082fa:	4e0e      	ldr	r6, [pc, #56]	; (8008334 <sbrk_aligned+0x3c>)
 80082fc:	460c      	mov	r4, r1
 80082fe:	6831      	ldr	r1, [r6, #0]
 8008300:	4605      	mov	r5, r0
 8008302:	b911      	cbnz	r1, 800830a <sbrk_aligned+0x12>
 8008304:	f000 f8bc 	bl	8008480 <_sbrk_r>
 8008308:	6030      	str	r0, [r6, #0]
 800830a:	4621      	mov	r1, r4
 800830c:	4628      	mov	r0, r5
 800830e:	f000 f8b7 	bl	8008480 <_sbrk_r>
 8008312:	1c43      	adds	r3, r0, #1
 8008314:	d00a      	beq.n	800832c <sbrk_aligned+0x34>
 8008316:	1cc4      	adds	r4, r0, #3
 8008318:	f024 0403 	bic.w	r4, r4, #3
 800831c:	42a0      	cmp	r0, r4
 800831e:	d007      	beq.n	8008330 <sbrk_aligned+0x38>
 8008320:	1a21      	subs	r1, r4, r0
 8008322:	4628      	mov	r0, r5
 8008324:	f000 f8ac 	bl	8008480 <_sbrk_r>
 8008328:	3001      	adds	r0, #1
 800832a:	d101      	bne.n	8008330 <sbrk_aligned+0x38>
 800832c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008330:	4620      	mov	r0, r4
 8008332:	bd70      	pop	{r4, r5, r6, pc}
 8008334:	200134f8 	.word	0x200134f8

08008338 <_malloc_r>:
 8008338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800833c:	1ccd      	adds	r5, r1, #3
 800833e:	f025 0503 	bic.w	r5, r5, #3
 8008342:	3508      	adds	r5, #8
 8008344:	2d0c      	cmp	r5, #12
 8008346:	bf38      	it	cc
 8008348:	250c      	movcc	r5, #12
 800834a:	2d00      	cmp	r5, #0
 800834c:	4607      	mov	r7, r0
 800834e:	db01      	blt.n	8008354 <_malloc_r+0x1c>
 8008350:	42a9      	cmp	r1, r5
 8008352:	d905      	bls.n	8008360 <_malloc_r+0x28>
 8008354:	230c      	movs	r3, #12
 8008356:	603b      	str	r3, [r7, #0]
 8008358:	2600      	movs	r6, #0
 800835a:	4630      	mov	r0, r6
 800835c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008360:	4e2e      	ldr	r6, [pc, #184]	; (800841c <_malloc_r+0xe4>)
 8008362:	f000 f89d 	bl	80084a0 <__malloc_lock>
 8008366:	6833      	ldr	r3, [r6, #0]
 8008368:	461c      	mov	r4, r3
 800836a:	bb34      	cbnz	r4, 80083ba <_malloc_r+0x82>
 800836c:	4629      	mov	r1, r5
 800836e:	4638      	mov	r0, r7
 8008370:	f7ff ffc2 	bl	80082f8 <sbrk_aligned>
 8008374:	1c43      	adds	r3, r0, #1
 8008376:	4604      	mov	r4, r0
 8008378:	d14d      	bne.n	8008416 <_malloc_r+0xde>
 800837a:	6834      	ldr	r4, [r6, #0]
 800837c:	4626      	mov	r6, r4
 800837e:	2e00      	cmp	r6, #0
 8008380:	d140      	bne.n	8008404 <_malloc_r+0xcc>
 8008382:	6823      	ldr	r3, [r4, #0]
 8008384:	4631      	mov	r1, r6
 8008386:	4638      	mov	r0, r7
 8008388:	eb04 0803 	add.w	r8, r4, r3
 800838c:	f000 f878 	bl	8008480 <_sbrk_r>
 8008390:	4580      	cmp	r8, r0
 8008392:	d13a      	bne.n	800840a <_malloc_r+0xd2>
 8008394:	6821      	ldr	r1, [r4, #0]
 8008396:	3503      	adds	r5, #3
 8008398:	1a6d      	subs	r5, r5, r1
 800839a:	f025 0503 	bic.w	r5, r5, #3
 800839e:	3508      	adds	r5, #8
 80083a0:	2d0c      	cmp	r5, #12
 80083a2:	bf38      	it	cc
 80083a4:	250c      	movcc	r5, #12
 80083a6:	4629      	mov	r1, r5
 80083a8:	4638      	mov	r0, r7
 80083aa:	f7ff ffa5 	bl	80082f8 <sbrk_aligned>
 80083ae:	3001      	adds	r0, #1
 80083b0:	d02b      	beq.n	800840a <_malloc_r+0xd2>
 80083b2:	6823      	ldr	r3, [r4, #0]
 80083b4:	442b      	add	r3, r5
 80083b6:	6023      	str	r3, [r4, #0]
 80083b8:	e00e      	b.n	80083d8 <_malloc_r+0xa0>
 80083ba:	6822      	ldr	r2, [r4, #0]
 80083bc:	1b52      	subs	r2, r2, r5
 80083be:	d41e      	bmi.n	80083fe <_malloc_r+0xc6>
 80083c0:	2a0b      	cmp	r2, #11
 80083c2:	d916      	bls.n	80083f2 <_malloc_r+0xba>
 80083c4:	1961      	adds	r1, r4, r5
 80083c6:	42a3      	cmp	r3, r4
 80083c8:	6025      	str	r5, [r4, #0]
 80083ca:	bf18      	it	ne
 80083cc:	6059      	strne	r1, [r3, #4]
 80083ce:	6863      	ldr	r3, [r4, #4]
 80083d0:	bf08      	it	eq
 80083d2:	6031      	streq	r1, [r6, #0]
 80083d4:	5162      	str	r2, [r4, r5]
 80083d6:	604b      	str	r3, [r1, #4]
 80083d8:	4638      	mov	r0, r7
 80083da:	f104 060b 	add.w	r6, r4, #11
 80083de:	f000 f865 	bl	80084ac <__malloc_unlock>
 80083e2:	f026 0607 	bic.w	r6, r6, #7
 80083e6:	1d23      	adds	r3, r4, #4
 80083e8:	1af2      	subs	r2, r6, r3
 80083ea:	d0b6      	beq.n	800835a <_malloc_r+0x22>
 80083ec:	1b9b      	subs	r3, r3, r6
 80083ee:	50a3      	str	r3, [r4, r2]
 80083f0:	e7b3      	b.n	800835a <_malloc_r+0x22>
 80083f2:	6862      	ldr	r2, [r4, #4]
 80083f4:	42a3      	cmp	r3, r4
 80083f6:	bf0c      	ite	eq
 80083f8:	6032      	streq	r2, [r6, #0]
 80083fa:	605a      	strne	r2, [r3, #4]
 80083fc:	e7ec      	b.n	80083d8 <_malloc_r+0xa0>
 80083fe:	4623      	mov	r3, r4
 8008400:	6864      	ldr	r4, [r4, #4]
 8008402:	e7b2      	b.n	800836a <_malloc_r+0x32>
 8008404:	4634      	mov	r4, r6
 8008406:	6876      	ldr	r6, [r6, #4]
 8008408:	e7b9      	b.n	800837e <_malloc_r+0x46>
 800840a:	230c      	movs	r3, #12
 800840c:	603b      	str	r3, [r7, #0]
 800840e:	4638      	mov	r0, r7
 8008410:	f000 f84c 	bl	80084ac <__malloc_unlock>
 8008414:	e7a1      	b.n	800835a <_malloc_r+0x22>
 8008416:	6025      	str	r5, [r4, #0]
 8008418:	e7de      	b.n	80083d8 <_malloc_r+0xa0>
 800841a:	bf00      	nop
 800841c:	200134f4 	.word	0x200134f4

08008420 <_realloc_r>:
 8008420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008424:	4680      	mov	r8, r0
 8008426:	4614      	mov	r4, r2
 8008428:	460e      	mov	r6, r1
 800842a:	b921      	cbnz	r1, 8008436 <_realloc_r+0x16>
 800842c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008430:	4611      	mov	r1, r2
 8008432:	f7ff bf81 	b.w	8008338 <_malloc_r>
 8008436:	b92a      	cbnz	r2, 8008444 <_realloc_r+0x24>
 8008438:	f7ff ff12 	bl	8008260 <_free_r>
 800843c:	4625      	mov	r5, r4
 800843e:	4628      	mov	r0, r5
 8008440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008444:	f000 f838 	bl	80084b8 <_malloc_usable_size_r>
 8008448:	4284      	cmp	r4, r0
 800844a:	4607      	mov	r7, r0
 800844c:	d802      	bhi.n	8008454 <_realloc_r+0x34>
 800844e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008452:	d812      	bhi.n	800847a <_realloc_r+0x5a>
 8008454:	4621      	mov	r1, r4
 8008456:	4640      	mov	r0, r8
 8008458:	f7ff ff6e 	bl	8008338 <_malloc_r>
 800845c:	4605      	mov	r5, r0
 800845e:	2800      	cmp	r0, #0
 8008460:	d0ed      	beq.n	800843e <_realloc_r+0x1e>
 8008462:	42bc      	cmp	r4, r7
 8008464:	4622      	mov	r2, r4
 8008466:	4631      	mov	r1, r6
 8008468:	bf28      	it	cs
 800846a:	463a      	movcs	r2, r7
 800846c:	f7ff fbb8 	bl	8007be0 <memcpy>
 8008470:	4631      	mov	r1, r6
 8008472:	4640      	mov	r0, r8
 8008474:	f7ff fef4 	bl	8008260 <_free_r>
 8008478:	e7e1      	b.n	800843e <_realloc_r+0x1e>
 800847a:	4635      	mov	r5, r6
 800847c:	e7df      	b.n	800843e <_realloc_r+0x1e>
	...

08008480 <_sbrk_r>:
 8008480:	b538      	push	{r3, r4, r5, lr}
 8008482:	4d06      	ldr	r5, [pc, #24]	; (800849c <_sbrk_r+0x1c>)
 8008484:	2300      	movs	r3, #0
 8008486:	4604      	mov	r4, r0
 8008488:	4608      	mov	r0, r1
 800848a:	602b      	str	r3, [r5, #0]
 800848c:	f7fa f8d0 	bl	8002630 <_sbrk>
 8008490:	1c43      	adds	r3, r0, #1
 8008492:	d102      	bne.n	800849a <_sbrk_r+0x1a>
 8008494:	682b      	ldr	r3, [r5, #0]
 8008496:	b103      	cbz	r3, 800849a <_sbrk_r+0x1a>
 8008498:	6023      	str	r3, [r4, #0]
 800849a:	bd38      	pop	{r3, r4, r5, pc}
 800849c:	200134fc 	.word	0x200134fc

080084a0 <__malloc_lock>:
 80084a0:	4801      	ldr	r0, [pc, #4]	; (80084a8 <__malloc_lock+0x8>)
 80084a2:	f000 b811 	b.w	80084c8 <__retarget_lock_acquire_recursive>
 80084a6:	bf00      	nop
 80084a8:	20013500 	.word	0x20013500

080084ac <__malloc_unlock>:
 80084ac:	4801      	ldr	r0, [pc, #4]	; (80084b4 <__malloc_unlock+0x8>)
 80084ae:	f000 b80c 	b.w	80084ca <__retarget_lock_release_recursive>
 80084b2:	bf00      	nop
 80084b4:	20013500 	.word	0x20013500

080084b8 <_malloc_usable_size_r>:
 80084b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084bc:	1f18      	subs	r0, r3, #4
 80084be:	2b00      	cmp	r3, #0
 80084c0:	bfbc      	itt	lt
 80084c2:	580b      	ldrlt	r3, [r1, r0]
 80084c4:	18c0      	addlt	r0, r0, r3
 80084c6:	4770      	bx	lr

080084c8 <__retarget_lock_acquire_recursive>:
 80084c8:	4770      	bx	lr

080084ca <__retarget_lock_release_recursive>:
 80084ca:	4770      	bx	lr

080084cc <_init>:
 80084cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ce:	bf00      	nop
 80084d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d2:	bc08      	pop	{r3}
 80084d4:	469e      	mov	lr, r3
 80084d6:	4770      	bx	lr

080084d8 <_fini>:
 80084d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084da:	bf00      	nop
 80084dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084de:	bc08      	pop	{r3}
 80084e0:	469e      	mov	lr, r3
 80084e2:	4770      	bx	lr
