
audioplayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e584  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  0800e714  0800e714  0001e714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed54  0800ed54  000200e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed54  0800ed54  0001ed54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed5c  0800ed5c  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed5c  0800ed5c  0001ed5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed60  0800ed60  0001ed60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  0800ed64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200e8  2**0
                  CONTENTS
 10 .bss          00014ca4  200000e8  200000e8  000200e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20014d8c  20014d8c  000200e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023c50  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005470  00000000  00000000  00043d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e88  00000000  00000000  000491d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c68  00000000  00000000  0004b060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002742c  00000000  00000000  0004ccc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000282c5  00000000  00000000  000740f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc462  00000000  00000000  0009c3b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017881b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008300  00000000  00000000  0017886c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e8 	.word	0x200000e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e6fc 	.word	0x0800e6fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ec 	.word	0x200000ec
 80001cc:	0800e6fc 	.word	0x0800e6fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	603a      	str	r2, [r7, #0]
 800058e:	80fb      	strh	r3, [r7, #6]
 8000590:	460b      	mov	r3, r1
 8000592:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 8000594:	2300      	movs	r3, #0
 8000596:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8000598:	2200      	movs	r2, #0
 800059a:	6839      	ldr	r1, [r7, #0]
 800059c:	481c      	ldr	r0, [pc, #112]	; (8000610 <AUDIO_OUT_Init+0x8c>)
 800059e:	f000 f8f9 	bl	8000794 <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 80005a2:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <AUDIO_OUT_Init+0x8c>)
 80005a4:	4a1b      	ldr	r2, [pc, #108]	; (8000614 <AUDIO_OUT_Init+0x90>)
 80005a6:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80005a8:	4819      	ldr	r0, [pc, #100]	; (8000610 <AUDIO_OUT_Init+0x8c>)
 80005aa:	f008 fd1b 	bl	8008fe4 <HAL_I2S_GetState>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d103      	bne.n	80005bc <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 80005b4:	2100      	movs	r1, #0
 80005b6:	4816      	ldr	r0, [pc, #88]	; (8000610 <AUDIO_OUT_Init+0x8c>)
 80005b8:	f000 f946 	bl	8000848 <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 80005bc:	6838      	ldr	r0, [r7, #0]
 80005be:	f000 fa0b 	bl	80009d8 <I2S3_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 80005c8:	2301      	movs	r3, #1
 80005ca:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d10e      	bne.n	80005f0 <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <AUDIO_OUT_Init+0x94>)
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	2094      	movs	r0, #148	; 0x94
 80005d8:	4798      	blx	r3
 80005da:	4603      	mov	r3, r0
 80005dc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80005e0:	2be0      	cmp	r3, #224	; 0xe0
 80005e2:	d103      	bne.n	80005ec <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 80005e4:	4b0d      	ldr	r3, [pc, #52]	; (800061c <AUDIO_OUT_Init+0x98>)
 80005e6:	4a0c      	ldr	r2, [pc, #48]	; (8000618 <AUDIO_OUT_Init+0x94>)
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	e001      	b.n	80005f0 <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 80005ec:	2301      	movs	r3, #1
 80005ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d107      	bne.n	8000606 <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <AUDIO_OUT_Init+0x98>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	681c      	ldr	r4, [r3, #0]
 80005fc:	797a      	ldrb	r2, [r7, #5]
 80005fe:	88f9      	ldrh	r1, [r7, #6]
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	2094      	movs	r0, #148	; 0x94
 8000604:	47a0      	blx	r4
  }
  
  return ret;
 8000606:	7bfb      	ldrb	r3, [r7, #15]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	bd90      	pop	{r4, r7, pc}
 8000610:	20000108 	.word	0x20000108
 8000614:	40003c00 	.word	0x40003c00
 8000618:	20000020 	.word	0x20000020
 800061c:	20000104 	.word	0x20000104

08000620 <AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <AUDIO_OUT_Play+0x4c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	b292      	uxth	r2, r2
 8000634:	6879      	ldr	r1, [r7, #4]
 8000636:	2094      	movs	r0, #148	; 0x94
 8000638:	4798      	blx	r3
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 8000640:	2301      	movs	r3, #1
 8000642:	e00f      	b.n	8000664 <AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800064a:	d203      	bcs.n	8000654 <AUDIO_OUT_Play+0x34>
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	085b      	lsrs	r3, r3, #1
 8000650:	b29b      	uxth	r3, r3
 8000652:	e001      	b.n	8000658 <AUDIO_OUT_Play+0x38>
 8000654:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000658:	461a      	mov	r2, r3
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <AUDIO_OUT_Play+0x50>)
 800065e:	f008 f93f 	bl	80088e0 <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000662:	2300      	movs	r3, #0
  }
}
 8000664:	4618      	mov	r0, r3
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000104 	.word	0x20000104
 8000670:	20000108 	.word	0x20000108

08000674 <AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Pause(void)
{    
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <AUDIO_OUT_Pause+0x24>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	691b      	ldr	r3, [r3, #16]
 800067e:	2094      	movs	r0, #148	; 0x94
 8000680:	4798      	blx	r3
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <AUDIO_OUT_Pause+0x18>
  {
    return AUDIO_ERROR;
 8000688:	2301      	movs	r3, #1
 800068a:	e003      	b.n	8000694 <AUDIO_OUT_Pause+0x20>
  }
  else
  {
    /* Call the Media layer pause function */
    HAL_I2S_DMAPause(&hAudioOutI2s);
 800068c:	4803      	ldr	r0, [pc, #12]	; (800069c <AUDIO_OUT_Pause+0x28>)
 800068e:	f008 f9cf 	bl	8008a30 <HAL_I2S_DMAPause>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000692:	2300      	movs	r3, #0
  }
}
 8000694:	4618      	mov	r0, r3
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000104 	.word	0x20000104
 800069c:	20000108 	.word	0x20000108

080006a0 <AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Resume(void)
{    
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <AUDIO_OUT_Resume+0x24>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	2094      	movs	r0, #148	; 0x94
 80006ac:	4798      	blx	r3
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <AUDIO_OUT_Resume+0x18>
  {
    return AUDIO_ERROR;
 80006b4:	2301      	movs	r3, #1
 80006b6:	e003      	b.n	80006c0 <AUDIO_OUT_Resume+0x20>
  }
  else
  {
    /* Call the Media layer resume function */
    HAL_I2S_DMAResume(&hAudioOutI2s);
 80006b8:	4803      	ldr	r0, [pc, #12]	; (80006c8 <AUDIO_OUT_Resume+0x28>)
 80006ba:	f008 fa1b 	bl	8008af4 <HAL_I2S_DMAResume>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80006be:	2300      	movs	r3, #0
  }
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000104 	.word	0x20000104
 80006c8:	20000108 	.word	0x20000108

080006cc <AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Stop(uint32_t Option)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* Call DMA Stop to disable DMA stream before stopping codec */
  HAL_I2S_DMAStop(&hAudioOutI2s);
 80006d4:	480e      	ldr	r0, [pc, #56]	; (8000710 <AUDIO_OUT_Stop+0x44>)
 80006d6:	f008 faa1 	bl	8008c1c <HAL_I2S_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <AUDIO_OUT_Stop+0x48>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	6879      	ldr	r1, [r7, #4]
 80006e2:	2094      	movs	r0, #148	; 0x94
 80006e4:	4798      	blx	r3
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 80006ec:	2301      	movs	r3, #1
 80006ee:	e00b      	b.n	8000708 <AUDIO_OUT_Stop+0x3c>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d107      	bne.n	8000706 <AUDIO_OUT_Stop+0x3a>
    { 
      /* Wait at least 1ms */
      HAL_Delay(1);
 80006f6:	2001      	movs	r0, #1
 80006f8:	f005 fe26 	bl	8006348 <HAL_Delay>
      
      /* Reset the pin */
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2110      	movs	r1, #16
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <AUDIO_OUT_Stop+0x4c>)
 8000702:	f006 fdfd 	bl	8007300 <HAL_GPIO_WritePin>
    }
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000706:	2300      	movs	r3, #0
  }
}
 8000708:	4618      	mov	r0, r3
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000108 	.word	0x20000108
 8000714:	20000104 	.word	0x20000104
 8000718:	40020c00 	.word	0x40020c00

0800071c <AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <AUDIO_OUT_SetVolume+0x2c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	6a1b      	ldr	r3, [r3, #32]
 800072c:	79fa      	ldrb	r2, [r7, #7]
 800072e:	4611      	mov	r1, r2
 8000730:	2094      	movs	r0, #148	; 0x94
 8000732:	4798      	blx	r3
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 800073a:	2301      	movs	r3, #1
 800073c:	e000      	b.n	8000740 <AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800073e:	2300      	movs	r3, #0
  }
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000104 	.word	0x20000104

0800074c <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a04      	ldr	r2, [pc, #16]	; (800076c <HAL_I2S_TxCpltCallback+0x20>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d101      	bne.n	8000762 <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 800075e:	f005 fd5f 	bl	8006220 <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40003c00 	.word	0x40003c00

08000770 <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a04      	ldr	r2, [pc, #16]	; (8000790 <HAL_I2S_TxHalfCpltCallback+0x20>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d101      	bne.n	8000786 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 8000782:	f005 fd61 	bl	8006248 <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40003c00 	.word	0x40003c00

08000794 <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	; 0x28
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 80007a0:	2300      	movs	r3, #0
 80007a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80007a6:	23ff      	movs	r3, #255	; 0xff
 80007a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
  for(index = 0; index < 8; index++)
 80007ac:	2300      	movs	r3, #0
 80007ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80007b2:	e010      	b.n	80007d6 <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 80007b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007b8:	4a20      	ldr	r2, [pc, #128]	; (800083c <AUDIO_OUT_ClockConfig+0xa8>)
 80007ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d103      	bne.n	80007cc <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 80007c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(index = 0; index < 8; index++)
 80007cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007d0:	3301      	adds	r3, #1
 80007d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80007d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007da:	2b07      	cmp	r3, #7
 80007dc:	d9ea      	bls.n	80007b4 <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4618      	mov	r0, r3
 80007e4:	f009 fd88 	bl	800a2f8 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 80007e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007ec:	f003 0307 	and.w	r3, r3, #7
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d113      	bne.n	800081c <AUDIO_OUT_ClockConfig+0x88>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80007f4:	2301      	movs	r3, #1
 80007f6:	617b      	str	r3, [r7, #20]
//    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80007f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007fc:	4a10      	ldr	r2, [pc, #64]	; (8000840 <AUDIO_OUT_ClockConfig+0xac>)
 80007fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000802:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000804:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000808:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <AUDIO_OUT_ClockConfig+0xb0>)
 800080a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800080e:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4618      	mov	r0, r3
 8000816:	f009 fc8d 	bl	800a134 <HAL_RCCEx_PeriphCLKConfig>
//    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 800081a:	e00b      	b.n	8000834 <AUDIO_OUT_ClockConfig+0xa0>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800081c:	2301      	movs	r3, #1
 800081e:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8000820:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000824:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8000826:	2303      	movs	r3, #3
 8000828:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4618      	mov	r0, r3
 8000830:	f009 fc80 	bl	800a134 <HAL_RCCEx_PeriphCLKConfig>
}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	; 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	0800ea40 	.word	0x0800ea40
 8000840:	0800ea60 	.word	0x0800ea60
 8000844:	0800ea80 	.word	0x0800ea80

08000848 <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08c      	sub	sp, #48	; 0x30
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	61bb      	str	r3, [r7, #24]
 8000856:	4b56      	ldr	r3, [pc, #344]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	4a55      	ldr	r2, [pc, #340]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 800085c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000860:	6413      	str	r3, [r2, #64]	; 0x40
 8000862:	4b53      	ldr	r3, [pc, #332]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800086a:	61bb      	str	r3, [r7, #24]
 800086c:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
 8000872:	4b4f      	ldr	r3, [pc, #316]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a4e      	ldr	r2, [pc, #312]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b4c      	ldr	r3, [pc, #304]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	4b48      	ldr	r3, [pc, #288]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a47      	ldr	r2, [pc, #284]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b45      	ldr	r3, [pc, #276]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 80008a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 80008b4:	2302      	movs	r3, #2
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 80008b8:	2306      	movs	r3, #6
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	483c      	ldr	r0, [pc, #240]	; (80009b4 <AUDIO_OUT_MspInit+0x16c>)
 80008c4:	f006 fa84 	bl	8006dd0 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 80008c8:	2310      	movs	r3, #16
 80008ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4839      	ldr	r0, [pc, #228]	; (80009b8 <AUDIO_OUT_MspInit+0x170>)
 80008d4:	f006 fa7c 	bl	8006dd0 <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	4b34      	ldr	r3, [pc, #208]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 80008de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e0:	4a33      	ldr	r2, [pc, #204]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 80008e2:	f043 0304 	orr.w	r3, r3, #4
 80008e6:	6313      	str	r3, [r2, #48]	; 0x30
 80008e8:	4b31      	ldr	r3, [pc, #196]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 80008ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ec:	f003 0304 	and.w	r3, r3, #4
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	482d      	ldr	r0, [pc, #180]	; (80009b4 <AUDIO_OUT_MspInit+0x16c>)
 8000900:	f006 fa66 	bl	8006dd0 <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	4b29      	ldr	r3, [pc, #164]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 800090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090c:	4a28      	ldr	r2, [pc, #160]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 800090e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000912:	6313      	str	r3, [r2, #48]	; 0x30
 8000914:	4b26      	ldr	r3, [pc, #152]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a25      	ldr	r2, [pc, #148]	; (80009bc <AUDIO_OUT_MspInit+0x174>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d136      	bne.n	8000998 <AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 800092a:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 800092c:	2200      	movs	r2, #0
 800092e:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000930:	4b23      	ldr	r3, [pc, #140]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 8000932:	2240      	movs	r2, #64	; 0x40
 8000934:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000936:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 8000938:	2200      	movs	r2, #0
 800093a:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 800093c:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 800093e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000942:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8000944:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 8000946:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800094a:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 800094c:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 800094e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000952:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 8000954:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 800095a:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 800095c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000960:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8000962:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 8000964:	2204      	movs	r2, #4
 8000966:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000968:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 800096a:	2203      	movs	r2, #3
 800096c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800096e:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 8000970:	2200      	movs	r2, #0
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 8000976:	2200      	movs	r2, #0
 8000978:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 800097c:	4a11      	ldr	r2, [pc, #68]	; (80009c4 <AUDIO_OUT_MspInit+0x17c>)
 800097e:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a0f      	ldr	r2, [pc, #60]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 8000984:	639a      	str	r2, [r3, #56]	; 0x38
 8000986:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 800098e:	f005 fe8f 	bl	80066b0 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 8000992:	480b      	ldr	r0, [pc, #44]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 8000994:	f005 fdde 	bl	8006554 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	210e      	movs	r1, #14
 800099c:	202f      	movs	r0, #47	; 0x2f
 800099e:	f005 fdaf 	bl	8006500 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 80009a2:	202f      	movs	r0, #47	; 0x2f
 80009a4:	f005 fdc8 	bl	8006538 <HAL_NVIC_EnableIRQ>
}
 80009a8:	bf00      	nop
 80009aa:	3730      	adds	r7, #48	; 0x30
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020800 	.word	0x40020800
 80009b8:	40020000 	.word	0x40020000
 80009bc:	40003c00 	.word	0x40003c00
 80009c0:	20000150 	.word	0x20000150
 80009c4:	400260b8 	.word	0x400260b8

080009c8 <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
	...

080009d8 <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 80009e0:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <I2S3_Init+0x68>)
 80009e2:	4a18      	ldr	r2, [pc, #96]	; (8000a44 <I2S3_Init+0x6c>)
 80009e4:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <I2S3_Init+0x68>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	69da      	ldr	r2, [r3, #28]
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <I2S3_Init+0x68>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80009f4:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <I2S3_Init+0x68>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 80009fc:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <I2S3_Init+0x68>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <I2S3_Init+0x68>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <I2S3_Init+0x68>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <I2S3_Init+0x68>)
 8000a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a14:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 8000a16:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <I2S3_Init+0x68>)
 8000a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a1c:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <I2S3_Init+0x68>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8000a24:	4806      	ldr	r0, [pc, #24]	; (8000a40 <I2S3_Init+0x68>)
 8000a26:	f007 fe1b 	bl	8008660 <HAL_I2S_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	e000      	b.n	8000a36 <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 8000a34:	2300      	movs	r3, #0
  }
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000108 	.word	0x20000108
 8000a44:	40003c00 	.word	0x40003c00

08000a48 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <HAL_I2S_ErrorCallback+0x20>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d101      	bne.n	8000a5e <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 8000a5a:	f7ff ffb5 	bl	80009c8 <AUDIO_OUT_Error_CallBack>
  }
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40003c00 	.word	0x40003c00

08000a6c <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8000a70:	4814      	ldr	r0, [pc, #80]	; (8000ac4 <I2Cx_Init+0x58>)
 8000a72:	f007 fa09 	bl	8007e88 <HAL_I2C_GetState>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d121      	bne.n	8000ac0 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <I2Cx_Init+0x58>)
 8000a7e:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <I2Cx_Init+0x5c>)
 8000a80:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <I2Cx_Init+0x58>)
 8000a84:	2243      	movs	r2, #67	; 0x43
 8000a86:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8000a88:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <I2Cx_Init+0x58>)
 8000a8a:	4a10      	ldr	r2, [pc, #64]	; (8000acc <I2Cx_Init+0x60>)
 8000a8c:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <I2Cx_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a94:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <I2Cx_Init+0x58>)
 8000a96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a9a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <I2Cx_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <I2Cx_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <I2Cx_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8000aae:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <I2Cx_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8000ab4:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <I2Cx_Init+0x58>)
 8000ab6:	f000 f86b 	bl	8000b90 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8000aba:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <I2Cx_Init+0x58>)
 8000abc:	f006 fc52 	bl	8007364 <HAL_I2C_Init>
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200001b0 	.word	0x200001b0
 8000ac8:	40005400 	.word	0x40005400
 8000acc:	000186a0 	.word	0x000186a0

08000ad0 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af04      	add	r7, sp, #16
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	80fb      	strh	r3, [r7, #6]
 8000ada:	460b      	mov	r3, r1
 8000adc:	717b      	strb	r3, [r7, #5]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000ae6:	797b      	ldrb	r3, [r7, #5]
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <I2Cx_WriteData+0x48>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	88f9      	ldrh	r1, [r7, #6]
 8000af0:	9302      	str	r3, [sp, #8]
 8000af2:	2301      	movs	r3, #1
 8000af4:	9301      	str	r3, [sp, #4]
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	2301      	movs	r3, #1
 8000afc:	4807      	ldr	r0, [pc, #28]	; (8000b1c <I2Cx_WriteData+0x4c>)
 8000afe:	f006 fea3 	bl	8007848 <HAL_I2C_Mem_Write>
 8000b02:	4603      	mov	r3, r0
 8000b04:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000b0c:	f000 f834 	bl	8000b78 <I2Cx_Error>
  }
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	200001b0 	.word	0x200001b0

08000b20 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b088      	sub	sp, #32
 8000b24:	af04      	add	r7, sp, #16
 8000b26:	4603      	mov	r3, r0
 8000b28:	460a      	mov	r2, r1
 8000b2a:	80fb      	strh	r3, [r7, #6]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000b30:	2300      	movs	r3, #0
 8000b32:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000b38:	797b      	ldrb	r3, [r7, #5]
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <I2Cx_ReadData+0x50>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	88f9      	ldrh	r1, [r7, #6]
 8000b42:	9302      	str	r3, [sp, #8]
 8000b44:	2301      	movs	r3, #1
 8000b46:	9301      	str	r3, [sp, #4]
 8000b48:	f107 030e 	add.w	r3, r7, #14
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	2301      	movs	r3, #1
 8000b50:	4808      	ldr	r0, [pc, #32]	; (8000b74 <I2Cx_ReadData+0x54>)
 8000b52:	f006 ff73 	bl	8007a3c <HAL_I2C_Mem_Read>
 8000b56:	4603      	mov	r3, r0
 8000b58:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000b60:	f000 f80a 	bl	8000b78 <I2Cx_Error>
  }
  return value;
 8000b64:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000000 	.word	0x20000000
 8000b74:	200001b0 	.word	0x200001b0

08000b78 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8000b7c:	4803      	ldr	r0, [pc, #12]	; (8000b8c <I2Cx_Error+0x14>)
 8000b7e:	f006 fd35 	bl	80075ec <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8000b82:	f7ff ff73 	bl	8000a6c <I2Cx_Init>
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200001b0 	.word	0x200001b0

08000b90 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	4b25      	ldr	r3, [pc, #148]	; (8000c34 <I2Cx_MspInit+0xa4>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba0:	4a24      	ldr	r2, [pc, #144]	; (8000c34 <I2Cx_MspInit+0xa4>)
 8000ba2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba8:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <I2Cx_MspInit+0xa4>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <I2Cx_MspInit+0xa4>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	4a1d      	ldr	r2, [pc, #116]	; (8000c34 <I2Cx_MspInit+0xa4>)
 8000bbe:	f043 0302 	orr.w	r3, r3, #2
 8000bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <I2Cx_MspInit+0xa4>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	f003 0302 	and.w	r3, r3, #2
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000bd0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000bd6:	2312      	movs	r3, #18
 8000bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000bde:	2302      	movs	r3, #2
 8000be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000be2:	2304      	movs	r3, #4
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	4812      	ldr	r0, [pc, #72]	; (8000c38 <I2Cx_MspInit+0xa8>)
 8000bee:	f006 f8ef 	bl	8006dd0 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <I2Cx_MspInit+0xa4>)
 8000bf4:	6a1b      	ldr	r3, [r3, #32]
 8000bf6:	4a0f      	ldr	r2, [pc, #60]	; (8000c34 <I2Cx_MspInit+0xa4>)
 8000bf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bfc:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <I2Cx_MspInit+0xa4>)
 8000c00:	6a1b      	ldr	r3, [r3, #32]
 8000c02:	4a0c      	ldr	r2, [pc, #48]	; (8000c34 <I2Cx_MspInit+0xa4>)
 8000c04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000c08:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	201f      	movs	r0, #31
 8000c10:	f005 fc76 	bl	8006500 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000c14:	201f      	movs	r0, #31
 8000c16:	f005 fc8f 	bl	8006538 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	210f      	movs	r1, #15
 8000c1e:	2020      	movs	r0, #32
 8000c20:	f005 fc6e 	bl	8006500 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000c24:	2020      	movs	r0, #32
 8000c26:	f005 fc87 	bl	8006538 <HAL_NVIC_EnableIRQ>
}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	; 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020400 	.word	0x40020400

08000c3c <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <AUDIO_IO_Init+0x68>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a16      	ldr	r2, [pc, #88]	; (8000ca4 <AUDIO_IO_Init+0x68>)
 8000c4c:	f043 0308 	orr.w	r3, r3, #8
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <AUDIO_IO_Init+0x68>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0308 	and.w	r3, r3, #8
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000c5e:	2310      	movs	r3, #16
 8000c60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000c66:	2302      	movs	r3, #2
 8000c68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <AUDIO_IO_Init+0x6c>)
 8000c74:	f006 f8ac 	bl	8006dd0 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000c78:	f7ff fef8 	bl	8000a6c <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2110      	movs	r1, #16
 8000c80:	4809      	ldr	r0, [pc, #36]	; (8000ca8 <AUDIO_IO_Init+0x6c>)
 8000c82:	f006 fb3d 	bl	8007300 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000c86:	2005      	movs	r0, #5
 8000c88:	f005 fb5e 	bl	8006348 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2110      	movs	r1, #16
 8000c90:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <AUDIO_IO_Init+0x6c>)
 8000c92:	f006 fb35 	bl	8007300 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000c96:	2005      	movs	r0, #5
 8000c98:	f005 fb56 	bl	8006348 <HAL_Delay>
}
 8000c9c:	bf00      	nop
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020c00 	.word	0x40020c00

08000cac <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	71fb      	strb	r3, [r7, #7]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	71bb      	strb	r3, [r7, #6]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	797a      	ldrb	r2, [r7, #5]
 8000cd2:	79b9      	ldrb	r1, [r7, #6]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fefb 	bl	8000ad0 <I2Cx_WriteData>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	460a      	mov	r2, r1
 8000cec:	71fb      	strb	r3, [r7, #7]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	79ba      	ldrb	r2, [r7, #6]
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ff10 	bl	8000b20 <I2Cx_ReadData>
 8000d00:	4603      	mov	r3, r0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <AUDIO_StorageParse>:

//USBH_HandleTypeDef hUSBHost;
uint16_t NumObs = 0;

FRESULT AUDIO_StorageParse(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b094      	sub	sp, #80	; 0x50
 8000d10:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  DIR dir;
  char *fn;


//  res = f_opendir(&dir, USBHPath);
  res = f_opendir(&dir, USERPath);
 8000d18:	463b      	mov	r3, r7
 8000d1a:	493f      	ldr	r1, [pc, #252]	; (8000e18 <AUDIO_StorageParse+0x10c>)
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f003 f916 	bl	8003f4e <f_opendir>
 8000d22:	4603      	mov	r3, r0
 8000d24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  FileList.ptr = 0;
 8000d28:	4b3c      	ldr	r3, [pc, #240]	; (8000e1c <AUDIO_StorageParse+0x110>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8

  if(res == FR_OK)
 8000d30:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d15f      	bne.n	8000df8 <AUDIO_StorageParse+0xec>
  {
//    while(Appli_state == APPLICATION_READY)
	while(1)
    {
      res = f_readdir(&dir, &fno);
 8000d38:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f003 f99d 	bl	8004080 <f_readdir>
 8000d46:	4603      	mov	r3, r0
 8000d48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      if(res != FR_OK || fno.fname[0] == 0)
 8000d4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d151      	bne.n	8000df8 <AUDIO_StorageParse+0xec>
 8000d54:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d04d      	beq.n	8000df8 <AUDIO_StorageParse+0xec>
      {
        break;
      }
      if(fno.fname[0] == '.' || fno.fname[0] == '_')
 8000d5c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000d60:	2b2e      	cmp	r3, #46	; 0x2e
 8000d62:	d047      	beq.n	8000df4 <AUDIO_StorageParse+0xe8>
 8000d64:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000d68:	2b5f      	cmp	r3, #95	; 0x5f
 8000d6a:	d043      	beq.n	8000df4 <AUDIO_StorageParse+0xe8>
      {
        continue;
      }

      fn = fno.fname;
 8000d6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d70:	3309      	adds	r3, #9
 8000d72:	64bb      	str	r3, [r7, #72]	; 0x48

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 8000d74:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <AUDIO_StorageParse+0x110>)
 8000d76:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d7a:	2b17      	cmp	r3, #23
 8000d7c:	d8dc      	bhi.n	8000d38 <AUDIO_StorageParse+0x2c>
      {
        if((fno.fattrib & AM_DIR) == 0)
 8000d7e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000d82:	f003 0310 	and.w	r3, r3, #16
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1d6      	bne.n	8000d38 <AUDIO_StorageParse+0x2c>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 8000d8a:	4925      	ldr	r1, [pc, #148]	; (8000e20 <AUDIO_StorageParse+0x114>)
 8000d8c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000d8e:	f00d f860 	bl	800de52 <strstr>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d106      	bne.n	8000da6 <AUDIO_StorageParse+0x9a>
 8000d98:	4922      	ldr	r1, [pc, #136]	; (8000e24 <AUDIO_StorageParse+0x118>)
 8000d9a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000d9c:	f00d f859 	bl	800de52 <strstr>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d0c8      	beq.n	8000d38 <AUDIO_StorageParse+0x2c>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 8000da6:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <AUDIO_StorageParse+0x110>)
 8000da8:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000dac:	461a      	mov	r2, r3
 8000dae:	4613      	mov	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	4413      	add	r3, r2
 8000db8:	4a18      	ldr	r2, [pc, #96]	; (8000e1c <AUDIO_StorageParse+0x110>)
 8000dba:	4413      	add	r3, r2
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	2228      	movs	r2, #40	; 0x28
 8000dc0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f00d f832 	bl	800de2c <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <AUDIO_StorageParse+0x110>)
 8000dca:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4912      	ldr	r1, [pc, #72]	; (8000e1c <AUDIO_StorageParse+0x110>)
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	4413      	add	r3, r2
 8000ddc:	440b      	add	r3, r1
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <AUDIO_StorageParse+0x110>)
 8000de4:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000de8:	3301      	adds	r3, #1
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <AUDIO_StorageParse+0x110>)
 8000dee:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
 8000df2:	e7a1      	b.n	8000d38 <AUDIO_StorageParse+0x2c>
        continue;
 8000df4:	bf00      	nop
      res = f_readdir(&dir, &fno);
 8000df6:	e79f      	b.n	8000d38 <AUDIO_StorageParse+0x2c>
          }
        }
      }
    }
  }
  NumObs = FileList.ptr;
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <AUDIO_StorageParse+0x110>)
 8000dfa:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	; 0x3d8
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <AUDIO_StorageParse+0x11c>)
 8000e00:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 8000e02:	463b      	mov	r3, r7
 8000e04:	4618      	mov	r0, r3
 8000e06:	f003 f915 	bl	8004034 <f_closedir>
  return res;
 8000e0a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3750      	adds	r7, #80	; 0x50
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000410 	.word	0x20000410
 8000e1c:	200018c4 	.word	0x200018c4
 8000e20:	0800e714 	.word	0x0800e714
 8000e24:	0800e718 	.word	0x0800e718
 8000e28:	20000204 	.word	0x20000204

08000e2c <AUDIO_GetWavObjectNumber>:

uint16_t AUDIO_GetWavObjectNumber(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	if (AUDIO_StorageParse() == FR_OK){
 8000e30:	f7ff ff6c 	bl	8000d0c <AUDIO_StorageParse>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d102      	bne.n	8000e40 <AUDIO_GetWavObjectNumber+0x14>
		return NumObs;
 8000e3a:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <AUDIO_GetWavObjectNumber+0x1c>)
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	e001      	b.n	8000e44 <AUDIO_GetWavObjectNumber+0x18>
	}
	return -1;
 8000e40:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000204 	.word	0x20000204

08000e4c <LCD_Init>:
   
   0xFF
};
//----------------------------------------------------------------------------------
void LCD_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af02      	add	r7, sp, #8
   HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDRESS, comm, sizeof(comm),10);
 8000e52:	230a      	movs	r3, #10
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	231b      	movs	r3, #27
 8000e58:	4a03      	ldr	r2, [pc, #12]	; (8000e68 <LCD_Init+0x1c>)
 8000e5a:	2178      	movs	r1, #120	; 0x78
 8000e5c:	4803      	ldr	r0, [pc, #12]	; (8000e6c <LCD_Init+0x20>)
 8000e5e:	f006 fbf5 	bl	800764c <HAL_I2C_Master_Transmit>
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000004 	.word	0x20000004
 8000e6c:	200006bc 	.word	0x200006bc

08000e70 <LCD_command>:
//----------------------------------------------------------------------------------
void  LCD_command(uint8_t cmd)
{   
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af02      	add	r7, sp, #8
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
   uint8_t cmd_arr[2] = {0,0};
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	81bb      	strh	r3, [r7, #12]
   cmd_arr[0] = COMMAND_MODE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	733b      	strb	r3, [r7, #12]
   cmd_arr[1] = cmd;
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	737b      	strb	r3, [r7, #13]
   HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDRESS, cmd_arr, sizeof(cmd_arr),10);
 8000e86:	f107 020c 	add.w	r2, r7, #12
 8000e8a:	230a      	movs	r3, #10
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	2302      	movs	r3, #2
 8000e90:	2178      	movs	r1, #120	; 0x78
 8000e92:	4803      	ldr	r0, [pc, #12]	; (8000ea0 <LCD_command+0x30>)
 8000e94:	f006 fbda 	bl	800764c <HAL_I2C_Master_Transmit>
}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200006bc 	.word	0x200006bc

08000ea4 <LCD_Clear>:
{
   LCD_command(0xAE);
}
//----------------------------------------------------------------------------------
void LCD_Clear(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
   for(uint16_t ix = 1; ix < BUFF_SIZE; ix++)
 8000eaa:	2301      	movs	r3, #1
 8000eac:	80fb      	strh	r3, [r7, #6]
 8000eae:	e006      	b.n	8000ebe <LCD_Clear+0x1a>
   {
      lcd_buff[ix] = 0;
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <LCD_Clear+0x3c>)
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	54d1      	strb	r1, [r2, r3]
   for(uint16_t ix = 1; ix < BUFF_SIZE; ix++)
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	80fb      	strh	r3, [r7, #6]
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ec4:	d9f4      	bls.n	8000eb0 <LCD_Clear+0xc>
   }
   x_cur = 0;
 8000ec6:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <LCD_Clear+0x40>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
   y_cur = 0;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <LCD_Clear+0x44>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000208 	.word	0x20000208
 8000ee4:	2000040c 	.word	0x2000040c
 8000ee8:	2000040d 	.word	0x2000040d

08000eec <LCD_Update>:
//----------------------------------------------------------------------------------
void LCD_Update(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af02      	add	r7, sp, #8
   LCD_command(0x21);		      // SSD1306_COLUMNADDR
 8000ef2:	2021      	movs	r0, #33	; 0x21
 8000ef4:	f7ff ffbc 	bl	8000e70 <LCD_command>
   LCD_command(column_start);     // column start
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f7ff ffb9 	bl	8000e70 <LCD_command>
   LCD_command(column_end);       // column end
 8000efe:	207f      	movs	r0, #127	; 0x7f
 8000f00:	f7ff ffb6 	bl	8000e70 <LCD_command>
   LCD_command(0x22);             // SSD1306_PAGEADDR
 8000f04:	2022      	movs	r0, #34	; 0x22
 8000f06:	f7ff ffb3 	bl	8000e70 <LCD_command>
   LCD_command(page_start);       // page start
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f7ff ffb0 	bl	8000e70 <LCD_command>
   LCD_command(page_end);         // page end (4 pages for 32 rows OLED)
 8000f10:	2003      	movs	r0, #3
 8000f12:	f7ff ffad 	bl	8000e70 <LCD_command>
   
   lcd_buff[0]= DATA_MODE;              
 8000f16:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <LCD_Update+0x48>)
 8000f18:	2240      	movs	r2, #64	; 0x40
 8000f1a:	701a      	strb	r2, [r3, #0]
   
   HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDRESS, lcd_buff, BUFF_SIZE,50);
 8000f1c:	2332      	movs	r3, #50	; 0x32
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	f240 2301 	movw	r3, #513	; 0x201
 8000f24:	4a03      	ldr	r2, [pc, #12]	; (8000f34 <LCD_Update+0x48>)
 8000f26:	2178      	movs	r1, #120	; 0x78
 8000f28:	4803      	ldr	r0, [pc, #12]	; (8000f38 <LCD_Update+0x4c>)
 8000f2a:	f006 fb8f 	bl	800764c <HAL_I2C_Master_Transmit>
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000208 	.word	0x20000208
 8000f38:	200006bc 	.word	0x200006bc

08000f3c <LCD_Chr>:
//----------------------------------------------------------------------------------
void LCD_Chr(char ch)
{
 8000f3c:	b490      	push	{r4, r7}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
   uint8_t i;   
   lcd_buff_idx=(y_cur*128 + x_cur*6) + 1;    
 8000f46:	4b32      	ldr	r3, [pc, #200]	; (8001010 <LCD_Chr+0xd4>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	01db      	lsls	r3, r3, #7
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	4b30      	ldr	r3, [pc, #192]	; (8001014 <LCD_Chr+0xd8>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	4619      	mov	r1, r3
 8000f58:	0049      	lsls	r1, r1, #1
 8000f5a:	440b      	add	r3, r1
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	4413      	add	r3, r2
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	3301      	adds	r3, #1
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	4b2b      	ldr	r3, [pc, #172]	; (8001018 <LCD_Chr+0xdc>)
 8000f6a:	801a      	strh	r2, [r3, #0]
   if ((ch >= 0x20)&&(ch <= 0x7F)) ch -= 32;
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	2b1f      	cmp	r3, #31
 8000f70:	d907      	bls.n	8000f82 <LCD_Chr+0x46>
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	db03      	blt.n	8000f82 <LCD_Chr+0x46>
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	3b20      	subs	r3, #32
 8000f7e:	71fb      	strb	r3, [r7, #7]
 8000f80:	e001      	b.n	8000f86 <LCD_Chr+0x4a>
   else ch = 95;   
 8000f82:	235f      	movs	r3, #95	; 0x5f
 8000f84:	71fb      	strb	r3, [r7, #7]
   for (i = 0; i < 5; i++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	e014      	b.n	8000fb6 <LCD_Chr+0x7a>
   {
        lcd_buff[lcd_buff_idx++] = font[(int) ch][i];
 8000f8c:	79fa      	ldrb	r2, [r7, #7]
 8000f8e:	7bf9      	ldrb	r1, [r7, #15]
 8000f90:	4b21      	ldr	r3, [pc, #132]	; (8001018 <LCD_Chr+0xdc>)
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	1c58      	adds	r0, r3, #1
 8000f96:	b284      	uxth	r4, r0
 8000f98:	481f      	ldr	r0, [pc, #124]	; (8001018 <LCD_Chr+0xdc>)
 8000f9a:	8004      	strh	r4, [r0, #0]
 8000f9c:	461c      	mov	r4, r3
 8000f9e:	481f      	ldr	r0, [pc, #124]	; (800101c <LCD_Chr+0xe0>)
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4403      	add	r3, r0
 8000fa8:	440b      	add	r3, r1
 8000faa:	781a      	ldrb	r2, [r3, #0]
 8000fac:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <LCD_Chr+0xe4>)
 8000fae:	551a      	strb	r2, [r3, r4]
   for (i = 0; i < 5; i++)
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	73fb      	strb	r3, [r7, #15]
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	d9e7      	bls.n	8000f8c <LCD_Chr+0x50>
   }
   lcd_buff[lcd_buff_idx++] = 0x00;  
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <LCD_Chr+0xdc>)
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	1c5a      	adds	r2, r3, #1
 8000fc2:	b291      	uxth	r1, r2
 8000fc4:	4a14      	ldr	r2, [pc, #80]	; (8001018 <LCD_Chr+0xdc>)
 8000fc6:	8011      	strh	r1, [r2, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <LCD_Chr+0xe4>)
 8000fcc:	2100      	movs	r1, #0
 8000fce:	5499      	strb	r1, [r3, r2]
   x_cur++;
 8000fd0:	4b10      	ldr	r3, [pc, #64]	; (8001014 <LCD_Chr+0xd8>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <LCD_Chr+0xd8>)
 8000fda:	701a      	strb	r2, [r3, #0]
   if (x_cur > 20)
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <LCD_Chr+0xd8>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b14      	cmp	r3, #20
 8000fe2:	d90f      	bls.n	8001004 <LCD_Chr+0xc8>
   {
      x_cur = 0;
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <LCD_Chr+0xd8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
      y_cur++;
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <LCD_Chr+0xd4>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <LCD_Chr+0xd4>)
 8000ff4:	701a      	strb	r2, [r3, #0]
      if (y_cur > 3)
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <LCD_Chr+0xd4>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d902      	bls.n	8001004 <LCD_Chr+0xc8>
      {
         y_cur = 0;
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <LCD_Chr+0xd4>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
      }
   }
}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bc90      	pop	{r4, r7}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	2000040d 	.word	0x2000040d
 8001014:	2000040c 	.word	0x2000040c
 8001018:	2000040a 	.word	0x2000040a
 800101c:	0800eaa0 	.word	0x0800eaa0
 8001020:	20000208 	.word	0x20000208

08001024 <LCD_FStr>:
      }
   }
}
//----------------------------------------------------------------------------------
void LCD_FStr(const char *dataPtr, uint8_t x, uint8_t y)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	70fb      	strb	r3, [r7, #3]
 8001030:	4613      	mov	r3, r2
 8001032:	70bb      	strb	r3, [r7, #2]
   LCD_GotoXY(x,y);
 8001034:	78ba      	ldrb	r2, [r7, #2]
 8001036:	78fb      	ldrb	r3, [r7, #3]
 8001038:	4611      	mov	r1, r2
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f812 	bl	8001064 <LCD_GotoXY>
   while(*dataPtr != 0)
 8001040:	e007      	b.n	8001052 <LCD_FStr+0x2e>
   {
      LCD_Chr(*dataPtr);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff ff78 	bl	8000f3c <LCD_Chr>
      dataPtr++;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3301      	adds	r3, #1
 8001050:	607b      	str	r3, [r7, #4]
   while(*dataPtr != 0)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f3      	bne.n	8001042 <LCD_FStr+0x1e>
   }
}
 800105a:	bf00      	nop
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <LCD_GotoXY>:
      dataPtr++;
   }
}
////----------------------------------------------------
void LCD_GotoXY(uint8_t x,uint8_t y)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	460a      	mov	r2, r1
 800106e:	71fb      	strb	r3, [r7, #7]
 8001070:	4613      	mov	r3, r2
 8001072:	71bb      	strb	r3, [r7, #6]
   if((x < 21)&&(y < (page_end+1)))
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	2b14      	cmp	r3, #20
 8001078:	d808      	bhi.n	800108c <LCD_GotoXY+0x28>
 800107a:	79bb      	ldrb	r3, [r7, #6]
 800107c:	2b03      	cmp	r3, #3
 800107e:	d805      	bhi.n	800108c <LCD_GotoXY+0x28>
   {
      x_cur = x;
 8001080:	4a05      	ldr	r2, [pc, #20]	; (8001098 <LCD_GotoXY+0x34>)
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	7013      	strb	r3, [r2, #0]
      y_cur = y;
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <LCD_GotoXY+0x38>)
 8001088:	79bb      	ldrb	r3, [r7, #6]
 800108a:	7013      	strb	r3, [r2, #0]
   }
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	2000040c 	.word	0x2000040c
 800109c:	2000040d 	.word	0x2000040d

080010a0 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	4603      	mov	r3, r0
 80010aa:	81fb      	strh	r3, [r7, #14]
 80010ac:	460b      	mov	r3, r1
 80010ae:	81bb      	strh	r3, [r7, #12]
 80010b0:	4613      	mov	r3, r2
 80010b2:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 80010b8:	f7ff fdc0 	bl	8000c3c <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 80010bc:	89fb      	ldrh	r3, [r7, #14]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2201      	movs	r2, #1
 80010c2:	2102      	movs	r1, #2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 fb01 	bl	80016cc <CODEC_IO_Write>
 80010ca:	4603      	mov	r3, r0
 80010cc:	461a      	mov	r2, r3
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	4413      	add	r3, r2
 80010d2:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 80010d4:	89bb      	ldrh	r3, [r7, #12]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	2b03      	cmp	r3, #3
 80010da:	d81b      	bhi.n	8001114 <cs43l22_Init+0x74>
 80010dc:	a201      	add	r2, pc, #4	; (adr r2, 80010e4 <cs43l22_Init+0x44>)
 80010de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e2:	bf00      	nop
 80010e4:	080010f5 	.word	0x080010f5
 80010e8:	080010fd 	.word	0x080010fd
 80010ec:	08001105 	.word	0x08001105
 80010f0:	0800110d 	.word	0x0800110d
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 80010f4:	4b5b      	ldr	r3, [pc, #364]	; (8001264 <cs43l22_Init+0x1c4>)
 80010f6:	22fa      	movs	r2, #250	; 0xfa
 80010f8:	701a      	strb	r2, [r3, #0]
    break;
 80010fa:	e00f      	b.n	800111c <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 80010fc:	4b59      	ldr	r3, [pc, #356]	; (8001264 <cs43l22_Init+0x1c4>)
 80010fe:	22af      	movs	r2, #175	; 0xaf
 8001100:	701a      	strb	r2, [r3, #0]
    break;
 8001102:	e00b      	b.n	800111c <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8001104:	4b57      	ldr	r3, [pc, #348]	; (8001264 <cs43l22_Init+0x1c4>)
 8001106:	22aa      	movs	r2, #170	; 0xaa
 8001108:	701a      	strb	r2, [r3, #0]
    break;
 800110a:	e007      	b.n	800111c <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 800110c:	4b55      	ldr	r3, [pc, #340]	; (8001264 <cs43l22_Init+0x1c4>)
 800110e:	2205      	movs	r2, #5
 8001110:	701a      	strb	r2, [r3, #0]
    break;    
 8001112:	e003      	b.n	800111c <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8001114:	4b53      	ldr	r3, [pc, #332]	; (8001264 <cs43l22_Init+0x1c4>)
 8001116:	2205      	movs	r2, #5
 8001118:	701a      	strb	r2, [r3, #0]
    break;    
 800111a:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800111c:	89fb      	ldrh	r3, [r7, #14]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	4a50      	ldr	r2, [pc, #320]	; (8001264 <cs43l22_Init+0x1c4>)
 8001122:	7812      	ldrb	r2, [r2, #0]
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	2104      	movs	r1, #4
 8001128:	4618      	mov	r0, r3
 800112a:	f000 facf 	bl	80016cc <CODEC_IO_Write>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	4413      	add	r3, r2
 8001136:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8001138:	89fb      	ldrh	r3, [r7, #14]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2281      	movs	r2, #129	; 0x81
 800113e:	2105      	movs	r1, #5
 8001140:	4618      	mov	r0, r3
 8001142:	f000 fac3 	bl	80016cc <CODEC_IO_Write>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	4413      	add	r3, r2
 800114e:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8001150:	89fb      	ldrh	r3, [r7, #14]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2204      	movs	r2, #4
 8001156:	2106      	movs	r1, #6
 8001158:	4618      	mov	r0, r3
 800115a:	f000 fab7 	bl	80016cc <CODEC_IO_Write>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	4413      	add	r3, r2
 8001166:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8001168:	7afa      	ldrb	r2, [r7, #11]
 800116a:	89fb      	ldrh	r3, [r7, #14]
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f000 f964 	bl	800143c <cs43l22_SetVolume>
 8001174:	4602      	mov	r2, r0
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	4413      	add	r3, r2
 800117a:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 800117c:	89bb      	ldrh	r3, [r7, #12]
 800117e:	2b02      	cmp	r3, #2
 8001180:	d023      	beq.n	80011ca <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8001182:	89fb      	ldrh	r3, [r7, #14]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2206      	movs	r2, #6
 8001188:	210f      	movs	r1, #15
 800118a:	4618      	mov	r0, r3
 800118c:	f000 fa9e 	bl	80016cc <CODEC_IO_Write>
 8001190:	4603      	mov	r3, r0
 8001192:	461a      	mov	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	4413      	add	r3, r2
 8001198:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 800119a:	89fb      	ldrh	r3, [r7, #14]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2200      	movs	r2, #0
 80011a0:	2124      	movs	r1, #36	; 0x24
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 fa92 	bl	80016cc <CODEC_IO_Write>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	4413      	add	r3, r2
 80011b0:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 80011b2:	89fb      	ldrh	r3, [r7, #14]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2200      	movs	r2, #0
 80011b8:	2125      	movs	r1, #37	; 0x25
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 fa86 	bl	80016cc <CODEC_IO_Write>
 80011c0:	4603      	mov	r3, r0
 80011c2:	461a      	mov	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	4413      	add	r3, r2
 80011c8:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 80011ca:	89fb      	ldrh	r3, [r7, #14]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2200      	movs	r2, #0
 80011d0:	210a      	movs	r1, #10
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 fa7a 	bl	80016cc <CODEC_IO_Write>
 80011d8:	4603      	mov	r3, r0
 80011da:	461a      	mov	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	4413      	add	r3, r2
 80011e0:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80011e2:	89fb      	ldrh	r3, [r7, #14]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2204      	movs	r2, #4
 80011e8:	210e      	movs	r1, #14
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 fa6e 	bl	80016cc <CODEC_IO_Write>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	4413      	add	r3, r2
 80011f8:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 80011fa:	89fb      	ldrh	r3, [r7, #14]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2200      	movs	r2, #0
 8001200:	2127      	movs	r1, #39	; 0x27
 8001202:	4618      	mov	r0, r3
 8001204:	f000 fa62 	bl	80016cc <CODEC_IO_Write>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	4413      	add	r3, r2
 8001210:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8001212:	89fb      	ldrh	r3, [r7, #14]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	220f      	movs	r2, #15
 8001218:	211f      	movs	r1, #31
 800121a:	4618      	mov	r0, r3
 800121c:	f000 fa56 	bl	80016cc <CODEC_IO_Write>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	4413      	add	r3, r2
 8001228:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 800122a:	89fb      	ldrh	r3, [r7, #14]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	220a      	movs	r2, #10
 8001230:	211a      	movs	r1, #26
 8001232:	4618      	mov	r0, r3
 8001234:	f000 fa4a 	bl	80016cc <CODEC_IO_Write>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	4413      	add	r3, r2
 8001240:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8001242:	89fb      	ldrh	r3, [r7, #14]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	220a      	movs	r2, #10
 8001248:	211b      	movs	r1, #27
 800124a:	4618      	mov	r0, r3
 800124c:	f000 fa3e 	bl	80016cc <CODEC_IO_Write>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	4413      	add	r3, r2
 8001258:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 800125a:	697b      	ldr	r3, [r7, #20]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	2000040e 	.word	0x2000040e

08001268 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 800126c:	f7ff fd1e 	bl	8000cac <AUDIO_IO_DeInit>
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}

08001274 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 800127e:	f7ff fcdd 	bl	8000c3c <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8001282:	88fb      	ldrh	r3, [r7, #6]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2101      	movs	r1, #1
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fd2a 	bl	8000ce2 <AUDIO_IO_Read>
 800128e:	4603      	mov	r3, r0
 8001290:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	f023 0307 	bic.w	r3, r3, #7
 8001298:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 800129a:	7bfb      	ldrb	r3, [r7, #15]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	80fb      	strh	r3, [r7, #6]
 80012b0:	4613      	mov	r3, r2
 80012b2:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 80012b8:	4b16      	ldr	r3, [pc, #88]	; (8001314 <cs43l22_Play+0x70>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d123      	bne.n	8001308 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2206      	movs	r2, #6
 80012c6:	210e      	movs	r1, #14
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 f9ff 	bl	80016cc <CODEC_IO_Write>
 80012ce:	4603      	mov	r3, r0
 80012d0:	461a      	mov	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4413      	add	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 f919 	bl	8001514 <cs43l22_SetMute>
 80012e2:	4602      	mov	r2, r0
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4413      	add	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	229e      	movs	r2, #158	; 0x9e
 80012f0:	2102      	movs	r1, #2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f9ea 	bl	80016cc <CODEC_IO_Write>
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4413      	add	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 8001302:	4b04      	ldr	r3, [pc, #16]	; (8001314 <cs43l22_Play+0x70>)
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8001308:	68fb      	ldr	r3, [r7, #12]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000050 	.word	0x20000050

08001318 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	2101      	movs	r1, #1
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f8f2 	bl	8001514 <cs43l22_SetMute>
 8001330:	4602      	mov	r2, r0
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4413      	add	r3, r2
 8001336:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2201      	movs	r2, #1
 800133e:	2102      	movs	r1, #2
 8001340:	4618      	mov	r0, r3
 8001342:	f000 f9c3 	bl	80016cc <CODEC_IO_Write>
 8001346:	4603      	mov	r3, r0
 8001348:	461a      	mov	r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4413      	add	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8001350:	68fb      	ldr	r3, [r7, #12]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f000 f8ce 	bl	8001514 <cs43l22_SetMute>
 8001378:	4602      	mov	r2, r0
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4413      	add	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	e002      	b.n	800138c <cs43l22_Resume+0x30>
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	3301      	adds	r3, #1
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	2bfe      	cmp	r3, #254	; 0xfe
 8001390:	d9f9      	bls.n	8001386 <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	4a0e      	ldr	r2, [pc, #56]	; (80013d0 <cs43l22_Resume+0x74>)
 8001398:	7812      	ldrb	r2, [r2, #0]
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	2104      	movs	r1, #4
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f994 	bl	80016cc <CODEC_IO_Write>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4413      	add	r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 80013ae:	88fb      	ldrh	r3, [r7, #6]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	229e      	movs	r2, #158	; 0x9e
 80013b4:	2102      	movs	r1, #2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 f988 	bl	80016cc <CODEC_IO_Write>
 80013bc:	4603      	mov	r3, r0
 80013be:	461a      	mov	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4413      	add	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80013c6:	68fb      	ldr	r3, [r7, #12]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2000040e 	.word	0x2000040e

080013d4 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	6039      	str	r1, [r7, #0]
 80013de:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	2101      	movs	r1, #1
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 f893 	bl	8001514 <cs43l22_SetMute>
 80013ee:	4602      	mov	r2, r0
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4413      	add	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2204      	movs	r2, #4
 80013fc:	210e      	movs	r1, #14
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 f964 	bl	80016cc <CODEC_IO_Write>
 8001404:	4603      	mov	r3, r0
 8001406:	461a      	mov	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4413      	add	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	229f      	movs	r2, #159	; 0x9f
 8001414:	2102      	movs	r1, #2
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f958 	bl	80016cc <CODEC_IO_Write>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4413      	add	r3, r2
 8001424:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 8001426:	4b04      	ldr	r3, [pc, #16]	; (8001438 <cs43l22_Stop+0x64>)
 8001428:	2201      	movs	r2, #1
 800142a:	701a      	strb	r2, [r3, #0]
  return counter;    
 800142c:	68fb      	ldr	r3, [r7, #12]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000050 	.word	0x20000050

0800143c <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	460a      	mov	r2, r1
 8001446:	80fb      	strh	r3, [r7, #6]
 8001448:	4613      	mov	r3, r2
 800144a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001450:	797b      	ldrb	r3, [r7, #5]
 8001452:	2b64      	cmp	r3, #100	; 0x64
 8001454:	d80b      	bhi.n	800146e <cs43l22_SetVolume+0x32>
 8001456:	797a      	ldrb	r2, [r7, #5]
 8001458:	4613      	mov	r3, r2
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	1a9b      	subs	r3, r3, r2
 800145e:	4a25      	ldr	r2, [pc, #148]	; (80014f4 <cs43l22_SetVolume+0xb8>)
 8001460:	fb82 1203 	smull	r1, r2, r2, r3
 8001464:	1152      	asrs	r2, r2, #5
 8001466:	17db      	asrs	r3, r3, #31
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	b2db      	uxtb	r3, r3
 800146c:	e000      	b.n	8001470 <cs43l22_SetVolume+0x34>
 800146e:	23ff      	movs	r3, #255	; 0xff
 8001470:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 8001472:	7afb      	ldrb	r3, [r7, #11]
 8001474:	2be6      	cmp	r3, #230	; 0xe6
 8001476:	d91c      	bls.n	80014b2 <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	b2d8      	uxtb	r0, r3
 800147c:	7afb      	ldrb	r3, [r7, #11]
 800147e:	3319      	adds	r3, #25
 8001480:	b2db      	uxtb	r3, r3
 8001482:	461a      	mov	r2, r3
 8001484:	2120      	movs	r1, #32
 8001486:	f000 f921 	bl	80016cc <CODEC_IO_Write>
 800148a:	4603      	mov	r3, r0
 800148c:	461a      	mov	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4413      	add	r3, r2
 8001492:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	b2d8      	uxtb	r0, r3
 8001498:	7afb      	ldrb	r3, [r7, #11]
 800149a:	3319      	adds	r3, #25
 800149c:	b2db      	uxtb	r3, r3
 800149e:	461a      	mov	r2, r3
 80014a0:	2121      	movs	r1, #33	; 0x21
 80014a2:	f000 f913 	bl	80016cc <CODEC_IO_Write>
 80014a6:	4603      	mov	r3, r0
 80014a8:	461a      	mov	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4413      	add	r3, r2
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	e01b      	b.n	80014ea <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	b2d8      	uxtb	r0, r3
 80014b6:	7afb      	ldrb	r3, [r7, #11]
 80014b8:	3319      	adds	r3, #25
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	461a      	mov	r2, r3
 80014be:	2120      	movs	r1, #32
 80014c0:	f000 f904 	bl	80016cc <CODEC_IO_Write>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	b2d8      	uxtb	r0, r3
 80014d2:	7afb      	ldrb	r3, [r7, #11]
 80014d4:	3319      	adds	r3, #25
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	461a      	mov	r2, r3
 80014da:	2121      	movs	r1, #33	; 0x21
 80014dc:	f000 f8f6 	bl	80016cc <CODEC_IO_Write>
 80014e0:	4603      	mov	r3, r0
 80014e2:	461a      	mov	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4413      	add	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 80014ea:	68fb      	ldr	r3, [r7, #12]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	51eb851f 	.word	0x51eb851f

080014f8 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	6039      	str	r1, [r7, #0]
 8001502:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d124      	bne.n	8001574 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 800152a:	88fb      	ldrh	r3, [r7, #6]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	22ff      	movs	r2, #255	; 0xff
 8001530:	2104      	movs	r1, #4
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f8ca 	bl	80016cc <CODEC_IO_Write>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4413      	add	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2201      	movs	r2, #1
 8001548:	2122      	movs	r1, #34	; 0x22
 800154a:	4618      	mov	r0, r3
 800154c:	f000 f8be 	bl	80016cc <CODEC_IO_Write>
 8001550:	4603      	mov	r3, r0
 8001552:	461a      	mov	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4413      	add	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2201      	movs	r2, #1
 8001560:	2123      	movs	r1, #35	; 0x23
 8001562:	4618      	mov	r0, r3
 8001564:	f000 f8b2 	bl	80016cc <CODEC_IO_Write>
 8001568:	4603      	mov	r3, r0
 800156a:	461a      	mov	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	e025      	b.n	80015c0 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2200      	movs	r2, #0
 800157a:	2122      	movs	r1, #34	; 0x22
 800157c:	4618      	mov	r0, r3
 800157e:	f000 f8a5 	bl	80016cc <CODEC_IO_Write>
 8001582:	4603      	mov	r3, r0
 8001584:	461a      	mov	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4413      	add	r3, r2
 800158a:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2200      	movs	r2, #0
 8001592:	2123      	movs	r1, #35	; 0x23
 8001594:	4618      	mov	r0, r3
 8001596:	f000 f899 	bl	80016cc <CODEC_IO_Write>
 800159a:	4603      	mov	r3, r0
 800159c:	461a      	mov	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4413      	add	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	4a08      	ldr	r2, [pc, #32]	; (80015cc <cs43l22_SetMute+0xb8>)
 80015aa:	7812      	ldrb	r2, [r2, #0]
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	2104      	movs	r1, #4
 80015b0:	4618      	mov	r0, r3
 80015b2:	f000 f88b 	bl	80016cc <CODEC_IO_Write>
 80015b6:	4603      	mov	r3, r0
 80015b8:	461a      	mov	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4413      	add	r3, r2
 80015be:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80015c0:	68fb      	ldr	r3, [r7, #12]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	2000040e 	.word	0x2000040e

080015d0 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	460a      	mov	r2, r1
 80015da:	80fb      	strh	r3, [r7, #6]
 80015dc:	4613      	mov	r3, r2
 80015de:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80015e4:	797b      	ldrb	r3, [r7, #5]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d84b      	bhi.n	8001684 <cs43l22_SetOutputMode+0xb4>
 80015ec:	a201      	add	r2, pc, #4	; (adr r2, 80015f4 <cs43l22_SetOutputMode+0x24>)
 80015ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f2:	bf00      	nop
 80015f4:	08001605 	.word	0x08001605
 80015f8:	08001625 	.word	0x08001625
 80015fc:	08001645 	.word	0x08001645
 8001600:	08001665 	.word	0x08001665
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8001604:	88fb      	ldrh	r3, [r7, #6]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	22fa      	movs	r2, #250	; 0xfa
 800160a:	2104      	movs	r1, #4
 800160c:	4618      	mov	r0, r3
 800160e:	f000 f85d 	bl	80016cc <CODEC_IO_Write>
 8001612:	4603      	mov	r3, r0
 8001614:	461a      	mov	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4413      	add	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 800161c:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <cs43l22_SetOutputMode+0xe0>)
 800161e:	22fa      	movs	r2, #250	; 0xfa
 8001620:	701a      	strb	r2, [r3, #0]
      break;
 8001622:	e03f      	b.n	80016a4 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	b2db      	uxtb	r3, r3
 8001628:	22af      	movs	r2, #175	; 0xaf
 800162a:	2104      	movs	r1, #4
 800162c:	4618      	mov	r0, r3
 800162e:	f000 f84d 	bl	80016cc <CODEC_IO_Write>
 8001632:	4603      	mov	r3, r0
 8001634:	461a      	mov	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4413      	add	r3, r2
 800163a:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 800163c:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <cs43l22_SetOutputMode+0xe0>)
 800163e:	22af      	movs	r2, #175	; 0xaf
 8001640:	701a      	strb	r2, [r3, #0]
      break;
 8001642:	e02f      	b.n	80016a4 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8001644:	88fb      	ldrh	r3, [r7, #6]
 8001646:	b2db      	uxtb	r3, r3
 8001648:	22aa      	movs	r2, #170	; 0xaa
 800164a:	2104      	movs	r1, #4
 800164c:	4618      	mov	r0, r3
 800164e:	f000 f83d 	bl	80016cc <CODEC_IO_Write>
 8001652:	4603      	mov	r3, r0
 8001654:	461a      	mov	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4413      	add	r3, r2
 800165a:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <cs43l22_SetOutputMode+0xe0>)
 800165e:	22aa      	movs	r2, #170	; 0xaa
 8001660:	701a      	strb	r2, [r3, #0]
      break;
 8001662:	e01f      	b.n	80016a4 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2205      	movs	r2, #5
 800166a:	2104      	movs	r1, #4
 800166c:	4618      	mov	r0, r3
 800166e:	f000 f82d 	bl	80016cc <CODEC_IO_Write>
 8001672:	4603      	mov	r3, r0
 8001674:	461a      	mov	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4413      	add	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <cs43l22_SetOutputMode+0xe0>)
 800167e:	2205      	movs	r2, #5
 8001680:	701a      	strb	r2, [r3, #0]
      break;    
 8001682:	e00f      	b.n	80016a4 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001684:	88fb      	ldrh	r3, [r7, #6]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2205      	movs	r2, #5
 800168a:	2104      	movs	r1, #4
 800168c:	4618      	mov	r0, r3
 800168e:	f000 f81d 	bl	80016cc <CODEC_IO_Write>
 8001692:	4603      	mov	r3, r0
 8001694:	461a      	mov	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4413      	add	r3, r2
 800169a:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <cs43l22_SetOutputMode+0xe0>)
 800169e:	2205      	movs	r2, #5
 80016a0:	701a      	strb	r2, [r3, #0]
      break;
 80016a2:	bf00      	nop
  }  
  return counter;
 80016a4:	68fb      	ldr	r3, [r7, #12]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	2000040e 	.word	0x2000040e

080016b4 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	80fb      	strh	r3, [r7, #6]
  return 0;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
 80016d6:	460b      	mov	r3, r1
 80016d8:	71bb      	strb	r3, [r7, #6]
 80016da:	4613      	mov	r3, r2
 80016dc:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 80016e2:	797a      	ldrb	r2, [r7, #5]
 80016e4:	79b9      	ldrb	r1, [r7, #6]
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fae6 	bl	8000cba <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	b2db      	uxtb	r3, r3
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	4a08      	ldr	r2, [pc, #32]	; (800172c <disk_status+0x30>)
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	79fa      	ldrb	r2, [r7, #7]
 8001714:	4905      	ldr	r1, [pc, #20]	; (800172c <disk_status+0x30>)
 8001716:	440a      	add	r2, r1
 8001718:	7a12      	ldrb	r2, [r2, #8]
 800171a:	4610      	mov	r0, r2
 800171c:	4798      	blx	r3
 800171e:	4603      	mov	r3, r0
 8001720:	73fb      	strb	r3, [r7, #15]
  return stat;
 8001722:	7bfb      	ldrb	r3, [r7, #15]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	2000065c 	.word	0x2000065c

08001730 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	4a0d      	ldr	r2, [pc, #52]	; (8001778 <disk_initialize+0x48>)
 8001742:	5cd3      	ldrb	r3, [r2, r3]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d111      	bne.n	800176c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	4a0b      	ldr	r2, [pc, #44]	; (8001778 <disk_initialize+0x48>)
 800174c:	2101      	movs	r1, #1
 800174e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	4a09      	ldr	r2, [pc, #36]	; (8001778 <disk_initialize+0x48>)
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	79fa      	ldrb	r2, [r7, #7]
 800175e:	4906      	ldr	r1, [pc, #24]	; (8001778 <disk_initialize+0x48>)
 8001760:	440a      	add	r2, r1
 8001762:	7a12      	ldrb	r2, [r2, #8]
 8001764:	4610      	mov	r0, r2
 8001766:	4798      	blx	r3
 8001768:	4603      	mov	r3, r0
 800176a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	2000065c 	.word	0x2000065c

0800177c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b087      	sub	sp, #28
 8001780:	af00      	add	r7, sp, #0
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	4603      	mov	r3, r0
 800178a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <disk_read+0x3c>)
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	689c      	ldr	r4, [r3, #8]
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <disk_read+0x3c>)
 800179c:	4413      	add	r3, r2
 800179e:	7a18      	ldrb	r0, [r3, #8]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	47a0      	blx	r4
 80017a8:	4603      	mov	r3, r0
 80017aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80017ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	371c      	adds	r7, #28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd90      	pop	{r4, r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000065c 	.word	0x2000065c

080017bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b087      	sub	sp, #28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	4603      	mov	r3, r0
 80017ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <disk_write+0x3c>)
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	68dc      	ldr	r4, [r3, #12]
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	4a07      	ldr	r2, [pc, #28]	; (80017f8 <disk_write+0x3c>)
 80017dc:	4413      	add	r3, r2
 80017de:	7a18      	ldrb	r0, [r3, #8]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	47a0      	blx	r4
 80017e8:	4603      	mov	r3, r0
 80017ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80017ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	371c      	adds	r7, #28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd90      	pop	{r4, r7, pc}
 80017f6:	bf00      	nop
 80017f8:	2000065c 	.word	0x2000065c

080017fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	603a      	str	r2, [r7, #0]
 8001806:	71fb      	strb	r3, [r7, #7]
 8001808:	460b      	mov	r3, r1
 800180a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	4a09      	ldr	r2, [pc, #36]	; (8001834 <disk_ioctl+0x38>)
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	79fa      	ldrb	r2, [r7, #7]
 800181a:	4906      	ldr	r1, [pc, #24]	; (8001834 <disk_ioctl+0x38>)
 800181c:	440a      	add	r2, r1
 800181e:	7a10      	ldrb	r0, [r2, #8]
 8001820:	79b9      	ldrb	r1, [r7, #6]
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	4798      	blx	r3
 8001826:	4603      	mov	r3, r0
 8001828:	73fb      	strb	r3, [r7, #15]
  return res;
 800182a:	7bfb      	ldrb	r3, [r7, #15]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	2000065c 	.word	0x2000065c

08001838 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b0c0      	sub	sp, #256	; 0x100
 800183c:	af00      	add	r7, sp, #0
    /*## FatFS: Link the USER driver ###########################*/
    retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800183e:	4912      	ldr	r1, [pc, #72]	; (8001888 <MX_FATFS_Init+0x50>)
 8001840:	4812      	ldr	r0, [pc, #72]	; (800188c <MX_FATFS_Init+0x54>)
 8001842:	f002 fd5b 	bl	80042fc <FATFS_LinkDriver>
 8001846:	4603      	mov	r3, r0
 8001848:	461a      	mov	r2, r3
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_FATFS_Init+0x58>)
 800184c:	701a      	strb	r2, [r3, #0]

    /* USER CODE BEGIN Init */
    char buf[256];
    sprintf(buf, "# FatFs Init %s!\r\n", retUSER == 0 ? "Successfully" : "Failed");
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <MX_FATFS_Init+0x58>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <MX_FATFS_Init+0x22>
 8001856:	4a0f      	ldr	r2, [pc, #60]	; (8001894 <MX_FATFS_Init+0x5c>)
 8001858:	e000      	b.n	800185c <MX_FATFS_Init+0x24>
 800185a:	4a0f      	ldr	r2, [pc, #60]	; (8001898 <MX_FATFS_Init+0x60>)
 800185c:	463b      	mov	r3, r7
 800185e:	490f      	ldr	r1, [pc, #60]	; (800189c <MX_FATFS_Init+0x64>)
 8001860:	4618      	mov	r0, r3
 8001862:	f00c fac3 	bl	800ddec <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 8001866:	463b      	mov	r3, r7
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fcb1 	bl	80001d0 <strlen>
 800186e:	4603      	mov	r3, r0
 8001870:	b29a      	uxth	r2, r3
 8001872:	4639      	mov	r1, r7
 8001874:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001878:	4809      	ldr	r0, [pc, #36]	; (80018a0 <MX_FATFS_Init+0x68>)
 800187a:	f009 fbe0 	bl	800b03e <HAL_UART_Transmit>
    /* USER CODE END Init */
}
 800187e:	bf00      	nop
 8001880:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000410 	.word	0x20000410
 800188c:	20000060 	.word	0x20000060
 8001890:	2000040f 	.word	0x2000040f
 8001894:	0800e71c 	.word	0x0800e71c
 8001898:	0800e72c 	.word	0x0800e72c
 800189c:	0800e734 	.word	0x0800e734
 80018a0:	20000810 	.word	0x20000810

080018a4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3301      	adds	r3, #1
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80018b4:	89fb      	ldrh	r3, [r7, #14]
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	b21a      	sxth	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	b21b      	sxth	r3, r3
 80018c0:	4313      	orrs	r3, r2
 80018c2:	b21b      	sxth	r3, r3
 80018c4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80018c6:	89fb      	ldrh	r3, [r7, #14]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3303      	adds	r3, #3
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	3202      	adds	r2, #2
 80018ec:	7812      	ldrb	r2, [r2, #0]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	3201      	adds	r2, #1
 80018fa:	7812      	ldrb	r2, [r2, #0]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	021b      	lsls	r3, r3, #8
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	7812      	ldrb	r2, [r2, #0]
 8001908:	4313      	orrs	r3, r2
 800190a:	60fb      	str	r3, [r7, #12]
	return rv;
 800190c:	68fb      	ldr	r3, [r7, #12]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	460b      	mov	r3, r1
 8001924:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	887a      	ldrh	r2, [r7, #2]
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	701a      	strb	r2, [r3, #0]
 8001932:	887b      	ldrh	r3, [r7, #2]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	1c5a      	adds	r2, r3, #1
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	887a      	ldrh	r2, [r7, #2]
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	701a      	strb	r2, [r3, #0]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	701a      	strb	r2, [r3, #0]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	0a1b      	lsrs	r3, r3, #8
 800196a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	701a      	strb	r2, [r3, #0]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	0a1b      	lsrs	r3, r3, #8
 800197c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	1c5a      	adds	r2, r3, #1
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	701a      	strb	r2, [r3, #0]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	701a      	strb	r2, [r3, #0]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80019a8:	b480      	push	{r7}
 80019aa:	b087      	sub	sp, #28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00d      	beq.n	80019de <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	1c53      	adds	r3, r2, #1
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	1c59      	adds	r1, r3, #1
 80019cc:	6179      	str	r1, [r7, #20]
 80019ce:	7812      	ldrb	r2, [r2, #0]
 80019d0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f1      	bne.n	80019c2 <mem_cpy+0x1a>
	}
}
 80019de:	bf00      	nop
 80019e0:	371c      	adds	r7, #28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80019ea:	b480      	push	{r7}
 80019ec:	b087      	sub	sp, #28
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	1c5a      	adds	r2, r3, #1
 80019fe:	617a      	str	r2, [r7, #20]
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f3      	bne.n	80019fa <mem_set+0x10>
}
 8001a12:	bf00      	nop
 8001a14:	bf00      	nop
 8001a16:	371c      	adds	r7, #28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	61fb      	str	r3, [r7, #28]
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	61fa      	str	r2, [r7, #28]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	4619      	mov	r1, r3
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	1c5a      	adds	r2, r3, #1
 8001a46:	61ba      	str	r2, [r7, #24]
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	1acb      	subs	r3, r1, r3
 8001a4c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3b01      	subs	r3, #1
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d002      	beq.n	8001a60 <mem_cmp+0x40>
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0eb      	beq.n	8001a38 <mem_cmp+0x18>

	return r;
 8001a60:	697b      	ldr	r3, [r7, #20]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3724      	adds	r7, #36	; 0x24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8001a78:	e002      	b.n	8001a80 <chk_chr+0x12>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <chk_chr+0x26>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d1f2      	bne.n	8001a7a <chk_chr+0xc>
	return *str;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	781b      	ldrb	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	e029      	b.n	8001b0c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8001ab8:	4a27      	ldr	r2, [pc, #156]	; (8001b58 <chk_lock+0xb4>)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	011b      	lsls	r3, r3, #4
 8001abe:	4413      	add	r3, r2
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d01d      	beq.n	8001b02 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8001ac6:	4a24      	ldr	r2, [pc, #144]	; (8001b58 <chk_lock+0xb4>)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	4413      	add	r3, r2
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d116      	bne.n	8001b06 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8001ad8:	4a1f      	ldr	r2, [pc, #124]	; (8001b58 <chk_lock+0xb4>)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	4413      	add	r3, r2
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d10c      	bne.n	8001b06 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8001aec:	4a1a      	ldr	r2, [pc, #104]	; (8001b58 <chk_lock+0xb4>)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	011b      	lsls	r3, r3, #4
 8001af2:	4413      	add	r3, r2
 8001af4:	3308      	adds	r3, #8
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d102      	bne.n	8001b06 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8001b00:	e007      	b.n	8001b12 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8001b02:	2301      	movs	r3, #1
 8001b04:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0d2      	beq.n	8001ab8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d109      	bne.n	8001b2c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d102      	bne.n	8001b24 <chk_lock+0x80>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d101      	bne.n	8001b28 <chk_lock+0x84>
 8001b24:	2300      	movs	r3, #0
 8001b26:	e010      	b.n	8001b4a <chk_lock+0xa6>
 8001b28:	2312      	movs	r3, #18
 8001b2a:	e00e      	b.n	8001b4a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d108      	bne.n	8001b44 <chk_lock+0xa0>
 8001b32:	4a09      	ldr	r2, [pc, #36]	; (8001b58 <chk_lock+0xb4>)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	4413      	add	r3, r2
 8001b3a:	330c      	adds	r3, #12
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b42:	d101      	bne.n	8001b48 <chk_lock+0xa4>
 8001b44:	2310      	movs	r3, #16
 8001b46:	e000      	b.n	8001b4a <chk_lock+0xa6>
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	2000064c 	.word	0x2000064c

08001b5c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	e002      	b.n	8001b6e <enq_lock+0x12>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d106      	bne.n	8001b82 <enq_lock+0x26>
 8001b74:	4a09      	ldr	r2, [pc, #36]	; (8001b9c <enq_lock+0x40>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	4413      	add	r3, r2
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f2      	bne.n	8001b68 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	bf14      	ite	ne
 8001b88:	2301      	movne	r3, #1
 8001b8a:	2300      	moveq	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	2000064c 	.word	0x2000064c

08001ba0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	e01f      	b.n	8001bf0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8001bb0:	4a41      	ldr	r2, [pc, #260]	; (8001cb8 <inc_lock+0x118>)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	011b      	lsls	r3, r3, #4
 8001bb6:	4413      	add	r3, r2
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d113      	bne.n	8001bea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8001bc2:	4a3d      	ldr	r2, [pc, #244]	; (8001cb8 <inc_lock+0x118>)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	4413      	add	r3, r2
 8001bca:	3304      	adds	r3, #4
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d109      	bne.n	8001bea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8001bd6:	4a38      	ldr	r2, [pc, #224]	; (8001cb8 <inc_lock+0x118>)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	4413      	add	r3, r2
 8001bde:	3308      	adds	r3, #8
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d006      	beq.n	8001bf8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	3301      	adds	r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0dc      	beq.n	8001bb0 <inc_lock+0x10>
 8001bf6:	e000      	b.n	8001bfa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8001bf8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d132      	bne.n	8001c66 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	e002      	b.n	8001c0c <inc_lock+0x6c>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d106      	bne.n	8001c20 <inc_lock+0x80>
 8001c12:	4a29      	ldr	r2, [pc, #164]	; (8001cb8 <inc_lock+0x118>)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	011b      	lsls	r3, r3, #4
 8001c18:	4413      	add	r3, r2
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1f2      	bne.n	8001c06 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <inc_lock+0x8a>
 8001c26:	2300      	movs	r3, #0
 8001c28:	e040      	b.n	8001cac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4922      	ldr	r1, [pc, #136]	; (8001cb8 <inc_lock+0x118>)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	011b      	lsls	r3, r3, #4
 8001c34:	440b      	add	r3, r1
 8001c36:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	491e      	ldr	r1, [pc, #120]	; (8001cb8 <inc_lock+0x118>)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	011b      	lsls	r3, r3, #4
 8001c42:	440b      	add	r3, r1
 8001c44:	3304      	adds	r3, #4
 8001c46:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	695a      	ldr	r2, [r3, #20]
 8001c4c:	491a      	ldr	r1, [pc, #104]	; (8001cb8 <inc_lock+0x118>)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	011b      	lsls	r3, r3, #4
 8001c52:	440b      	add	r3, r1
 8001c54:	3308      	adds	r3, #8
 8001c56:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8001c58:	4a17      	ldr	r2, [pc, #92]	; (8001cb8 <inc_lock+0x118>)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	4413      	add	r3, r2
 8001c60:	330c      	adds	r3, #12
 8001c62:	2200      	movs	r2, #0
 8001c64:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d009      	beq.n	8001c80 <inc_lock+0xe0>
 8001c6c:	4a12      	ldr	r2, [pc, #72]	; (8001cb8 <inc_lock+0x118>)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	4413      	add	r3, r2
 8001c74:	330c      	adds	r3, #12
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <inc_lock+0xe0>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	e015      	b.n	8001cac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d108      	bne.n	8001c98 <inc_lock+0xf8>
 8001c86:	4a0c      	ldr	r2, [pc, #48]	; (8001cb8 <inc_lock+0x118>)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	4413      	add	r3, r2
 8001c8e:	330c      	adds	r3, #12
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	3301      	adds	r3, #1
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	e001      	b.n	8001c9c <inc_lock+0xfc>
 8001c98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c9c:	4906      	ldr	r1, [pc, #24]	; (8001cb8 <inc_lock+0x118>)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	440b      	add	r3, r1
 8001ca4:	330c      	adds	r3, #12
 8001ca6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	3301      	adds	r3, #1
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	2000064c 	.word	0x2000064c

08001cbc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d125      	bne.n	8001d1c <dec_lock+0x60>
		n = Files[i].ctr;
 8001cd0:	4a17      	ldr	r2, [pc, #92]	; (8001d30 <dec_lock+0x74>)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	011b      	lsls	r3, r3, #4
 8001cd6:	4413      	add	r3, r2
 8001cd8:	330c      	adds	r3, #12
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8001cde:	89fb      	ldrh	r3, [r7, #14]
 8001ce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ce4:	d101      	bne.n	8001cea <dec_lock+0x2e>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8001cea:	89fb      	ldrh	r3, [r7, #14]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <dec_lock+0x3a>
 8001cf0:	89fb      	ldrh	r3, [r7, #14]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8001cf6:	4a0e      	ldr	r2, [pc, #56]	; (8001d30 <dec_lock+0x74>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	4413      	add	r3, r2
 8001cfe:	330c      	adds	r3, #12
 8001d00:	89fa      	ldrh	r2, [r7, #14]
 8001d02:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8001d04:	89fb      	ldrh	r3, [r7, #14]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d105      	bne.n	8001d16 <dec_lock+0x5a>
 8001d0a:	4a09      	ldr	r2, [pc, #36]	; (8001d30 <dec_lock+0x74>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	011b      	lsls	r3, r3, #4
 8001d10:	4413      	add	r3, r2
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	737b      	strb	r3, [r7, #13]
 8001d1a:	e001      	b.n	8001d20 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8001d20:	7b7b      	ldrb	r3, [r7, #13]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	2000064c 	.word	0x2000064c

08001d34 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	e010      	b.n	8001d64 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8001d42:	4a0d      	ldr	r2, [pc, #52]	; (8001d78 <clear_lock+0x44>)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	4413      	add	r3, r2
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d105      	bne.n	8001d5e <clear_lock+0x2a>
 8001d52:	4a09      	ldr	r2, [pc, #36]	; (8001d78 <clear_lock+0x44>)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	4413      	add	r3, r2
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	3301      	adds	r3, #1
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0eb      	beq.n	8001d42 <clear_lock+0xe>
	}
}
 8001d6a:	bf00      	nop
 8001d6c:	bf00      	nop
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	2000064c 	.word	0x2000064c

08001d7c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	78db      	ldrb	r3, [r3, #3]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d034      	beq.n	8001dfa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	7858      	ldrb	r0, [r3, #1]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001da0:	2301      	movs	r3, #1
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	f7ff fd0a 	bl	80017bc <disk_write>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	73fb      	strb	r3, [r7, #15]
 8001db2:	e022      	b.n	8001dfa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	1ad2      	subs	r2, r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d217      	bcs.n	8001dfa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	789b      	ldrb	r3, [r3, #2]
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	e010      	b.n	8001df4 <sync_window+0x78>
					wsect += fs->fsize;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	4413      	add	r3, r2
 8001dda:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	7858      	ldrb	r0, [r3, #1]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001de6:	2301      	movs	r3, #1
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	f7ff fce7 	bl	80017bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	3b01      	subs	r3, #1
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d8eb      	bhi.n	8001dd2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d01b      	beq.n	8001e54 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ffad 	bl	8001d7c <sync_window>
 8001e22:	4603      	mov	r3, r0
 8001e24:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d113      	bne.n	8001e54 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7858      	ldrb	r0, [r3, #1]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001e36:	2301      	movs	r3, #1
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	f7ff fc9f 	bl	800177c <disk_read>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d004      	beq.n	8001e4e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8001e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e48:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ff87 	bl	8001d7c <sync_window>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d158      	bne.n	8001f2a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b03      	cmp	r3, #3
 8001e7e:	d148      	bne.n	8001f12 <sync_fs+0xb2>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	791b      	ldrb	r3, [r3, #4]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d144      	bne.n	8001f12 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3330      	adds	r3, #48	; 0x30
 8001e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e90:	2100      	movs	r1, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fda9 	bl	80019ea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3330      	adds	r3, #48	; 0x30
 8001e9c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8001ea0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fd38 	bl	800191a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3330      	adds	r3, #48	; 0x30
 8001eae:	4921      	ldr	r1, [pc, #132]	; (8001f34 <sync_fs+0xd4>)
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff fd4d 	bl	8001950 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3330      	adds	r3, #48	; 0x30
 8001eba:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001ebe:	491e      	ldr	r1, [pc, #120]	; (8001f38 <sync_fs+0xd8>)
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fd45 	bl	8001950 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3330      	adds	r3, #48	; 0x30
 8001eca:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	f7ff fd3b 	bl	8001950 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3330      	adds	r3, #48	; 0x30
 8001ede:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4610      	mov	r0, r2
 8001eea:	f7ff fd31 	bl	8001950 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	7858      	ldrb	r0, [r3, #1]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f06:	2301      	movs	r3, #1
 8001f08:	f7ff fc58 	bl	80017bc <disk_write>
			fs->fsi_flag = 0;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	785b      	ldrb	r3, [r3, #1]
 8001f16:	2200      	movs	r2, #0
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fc6e 	bl	80017fc <disk_ioctl>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <sync_fs+0xca>
 8001f26:	2301      	movs	r3, #1
 8001f28:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	41615252 	.word	0x41615252
 8001f38:	61417272 	.word	0x61417272

08001f3c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	3b02      	subs	r3, #2
 8001f4a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	3b02      	subs	r3, #2
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d301      	bcc.n	8001f5c <clust2sect+0x20>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	e008      	b.n	8001f6e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	895b      	ldrh	r3, [r3, #10]
 8001f60:	461a      	mov	r2, r3
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	fb03 f202 	mul.w	r2, r3, r2
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6c:	4413      	add	r3, r2
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d904      	bls.n	8001f9a <get_fat+0x20>
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d302      	bcc.n	8001fa0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	e08f      	b.n	80020c0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fa4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	d062      	beq.n	8002074 <get_fat+0xfa>
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	dc7c      	bgt.n	80020ac <get_fat+0x132>
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d002      	beq.n	8001fbc <get_fat+0x42>
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d042      	beq.n	8002040 <get_fat+0xc6>
 8001fba:	e077      	b.n	80020ac <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	085b      	lsrs	r3, r3, #1
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	6a1a      	ldr	r2, [r3, #32]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	0a5b      	lsrs	r3, r3, #9
 8001fd2:	4413      	add	r3, r2
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	6938      	ldr	r0, [r7, #16]
 8001fd8:	f7ff ff14 	bl	8001e04 <move_window>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d167      	bne.n	80020b2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	60fa      	str	r2, [r7, #12]
 8001fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4413      	add	r3, r2
 8001ff0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ff4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	6a1a      	ldr	r2, [r3, #32]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	0a5b      	lsrs	r3, r3, #9
 8001ffe:	4413      	add	r3, r2
 8002000:	4619      	mov	r1, r3
 8002002:	6938      	ldr	r0, [r7, #16]
 8002004:	f7ff fefe 	bl	8001e04 <move_window>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d153      	bne.n	80020b6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4413      	add	r3, r2
 8002018:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800201c:	021b      	lsls	r3, r3, #8
 800201e:	461a      	mov	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	4313      	orrs	r3, r2
 8002024:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <get_fat+0xbc>
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	091b      	lsrs	r3, r3, #4
 8002034:	e002      	b.n	800203c <get_fat+0xc2>
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800203c:	617b      	str	r3, [r7, #20]
			break;
 800203e:	e03f      	b.n	80020c0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	6a1a      	ldr	r2, [r3, #32]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	0a1b      	lsrs	r3, r3, #8
 8002048:	4413      	add	r3, r2
 800204a:	4619      	mov	r1, r3
 800204c:	6938      	ldr	r0, [r7, #16]
 800204e:	f7ff fed9 	bl	8001e04 <move_window>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d130      	bne.n	80020ba <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8002066:	4413      	add	r3, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fc1b 	bl	80018a4 <ld_word>
 800206e:	4603      	mov	r3, r0
 8002070:	617b      	str	r3, [r7, #20]
			break;
 8002072:	e025      	b.n	80020c0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	6a1a      	ldr	r2, [r3, #32]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	09db      	lsrs	r3, r3, #7
 800207c:	4413      	add	r3, r2
 800207e:	4619      	mov	r1, r3
 8002080:	6938      	ldr	r0, [r7, #16]
 8002082:	f7ff febf 	bl	8001e04 <move_window>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d118      	bne.n	80020be <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800209a:	4413      	add	r3, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fc19 	bl	80018d4 <ld_dword>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80020a8:	617b      	str	r3, [r7, #20]
			break;
 80020aa:	e009      	b.n	80020c0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80020ac:	2301      	movs	r3, #1
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	e006      	b.n	80020c0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80020b2:	bf00      	nop
 80020b4:	e004      	b.n	80020c0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80020b6:	bf00      	nop
 80020b8:	e002      	b.n	80020c0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80020ba:	bf00      	nop
 80020bc:	e000      	b.n	80020c0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80020be:	bf00      	nop
		}
	}

	return val;
 80020c0:	697b      	ldr	r3, [r7, #20]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80020ca:	b590      	push	{r4, r7, lr}
 80020cc:	b089      	sub	sp, #36	; 0x24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80020d6:	2302      	movs	r3, #2
 80020d8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	f240 80d2 	bls.w	8002286 <put_fat+0x1bc>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	f080 80cc 	bcs.w	8002286 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	f000 8096 	beq.w	8002224 <put_fat+0x15a>
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	f300 80cd 	bgt.w	8002298 <put_fat+0x1ce>
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d002      	beq.n	8002108 <put_fat+0x3e>
 8002102:	2b02      	cmp	r3, #2
 8002104:	d06e      	beq.n	80021e4 <put_fat+0x11a>
 8002106:	e0c7      	b.n	8002298 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	61bb      	str	r3, [r7, #24]
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	085b      	lsrs	r3, r3, #1
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4413      	add	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6a1a      	ldr	r2, [r3, #32]
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	0a5b      	lsrs	r3, r3, #9
 800211e:	4413      	add	r3, r2
 8002120:	4619      	mov	r1, r3
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f7ff fe6e 	bl	8001e04 <move_window>
 8002128:	4603      	mov	r3, r0
 800212a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800212c:	7ffb      	ldrb	r3, [r7, #31]
 800212e:	2b00      	cmp	r3, #0
 8002130:	f040 80ab 	bne.w	800228a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	1c59      	adds	r1, r3, #1
 800213e:	61b9      	str	r1, [r7, #24]
 8002140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002144:	4413      	add	r3, r2
 8002146:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00d      	beq.n	800216e <put_fat+0xa4>
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b25b      	sxtb	r3, r3
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	b25a      	sxtb	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	b25b      	sxtb	r3, r3
 8002166:	4313      	orrs	r3, r2
 8002168:	b25b      	sxtb	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	e001      	b.n	8002172 <put_fat+0xa8>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2201      	movs	r2, #1
 800217a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a1a      	ldr	r2, [r3, #32]
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	0a5b      	lsrs	r3, r3, #9
 8002184:	4413      	add	r3, r2
 8002186:	4619      	mov	r1, r3
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f7ff fe3b 	bl	8001e04 <move_window>
 800218e:	4603      	mov	r3, r0
 8002190:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002192:	7ffb      	ldrb	r3, [r7, #31]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d17a      	bne.n	800228e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021a4:	4413      	add	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <put_fat+0xf0>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	091b      	lsrs	r3, r3, #4
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	e00e      	b.n	80021d8 <put_fat+0x10e>
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	b25b      	sxtb	r3, r3
 80021c0:	f023 030f 	bic.w	r3, r3, #15
 80021c4:	b25a      	sxtb	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	0a1b      	lsrs	r3, r3, #8
 80021ca:	b25b      	sxtb	r3, r3
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	b25b      	sxtb	r3, r3
 80021d2:	4313      	orrs	r3, r2
 80021d4:	b25b      	sxtb	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2201      	movs	r2, #1
 80021e0:	70da      	strb	r2, [r3, #3]
			break;
 80021e2:	e059      	b.n	8002298 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a1a      	ldr	r2, [r3, #32]
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	4413      	add	r3, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f7ff fe07 	bl	8001e04 <move_window>
 80021f6:	4603      	mov	r3, r0
 80021f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80021fa:	7ffb      	ldrb	r3, [r7, #31]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d148      	bne.n	8002292 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800220e:	4413      	add	r3, r2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	b292      	uxth	r2, r2
 8002214:	4611      	mov	r1, r2
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fb7f 	bl	800191a <st_word>
			fs->wflag = 1;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2201      	movs	r2, #1
 8002220:	70da      	strb	r2, [r3, #3]
			break;
 8002222:	e039      	b.n	8002298 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6a1a      	ldr	r2, [r3, #32]
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	09db      	lsrs	r3, r3, #7
 800222c:	4413      	add	r3, r2
 800222e:	4619      	mov	r1, r3
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f7ff fde7 	bl	8001e04 <move_window>
 8002236:	4603      	mov	r3, r0
 8002238:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800223a:	7ffb      	ldrb	r3, [r7, #31]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d12a      	bne.n	8002296 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002254:	4413      	add	r3, r2
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff fb3c 	bl	80018d4 <ld_dword>
 800225c:	4603      	mov	r3, r0
 800225e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002262:	4323      	orrs	r3, r4
 8002264:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002274:	4413      	add	r3, r2
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fb69 	bl	8001950 <st_dword>
			fs->wflag = 1;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2201      	movs	r2, #1
 8002282:	70da      	strb	r2, [r3, #3]
			break;
 8002284:	e008      	b.n	8002298 <put_fat+0x1ce>
		}
	}
 8002286:	bf00      	nop
 8002288:	e006      	b.n	8002298 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800228a:	bf00      	nop
 800228c:	e004      	b.n	8002298 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800228e:	bf00      	nop
 8002290:	e002      	b.n	8002298 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8002292:	bf00      	nop
 8002294:	e000      	b.n	8002298 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8002296:	bf00      	nop
	return res;
 8002298:	7ffb      	ldrb	r3, [r7, #31]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3724      	adds	r7, #36	; 0x24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd90      	pop	{r4, r7, pc}

080022a2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b088      	sub	sp, #32
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d904      	bls.n	80022c8 <remove_chain+0x26>
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d301      	bcc.n	80022cc <remove_chain+0x2a>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e04b      	b.n	8002364 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00c      	beq.n	80022ec <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80022d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	69b8      	ldr	r0, [r7, #24]
 80022da:	f7ff fef6 	bl	80020ca <put_fat>
 80022de:	4603      	mov	r3, r0
 80022e0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80022e2:	7ffb      	ldrb	r3, [r7, #31]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <remove_chain+0x4a>
 80022e8:	7ffb      	ldrb	r3, [r7, #31]
 80022ea:	e03b      	b.n	8002364 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80022ec:	68b9      	ldr	r1, [r7, #8]
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f7ff fe43 	bl	8001f7a <get_fat>
 80022f4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d031      	beq.n	8002360 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <remove_chain+0x64>
 8002302:	2302      	movs	r3, #2
 8002304:	e02e      	b.n	8002364 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800230c:	d101      	bne.n	8002312 <remove_chain+0x70>
 800230e:	2301      	movs	r3, #1
 8002310:	e028      	b.n	8002364 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8002312:	2200      	movs	r2, #0
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	69b8      	ldr	r0, [r7, #24]
 8002318:	f7ff fed7 	bl	80020ca <put_fat>
 800231c:	4603      	mov	r3, r0
 800231e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8002320:	7ffb      	ldrb	r3, [r7, #31]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <remove_chain+0x88>
 8002326:	7ffb      	ldrb	r3, [r7, #31]
 8002328:	e01c      	b.n	8002364 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	3b02      	subs	r3, #2
 8002334:	429a      	cmp	r2, r3
 8002336:	d20b      	bcs.n	8002350 <remove_chain+0xae>
			fs->free_clst++;
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	791b      	ldrb	r3, [r3, #4]
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	b2da      	uxtb	r2, r3
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	429a      	cmp	r2, r3
 800235c:	d3c6      	bcc.n	80022ec <remove_chain+0x4a>
 800235e:	e000      	b.n	8002362 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8002360:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3720      	adds	r7, #32
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10d      	bne.n	800239e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d004      	beq.n	8002398 <create_chain+0x2c>
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	429a      	cmp	r2, r3
 8002396:	d31b      	bcc.n	80023d0 <create_chain+0x64>
 8002398:	2301      	movs	r3, #1
 800239a:	61bb      	str	r3, [r7, #24]
 800239c:	e018      	b.n	80023d0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800239e:	6839      	ldr	r1, [r7, #0]
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff fdea 	bl	8001f7a <get_fat>
 80023a6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d801      	bhi.n	80023b2 <create_chain+0x46>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e070      	b.n	8002494 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023b8:	d101      	bne.n	80023be <create_chain+0x52>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	e06a      	b.n	8002494 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d201      	bcs.n	80023cc <create_chain+0x60>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	e063      	b.n	8002494 <create_chain+0x128>
		scl = clst;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	3301      	adds	r3, #1
 80023d8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	69fa      	ldr	r2, [r7, #28]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d307      	bcc.n	80023f4 <create_chain+0x88>
				ncl = 2;
 80023e4:	2302      	movs	r3, #2
 80023e6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80023e8:	69fa      	ldr	r2, [r7, #28]
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d901      	bls.n	80023f4 <create_chain+0x88>
 80023f0:	2300      	movs	r3, #0
 80023f2:	e04f      	b.n	8002494 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80023f4:	69f9      	ldr	r1, [r7, #28]
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff fdbf 	bl	8001f7a <get_fat>
 80023fc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00e      	beq.n	8002422 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d003      	beq.n	8002412 <create_chain+0xa6>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002410:	d101      	bne.n	8002416 <create_chain+0xaa>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	e03e      	b.n	8002494 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8002416:	69fa      	ldr	r2, [r7, #28]
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	429a      	cmp	r2, r3
 800241c:	d1da      	bne.n	80023d4 <create_chain+0x68>
 800241e:	2300      	movs	r3, #0
 8002420:	e038      	b.n	8002494 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8002422:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8002424:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002428:	69f9      	ldr	r1, [r7, #28]
 800242a:	6938      	ldr	r0, [r7, #16]
 800242c:	f7ff fe4d 	bl	80020ca <put_fat>
 8002430:	4603      	mov	r3, r0
 8002432:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8002434:	7dfb      	ldrb	r3, [r7, #23]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <create_chain+0xe2>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d006      	beq.n	800244e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8002440:	69fa      	ldr	r2, [r7, #28]
 8002442:	6839      	ldr	r1, [r7, #0]
 8002444:	6938      	ldr	r0, [r7, #16]
 8002446:	f7ff fe40 	bl	80020ca <put_fat>
 800244a:	4603      	mov	r3, r0
 800244c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800244e:	7dfb      	ldrb	r3, [r7, #23]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d116      	bne.n	8002482 <create_chain+0x116>
		fs->last_clst = ncl;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	69fa      	ldr	r2, [r7, #28]
 8002458:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	691a      	ldr	r2, [r3, #16]
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	3b02      	subs	r3, #2
 8002464:	429a      	cmp	r2, r3
 8002466:	d804      	bhi.n	8002472 <create_chain+0x106>
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	1e5a      	subs	r2, r3, #1
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	791b      	ldrb	r3, [r3, #4]
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	b2da      	uxtb	r2, r3
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	711a      	strb	r2, [r3, #4]
 8002480:	e007      	b.n	8002492 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8002482:	7dfb      	ldrb	r3, [r7, #23]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d102      	bne.n	800248e <create_chain+0x122>
 8002488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800248c:	e000      	b.n	8002490 <create_chain+0x124>
 800248e:	2301      	movs	r3, #1
 8002490:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8002492:	69fb      	ldr	r3, [r7, #28]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3720      	adds	r7, #32
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b0:	3304      	adds	r3, #4
 80024b2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	0a5b      	lsrs	r3, r3, #9
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	8952      	ldrh	r2, [r2, #10]
 80024bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80024c0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1d1a      	adds	r2, r3, #4
 80024c6:	613a      	str	r2, [r7, #16]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <clmt_clust+0x3a>
 80024d2:	2300      	movs	r3, #0
 80024d4:	e010      	b.n	80024f8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d307      	bcc.n	80024ee <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	3304      	adds	r3, #4
 80024ea:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80024ec:	e7e9      	b.n	80024c2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80024ee:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	4413      	add	r3, r2
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	371c      	adds	r7, #28
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800251a:	d204      	bcs.n	8002526 <dir_sdi+0x22>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	f003 031f 	and.w	r3, r3, #31
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <dir_sdi+0x26>
		return FR_INT_ERR;
 8002526:	2302      	movs	r3, #2
 8002528:	e063      	b.n	80025f2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d106      	bne.n	800254a <dir_sdi+0x46>
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d902      	bls.n	800254a <dir_sdi+0x46>
		clst = fs->dirbase;
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10c      	bne.n	800256a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	8912      	ldrh	r2, [r2, #8]
 8002558:	4293      	cmp	r3, r2
 800255a:	d301      	bcc.n	8002560 <dir_sdi+0x5c>
 800255c:	2302      	movs	r3, #2
 800255e:	e048      	b.n	80025f2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	61da      	str	r2, [r3, #28]
 8002568:	e029      	b.n	80025be <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	895b      	ldrh	r3, [r3, #10]
 800256e:	025b      	lsls	r3, r3, #9
 8002570:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8002572:	e019      	b.n	80025a8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6979      	ldr	r1, [r7, #20]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fcfe 	bl	8001f7a <get_fat>
 800257e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002586:	d101      	bne.n	800258c <dir_sdi+0x88>
 8002588:	2301      	movs	r3, #1
 800258a:	e032      	b.n	80025f2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d904      	bls.n	800259c <dir_sdi+0x98>
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	429a      	cmp	r2, r3
 800259a:	d301      	bcc.n	80025a0 <dir_sdi+0x9c>
 800259c:	2302      	movs	r3, #2
 800259e:	e028      	b.n	80025f2 <dir_sdi+0xee>
			ofs -= csz;
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d2e1      	bcs.n	8002574 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80025b0:	6979      	ldr	r1, [r7, #20]
 80025b2:	6938      	ldr	r0, [r7, #16]
 80025b4:	f7ff fcc2 	bl	8001f3c <clust2sect>
 80025b8:	4602      	mov	r2, r0
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <dir_sdi+0xcc>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e010      	b.n	80025f2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69da      	ldr	r2, [r3, #28]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	0a5b      	lsrs	r3, r3, #9
 80025d8:	441a      	add	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ea:	441a      	add	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b086      	sub	sp, #24
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	3320      	adds	r3, #32
 8002610:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <dir_next+0x28>
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002620:	d301      	bcc.n	8002626 <dir_next+0x2c>
 8002622:	2304      	movs	r3, #4
 8002624:	e0aa      	b.n	800277c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800262c:	2b00      	cmp	r3, #0
 800262e:	f040 8098 	bne.w	8002762 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	1c5a      	adds	r2, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10b      	bne.n	800265c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	8912      	ldrh	r2, [r2, #8]
 800264c:	4293      	cmp	r3, r2
 800264e:	f0c0 8088 	bcc.w	8002762 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	61da      	str	r2, [r3, #28]
 8002658:	2304      	movs	r3, #4
 800265a:	e08f      	b.n	800277c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	0a5b      	lsrs	r3, r3, #9
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	8952      	ldrh	r2, [r2, #10]
 8002664:	3a01      	subs	r2, #1
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d17a      	bne.n	8002762 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	4619      	mov	r1, r3
 8002674:	4610      	mov	r0, r2
 8002676:	f7ff fc80 	bl	8001f7a <get_fat>
 800267a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d801      	bhi.n	8002686 <dir_next+0x8c>
 8002682:	2302      	movs	r3, #2
 8002684:	e07a      	b.n	800277c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800268c:	d101      	bne.n	8002692 <dir_next+0x98>
 800268e:	2301      	movs	r3, #1
 8002690:	e074      	b.n	800277c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	429a      	cmp	r2, r3
 800269a:	d358      	bcc.n	800274e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d104      	bne.n	80026ac <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	61da      	str	r2, [r3, #28]
 80026a8:	2304      	movs	r3, #4
 80026aa:	e067      	b.n	800277c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	4619      	mov	r1, r3
 80026b4:	4610      	mov	r0, r2
 80026b6:	f7ff fe59 	bl	800236c <create_chain>
 80026ba:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <dir_next+0xcc>
 80026c2:	2307      	movs	r3, #7
 80026c4:	e05a      	b.n	800277c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <dir_next+0xd6>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e055      	b.n	800277c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026d6:	d101      	bne.n	80026dc <dir_next+0xe2>
 80026d8:	2301      	movs	r3, #1
 80026da:	e04f      	b.n	800277c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f7ff fb4d 	bl	8001d7c <sync_window>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <dir_next+0xf2>
 80026e8:	2301      	movs	r3, #1
 80026ea:	e047      	b.n	800277c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	3330      	adds	r3, #48	; 0x30
 80026f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026f4:	2100      	movs	r1, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff f977 	bl	80019ea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80026fc:	2300      	movs	r3, #0
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	6979      	ldr	r1, [r7, #20]
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f7ff fc1a 	bl	8001f3c <clust2sect>
 8002708:	4602      	mov	r2, r0
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	62da      	str	r2, [r3, #44]	; 0x2c
 800270e:	e012      	b.n	8002736 <dir_next+0x13c>
						fs->wflag = 1;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2201      	movs	r2, #1
 8002714:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f7ff fb30 	bl	8001d7c <sync_window>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <dir_next+0x12c>
 8002722:	2301      	movs	r3, #1
 8002724:	e02a      	b.n	800277c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	3301      	adds	r3, #1
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	62da      	str	r2, [r3, #44]	; 0x2c
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	895b      	ldrh	r3, [r3, #10]
 800273a:	461a      	mov	r2, r3
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4293      	cmp	r3, r2
 8002740:	d3e6      	bcc.n	8002710 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad2      	subs	r2, r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8002754:	6979      	ldr	r1, [r7, #20]
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f7ff fbf0 	bl	8001f3c <clust2sect>
 800275c:	4602      	mov	r2, r0
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002774:	441a      	add	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8002794:	2100      	movs	r1, #0
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff feb4 	bl	8002504 <dir_sdi>
 800279c:	4603      	mov	r3, r0
 800279e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80027a0:	7dfb      	ldrb	r3, [r7, #23]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d12b      	bne.n	80027fe <dir_alloc+0x7a>
		n = 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	4619      	mov	r1, r3
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f7ff fb27 	bl	8001e04 <move_window>
 80027b6:	4603      	mov	r3, r0
 80027b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80027ba:	7dfb      	ldrb	r3, [r7, #23]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d11d      	bne.n	80027fc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2be5      	cmp	r3, #229	; 0xe5
 80027c8:	d004      	beq.n	80027d4 <dir_alloc+0x50>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d107      	bne.n	80027e4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	3301      	adds	r3, #1
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d102      	bne.n	80027e8 <dir_alloc+0x64>
 80027e2:	e00c      	b.n	80027fe <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80027e4:	2300      	movs	r3, #0
 80027e6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80027e8:	2101      	movs	r1, #1
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff ff05 	bl	80025fa <dir_next>
 80027f0:	4603      	mov	r3, r0
 80027f2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80027f4:	7dfb      	ldrb	r3, [r7, #23]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0d7      	beq.n	80027aa <dir_alloc+0x26>
 80027fa:	e000      	b.n	80027fe <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80027fc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80027fe:	7dfb      	ldrb	r3, [r7, #23]
 8002800:	2b04      	cmp	r3, #4
 8002802:	d101      	bne.n	8002808 <dir_alloc+0x84>
 8002804:	2307      	movs	r3, #7
 8002806:	75fb      	strb	r3, [r7, #23]
	return res;
 8002808:	7dfb      	ldrb	r3, [r7, #23]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b084      	sub	sp, #16
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	331a      	adds	r3, #26
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff f83f 	bl	80018a4 <ld_word>
 8002826:	4603      	mov	r3, r0
 8002828:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b03      	cmp	r3, #3
 8002830:	d109      	bne.n	8002846 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	3314      	adds	r3, #20
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff f834 	bl	80018a4 <ld_word>
 800283c:	4603      	mov	r3, r0
 800283e:	041b      	lsls	r3, r3, #16
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	4313      	orrs	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8002846:	68fb      	ldr	r3, [r7, #12]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	331a      	adds	r3, #26
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	b292      	uxth	r2, r2
 8002864:	4611      	mov	r1, r2
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff f857 	bl	800191a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b03      	cmp	r3, #3
 8002872:	d109      	bne.n	8002888 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f103 0214 	add.w	r2, r3, #20
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	0c1b      	lsrs	r3, r3, #16
 800287e:	b29b      	uxth	r3, r3
 8002880:	4619      	mov	r1, r3
 8002882:	4610      	mov	r0, r2
 8002884:	f7ff f849 	bl	800191a <st_word>
	}
}
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800289a:	2304      	movs	r3, #4
 800289c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80028a4:	e03c      	b.n	8002920 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	4619      	mov	r1, r3
 80028ac:	6938      	ldr	r0, [r7, #16]
 80028ae:	f7ff faa9 	bl	8001e04 <move_window>
 80028b2:	4603      	mov	r3, r0
 80028b4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80028b6:	7dfb      	ldrb	r3, [r7, #23]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d136      	bne.n	800292a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d102      	bne.n	80028d0 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80028ca:	2304      	movs	r3, #4
 80028cc:	75fb      	strb	r3, [r7, #23]
 80028ce:	e031      	b.n	8002934 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	330b      	adds	r3, #11
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028dc:	73bb      	strb	r3, [r7, #14]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	7bba      	ldrb	r2, [r7, #14]
 80028e2:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	2be5      	cmp	r3, #229	; 0xe5
 80028e8:	d011      	beq.n	800290e <dir_read+0x7e>
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
 80028ec:	2b2e      	cmp	r3, #46	; 0x2e
 80028ee:	d00e      	beq.n	800290e <dir_read+0x7e>
 80028f0:	7bbb      	ldrb	r3, [r7, #14]
 80028f2:	2b0f      	cmp	r3, #15
 80028f4:	d00b      	beq.n	800290e <dir_read+0x7e>
 80028f6:	7bbb      	ldrb	r3, [r7, #14]
 80028f8:	f023 0320 	bic.w	r3, r3, #32
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	bf0c      	ite	eq
 8002900:	2301      	moveq	r3, #1
 8002902:	2300      	movne	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	461a      	mov	r2, r3
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	4293      	cmp	r3, r2
 800290c:	d00f      	beq.n	800292e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800290e:	2100      	movs	r1, #0
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff fe72 	bl	80025fa <dir_next>
 8002916:	4603      	mov	r3, r0
 8002918:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800291a:	7dfb      	ldrb	r3, [r7, #23]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d108      	bne.n	8002932 <dir_read+0xa2>
	while (dp->sect) {
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1be      	bne.n	80028a6 <dir_read+0x16>
 8002928:	e004      	b.n	8002934 <dir_read+0xa4>
		if (res != FR_OK) break;
 800292a:	bf00      	nop
 800292c:	e002      	b.n	8002934 <dir_read+0xa4>
				break;
 800292e:	bf00      	nop
 8002930:	e000      	b.n	8002934 <dir_read+0xa4>
		if (res != FR_OK) break;
 8002932:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8002934:	7dfb      	ldrb	r3, [r7, #23]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <dir_read+0xb0>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	61da      	str	r2, [r3, #28]
	return res;
 8002940:	7dfb      	ldrb	r3, [r7, #23]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b086      	sub	sp, #24
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002958:	2100      	movs	r1, #0
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff fdd2 	bl	8002504 <dir_sdi>
 8002960:	4603      	mov	r3, r0
 8002962:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8002964:	7dfb      	ldrb	r3, [r7, #23]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <dir_find+0x24>
 800296a:	7dfb      	ldrb	r3, [r7, #23]
 800296c:	e03e      	b.n	80029ec <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	4619      	mov	r1, r3
 8002974:	6938      	ldr	r0, [r7, #16]
 8002976:	f7ff fa45 	bl	8001e04 <move_window>
 800297a:	4603      	mov	r3, r0
 800297c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800297e:	7dfb      	ldrb	r3, [r7, #23]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d12f      	bne.n	80029e4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800298c:	7bfb      	ldrb	r3, [r7, #15]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d102      	bne.n	8002998 <dir_find+0x4e>
 8002992:	2304      	movs	r3, #4
 8002994:	75fb      	strb	r3, [r7, #23]
 8002996:	e028      	b.n	80029ea <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	330b      	adds	r3, #11
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	330b      	adds	r3, #11
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10a      	bne.n	80029d0 <dir_find+0x86>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a18      	ldr	r0, [r3, #32]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3324      	adds	r3, #36	; 0x24
 80029c2:	220b      	movs	r2, #11
 80029c4:	4619      	mov	r1, r3
 80029c6:	f7ff f82b 	bl	8001a20 <mem_cmp>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00b      	beq.n	80029e8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80029d0:	2100      	movs	r1, #0
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff fe11 	bl	80025fa <dir_next>
 80029d8:	4603      	mov	r3, r0
 80029da:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80029dc:	7dfb      	ldrb	r3, [r7, #23]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0c5      	beq.n	800296e <dir_find+0x24>
 80029e2:	e002      	b.n	80029ea <dir_find+0xa0>
		if (res != FR_OK) break;
 80029e4:	bf00      	nop
 80029e6:	e000      	b.n	80029ea <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80029e8:	bf00      	nop

	return res;
 80029ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8002a02:	2101      	movs	r1, #1
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff febd 	bl	8002784 <dir_alloc>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d11c      	bne.n	8002a4e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	68b8      	ldr	r0, [r7, #8]
 8002a1c:	f7ff f9f2 	bl	8001e04 <move_window>
 8002a20:	4603      	mov	r3, r0
 8002a22:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d111      	bne.n	8002a4e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	2100      	movs	r1, #0
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fe ffd9 	bl	80019ea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a18      	ldr	r0, [r3, #32]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3324      	adds	r3, #36	; 0x24
 8002a40:	220b      	movs	r2, #11
 8002a42:	4619      	mov	r1, r3
 8002a44:	f7fe ffb0 	bl	80019a8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2200      	movs	r2, #0
 8002a66:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d04e      	beq.n	8002b0e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8002a78:	e021      	b.n	8002abe <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1a      	ldr	r2, [r3, #32]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	1c59      	adds	r1, r3, #1
 8002a82:	6179      	str	r1, [r7, #20]
 8002a84:	4413      	add	r3, r2
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	2b20      	cmp	r3, #32
 8002a8e:	d100      	bne.n	8002a92 <get_fileinfo+0x3a>
 8002a90:	e015      	b.n	8002abe <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	2b05      	cmp	r3, #5
 8002a96:	d101      	bne.n	8002a9c <get_fileinfo+0x44>
 8002a98:	23e5      	movs	r3, #229	; 0xe5
 8002a9a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2b09      	cmp	r3, #9
 8002aa0:	d106      	bne.n	8002ab0 <get_fileinfo+0x58>
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	613a      	str	r2, [r7, #16]
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	4413      	add	r3, r2
 8002aac:	222e      	movs	r2, #46	; 0x2e
 8002aae:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	613a      	str	r2, [r7, #16]
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	4413      	add	r3, r2
 8002aba:	7bfa      	ldrb	r2, [r7, #15]
 8002abc:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b0a      	cmp	r3, #10
 8002ac2:	d9da      	bls.n	8002a7a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4413      	add	r3, r2
 8002aca:	3309      	adds	r3, #9
 8002acc:	2200      	movs	r2, #0
 8002ace:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	7ada      	ldrb	r2, [r3, #11]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	331c      	adds	r3, #28
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fe fef7 	bl	80018d4 <ld_dword>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	3316      	adds	r3, #22
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fe feee 	bl	80018d4 <ld_dword>
 8002af8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	80da      	strh	r2, [r3, #6]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	0c1b      	lsrs	r3, r3, #16
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	809a      	strh	r2, [r3, #4]
 8002b0c:	e000      	b.n	8002b10 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8002b0e:	bf00      	nop
}
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3324      	adds	r3, #36	; 0x24
 8002b2c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8002b2e:	220b      	movs	r2, #11
 8002b30:	2120      	movs	r1, #32
 8002b32:	68b8      	ldr	r0, [r7, #8]
 8002b34:	f7fe ff59 	bl	80019ea <mem_set>
	si = i = 0; ni = 8;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	61fb      	str	r3, [r7, #28]
 8002b40:	2308      	movs	r3, #8
 8002b42:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	61fa      	str	r2, [r7, #28]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8002b52:	7efb      	ldrb	r3, [r7, #27]
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	d94e      	bls.n	8002bf6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8002b58:	7efb      	ldrb	r3, [r7, #27]
 8002b5a:	2b2f      	cmp	r3, #47	; 0x2f
 8002b5c:	d006      	beq.n	8002b6c <create_name+0x54>
 8002b5e:	7efb      	ldrb	r3, [r7, #27]
 8002b60:	2b5c      	cmp	r3, #92	; 0x5c
 8002b62:	d110      	bne.n	8002b86 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8002b64:	e002      	b.n	8002b6c <create_name+0x54>
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	61fb      	str	r3, [r7, #28]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	4413      	add	r3, r2
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b2f      	cmp	r3, #47	; 0x2f
 8002b76:	d0f6      	beq.n	8002b66 <create_name+0x4e>
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b5c      	cmp	r3, #92	; 0x5c
 8002b82:	d0f0      	beq.n	8002b66 <create_name+0x4e>
			break;
 8002b84:	e038      	b.n	8002bf8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8002b86:	7efb      	ldrb	r3, [r7, #27]
 8002b88:	2b2e      	cmp	r3, #46	; 0x2e
 8002b8a:	d003      	beq.n	8002b94 <create_name+0x7c>
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d30c      	bcc.n	8002bae <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	2b0b      	cmp	r3, #11
 8002b98:	d002      	beq.n	8002ba0 <create_name+0x88>
 8002b9a:	7efb      	ldrb	r3, [r7, #27]
 8002b9c:	2b2e      	cmp	r3, #46	; 0x2e
 8002b9e:	d001      	beq.n	8002ba4 <create_name+0x8c>
 8002ba0:	2306      	movs	r3, #6
 8002ba2:	e044      	b.n	8002c2e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8002ba4:	2308      	movs	r3, #8
 8002ba6:	613b      	str	r3, [r7, #16]
 8002ba8:	230b      	movs	r3, #11
 8002baa:	617b      	str	r3, [r7, #20]
			continue;
 8002bac:	e022      	b.n	8002bf4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8002bae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	da04      	bge.n	8002bc0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8002bb6:	7efb      	ldrb	r3, [r7, #27]
 8002bb8:	3b80      	subs	r3, #128	; 0x80
 8002bba:	4a1f      	ldr	r2, [pc, #124]	; (8002c38 <create_name+0x120>)
 8002bbc:	5cd3      	ldrb	r3, [r2, r3]
 8002bbe:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8002bc0:	7efb      	ldrb	r3, [r7, #27]
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	481d      	ldr	r0, [pc, #116]	; (8002c3c <create_name+0x124>)
 8002bc6:	f7fe ff52 	bl	8001a6e <chk_chr>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <create_name+0xbc>
 8002bd0:	2306      	movs	r3, #6
 8002bd2:	e02c      	b.n	8002c2e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8002bd4:	7efb      	ldrb	r3, [r7, #27]
 8002bd6:	2b60      	cmp	r3, #96	; 0x60
 8002bd8:	d905      	bls.n	8002be6 <create_name+0xce>
 8002bda:	7efb      	ldrb	r3, [r7, #27]
 8002bdc:	2b7a      	cmp	r3, #122	; 0x7a
 8002bde:	d802      	bhi.n	8002be6 <create_name+0xce>
 8002be0:	7efb      	ldrb	r3, [r7, #27]
 8002be2:	3b20      	subs	r3, #32
 8002be4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	613a      	str	r2, [r7, #16]
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	4413      	add	r3, r2
 8002bf0:	7efa      	ldrb	r2, [r7, #27]
 8002bf2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8002bf4:	e7a6      	b.n	8002b44 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8002bf6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	441a      	add	r2, r3
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <create_name+0xf4>
 8002c08:	2306      	movs	r3, #6
 8002c0a:	e010      	b.n	8002c2e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2be5      	cmp	r3, #229	; 0xe5
 8002c12:	d102      	bne.n	8002c1a <create_name+0x102>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2205      	movs	r2, #5
 8002c18:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8002c1a:	7efb      	ldrb	r3, [r7, #27]
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	d801      	bhi.n	8002c24 <create_name+0x10c>
 8002c20:	2204      	movs	r2, #4
 8002c22:	e000      	b.n	8002c26 <create_name+0x10e>
 8002c24:	2200      	movs	r2, #0
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	330b      	adds	r3, #11
 8002c2a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8002c2c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3720      	adds	r7, #32
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	0800ec80 	.word	0x0800ec80
 8002c3c:	0800e748 	.word	0x0800e748

08002c40 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002c54:	e002      	b.n	8002c5c <follow_path+0x1c>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b2f      	cmp	r3, #47	; 0x2f
 8002c62:	d0f8      	beq.n	8002c56 <follow_path+0x16>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b5c      	cmp	r3, #92	; 0x5c
 8002c6a:	d0f4      	beq.n	8002c56 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b1f      	cmp	r3, #31
 8002c78:	d80a      	bhi.n	8002c90 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2280      	movs	r2, #128	; 0x80
 8002c7e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8002c82:	2100      	movs	r1, #0
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff fc3d 	bl	8002504 <dir_sdi>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	75fb      	strb	r3, [r7, #23]
 8002c8e:	e043      	b.n	8002d18 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8002c90:	463b      	mov	r3, r7
 8002c92:	4619      	mov	r1, r3
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff ff3f 	bl	8002b18 <create_name>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8002c9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d134      	bne.n	8002d0e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7ff fe50 	bl	800294a <dir_find>
 8002caa:	4603      	mov	r3, r0
 8002cac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002cb4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8002cb6:	7dfb      	ldrb	r3, [r7, #23]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00a      	beq.n	8002cd2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8002cbc:	7dfb      	ldrb	r3, [r7, #23]
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d127      	bne.n	8002d12 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8002cc2:	7afb      	ldrb	r3, [r7, #11]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d122      	bne.n	8002d12 <follow_path+0xd2>
 8002ccc:	2305      	movs	r3, #5
 8002cce:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8002cd0:	e01f      	b.n	8002d12 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8002cd2:	7afb      	ldrb	r3, [r7, #11]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d11c      	bne.n	8002d16 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	799b      	ldrb	r3, [r3, #6]
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d102      	bne.n	8002cee <follow_path+0xae>
				res = FR_NO_PATH; break;
 8002ce8:	2305      	movs	r3, #5
 8002cea:	75fb      	strb	r3, [r7, #23]
 8002cec:	e014      	b.n	8002d18 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cfc:	4413      	add	r3, r2
 8002cfe:	4619      	mov	r1, r3
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f7ff fd86 	bl	8002812 <ld_clust>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8002d0c:	e7c0      	b.n	8002c90 <follow_path+0x50>
			if (res != FR_OK) break;
 8002d0e:	bf00      	nop
 8002d10:	e002      	b.n	8002d18 <follow_path+0xd8>
				break;
 8002d12:	bf00      	nop
 8002d14:	e000      	b.n	8002d18 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8002d16:	bf00      	nop
			}
		}
	}

	return res;
 8002d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b087      	sub	sp, #28
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8002d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d2e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d031      	beq.n	8002d9c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	e002      	b.n	8002d46 <get_ldnumber+0x24>
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	3301      	adds	r3, #1
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b20      	cmp	r3, #32
 8002d4c:	d903      	bls.n	8002d56 <get_ldnumber+0x34>
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b3a      	cmp	r3, #58	; 0x3a
 8002d54:	d1f4      	bne.n	8002d40 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b3a      	cmp	r3, #58	; 0x3a
 8002d5c:	d11c      	bne.n	8002d98 <get_ldnumber+0x76>
			tp = *path;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	60fa      	str	r2, [r7, #12]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	3b30      	subs	r3, #48	; 0x30
 8002d6e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b09      	cmp	r3, #9
 8002d74:	d80e      	bhi.n	8002d94 <get_ldnumber+0x72>
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d10a      	bne.n	8002d94 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d107      	bne.n	8002d94 <get_ldnumber+0x72>
					vol = (int)i;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	e002      	b.n	8002d9e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8002d98:	2300      	movs	r3, #0
 8002d9a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8002d9c:	693b      	ldr	r3, [r7, #16]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	70da      	strb	r2, [r3, #3]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dc2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002dc4:	6839      	ldr	r1, [r7, #0]
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7ff f81c 	bl	8001e04 <move_window>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <check_fs+0x2a>
 8002dd2:	2304      	movs	r3, #4
 8002dd4:	e038      	b.n	8002e48 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3330      	adds	r3, #48	; 0x30
 8002dda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe fd60 	bl	80018a4 <ld_word>
 8002de4:	4603      	mov	r3, r0
 8002de6:	461a      	mov	r2, r3
 8002de8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <check_fs+0x48>
 8002df0:	2303      	movs	r3, #3
 8002df2:	e029      	b.n	8002e48 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dfa:	2be9      	cmp	r3, #233	; 0xe9
 8002dfc:	d009      	beq.n	8002e12 <check_fs+0x66>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e04:	2beb      	cmp	r3, #235	; 0xeb
 8002e06:	d11e      	bne.n	8002e46 <check_fs+0x9a>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002e0e:	2b90      	cmp	r3, #144	; 0x90
 8002e10:	d119      	bne.n	8002e46 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3330      	adds	r3, #48	; 0x30
 8002e16:	3336      	adds	r3, #54	; 0x36
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fe fd5b 	bl	80018d4 <ld_dword>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e24:	4a0a      	ldr	r2, [pc, #40]	; (8002e50 <check_fs+0xa4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d101      	bne.n	8002e2e <check_fs+0x82>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e00c      	b.n	8002e48 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3330      	adds	r3, #48	; 0x30
 8002e32:	3352      	adds	r3, #82	; 0x52
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fe fd4d 	bl	80018d4 <ld_dword>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	4a05      	ldr	r2, [pc, #20]	; (8002e54 <check_fs+0xa8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d101      	bne.n	8002e46 <check_fs+0x9a>
 8002e42:	2300      	movs	r3, #0
 8002e44:	e000      	b.n	8002e48 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8002e46:	2302      	movs	r3, #2
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	00544146 	.word	0x00544146
 8002e54:	33544146 	.word	0x33544146

08002e58 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b096      	sub	sp, #88	; 0x58
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	4613      	mov	r3, r2
 8002e64:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f7ff ff58 	bl	8002d22 <get_ldnumber>
 8002e72:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8002e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	da01      	bge.n	8002e7e <find_volume+0x26>
 8002e7a:	230b      	movs	r3, #11
 8002e7c:	e22d      	b.n	80032da <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8002e7e:	4aa1      	ldr	r2, [pc, #644]	; (8003104 <find_volume+0x2ac>)
 8002e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e86:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <find_volume+0x3a>
 8002e8e:	230c      	movs	r3, #12
 8002e90:	e223      	b.n	80032da <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e96:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	f023 0301 	bic.w	r3, r3, #1
 8002e9e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8002ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d01a      	beq.n	8002ede <find_volume+0x86>
		stat = disk_status(fs->drv);
 8002ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eaa:	785b      	ldrb	r3, [r3, #1]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fe fc25 	bl	80016fc <disk_status>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002eb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10c      	bne.n	8002ede <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d007      	beq.n	8002eda <find_volume+0x82>
 8002eca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8002ed6:	230a      	movs	r3, #10
 8002ed8:	e1ff      	b.n	80032da <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8002eda:	2300      	movs	r3, #0
 8002edc:	e1fd      	b.n	80032da <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8002ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8002eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eee:	785b      	ldrb	r3, [r3, #1]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fe fc1d 	bl	8001730 <disk_initialize>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8002efc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e1e6      	b.n	80032da <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d007      	beq.n	8002f22 <find_volume+0xca>
 8002f12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002f16:	f003 0304 	and.w	r3, r3, #4
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8002f1e:	230a      	movs	r3, #10
 8002f20:	e1db      	b.n	80032da <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8002f26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002f28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f2a:	f7ff ff3f 	bl	8002dac <check_fs>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8002f34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d149      	bne.n	8002fd0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	643b      	str	r3, [r7, #64]	; 0x40
 8002f40:	e01e      	b.n	8002f80 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8002f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f44:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8002f50:	4413      	add	r3, r2
 8002f52:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f56:	3304      	adds	r3, #4
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d006      	beq.n	8002f6c <find_volume+0x114>
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f60:	3308      	adds	r3, #8
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fe fcb6 	bl	80018d4 <ld_dword>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	e000      	b.n	8002f6e <find_volume+0x116>
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	3358      	adds	r3, #88	; 0x58
 8002f74:	443b      	add	r3, r7
 8002f76:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	643b      	str	r3, [r7, #64]	; 0x40
 8002f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d9dd      	bls.n	8002f42 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8002f86:	2300      	movs	r3, #0
 8002f88:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8002f8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <find_volume+0x13e>
 8002f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f92:	3b01      	subs	r3, #1
 8002f94:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8002f96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	3358      	adds	r3, #88	; 0x58
 8002f9c:	443b      	add	r3, r7
 8002f9e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002fa2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <find_volume+0x15e>
 8002faa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002fac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002fae:	f7ff fefd 	bl	8002dac <check_fs>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	e000      	b.n	8002fb8 <find_volume+0x160>
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002fbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d905      	bls.n	8002fd0 <find_volume+0x178>
 8002fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	643b      	str	r3, [r7, #64]	; 0x40
 8002fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d9e2      	bls.n	8002f96 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002fd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d101      	bne.n	8002fdc <find_volume+0x184>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e17e      	b.n	80032da <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8002fdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d901      	bls.n	8002fe8 <find_volume+0x190>
 8002fe4:	230d      	movs	r3, #13
 8002fe6:	e178      	b.n	80032da <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fea:	3330      	adds	r3, #48	; 0x30
 8002fec:	330b      	adds	r3, #11
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe fc58 	bl	80018a4 <ld_word>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ffa:	d001      	beq.n	8003000 <find_volume+0x1a8>
 8002ffc:	230d      	movs	r3, #13
 8002ffe:	e16c      	b.n	80032da <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8003000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003002:	3330      	adds	r3, #48	; 0x30
 8003004:	3316      	adds	r3, #22
 8003006:	4618      	mov	r0, r3
 8003008:	f7fe fc4c 	bl	80018a4 <ld_word>
 800300c:	4603      	mov	r3, r0
 800300e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8003010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <find_volume+0x1cc>
 8003016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003018:	3330      	adds	r3, #48	; 0x30
 800301a:	3324      	adds	r3, #36	; 0x24
 800301c:	4618      	mov	r0, r3
 800301e:	f7fe fc59 	bl	80018d4 <ld_dword>
 8003022:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8003024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003026:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003028:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800302a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8003030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003032:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003036:	789b      	ldrb	r3, [r3, #2]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d005      	beq.n	8003048 <find_volume+0x1f0>
 800303c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303e:	789b      	ldrb	r3, [r3, #2]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d001      	beq.n	8003048 <find_volume+0x1f0>
 8003044:	230d      	movs	r3, #13
 8003046:	e148      	b.n	80032da <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8003048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304a:	789b      	ldrb	r3, [r3, #2]
 800304c:	461a      	mov	r2, r3
 800304e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003050:	fb02 f303 	mul.w	r3, r2, r3
 8003054:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8003056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305c:	b29a      	uxth	r2, r3
 800305e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003060:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8003062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003064:	895b      	ldrh	r3, [r3, #10]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d008      	beq.n	800307c <find_volume+0x224>
 800306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306c:	895b      	ldrh	r3, [r3, #10]
 800306e:	461a      	mov	r2, r3
 8003070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003072:	895b      	ldrh	r3, [r3, #10]
 8003074:	3b01      	subs	r3, #1
 8003076:	4013      	ands	r3, r2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <find_volume+0x228>
 800307c:	230d      	movs	r3, #13
 800307e:	e12c      	b.n	80032da <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8003080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003082:	3330      	adds	r3, #48	; 0x30
 8003084:	3311      	adds	r3, #17
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe fc0c 	bl	80018a4 <ld_word>
 800308c:	4603      	mov	r3, r0
 800308e:	461a      	mov	r2, r3
 8003090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003092:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003096:	891b      	ldrh	r3, [r3, #8]
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <find_volume+0x24e>
 80030a2:	230d      	movs	r3, #13
 80030a4:	e119      	b.n	80032da <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80030a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a8:	3330      	adds	r3, #48	; 0x30
 80030aa:	3313      	adds	r3, #19
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fe fbf9 	bl	80018a4 <ld_word>
 80030b2:	4603      	mov	r3, r0
 80030b4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80030b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d106      	bne.n	80030ca <find_volume+0x272>
 80030bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030be:	3330      	adds	r3, #48	; 0x30
 80030c0:	3320      	adds	r3, #32
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fe fc06 	bl	80018d4 <ld_dword>
 80030c8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80030ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030cc:	3330      	adds	r3, #48	; 0x30
 80030ce:	330e      	adds	r3, #14
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fe fbe7 	bl	80018a4 <ld_word>
 80030d6:	4603      	mov	r3, r0
 80030d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80030da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <find_volume+0x28c>
 80030e0:	230d      	movs	r3, #13
 80030e2:	e0fa      	b.n	80032da <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80030e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80030e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e8:	4413      	add	r3, r2
 80030ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030ec:	8912      	ldrh	r2, [r2, #8]
 80030ee:	0912      	lsrs	r2, r2, #4
 80030f0:	b292      	uxth	r2, r2
 80030f2:	4413      	add	r3, r2
 80030f4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80030f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d204      	bcs.n	8003108 <find_volume+0x2b0>
 80030fe:	230d      	movs	r3, #13
 8003100:	e0eb      	b.n	80032da <find_volume+0x482>
 8003102:	bf00      	nop
 8003104:	20000644 	.word	0x20000644
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8003108:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800310a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003110:	8952      	ldrh	r2, [r2, #10]
 8003112:	fbb3 f3f2 	udiv	r3, r3, r2
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <find_volume+0x2ca>
 800311e:	230d      	movs	r3, #13
 8003120:	e0db      	b.n	80032da <find_volume+0x482>
		fmt = FS_FAT32;
 8003122:	2303      	movs	r3, #3
 8003124:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800312e:	4293      	cmp	r3, r2
 8003130:	d802      	bhi.n	8003138 <find_volume+0x2e0>
 8003132:	2302      	movs	r3, #2
 8003134:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800313e:	4293      	cmp	r3, r2
 8003140:	d802      	bhi.n	8003148 <find_volume+0x2f0>
 8003142:	2301      	movs	r3, #1
 8003144:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	1c9a      	adds	r2, r3, #2
 800314c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8003150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003152:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003154:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003156:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800315a:	441a      	add	r2, r3
 800315c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8003160:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003164:	441a      	add	r2, r3
 8003166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003168:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800316a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800316e:	2b03      	cmp	r3, #3
 8003170:	d11e      	bne.n	80031b0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8003172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003174:	3330      	adds	r3, #48	; 0x30
 8003176:	332a      	adds	r3, #42	; 0x2a
 8003178:	4618      	mov	r0, r3
 800317a:	f7fe fb93 	bl	80018a4 <ld_word>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <find_volume+0x330>
 8003184:	230d      	movs	r3, #13
 8003186:	e0a8      	b.n	80032da <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8003188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318a:	891b      	ldrh	r3, [r3, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <find_volume+0x33c>
 8003190:	230d      	movs	r3, #13
 8003192:	e0a2      	b.n	80032da <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8003194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003196:	3330      	adds	r3, #48	; 0x30
 8003198:	332c      	adds	r3, #44	; 0x2c
 800319a:	4618      	mov	r0, r3
 800319c:	f7fe fb9a 	bl	80018d4 <ld_dword>
 80031a0:	4602      	mov	r2, r0
 80031a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80031a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	647b      	str	r3, [r7, #68]	; 0x44
 80031ae:	e01f      	b.n	80031f0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80031b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b2:	891b      	ldrh	r3, [r3, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <find_volume+0x364>
 80031b8:	230d      	movs	r3, #13
 80031ba:	e08e      	b.n	80032da <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80031bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031be:	6a1a      	ldr	r2, [r3, #32]
 80031c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031c2:	441a      	add	r2, r3
 80031c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80031c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d103      	bne.n	80031d8 <find_volume+0x380>
 80031d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	e00a      	b.n	80031ee <find_volume+0x396>
 80031d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031da:	695a      	ldr	r2, [r3, #20]
 80031dc:	4613      	mov	r3, r2
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	4413      	add	r3, r2
 80031e2:	085a      	lsrs	r2, r3, #1
 80031e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80031ee:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80031f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f2:	699a      	ldr	r2, [r3, #24]
 80031f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031f6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80031fa:	0a5b      	lsrs	r3, r3, #9
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d201      	bcs.n	8003204 <find_volume+0x3ac>
 8003200:	230d      	movs	r3, #13
 8003202:	e06a      	b.n	80032da <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8003204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003206:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800320a:	611a      	str	r2, [r3, #16]
 800320c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003212:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8003214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003216:	2280      	movs	r2, #128	; 0x80
 8003218:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800321a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800321e:	2b03      	cmp	r3, #3
 8003220:	d149      	bne.n	80032b6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8003222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003224:	3330      	adds	r3, #48	; 0x30
 8003226:	3330      	adds	r3, #48	; 0x30
 8003228:	4618      	mov	r0, r3
 800322a:	f7fe fb3b 	bl	80018a4 <ld_word>
 800322e:	4603      	mov	r3, r0
 8003230:	2b01      	cmp	r3, #1
 8003232:	d140      	bne.n	80032b6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8003234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003236:	3301      	adds	r3, #1
 8003238:	4619      	mov	r1, r3
 800323a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800323c:	f7fe fde2 	bl	8001e04 <move_window>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d137      	bne.n	80032b6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8003246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003248:	2200      	movs	r2, #0
 800324a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800324c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324e:	3330      	adds	r3, #48	; 0x30
 8003250:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003254:	4618      	mov	r0, r3
 8003256:	f7fe fb25 	bl	80018a4 <ld_word>
 800325a:	4603      	mov	r3, r0
 800325c:	461a      	mov	r2, r3
 800325e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003262:	429a      	cmp	r2, r3
 8003264:	d127      	bne.n	80032b6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8003266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003268:	3330      	adds	r3, #48	; 0x30
 800326a:	4618      	mov	r0, r3
 800326c:	f7fe fb32 	bl	80018d4 <ld_dword>
 8003270:	4603      	mov	r3, r0
 8003272:	4a1c      	ldr	r2, [pc, #112]	; (80032e4 <find_volume+0x48c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d11e      	bne.n	80032b6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8003278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327a:	3330      	adds	r3, #48	; 0x30
 800327c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003280:	4618      	mov	r0, r3
 8003282:	f7fe fb27 	bl	80018d4 <ld_dword>
 8003286:	4603      	mov	r3, r0
 8003288:	4a17      	ldr	r2, [pc, #92]	; (80032e8 <find_volume+0x490>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d113      	bne.n	80032b6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800328e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003290:	3330      	adds	r3, #48	; 0x30
 8003292:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe fb1c 	bl	80018d4 <ld_dword>
 800329c:	4602      	mov	r2, r0
 800329e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80032a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a4:	3330      	adds	r3, #48	; 0x30
 80032a6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fe fb12 	bl	80018d4 <ld_dword>
 80032b0:	4602      	mov	r2, r0
 80032b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80032b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80032bc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80032be:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <find_volume+0x494>)
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	3301      	adds	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	4b09      	ldr	r3, [pc, #36]	; (80032ec <find_volume+0x494>)
 80032c8:	801a      	strh	r2, [r3, #0]
 80032ca:	4b08      	ldr	r3, [pc, #32]	; (80032ec <find_volume+0x494>)
 80032cc:	881a      	ldrh	r2, [r3, #0]
 80032ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80032d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80032d4:	f7fe fd2e 	bl	8001d34 <clear_lock>
#endif
	return FR_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3758      	adds	r7, #88	; 0x58
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	41615252 	.word	0x41615252
 80032e8:	61417272 	.word	0x61417272
 80032ec:	20000648 	.word	0x20000648

080032f0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80032fa:	2309      	movs	r3, #9
 80032fc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d01c      	beq.n	800333e <validate+0x4e>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d018      	beq.n	800333e <validate+0x4e>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d013      	beq.n	800333e <validate+0x4e>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	889a      	ldrh	r2, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	88db      	ldrh	r3, [r3, #6]
 8003320:	429a      	cmp	r2, r3
 8003322:	d10c      	bne.n	800333e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	785b      	ldrb	r3, [r3, #1]
 800332a:	4618      	mov	r0, r3
 800332c:	f7fe f9e6 	bl	80016fc <disk_status>
 8003330:	4603      	mov	r3, r0
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <validate+0x4e>
			res = FR_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d102      	bne.n	800334a <validate+0x5a>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	e000      	b.n	800334c <validate+0x5c>
 800334a:	2300      	movs	r3, #0
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	6013      	str	r3, [r2, #0]
	return res;
 8003350:	7bfb      	ldrb	r3, [r7, #15]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	4613      	mov	r3, r2
 8003368:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800336e:	f107 0310 	add.w	r3, r7, #16
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fcd5 	bl	8002d22 <get_ldnumber>
 8003378:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	2b00      	cmp	r3, #0
 800337e:	da01      	bge.n	8003384 <f_mount+0x28>
 8003380:	230b      	movs	r3, #11
 8003382:	e02b      	b.n	80033dc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8003384:	4a17      	ldr	r2, [pc, #92]	; (80033e4 <f_mount+0x88>)
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8003394:	69b8      	ldr	r0, [r7, #24]
 8003396:	f7fe fccd 	bl	8001d34 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	2200      	movs	r2, #0
 800339e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	490d      	ldr	r1, [pc, #52]	; (80033e4 <f_mount+0x88>)
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <f_mount+0x66>
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d001      	beq.n	80033c6 <f_mount+0x6a>
 80033c2:	2300      	movs	r3, #0
 80033c4:	e00a      	b.n	80033dc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80033c6:	f107 010c 	add.w	r1, r7, #12
 80033ca:	f107 0308 	add.w	r3, r7, #8
 80033ce:	2200      	movs	r2, #0
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff fd41 	bl	8002e58 <find_volume>
 80033d6:	4603      	mov	r3, r0
 80033d8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80033da:	7dfb      	ldrb	r3, [r7, #23]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3720      	adds	r7, #32
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	20000644 	.word	0x20000644

080033e8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b098      	sub	sp, #96	; 0x60
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	4613      	mov	r3, r2
 80033f4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <f_open+0x18>
 80033fc:	2309      	movs	r3, #9
 80033fe:	e1ac      	b.n	800375a <f_open+0x372>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8003400:	79fb      	ldrb	r3, [r7, #7]
 8003402:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003406:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8003408:	79fa      	ldrb	r2, [r7, #7]
 800340a:	f107 0110 	add.w	r1, r7, #16
 800340e:	f107 0308 	add.w	r3, r7, #8
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff fd20 	bl	8002e58 <find_volume>
 8003418:	4603      	mov	r3, r0
 800341a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800341e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003422:	2b00      	cmp	r3, #0
 8003424:	f040 8190 	bne.w	8003748 <f_open+0x360>
		dj.obj.fs = fs;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	f107 0314 	add.w	r3, r7, #20
 8003432:	4611      	mov	r1, r2
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff fc03 	bl	8002c40 <follow_path>
 800343a:	4603      	mov	r3, r0
 800343c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8003440:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003444:	2b00      	cmp	r3, #0
 8003446:	d11a      	bne.n	800347e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8003448:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800344c:	b25b      	sxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	da03      	bge.n	800345a <f_open+0x72>
				res = FR_INVALID_NAME;
 8003452:	2306      	movs	r3, #6
 8003454:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003458:	e011      	b.n	800347e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800345a:	79fb      	ldrb	r3, [r7, #7]
 800345c:	f023 0301 	bic.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	bf14      	ite	ne
 8003464:	2301      	movne	r3, #1
 8003466:	2300      	moveq	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	461a      	mov	r2, r3
 800346c:	f107 0314 	add.w	r3, r7, #20
 8003470:	4611      	mov	r1, r2
 8003472:	4618      	mov	r0, r3
 8003474:	f7fe fb16 	bl	8001aa4 <chk_lock>
 8003478:	4603      	mov	r3, r0
 800347a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	f003 031c 	and.w	r3, r3, #28
 8003484:	2b00      	cmp	r3, #0
 8003486:	d07e      	beq.n	8003586 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8003488:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800348c:	2b00      	cmp	r3, #0
 800348e:	d017      	beq.n	80034c0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8003490:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003494:	2b04      	cmp	r3, #4
 8003496:	d10e      	bne.n	80034b6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003498:	f7fe fb60 	bl	8001b5c <enq_lock>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d006      	beq.n	80034b0 <f_open+0xc8>
 80034a2:	f107 0314 	add.w	r3, r7, #20
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff faa4 	bl	80029f4 <dir_register>
 80034ac:	4603      	mov	r3, r0
 80034ae:	e000      	b.n	80034b2 <f_open+0xca>
 80034b0:	2312      	movs	r3, #18
 80034b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80034b6:	79fb      	ldrb	r3, [r7, #7]
 80034b8:	f043 0308 	orr.w	r3, r3, #8
 80034bc:	71fb      	strb	r3, [r7, #7]
 80034be:	e010      	b.n	80034e2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80034c0:	7ebb      	ldrb	r3, [r7, #26]
 80034c2:	f003 0311 	and.w	r3, r3, #17
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <f_open+0xea>
					res = FR_DENIED;
 80034ca:	2307      	movs	r3, #7
 80034cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80034d0:	e007      	b.n	80034e2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <f_open+0xfa>
 80034dc:	2308      	movs	r3, #8
 80034de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80034e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d167      	bne.n	80035ba <f_open+0x1d2>
 80034ea:	79fb      	ldrb	r3, [r7, #7]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d062      	beq.n	80035ba <f_open+0x1d2>
				dw = GET_FATTIME();
 80034f4:	4b9b      	ldr	r3, [pc, #620]	; (8003764 <f_open+0x37c>)
 80034f6:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80034f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034fa:	330e      	adds	r3, #14
 80034fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fe fa26 	bl	8001950 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8003504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003506:	3316      	adds	r3, #22
 8003508:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800350a:	4618      	mov	r0, r3
 800350c:	f7fe fa20 	bl	8001950 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003512:	330b      	adds	r3, #11
 8003514:	2220      	movs	r2, #32
 8003516:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800351c:	4611      	mov	r1, r2
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff f977 	bl	8002812 <ld_clust>
 8003524:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800352a:	2200      	movs	r2, #0
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff f98f 	bl	8002850 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8003532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003534:	331c      	adds	r3, #28
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f7fe fa09 	bl	8001950 <st_dword>
					fs->wflag = 1;
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	2201      	movs	r2, #1
 8003542:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8003544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003546:	2b00      	cmp	r3, #0
 8003548:	d037      	beq.n	80035ba <f_open+0x1d2>
						dw = fs->winsect;
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354e:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8003550:	f107 0314 	add.w	r3, r7, #20
 8003554:	2200      	movs	r2, #0
 8003556:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003558:	4618      	mov	r0, r3
 800355a:	f7fe fea2 	bl	80022a2 <remove_chain>
 800355e:	4603      	mov	r3, r0
 8003560:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8003564:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003568:	2b00      	cmp	r3, #0
 800356a:	d126      	bne.n	80035ba <f_open+0x1d2>
							res = move_window(fs, dw);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003570:	4618      	mov	r0, r3
 8003572:	f7fe fc47 	bl	8001e04 <move_window>
 8003576:	4603      	mov	r3, r0
 8003578:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003580:	3a01      	subs	r2, #1
 8003582:	60da      	str	r2, [r3, #12]
 8003584:	e019      	b.n	80035ba <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8003586:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800358a:	2b00      	cmp	r3, #0
 800358c:	d115      	bne.n	80035ba <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800358e:	7ebb      	ldrb	r3, [r7, #26]
 8003590:	f003 0310 	and.w	r3, r3, #16
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <f_open+0x1b8>
					res = FR_NO_FILE;
 8003598:	2304      	movs	r3, #4
 800359a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800359e:	e00c      	b.n	80035ba <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d007      	beq.n	80035ba <f_open+0x1d2>
 80035aa:	7ebb      	ldrb	r3, [r7, #26]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <f_open+0x1d2>
						res = FR_DENIED;
 80035b4:	2307      	movs	r3, #7
 80035b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80035ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d128      	bne.n	8003614 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035d2:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80035dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80035e2:	79fb      	ldrb	r3, [r7, #7]
 80035e4:	f023 0301 	bic.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bf14      	ite	ne
 80035ec:	2301      	movne	r3, #1
 80035ee:	2300      	moveq	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	461a      	mov	r2, r3
 80035f4:	f107 0314 	add.w	r3, r7, #20
 80035f8:	4611      	mov	r1, r2
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fe fad0 	bl	8001ba0 <inc_lock>
 8003600:	4602      	mov	r2, r0
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d102      	bne.n	8003614 <f_open+0x22c>
 800360e:	2302      	movs	r3, #2
 8003610:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8003614:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003618:	2b00      	cmp	r3, #0
 800361a:	f040 8095 	bne.w	8003748 <f_open+0x360>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003622:	4611      	mov	r1, r2
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff f8f4 	bl	8002812 <ld_clust>
 800362a:	4602      	mov	r2, r0
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8003630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003632:	331c      	adds	r3, #28
 8003634:	4618      	mov	r0, r3
 8003636:	f7fe f94d 	bl	80018d4 <ld_dword>
 800363a:	4602      	mov	r2, r0
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	88da      	ldrh	r2, [r3, #6]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	79fa      	ldrb	r2, [r7, #7]
 8003658:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	3330      	adds	r3, #48	; 0x30
 8003670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003674:	2100      	movs	r1, #0
 8003676:	4618      	mov	r0, r3
 8003678:	f7fe f9b7 	bl	80019ea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	d060      	beq.n	8003748 <f_open+0x360>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d05c      	beq.n	8003748 <f_open+0x360>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	895b      	ldrh	r3, [r3, #10]
 800369a:	025b      	lsls	r3, r3, #9
 800369c:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	657b      	str	r3, [r7, #84]	; 0x54
 80036aa:	e016      	b.n	80036da <f_open+0x2f2>
					clst = get_fat(&fp->obj, clst);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fe fc62 	bl	8001f7a <get_fat>
 80036b6:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80036b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d802      	bhi.n	80036c4 <f_open+0x2dc>
 80036be:	2302      	movs	r3, #2
 80036c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80036c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036ca:	d102      	bne.n	80036d2 <f_open+0x2ea>
 80036cc:	2301      	movs	r3, #1
 80036ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80036d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	657b      	str	r3, [r7, #84]	; 0x54
 80036da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d103      	bne.n	80036ea <f_open+0x302>
 80036e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d8e0      	bhi.n	80036ac <f_open+0x2c4>
				}
				fp->clust = clst;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036ee:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80036f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d127      	bne.n	8003748 <f_open+0x360>
 80036f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d022      	beq.n	8003748 <f_open+0x360>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003706:	4618      	mov	r0, r3
 8003708:	f7fe fc18 	bl	8001f3c <clust2sect>
 800370c:	6478      	str	r0, [r7, #68]	; 0x44
 800370e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003710:	2b00      	cmp	r3, #0
 8003712:	d103      	bne.n	800371c <f_open+0x334>
						res = FR_INT_ERR;
 8003714:	2302      	movs	r3, #2
 8003716:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800371a:	e015      	b.n	8003748 <f_open+0x360>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800371c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800371e:	0a5a      	lsrs	r2, r3, #9
 8003720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003722:	441a      	add	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	7858      	ldrb	r0, [r3, #1]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a1a      	ldr	r2, [r3, #32]
 8003736:	2301      	movs	r3, #1
 8003738:	f7fe f820 	bl	800177c <disk_read>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <f_open+0x360>
 8003742:	2301      	movs	r3, #1
 8003744:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8003748:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <f_open+0x36e>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8003756:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800375a:	4618      	mov	r0, r3
 800375c:	3760      	adds	r7, #96	; 0x60
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	50640000 	.word	0x50640000

08003768 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08e      	sub	sp, #56	; 0x38
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
 8003774:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f107 0214 	add.w	r2, r7, #20
 8003786:	4611      	mov	r1, r2
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff fdb1 	bl	80032f0 <validate>
 800378e:	4603      	mov	r3, r0
 8003790:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8003794:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003798:	2b00      	cmp	r3, #0
 800379a:	d107      	bne.n	80037ac <f_read+0x44>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	7d5b      	ldrb	r3, [r3, #21]
 80037a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80037a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <f_read+0x4a>
 80037ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80037b0:	e115      	b.n	80039de <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	7d1b      	ldrb	r3, [r3, #20]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <f_read+0x5a>
 80037be:	2307      	movs	r3, #7
 80037c0:	e10d      	b.n	80039de <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	f240 80fe 	bls.w	80039d4 <f_read+0x26c>
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80037dc:	e0fa      	b.n	80039d4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f040 80c6 	bne.w	8003978 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	0a5b      	lsrs	r3, r3, #9
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	8952      	ldrh	r2, [r2, #10]
 80037f6:	3a01      	subs	r2, #1
 80037f8:	4013      	ands	r3, r2
 80037fa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d12f      	bne.n	8003862 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d103      	bne.n	8003812 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	633b      	str	r3, [r7, #48]	; 0x30
 8003810:	e013      	b.n	800383a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003816:	2b00      	cmp	r3, #0
 8003818:	d007      	beq.n	800382a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	4619      	mov	r1, r3
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f7fe fe3b 	bl	800249c <clmt_clust>
 8003826:	6338      	str	r0, [r7, #48]	; 0x30
 8003828:	e007      	b.n	800383a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	4619      	mov	r1, r3
 8003832:	4610      	mov	r0, r2
 8003834:	f7fe fba1 	bl	8001f7a <get_fat>
 8003838:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	2b01      	cmp	r3, #1
 800383e:	d804      	bhi.n	800384a <f_read+0xe2>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2202      	movs	r2, #2
 8003844:	755a      	strb	r2, [r3, #21]
 8003846:	2302      	movs	r3, #2
 8003848:	e0c9      	b.n	80039de <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003850:	d104      	bne.n	800385c <f_read+0xf4>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2201      	movs	r2, #1
 8003856:	755a      	strb	r2, [r3, #21]
 8003858:	2301      	movs	r3, #1
 800385a:	e0c0      	b.n	80039de <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003860:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	4619      	mov	r1, r3
 800386a:	4610      	mov	r0, r2
 800386c:	f7fe fb66 	bl	8001f3c <clust2sect>
 8003870:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d104      	bne.n	8003882 <f_read+0x11a>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2202      	movs	r2, #2
 800387c:	755a      	strb	r2, [r3, #21]
 800387e:	2302      	movs	r3, #2
 8003880:	e0ad      	b.n	80039de <f_read+0x276>
			sect += csect;
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	4413      	add	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	0a5b      	lsrs	r3, r3, #9
 800388e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8003890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003892:	2b00      	cmp	r3, #0
 8003894:	d039      	beq.n	800390a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389a:	4413      	add	r3, r2
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	8952      	ldrh	r2, [r2, #10]
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d905      	bls.n	80038b0 <f_read+0x148>
					cc = fs->csize - csect;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	895b      	ldrh	r3, [r3, #10]
 80038a8:	461a      	mov	r2, r3
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	7858      	ldrb	r0, [r3, #1]
 80038b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038ba:	f7fd ff5f 	bl	800177c <disk_read>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d004      	beq.n	80038ce <f_read+0x166>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2201      	movs	r2, #1
 80038c8:	755a      	strb	r2, [r3, #21]
 80038ca:	2301      	movs	r3, #1
 80038cc:	e087      	b.n	80039de <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	7d1b      	ldrb	r3, [r3, #20]
 80038d2:	b25b      	sxtb	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	da14      	bge.n	8003902 <f_read+0x19a>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a1a      	ldr	r2, [r3, #32]
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d90d      	bls.n	8003902 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a1a      	ldr	r2, [r3, #32]
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	025b      	lsls	r3, r3, #9
 80038f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f2:	18d0      	adds	r0, r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	3330      	adds	r3, #48	; 0x30
 80038f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038fc:	4619      	mov	r1, r3
 80038fe:	f7fe f853 	bl	80019a8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8003902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003904:	025b      	lsls	r3, r3, #9
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8003908:	e050      	b.n	80039ac <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	429a      	cmp	r2, r3
 8003912:	d02e      	beq.n	8003972 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	7d1b      	ldrb	r3, [r3, #20]
 8003918:	b25b      	sxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	da18      	bge.n	8003950 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	7858      	ldrb	r0, [r3, #1]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a1a      	ldr	r2, [r3, #32]
 800392c:	2301      	movs	r3, #1
 800392e:	f7fd ff45 	bl	80017bc <disk_write>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d004      	beq.n	8003942 <f_read+0x1da>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2201      	movs	r2, #1
 800393c:	755a      	strb	r2, [r3, #21]
 800393e:	2301      	movs	r3, #1
 8003940:	e04d      	b.n	80039de <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	7d1b      	ldrb	r3, [r3, #20]
 8003946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800394a:	b2da      	uxtb	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	7858      	ldrb	r0, [r3, #1]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800395a:	2301      	movs	r3, #1
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	f7fd ff0d 	bl	800177c <disk_read>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d004      	beq.n	8003972 <f_read+0x20a>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2201      	movs	r2, #1
 800396c:	755a      	strb	r2, [r3, #21]
 800396e:	2301      	movs	r3, #1
 8003970:	e035      	b.n	80039de <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003980:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003984:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8003986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	429a      	cmp	r2, r3
 800398c:	d901      	bls.n	8003992 <f_read+0x22a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a0:	4413      	add	r3, r2
 80039a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039a4:	4619      	mov	r1, r3
 80039a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039a8:	f7fd fffe 	bl	80019a8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80039ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b0:	4413      	add	r3, r2
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	699a      	ldr	r2, [r3, #24]
 80039b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ba:	441a      	add	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	619a      	str	r2, [r3, #24]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c6:	441a      	add	r2, r3
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f47f af01 	bne.w	80037de <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3738      	adds	r7, #56	; 0x38
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f107 0208 	add.w	r2, r7, #8
 80039f6:	4611      	mov	r1, r2
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff fc79 	bl	80032f0 <validate>
 80039fe:	4603      	mov	r3, r0
 8003a00:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003a02:	7dfb      	ldrb	r3, [r7, #23]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d167      	bne.n	8003ad8 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	7d1b      	ldrb	r3, [r3, #20]
 8003a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d061      	beq.n	8003ad8 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	7d1b      	ldrb	r3, [r3, #20]
 8003a18:	b25b      	sxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	da15      	bge.n	8003a4a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	7858      	ldrb	r0, [r3, #1]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1a      	ldr	r2, [r3, #32]
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	f7fd fec5 	bl	80017bc <disk_write>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <f_sync+0x54>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e04e      	b.n	8003ada <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	7d1b      	ldrb	r3, [r3, #20]
 8003a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8003a4a:	4b26      	ldr	r3, [pc, #152]	; (8003ae4 <f_sync+0xfc>)
 8003a4c:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	4619      	mov	r1, r3
 8003a56:	4610      	mov	r0, r2
 8003a58:	f7fe f9d4 	bl	8001e04 <move_window>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d138      	bne.n	8003ad8 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	330b      	adds	r3, #11
 8003a70:	781a      	ldrb	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	330b      	adds	r3, #11
 8003a76:	f042 0220 	orr.w	r2, r2, #32
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6818      	ldr	r0, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	461a      	mov	r2, r3
 8003a88:	68f9      	ldr	r1, [r7, #12]
 8003a8a:	f7fe fee1 	bl	8002850 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f103 021c 	add.w	r2, r3, #28
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	f7fd ff58 	bl	8001950 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	3316      	adds	r3, #22
 8003aa4:	6939      	ldr	r1, [r7, #16]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fd ff52 	bl	8001950 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	3312      	adds	r3, #18
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fd ff31 	bl	800191a <st_word>
					fs->wflag = 1;
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2201      	movs	r2, #1
 8003abc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fe f9cd 	bl	8001e60 <sync_fs>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	7d1b      	ldrb	r3, [r3, #20]
 8003ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8003ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	50640000 	.word	0x50640000

08003ae8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff ff79 	bl	80039e8 <f_sync>
 8003af6:	4603      	mov	r3, r0
 8003af8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d118      	bne.n	8003b32 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f107 0208 	add.w	r2, r7, #8
 8003b06:	4611      	mov	r1, r2
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff fbf1 	bl	80032f0 <validate>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10c      	bne.n	8003b32 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fe f8cd 	bl	8001cbc <dec_lock>
 8003b22:	4603      	mov	r3, r0
 8003b24:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d102      	bne.n	8003b32 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b090      	sub	sp, #64	; 0x40
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f107 0208 	add.w	r2, r7, #8
 8003b4c:	4611      	mov	r1, r2
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff fbce 	bl	80032f0 <validate>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8003b5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d103      	bne.n	8003b6a <f_lseek+0x2e>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	7d5b      	ldrb	r3, [r3, #21]
 8003b66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8003b6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <f_lseek+0x3c>
 8003b72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b76:	e1e6      	b.n	8003f46 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 80d1 	beq.w	8003d24 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b88:	d15a      	bne.n	8003c40 <f_lseek+0x104>
			tbl = fp->cltbl;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	1d1a      	adds	r2, r3, #4
 8003b94:	627a      	str	r2, [r7, #36]	; 0x24
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d03a      	beq.n	8003c20 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8003baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb4:	3302      	adds	r3, #2
 8003bb6:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8003bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fe f9d7 	bl	8001f7a <get_fat>
 8003bcc:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8003bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d804      	bhi.n	8003bde <f_lseek+0xa2>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	755a      	strb	r2, [r3, #21]
 8003bda:	2302      	movs	r3, #2
 8003bdc:	e1b3      	b.n	8003f46 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003be4:	d104      	bne.n	8003bf0 <f_lseek+0xb4>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	755a      	strb	r2, [r3, #21]
 8003bec:	2301      	movs	r3, #1
 8003bee:	e1aa      	b.n	8003f46 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d0de      	beq.n	8003bb8 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8003bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d809      	bhi.n	8003c16 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	1d1a      	adds	r2, r3, #4
 8003c06:	627a      	str	r2, [r7, #36]	; 0x24
 8003c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	1d1a      	adds	r2, r3, #4
 8003c10:	627a      	str	r2, [r7, #36]	; 0x24
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d3c4      	bcc.n	8003baa <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c26:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8003c28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d803      	bhi.n	8003c38 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	e184      	b.n	8003f42 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8003c38:	2311      	movs	r3, #17
 8003c3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003c3e:	e180      	b.n	8003f42 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d902      	bls.n	8003c50 <f_lseek+0x114>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 8172 	beq.w	8003f42 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	3b01      	subs	r3, #1
 8003c62:	4619      	mov	r1, r3
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7fe fc19 	bl	800249c <clmt_clust>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	4619      	mov	r1, r3
 8003c78:	4610      	mov	r0, r2
 8003c7a:	f7fe f95f 	bl	8001f3c <clust2sect>
 8003c7e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d104      	bne.n	8003c90 <f_lseek+0x154>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2202      	movs	r2, #2
 8003c8a:	755a      	strb	r2, [r3, #21]
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	e15a      	b.n	8003f46 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	0a5b      	lsrs	r3, r3, #9
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	8952      	ldrh	r2, [r2, #10]
 8003c9a:	3a01      	subs	r2, #1
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 8148 	beq.w	8003f42 <f_lseek+0x406>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	f000 8142 	beq.w	8003f42 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	7d1b      	ldrb	r3, [r3, #20]
 8003cc2:	b25b      	sxtb	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	da18      	bge.n	8003cfa <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	7858      	ldrb	r0, [r3, #1]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1a      	ldr	r2, [r3, #32]
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	f7fd fd70 	bl	80017bc <disk_write>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d004      	beq.n	8003cec <f_lseek+0x1b0>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	755a      	strb	r2, [r3, #21]
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e12c      	b.n	8003f46 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	7d1b      	ldrb	r3, [r3, #20]
 8003cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	7858      	ldrb	r0, [r3, #1]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003d04:	2301      	movs	r3, #1
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	f7fd fd38 	bl	800177c <disk_read>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d004      	beq.n	8003d1c <f_lseek+0x1e0>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	755a      	strb	r2, [r3, #21]
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e114      	b.n	8003f46 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	621a      	str	r2, [r3, #32]
 8003d22:	e10e      	b.n	8003f42 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d908      	bls.n	8003d40 <f_lseek+0x204>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	7d1b      	ldrb	r3, [r3, #20]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d102      	bne.n	8003d40 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8003d46:	2300      	movs	r3, #0
 8003d48:	637b      	str	r3, [r7, #52]	; 0x34
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d4e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 80a7 	beq.w	8003ea6 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	895b      	ldrh	r3, [r3, #10]
 8003d5c:	025b      	lsls	r3, r3, #9
 8003d5e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d01b      	beq.n	8003d9e <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	1e5a      	subs	r2, r3, #1
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	1e59      	subs	r1, r3, #1
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d30f      	bcc.n	8003d9e <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	1e5a      	subs	r2, r3, #1
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	425b      	negs	r3, r3
 8003d86:	401a      	ands	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d9c:	e022      	b.n	8003de4 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8003da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d119      	bne.n	8003dde <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2100      	movs	r1, #0
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe fadc 	bl	800236c <create_chain>
 8003db4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8003db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d104      	bne.n	8003dc6 <f_lseek+0x28a>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	755a      	strb	r2, [r3, #21]
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e0bf      	b.n	8003f46 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dcc:	d104      	bne.n	8003dd8 <f_lseek+0x29c>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	755a      	strb	r2, [r3, #21]
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0b6      	b.n	8003f46 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ddc:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003de2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8003de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d05d      	beq.n	8003ea6 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8003dea:	e03a      	b.n	8003e62 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	603b      	str	r3, [r7, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699a      	ldr	r2, [r3, #24]
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	441a      	add	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	7d1b      	ldrb	r3, [r3, #20]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00b      	beq.n	8003e24 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fe faab 	bl	800236c <create_chain>
 8003e16:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8003e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d108      	bne.n	8003e30 <f_lseek+0x2f4>
							ofs = 0; break;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	603b      	str	r3, [r7, #0]
 8003e22:	e022      	b.n	8003e6a <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7fe f8a6 	bl	8001f7a <get_fat>
 8003e2e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e36:	d104      	bne.n	8003e42 <f_lseek+0x306>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	755a      	strb	r2, [r3, #21]
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e081      	b.n	8003f46 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8003e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d904      	bls.n	8003e52 <f_lseek+0x316>
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d304      	bcc.n	8003e5c <f_lseek+0x320>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2202      	movs	r2, #2
 8003e56:	755a      	strb	r2, [r3, #21]
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e074      	b.n	8003f46 <f_lseek+0x40a>
					fp->clust = clst;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e60:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d8c0      	bhi.n	8003dec <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699a      	ldr	r2, [r3, #24]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	441a      	add	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d012      	beq.n	8003ea6 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fe f859 	bl	8001f3c <clust2sect>
 8003e8a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8003e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d104      	bne.n	8003e9c <f_lseek+0x360>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2202      	movs	r2, #2
 8003e96:	755a      	strb	r2, [r3, #21]
 8003e98:	2302      	movs	r3, #2
 8003e9a:	e054      	b.n	8003f46 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	0a5b      	lsrs	r3, r3, #9
 8003ea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ea2:	4413      	add	r3, r2
 8003ea4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699a      	ldr	r2, [r3, #24]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d90a      	bls.n	8003ec8 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	7d1b      	ldrb	r3, [r3, #20]
 8003ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d036      	beq.n	8003f42 <f_lseek+0x406>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d031      	beq.n	8003f42 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	7d1b      	ldrb	r3, [r3, #20]
 8003ee2:	b25b      	sxtb	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	da18      	bge.n	8003f1a <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	7858      	ldrb	r0, [r3, #1]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1a      	ldr	r2, [r3, #32]
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	f7fd fc60 	bl	80017bc <disk_write>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d004      	beq.n	8003f0c <f_lseek+0x3d0>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	755a      	strb	r2, [r3, #21]
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e01c      	b.n	8003f46 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	7d1b      	ldrb	r3, [r3, #20]
 8003f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	7858      	ldrb	r0, [r3, #1]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003f24:	2301      	movs	r3, #1
 8003f26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f28:	f7fd fc28 	bl	800177c <disk_read>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d004      	beq.n	8003f3c <f_lseek+0x400>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	755a      	strb	r2, [r3, #21]
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e004      	b.n	8003f46 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f40:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8003f42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3740      	adds	r7, #64	; 0x40
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b086      	sub	sp, #24
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <f_opendir+0x14>
 8003f5e:	2309      	movs	r3, #9
 8003f60:	e064      	b.n	800402c <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8003f66:	f107 010c 	add.w	r1, r7, #12
 8003f6a:	463b      	mov	r3, r7
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fe ff72 	bl	8002e58 <find_volume>
 8003f74:	4603      	mov	r3, r0
 8003f76:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003f78:	7dfb      	ldrb	r3, [r7, #23]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d14f      	bne.n	800401e <f_opendir+0xd0>
		obj->fs = fs;
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	4619      	mov	r1, r3
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7fe fe59 	bl	8002c40 <follow_path>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8003f92:	7dfb      	ldrb	r3, [r7, #23]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d13d      	bne.n	8004014 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003f9e:	b25b      	sxtb	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	db12      	blt.n	8003fca <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	799b      	ldrb	r3, [r3, #6]
 8003fa8:	f003 0310 	and.w	r3, r3, #16
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4610      	mov	r0, r2
 8003fba:	f7fe fc2a 	bl	8002812 <ld_clust>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	609a      	str	r2, [r3, #8]
 8003fc4:	e001      	b.n	8003fca <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8003fc6:	2305      	movs	r3, #5
 8003fc8:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8003fca:	7dfb      	ldrb	r3, [r7, #23]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d121      	bne.n	8004014 <f_opendir+0xc6>
				obj->id = fs->id;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	88da      	ldrh	r2, [r3, #6]
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8003fd8:	2100      	movs	r1, #0
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fe fa92 	bl	8002504 <dir_sdi>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8003fe4:	7dfb      	ldrb	r3, [r7, #23]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d114      	bne.n	8004014 <f_opendir+0xc6>
					if (obj->sclust) {
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00d      	beq.n	800400e <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7fd fdd3 	bl	8001ba0 <inc_lock>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d105      	bne.n	8004014 <f_opendir+0xc6>
 8004008:	2312      	movs	r3, #18
 800400a:	75fb      	strb	r3, [r7, #23]
 800400c:	e002      	b.n	8004014 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	2200      	movs	r2, #0
 8004012:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8004014:	7dfb      	ldrb	r3, [r7, #23]
 8004016:	2b04      	cmp	r3, #4
 8004018:	d101      	bne.n	800401e <f_opendir+0xd0>
 800401a:	2305      	movs	r3, #5
 800401c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800401e:	7dfb      	ldrb	r3, [r7, #23]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d002      	beq.n	800402a <f_opendir+0xdc>
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800402a:	7dfb      	ldrb	r3, [r7, #23]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f107 0208 	add.w	r2, r7, #8
 8004042:	4611      	mov	r1, r2
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff f953 	bl	80032f0 <validate>
 800404a:	4603      	mov	r3, r0
 800404c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800404e:	7bfb      	ldrb	r3, [r7, #15]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d110      	bne.n	8004076 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d006      	beq.n	800406a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	4618      	mov	r0, r3
 8004062:	f7fd fe2b 	bl	8001cbc <dec_lock>
 8004066:	4603      	mov	r3, r0
 8004068:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800406a:	7bfb      	ldrb	r3, [r7, #15]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d102      	bne.n	8004076 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8004076:	7bfb      	ldrb	r3, [r7, #15]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f107 0208 	add.w	r2, r7, #8
 8004090:	4611      	mov	r1, r2
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff f92c 	bl	80032f0 <validate>
 8004098:	4603      	mov	r3, r0
 800409a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800409c:	7bfb      	ldrb	r3, [r7, #15]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d126      	bne.n	80040f0 <f_readdir+0x70>
		if (!fno) {
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d106      	bne.n	80040b6 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80040a8:	2100      	movs	r1, #0
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fe fa2a 	bl	8002504 <dir_sdi>
 80040b0:	4603      	mov	r3, r0
 80040b2:	73fb      	strb	r3, [r7, #15]
 80040b4:	e01c      	b.n	80040f0 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80040b6:	2100      	movs	r1, #0
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7fe fbe9 	bl	8002890 <dir_read>
 80040be:	4603      	mov	r3, r0
 80040c0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
 80040c4:	2b04      	cmp	r3, #4
 80040c6:	d101      	bne.n	80040cc <f_readdir+0x4c>
 80040c8:	2300      	movs	r3, #0
 80040ca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10e      	bne.n	80040f0 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80040d2:	6839      	ldr	r1, [r7, #0]
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7fe fcbf 	bl	8002a58 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80040da:	2100      	movs	r1, #0
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7fe fa8c 	bl	80025fa <dir_next>
 80040e2:	4603      	mov	r3, r0
 80040e4:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80040e6:	7bfb      	ldrb	r3, [r7, #15]
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d101      	bne.n	80040f0 <f_readdir+0x70>
 80040ec:	2300      	movs	r3, #0
 80040ee:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b092      	sub	sp, #72	; 0x48
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8004106:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800410a:	f107 030c 	add.w	r3, r7, #12
 800410e:	2200      	movs	r2, #0
 8004110:	4618      	mov	r0, r3
 8004112:	f7fe fea1 	bl	8002e58 <find_volume>
 8004116:	4603      	mov	r3, r0
 8004118:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800411c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004120:	2b00      	cmp	r3, #0
 8004122:	f040 8099 	bne.w	8004258 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8004126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800412c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412e:	691a      	ldr	r2, [r3, #16]
 8004130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	3b02      	subs	r3, #2
 8004136:	429a      	cmp	r2, r3
 8004138:	d804      	bhi.n	8004144 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413c:	691a      	ldr	r2, [r3, #16]
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	e089      	b.n	8004258 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8004144:	2300      	movs	r3, #0
 8004146:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d128      	bne.n	80041a2 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8004150:	2302      	movs	r3, #2
 8004152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004156:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8004158:	f107 0314 	add.w	r3, r7, #20
 800415c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800415e:	4618      	mov	r0, r3
 8004160:	f7fd ff0b 	bl	8001f7a <get_fat>
 8004164:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8004166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004168:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800416c:	d103      	bne.n	8004176 <f_getfree+0x7c>
 800416e:	2301      	movs	r3, #1
 8004170:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004174:	e063      	b.n	800423e <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8004176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004178:	2b01      	cmp	r3, #1
 800417a:	d103      	bne.n	8004184 <f_getfree+0x8a>
 800417c:	2302      	movs	r3, #2
 800417e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004182:	e05c      	b.n	800423e <f_getfree+0x144>
					if (stat == 0) nfree++;
 8004184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004186:	2b00      	cmp	r3, #0
 8004188:	d102      	bne.n	8004190 <f_getfree+0x96>
 800418a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800418c:	3301      	adds	r3, #1
 800418e:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8004190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004192:	3301      	adds	r3, #1
 8004194:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800419c:	429a      	cmp	r2, r3
 800419e:	d3db      	bcc.n	8004158 <f_getfree+0x5e>
 80041a0:	e04d      	b.n	800423e <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80041a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80041ae:	2300      	movs	r3, #0
 80041b0:	637b      	str	r3, [r7, #52]	; 0x34
 80041b2:	2300      	movs	r3, #0
 80041b4:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80041b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d113      	bne.n	80041e4 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80041bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	63ba      	str	r2, [r7, #56]	; 0x38
 80041c4:	4619      	mov	r1, r3
 80041c6:	f7fd fe1d 	bl	8001e04 <move_window>
 80041ca:	4603      	mov	r3, r0
 80041cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80041d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d131      	bne.n	800423c <f_getfree+0x142>
							p = fs->win;
 80041d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041da:	3330      	adds	r3, #48	; 0x30
 80041dc:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80041de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041e2:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80041e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d10f      	bne.n	800420c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80041ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041ee:	f7fd fb59 	bl	80018a4 <ld_word>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d102      	bne.n	80041fe <f_getfree+0x104>
 80041f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041fa:	3301      	adds	r3, #1
 80041fc:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80041fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004200:	3302      	adds	r3, #2
 8004202:	633b      	str	r3, [r7, #48]	; 0x30
 8004204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004206:	3b02      	subs	r3, #2
 8004208:	637b      	str	r3, [r7, #52]	; 0x34
 800420a:	e010      	b.n	800422e <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800420c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800420e:	f7fd fb61 	bl	80018d4 <ld_dword>
 8004212:	4603      	mov	r3, r0
 8004214:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d102      	bne.n	8004222 <f_getfree+0x128>
 800421c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800421e:	3301      	adds	r3, #1
 8004220:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8004222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004224:	3304      	adds	r3, #4
 8004226:	633b      	str	r3, [r7, #48]	; 0x30
 8004228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800422a:	3b04      	subs	r3, #4
 800422c:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800422e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004230:	3b01      	subs	r3, #1
 8004232:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1bd      	bne.n	80041b6 <f_getfree+0xbc>
 800423a:	e000      	b.n	800423e <f_getfree+0x144>
							if (res != FR_OK) break;
 800423c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004242:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8004244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004246:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004248:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800424a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424c:	791a      	ldrb	r2, [r3, #4]
 800424e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004250:	f042 0201 	orr.w	r2, r2, #1
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8004258:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800425c:	4618      	mov	r0, r3
 800425e:	3748      	adds	r7, #72	; 0x48
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	4613      	mov	r3, r2
 8004270:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004272:	2301      	movs	r3, #1
 8004274:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004276:	2300      	movs	r3, #0
 8004278:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800427a:	4b1f      	ldr	r3, [pc, #124]	; (80042f8 <FATFS_LinkDriverEx+0x94>)
 800427c:	7a5b      	ldrb	r3, [r3, #9]
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b01      	cmp	r3, #1
 8004282:	d831      	bhi.n	80042e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004284:	4b1c      	ldr	r3, [pc, #112]	; (80042f8 <FATFS_LinkDriverEx+0x94>)
 8004286:	7a5b      	ldrb	r3, [r3, #9]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	461a      	mov	r2, r3
 800428c:	4b1a      	ldr	r3, [pc, #104]	; (80042f8 <FATFS_LinkDriverEx+0x94>)
 800428e:	2100      	movs	r1, #0
 8004290:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8004292:	4b19      	ldr	r3, [pc, #100]	; (80042f8 <FATFS_LinkDriverEx+0x94>)
 8004294:	7a5b      	ldrb	r3, [r3, #9]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	4a17      	ldr	r2, [pc, #92]	; (80042f8 <FATFS_LinkDriverEx+0x94>)
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80042a2:	4b15      	ldr	r3, [pc, #84]	; (80042f8 <FATFS_LinkDriverEx+0x94>)
 80042a4:	7a5b      	ldrb	r3, [r3, #9]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	461a      	mov	r2, r3
 80042aa:	4b13      	ldr	r3, [pc, #76]	; (80042f8 <FATFS_LinkDriverEx+0x94>)
 80042ac:	4413      	add	r3, r2
 80042ae:	79fa      	ldrb	r2, [r7, #7]
 80042b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80042b2:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <FATFS_LinkDriverEx+0x94>)
 80042b4:	7a5b      	ldrb	r3, [r3, #9]
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	b2d1      	uxtb	r1, r2
 80042bc:	4a0e      	ldr	r2, [pc, #56]	; (80042f8 <FATFS_LinkDriverEx+0x94>)
 80042be:	7251      	strb	r1, [r2, #9]
 80042c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80042c2:	7dbb      	ldrb	r3, [r7, #22]
 80042c4:	3330      	adds	r3, #48	; 0x30
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	3301      	adds	r3, #1
 80042d0:	223a      	movs	r2, #58	; 0x3a
 80042d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	3302      	adds	r3, #2
 80042d8:	222f      	movs	r2, #47	; 0x2f
 80042da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	3303      	adds	r3, #3
 80042e0:	2200      	movs	r2, #0
 80042e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80042e4:	2300      	movs	r3, #0
 80042e6:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80042e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	2000065c 	.word	0x2000065c

080042fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004306:	2200      	movs	r2, #0
 8004308:	6839      	ldr	r1, [r7, #0]
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7ff ffaa 	bl	8004264 <FATFS_LinkDriverEx>
 8004310:	4603      	mov	r3, r0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <exf_getfree>:

#include "fops.h"
#include "main.h"
#include "string.h"
uint32_t exf_getfree(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b0c4      	sub	sp, #272	; 0x110
 8004320:	af00      	add	r7, sp, #0
    FATFS *fs;
    DWORD fre_clust, fre_sect, tot_sect;

    if(f_getfree(USERPath, &fre_clust, &fs) == FR_OK)
 8004322:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8004326:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800432a:	4619      	mov	r1, r3
 800432c:	4829      	ldr	r0, [pc, #164]	; (80043d4 <exf_getfree+0xb8>)
 800432e:	f7ff fee4 	bl	80040fa <f_getfree>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d147      	bne.n	80043c8 <exf_getfree+0xac>
    {
        tot_sect = (fs->n_fatent - 2) * fs->csize;		// �õ���������
 8004338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	3b02      	subs	r3, #2
 8004340:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8004344:	8952      	ldrh	r2, [r2, #10]
 8004346:	fb02 f303 	mul.w	r3, r2, r3
 800434a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        fre_sect = fre_clust * fs->csize;				// �õ�����������
 800434e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004352:	895b      	ldrh	r3, [r3, #10]
 8004354:	461a      	mov	r2, r3
 8004356:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800435a:	fb02 f303 	mul.w	r3, r2, r3
 800435e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

        tot_sect >>= 11;		// תΪMB
 8004362:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004366:	0adb      	lsrs	r3, r3, #11
 8004368:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        fre_sect >>= 11;		// תΪMB
 800436c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004370:	0adb      	lsrs	r3, r3, #11
 8004372:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

        char buf[256];
        sprintf(buf, "# SD Card Total Size:%ldMB\r\n", tot_sect);
 8004376:	463b      	mov	r3, r7
 8004378:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800437c:	4916      	ldr	r1, [pc, #88]	; (80043d8 <exf_getfree+0xbc>)
 800437e:	4618      	mov	r0, r3
 8004380:	f009 fd34 	bl	800ddec <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 8004384:	463b      	mov	r3, r7
 8004386:	4618      	mov	r0, r3
 8004388:	f7fb ff22 	bl	80001d0 <strlen>
 800438c:	4603      	mov	r3, r0
 800438e:	b29a      	uxth	r2, r3
 8004390:	4639      	mov	r1, r7
 8004392:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004396:	4811      	ldr	r0, [pc, #68]	; (80043dc <exf_getfree+0xc0>)
 8004398:	f006 fe51 	bl	800b03e <HAL_UART_Transmit>
        sprintf(buf, "# SD Card Free  Size:%ldMB\r\n", fre_sect);
 800439c:	463b      	mov	r3, r7
 800439e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80043a2:	490f      	ldr	r1, [pc, #60]	; (80043e0 <exf_getfree+0xc4>)
 80043a4:	4618      	mov	r0, r3
 80043a6:	f009 fd21 	bl	800ddec <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 80043aa:	463b      	mov	r3, r7
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fb ff0f 	bl	80001d0 <strlen>
 80043b2:	4603      	mov	r3, r0
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	4639      	mov	r1, r7
 80043b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043bc:	4807      	ldr	r0, [pc, #28]	; (80043dc <exf_getfree+0xc0>)
 80043be:	f006 fe3e 	bl	800b03e <HAL_UART_Transmit>

        return fre_sect;
 80043c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80043c6:	e7ff      	b.n	80043c8 <exf_getfree+0xac>
    }
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20000410 	.word	0x20000410
 80043d8:	0800e78c 	.word	0x0800e78c
 80043dc:	20000810 	.word	0x20000810
 80043e0:	0800e7ac 	.word	0x0800e7ac

080043e4 <exf_mount>:

int exf_mount(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b0c2      	sub	sp, #264	; 0x108
 80043e8:	af00      	add	r7, sp, #0
	int status_code = f_mount(&USERFatFS, USERPath, 1);
 80043ea:	2201      	movs	r2, #1
 80043ec:	4912      	ldr	r1, [pc, #72]	; (8004438 <exf_mount+0x54>)
 80043ee:	4813      	ldr	r0, [pc, #76]	; (800443c <exf_mount+0x58>)
 80043f0:	f7fe ffb4 	bl	800335c <f_mount>
 80043f4:	4603      	mov	r3, r0
 80043f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	char buf[256];
    sprintf(buf, "# SD Card Mount %s!\r\n",  status_code == FR_OK ? "Successfullly" : "Failed");
 80043fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <exf_mount+0x22>
 8004402:	4a0f      	ldr	r2, [pc, #60]	; (8004440 <exf_mount+0x5c>)
 8004404:	e000      	b.n	8004408 <exf_mount+0x24>
 8004406:	4a0f      	ldr	r2, [pc, #60]	; (8004444 <exf_mount+0x60>)
 8004408:	1d3b      	adds	r3, r7, #4
 800440a:	490f      	ldr	r1, [pc, #60]	; (8004448 <exf_mount+0x64>)
 800440c:	4618      	mov	r0, r3
 800440e:	f009 fced 	bl	800ddec <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 8004412:	1d3b      	adds	r3, r7, #4
 8004414:	4618      	mov	r0, r3
 8004416:	f7fb fedb 	bl	80001d0 <strlen>
 800441a:	4603      	mov	r3, r0
 800441c:	b29a      	uxth	r2, r3
 800441e:	1d39      	adds	r1, r7, #4
 8004420:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004424:	4809      	ldr	r0, [pc, #36]	; (800444c <exf_mount+0x68>)
 8004426:	f006 fe0a 	bl	800b03e <HAL_UART_Transmit>
    return status_code;
 800442a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
}
 800442e:	4618      	mov	r0, r3
 8004430:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	20000410 	.word	0x20000410
 800443c:	20000414 	.word	0x20000414
 8004440:	0800e7cc 	.word	0x0800e7cc
 8004444:	0800e7dc 	.word	0x0800e7dc
 8004448:	0800e7e4 	.word	0x0800e7e4
 800444c:	20000810 	.word	0x20000810

08004450 <SD_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SD_init() {
 8004450:	b580      	push	{r7, lr}
 8004452:	b088      	sub	sp, #32
 8004454:	af00      	add	r7, sp, #0
	// One line of LCD contains 21 character
	char buf[22];
	sprintf(buf, "Loading SD card...");
 8004456:	463b      	mov	r3, r7
 8004458:	4930      	ldr	r1, [pc, #192]	; (800451c <SD_init+0xcc>)
 800445a:	4618      	mov	r0, r3
 800445c:	f009 fcc6 	bl	800ddec <siprintf>
	LCD_FStr(buf, 0, 0);
 8004460:	463b      	mov	r3, r7
 8004462:	2200      	movs	r2, #0
 8004464:	2100      	movs	r1, #0
 8004466:	4618      	mov	r0, r3
 8004468:	f7fc fddc 	bl	8001024 <LCD_FStr>
	LCD_Update();
 800446c:	f7fc fd3e 	bl	8000eec <LCD_Update>

	// Wait 1 second before loading SD card
	HAL_Delay(1000);
 8004470:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004474:	f001 ff68 	bl	8006348 <HAL_Delay>

	// Clear LCD before showing anything
	LCD_Clear();
 8004478:	f7fc fd14 	bl	8000ea4 <LCD_Clear>

	MX_FATFS_Init();
 800447c:	f7fd f9dc 	bl	8001838 <MX_FATFS_Init>

	LCD_Clear();
 8004480:	f7fc fd10 	bl	8000ea4 <LCD_Clear>
	int mount = exf_mount();
 8004484:	f7ff ffae 	bl	80043e4 <exf_mount>
 8004488:	61f8      	str	r0, [r7, #28]
	sprintf(buf, "SD card mount");
 800448a:	463b      	mov	r3, r7
 800448c:	4924      	ldr	r1, [pc, #144]	; (8004520 <SD_init+0xd0>)
 800448e:	4618      	mov	r0, r3
 8004490:	f009 fcac 	bl	800ddec <siprintf>
	LCD_FStr(buf, 0, 0);
 8004494:	463b      	mov	r3, r7
 8004496:	2200      	movs	r2, #0
 8004498:	2100      	movs	r1, #0
 800449a:	4618      	mov	r0, r3
 800449c:	f7fc fdc2 	bl	8001024 <LCD_FStr>
	sprintf(buf, "%s", mount == FR_OK ? "Success" : "Fail");
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <SD_init+0x5a>
 80044a6:	4a1f      	ldr	r2, [pc, #124]	; (8004524 <SD_init+0xd4>)
 80044a8:	e000      	b.n	80044ac <SD_init+0x5c>
 80044aa:	4a1f      	ldr	r2, [pc, #124]	; (8004528 <SD_init+0xd8>)
 80044ac:	463b      	mov	r3, r7
 80044ae:	491f      	ldr	r1, [pc, #124]	; (800452c <SD_init+0xdc>)
 80044b0:	4618      	mov	r0, r3
 80044b2:	f009 fc9b 	bl	800ddec <siprintf>
	LCD_FStr(buf, 0, 1);
 80044b6:	463b      	mov	r3, r7
 80044b8:	2201      	movs	r2, #1
 80044ba:	2100      	movs	r1, #0
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fc fdb1 	bl	8001024 <LCD_FStr>
	LCD_Update();
 80044c2:	f7fc fd13 	bl	8000eec <LCD_Update>
	HAL_Delay(1000);
 80044c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044ca:	f001 ff3d 	bl	8006348 <HAL_Delay>

	LCD_Clear();
 80044ce:	f7fc fce9 	bl	8000ea4 <LCD_Clear>
	unsigned free = exf_getfree();
 80044d2:	f7ff ff23 	bl	800431c <exf_getfree>
 80044d6:	61b8      	str	r0, [r7, #24]
	sprintf(buf, "SD card free space");
 80044d8:	463b      	mov	r3, r7
 80044da:	4915      	ldr	r1, [pc, #84]	; (8004530 <SD_init+0xe0>)
 80044dc:	4618      	mov	r0, r3
 80044de:	f009 fc85 	bl	800ddec <siprintf>
	LCD_FStr(buf, 0, 0);
 80044e2:	463b      	mov	r3, r7
 80044e4:	2200      	movs	r2, #0
 80044e6:	2100      	movs	r1, #0
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fc fd9b 	bl	8001024 <LCD_FStr>
	sprintf(buf, "%u MB", free);
 80044ee:	463b      	mov	r3, r7
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	4910      	ldr	r1, [pc, #64]	; (8004534 <SD_init+0xe4>)
 80044f4:	4618      	mov	r0, r3
 80044f6:	f009 fc79 	bl	800ddec <siprintf>
	LCD_FStr(buf, 0, 1);
 80044fa:	463b      	mov	r3, r7
 80044fc:	2201      	movs	r2, #1
 80044fe:	2100      	movs	r1, #0
 8004500:	4618      	mov	r0, r3
 8004502:	f7fc fd8f 	bl	8001024 <LCD_FStr>
	LCD_Update();
 8004506:	f7fc fcf1 	bl	8000eec <LCD_Update>
	HAL_Delay(1000);
 800450a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800450e:	f001 ff1b 	bl	8006348 <HAL_Delay>
	return;
 8004512:	bf00      	nop
}
 8004514:	3720      	adds	r7, #32
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	0800e8a4 	.word	0x0800e8a4
 8004520:	0800e8b8 	.word	0x0800e8b8
 8004524:	0800e8c8 	.word	0x0800e8c8
 8004528:	0800e8d0 	.word	0x0800e8d0
 800452c:	0800e8d8 	.word	0x0800e8d8
 8004530:	0800e8dc 	.word	0x0800e8dc
 8004534:	0800e8f0 	.word	0x0800e8f0

08004538 <OLED_task>:
;

void OLED_task(void *pvParameters) {
 8004538:	b580      	push	{r7, lr}
 800453a:	b08c      	sub	sp, #48	; 0x30
 800453c:	af02      	add	r7, sp, #8
 800453e:	6078      	str	r0, [r7, #4]
	char buf[22];
	while (1) {
		if (OLED_display_status == OLED_MENU) {
 8004540:	4bb7      	ldr	r3, [pc, #732]	; (8004820 <OLED_task+0x2e8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d154      	bne.n	80045f2 <OLED_task+0xba>
			// Clear OLED before displaying stuff
			LCD_Clear();
 8004548:	f7fc fcac 	bl	8000ea4 <LCD_Clear>
			sprintf(buf, "%c %s",
					(menu_select == MENU_FILE_BROWSER) ? '>' : ' ',
 800454c:	4bb5      	ldr	r3, [pc, #724]	; (8004824 <OLED_task+0x2ec>)
 800454e:	681b      	ldr	r3, [r3, #0]
			sprintf(buf, "%c %s",
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <OLED_task+0x20>
 8004554:	223e      	movs	r2, #62	; 0x3e
 8004556:	e000      	b.n	800455a <OLED_task+0x22>
 8004558:	2220      	movs	r2, #32
 800455a:	f107 000c 	add.w	r0, r7, #12
 800455e:	4bb2      	ldr	r3, [pc, #712]	; (8004828 <OLED_task+0x2f0>)
 8004560:	49b2      	ldr	r1, [pc, #712]	; (800482c <OLED_task+0x2f4>)
 8004562:	f009 fc43 	bl	800ddec <siprintf>
					"File Browser");
			LCD_FStr(buf, 0, 0);
 8004566:	f107 030c 	add.w	r3, r7, #12
 800456a:	2200      	movs	r2, #0
 800456c:	2100      	movs	r1, #0
 800456e:	4618      	mov	r0, r3
 8004570:	f7fc fd58 	bl	8001024 <LCD_FStr>
			sprintf(buf, "%c %s", (menu_select == MENU_PLAYER) ? '>' : ' ',
 8004574:	4bab      	ldr	r3, [pc, #684]	; (8004824 <OLED_task+0x2ec>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d101      	bne.n	8004580 <OLED_task+0x48>
 800457c:	223e      	movs	r2, #62	; 0x3e
 800457e:	e000      	b.n	8004582 <OLED_task+0x4a>
 8004580:	2220      	movs	r2, #32
 8004582:	f107 000c 	add.w	r0, r7, #12
 8004586:	4baa      	ldr	r3, [pc, #680]	; (8004830 <OLED_task+0x2f8>)
 8004588:	49a8      	ldr	r1, [pc, #672]	; (800482c <OLED_task+0x2f4>)
 800458a:	f009 fc2f 	bl	800ddec <siprintf>
					"Player");
			LCD_FStr(buf, 0, 1);
 800458e:	f107 030c 	add.w	r3, r7, #12
 8004592:	2201      	movs	r2, #1
 8004594:	2100      	movs	r1, #0
 8004596:	4618      	mov	r0, r3
 8004598:	f7fc fd44 	bl	8001024 <LCD_FStr>
			sprintf(buf, "%c %s", (menu_select == MENU_SETTING) ? '>' : ' ',
 800459c:	4ba1      	ldr	r3, [pc, #644]	; (8004824 <OLED_task+0x2ec>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d101      	bne.n	80045a8 <OLED_task+0x70>
 80045a4:	223e      	movs	r2, #62	; 0x3e
 80045a6:	e000      	b.n	80045aa <OLED_task+0x72>
 80045a8:	2220      	movs	r2, #32
 80045aa:	f107 000c 	add.w	r0, r7, #12
 80045ae:	4ba1      	ldr	r3, [pc, #644]	; (8004834 <OLED_task+0x2fc>)
 80045b0:	499e      	ldr	r1, [pc, #632]	; (800482c <OLED_task+0x2f4>)
 80045b2:	f009 fc1b 	bl	800ddec <siprintf>
					"Setting");
			LCD_FStr(buf, 0, 2);
 80045b6:	f107 030c 	add.w	r3, r7, #12
 80045ba:	2202      	movs	r2, #2
 80045bc:	2100      	movs	r1, #0
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fc fd30 	bl	8001024 <LCD_FStr>
			sprintf(buf, "%c %s", (menu_select == MENU_ABOUT) ? '>' : ' ',
 80045c4:	4b97      	ldr	r3, [pc, #604]	; (8004824 <OLED_task+0x2ec>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b03      	cmp	r3, #3
 80045ca:	d101      	bne.n	80045d0 <OLED_task+0x98>
 80045cc:	223e      	movs	r2, #62	; 0x3e
 80045ce:	e000      	b.n	80045d2 <OLED_task+0x9a>
 80045d0:	2220      	movs	r2, #32
 80045d2:	f107 000c 	add.w	r0, r7, #12
 80045d6:	4b98      	ldr	r3, [pc, #608]	; (8004838 <OLED_task+0x300>)
 80045d8:	4994      	ldr	r1, [pc, #592]	; (800482c <OLED_task+0x2f4>)
 80045da:	f009 fc07 	bl	800ddec <siprintf>
					"About");
			LCD_FStr(buf, 0, 3);
 80045de:	f107 030c 	add.w	r3, r7, #12
 80045e2:	2203      	movs	r2, #3
 80045e4:	2100      	movs	r1, #0
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fc fd1c 	bl	8001024 <LCD_FStr>
			LCD_Update();
 80045ec:	f7fc fc7e 	bl	8000eec <LCD_Update>
 80045f0:	e110      	b.n	8004814 <OLED_task+0x2dc>
		} else if (OLED_display_status == OLED_FILE_BROWSER) {
 80045f2:	4b8b      	ldr	r3, [pc, #556]	; (8004820 <OLED_task+0x2e8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d13b      	bne.n	8004672 <OLED_task+0x13a>
			LCD_Clear();
 80045fa:	f7fc fc53 	bl	8000ea4 <LCD_Clear>
			sprintf(buf, "File Browser");
 80045fe:	f107 030c 	add.w	r3, r7, #12
 8004602:	4989      	ldr	r1, [pc, #548]	; (8004828 <OLED_task+0x2f0>)
 8004604:	4618      	mov	r0, r3
 8004606:	f009 fbf1 	bl	800ddec <siprintf>
			LCD_FStr(buf, 0, 0);
 800460a:	f107 030c 	add.w	r3, r7, #12
 800460e:	2200      	movs	r2, #0
 8004610:	2100      	movs	r1, #0
 8004612:	4618      	mov	r0, r3
 8004614:	f7fc fd06 	bl	8001024 <LCD_FStr>
			for (int i = 0; i < 3; i++) {
 8004618:	2300      	movs	r3, #0
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
 800461c:	e023      	b.n	8004666 <OLED_task+0x12e>
				sprintf(buf, "%c %s", (file_select == i) ? '>' : ' ',
 800461e:	4b87      	ldr	r3, [pc, #540]	; (800483c <OLED_task+0x304>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004624:	429a      	cmp	r2, r3
 8004626:	d101      	bne.n	800462c <OLED_task+0xf4>
 8004628:	213e      	movs	r1, #62	; 0x3e
 800462a:	e000      	b.n	800462e <OLED_task+0xf6>
 800462c:	2120      	movs	r1, #32
						FileList.file[i].name);
 800462e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	4413      	add	r3, r2
 800463a:	4a81      	ldr	r2, [pc, #516]	; (8004840 <OLED_task+0x308>)
 800463c:	4413      	add	r3, r2
 800463e:	3301      	adds	r3, #1
				sprintf(buf, "%c %s", (file_select == i) ? '>' : ' ',
 8004640:	f107 000c 	add.w	r0, r7, #12
 8004644:	460a      	mov	r2, r1
 8004646:	4979      	ldr	r1, [pc, #484]	; (800482c <OLED_task+0x2f4>)
 8004648:	f009 fbd0 	bl	800ddec <siprintf>
				LCD_FStr(buf, 0, i + 1);
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	b2db      	uxtb	r3, r3
 8004650:	3301      	adds	r3, #1
 8004652:	b2da      	uxtb	r2, r3
 8004654:	f107 030c 	add.w	r3, r7, #12
 8004658:	2100      	movs	r1, #0
 800465a:	4618      	mov	r0, r3
 800465c:	f7fc fce2 	bl	8001024 <LCD_FStr>
			for (int i = 0; i < 3; i++) {
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	3301      	adds	r3, #1
 8004664:	627b      	str	r3, [r7, #36]	; 0x24
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	2b02      	cmp	r3, #2
 800466a:	ddd8      	ble.n	800461e <OLED_task+0xe6>
			}
			LCD_Update();
 800466c:	f7fc fc3e 	bl	8000eec <LCD_Update>
 8004670:	e0d0      	b.n	8004814 <OLED_task+0x2dc>
		} else if (OLED_display_status == OLED_PLAYER) {
 8004672:	4b6b      	ldr	r3, [pc, #428]	; (8004820 <OLED_task+0x2e8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b02      	cmp	r3, #2
 8004678:	d163      	bne.n	8004742 <OLED_task+0x20a>
			LCD_Clear();
 800467a:	f7fc fc13 	bl	8000ea4 <LCD_Clear>
			sprintf(buf, "Player");
 800467e:	f107 030c 	add.w	r3, r7, #12
 8004682:	496b      	ldr	r1, [pc, #428]	; (8004830 <OLED_task+0x2f8>)
 8004684:	4618      	mov	r0, r3
 8004686:	f009 fbb1 	bl	800ddec <siprintf>
			LCD_FStr(buf, 0, 0);
 800468a:	f107 030c 	add.w	r3, r7, #12
 800468e:	2200      	movs	r2, #0
 8004690:	2100      	movs	r1, #0
 8004692:	4618      	mov	r0, r3
 8004694:	f7fc fcc6 	bl	8001024 <LCD_FStr>
			sprintf(buf, "> Now Playing");
 8004698:	f107 030c 	add.w	r3, r7, #12
 800469c:	4969      	ldr	r1, [pc, #420]	; (8004844 <OLED_task+0x30c>)
 800469e:	4618      	mov	r0, r3
 80046a0:	f009 fba4 	bl	800ddec <siprintf>
			LCD_FStr(buf, 0, 1);
 80046a4:	f107 030c 	add.w	r3, r7, #12
 80046a8:	2201      	movs	r2, #1
 80046aa:	2100      	movs	r1, #0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fc fcb9 	bl	8001024 <LCD_FStr>
			sprintf(buf, ">> %s", FileList.file[file_select].name);
 80046b2:	4b62      	ldr	r3, [pc, #392]	; (800483c <OLED_task+0x304>)
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	4613      	mov	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	4413      	add	r3, r2
 80046c0:	4a5f      	ldr	r2, [pc, #380]	; (8004840 <OLED_task+0x308>)
 80046c2:	4413      	add	r3, r2
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	f107 030c 	add.w	r3, r7, #12
 80046ca:	495f      	ldr	r1, [pc, #380]	; (8004848 <OLED_task+0x310>)
 80046cc:	4618      	mov	r0, r3
 80046ce:	f009 fb8d 	bl	800ddec <siprintf>
			LCD_FStr(buf, 0, 2);
 80046d2:	f107 030c 	add.w	r3, r7, #12
 80046d6:	2202      	movs	r2, #2
 80046d8:	2100      	movs	r1, #0
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fc fca2 	bl	8001024 <LCD_FStr>
			switch(AudioState){
 80046e0:	4b5a      	ldr	r3, [pc, #360]	; (800484c <OLED_task+0x314>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d006      	beq.n	80046f6 <OLED_task+0x1be>
 80046e8:	2b03      	cmp	r3, #3
 80046ea:	dc19      	bgt.n	8004720 <OLED_task+0x1e8>
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d009      	beq.n	8004704 <OLED_task+0x1cc>
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d00e      	beq.n	8004712 <OLED_task+0x1da>
 80046f4:	e014      	b.n	8004720 <OLED_task+0x1e8>
			case AUDIO_STATE_PLAY:
				sprintf(buf, "PLAYING");
 80046f6:	f107 030c 	add.w	r3, r7, #12
 80046fa:	4955      	ldr	r1, [pc, #340]	; (8004850 <OLED_task+0x318>)
 80046fc:	4618      	mov	r0, r3
 80046fe:	f009 fb75 	bl	800ddec <siprintf>
				break;
 8004702:	e014      	b.n	800472e <OLED_task+0x1f6>
			case AUDIO_STATE_IDLE:
				sprintf(buf, "STOPPED");
 8004704:	f107 030c 	add.w	r3, r7, #12
 8004708:	4952      	ldr	r1, [pc, #328]	; (8004854 <OLED_task+0x31c>)
 800470a:	4618      	mov	r0, r3
 800470c:	f009 fb6e 	bl	800ddec <siprintf>
				break;
 8004710:	e00d      	b.n	800472e <OLED_task+0x1f6>
			case AUDIO_STATE_WAIT:
				sprintf(buf, "PAUSED");
 8004712:	f107 030c 	add.w	r3, r7, #12
 8004716:	4950      	ldr	r1, [pc, #320]	; (8004858 <OLED_task+0x320>)
 8004718:	4618      	mov	r0, r3
 800471a:	f009 fb67 	bl	800ddec <siprintf>
				break;
 800471e:	e006      	b.n	800472e <OLED_task+0x1f6>
			default:
				sprintf(buf, "STOPPED");
 8004720:	f107 030c 	add.w	r3, r7, #12
 8004724:	494b      	ldr	r1, [pc, #300]	; (8004854 <OLED_task+0x31c>)
 8004726:	4618      	mov	r0, r3
 8004728:	f009 fb60 	bl	800ddec <siprintf>
				break;
 800472c:	bf00      	nop
			}
			LCD_FStr(buf, 0, 3);
 800472e:	f107 030c 	add.w	r3, r7, #12
 8004732:	2203      	movs	r2, #3
 8004734:	2100      	movs	r1, #0
 8004736:	4618      	mov	r0, r3
 8004738:	f7fc fc74 	bl	8001024 <LCD_FStr>
			LCD_Update();
 800473c:	f7fc fbd6 	bl	8000eec <LCD_Update>
 8004740:	e068      	b.n	8004814 <OLED_task+0x2dc>
		} else if (OLED_display_status == OLED_SETTING) {
 8004742:	4b37      	ldr	r3, [pc, #220]	; (8004820 <OLED_task+0x2e8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b03      	cmp	r3, #3
 8004748:	d128      	bne.n	800479c <OLED_task+0x264>
			LCD_Clear();
 800474a:	f7fc fbab 	bl	8000ea4 <LCD_Clear>
			sprintf(buf, "Setting");
 800474e:	f107 030c 	add.w	r3, r7, #12
 8004752:	4938      	ldr	r1, [pc, #224]	; (8004834 <OLED_task+0x2fc>)
 8004754:	4618      	mov	r0, r3
 8004756:	f009 fb49 	bl	800ddec <siprintf>
			LCD_FStr(buf, 0, 0);
 800475a:	f107 030c 	add.w	r3, r7, #12
 800475e:	2200      	movs	r2, #0
 8004760:	2100      	movs	r1, #0
 8004762:	4618      	mov	r0, r3
 8004764:	f7fc fc5e 	bl	8001024 <LCD_FStr>
			sprintf(buf, "%c %s %u",
					(setting_select == SETTING_VOLUME) ? '>' : ' ', "Volume",
 8004768:	4b3c      	ldr	r3, [pc, #240]	; (800485c <OLED_task+0x324>)
 800476a:	681b      	ldr	r3, [r3, #0]
			sprintf(buf, "%c %s %u",
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <OLED_task+0x23c>
 8004770:	223e      	movs	r2, #62	; 0x3e
 8004772:	e000      	b.n	8004776 <OLED_task+0x23e>
 8004774:	2220      	movs	r2, #32
 8004776:	4b3a      	ldr	r3, [pc, #232]	; (8004860 <OLED_task+0x328>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f107 000c 	add.w	r0, r7, #12
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	4b38      	ldr	r3, [pc, #224]	; (8004864 <OLED_task+0x32c>)
 8004782:	4939      	ldr	r1, [pc, #228]	; (8004868 <OLED_task+0x330>)
 8004784:	f009 fb32 	bl	800ddec <siprintf>
					uwVolume);
			LCD_FStr(buf, 0, 1);
 8004788:	f107 030c 	add.w	r3, r7, #12
 800478c:	2201      	movs	r2, #1
 800478e:	2100      	movs	r1, #0
 8004790:	4618      	mov	r0, r3
 8004792:	f7fc fc47 	bl	8001024 <LCD_FStr>
			LCD_Update();
 8004796:	f7fc fba9 	bl	8000eec <LCD_Update>
 800479a:	e03b      	b.n	8004814 <OLED_task+0x2dc>
		} else if (OLED_display_status == OLED_ABOUT) {
 800479c:	4b20      	ldr	r3, [pc, #128]	; (8004820 <OLED_task+0x2e8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b04      	cmp	r3, #4
 80047a2:	d137      	bne.n	8004814 <OLED_task+0x2dc>
			LCD_Clear();
 80047a4:	f7fc fb7e 	bl	8000ea4 <LCD_Clear>
			sprintf(buf, "AudioPlayer");
 80047a8:	f107 030c 	add.w	r3, r7, #12
 80047ac:	492f      	ldr	r1, [pc, #188]	; (800486c <OLED_task+0x334>)
 80047ae:	4618      	mov	r0, r3
 80047b0:	f009 fb1c 	bl	800ddec <siprintf>
			LCD_FStr(buf, 0, 0);
 80047b4:	f107 030c 	add.w	r3, r7, #12
 80047b8:	2200      	movs	r2, #0
 80047ba:	2100      	movs	r1, #0
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fc fc31 	bl	8001024 <LCD_FStr>
			sprintf(buf, "NCKU CSIE EOS project");
 80047c2:	f107 030c 	add.w	r3, r7, #12
 80047c6:	492a      	ldr	r1, [pc, #168]	; (8004870 <OLED_task+0x338>)
 80047c8:	4618      	mov	r0, r3
 80047ca:	f009 fb0f 	bl	800ddec <siprintf>
			LCD_FStr(buf, 0, 1);
 80047ce:	f107 030c 	add.w	r3, r7, #12
 80047d2:	2201      	movs	r2, #1
 80047d4:	2100      	movs	r1, #0
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fc fc24 	bl	8001024 <LCD_FStr>
			sprintf(buf, "2022");
 80047dc:	f107 030c 	add.w	r3, r7, #12
 80047e0:	4924      	ldr	r1, [pc, #144]	; (8004874 <OLED_task+0x33c>)
 80047e2:	4618      	mov	r0, r3
 80047e4:	f009 fb02 	bl	800ddec <siprintf>
			LCD_FStr(buf, 0, 2);
 80047e8:	f107 030c 	add.w	r3, r7, #12
 80047ec:	2202      	movs	r2, #2
 80047ee:	2100      	movs	r1, #0
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7fc fc17 	bl	8001024 <LCD_FStr>
			sprintf(buf, "Press any key to menu");
 80047f6:	f107 030c 	add.w	r3, r7, #12
 80047fa:	491f      	ldr	r1, [pc, #124]	; (8004878 <OLED_task+0x340>)
 80047fc:	4618      	mov	r0, r3
 80047fe:	f009 faf5 	bl	800ddec <siprintf>
			LCD_FStr(buf, 0, 3);
 8004802:	f107 030c 	add.w	r3, r7, #12
 8004806:	2203      	movs	r2, #3
 8004808:	2100      	movs	r1, #0
 800480a:	4618      	mov	r0, r3
 800480c:	f7fc fc0a 	bl	8001024 <LCD_FStr>
			LCD_Update();
 8004810:	f7fc fb6c 	bl	8000eec <LCD_Update>
		}
		vTaskDelay(1000 / portTICK_PERIOD_MS);
 8004814:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004818:	f007 fe24 	bl	800c464 <vTaskDelay>
		if (OLED_display_status == OLED_MENU) {
 800481c:	e690      	b.n	8004540 <OLED_task+0x8>
 800481e:	bf00      	nop
 8004820:	20000854 	.word	0x20000854
 8004824:	20000858 	.word	0x20000858
 8004828:	0800e8f8 	.word	0x0800e8f8
 800482c:	0800e908 	.word	0x0800e908
 8004830:	0800e910 	.word	0x0800e910
 8004834:	0800e918 	.word	0x0800e918
 8004838:	0800e920 	.word	0x0800e920
 800483c:	2000085c 	.word	0x2000085c
 8004840:	200018c4 	.word	0x200018c4
 8004844:	0800e928 	.word	0x0800e928
 8004848:	0800e938 	.word	0x0800e938
 800484c:	200018c0 	.word	0x200018c0
 8004850:	0800e940 	.word	0x0800e940
 8004854:	0800e948 	.word	0x0800e948
 8004858:	0800e950 	.word	0x0800e950
 800485c:	20000054 	.word	0x20000054
 8004860:	20000074 	.word	0x20000074
 8004864:	0800e958 	.word	0x0800e958
 8004868:	0800e960 	.word	0x0800e960
 800486c:	0800e96c 	.word	0x0800e96c
 8004870:	0800e978 	.word	0x0800e978
 8004874:	0800e990 	.word	0x0800e990
 8004878:	0800e998 	.word	0x0800e998

0800487c <timer_task>:
	}
	return;
}
;

void timer_task(void *pvParameters) {
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
	while (1) {
		globalTime++;
 8004884:	4b04      	ldr	r3, [pc, #16]	; (8004898 <timer_task+0x1c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3301      	adds	r3, #1
 800488a:	4a03      	ldr	r2, [pc, #12]	; (8004898 <timer_task+0x1c>)
 800488c:	6013      	str	r3, [r2, #0]
		vTaskDelay(1000 / portTICK_PERIOD_MS);
 800488e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004892:	f007 fde7 	bl	800c464 <vTaskDelay>
		globalTime++;
 8004896:	e7f5      	b.n	8004884 <timer_task+0x8>
 8004898:	20000860 	.word	0x20000860

0800489c <audio_task>:
	}
	return;
}

void audio_task(void *pvParameters) {
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
	while (1) {
		AUDIO_PLAYER_Process(pdTRUE);
 80048a4:	2001      	movs	r0, #1
 80048a6:	f001 fba1 	bl	8005fec <AUDIO_PLAYER_Process>
		vTaskDelay(1 / portTICK_PERIOD_MS);
 80048aa:	2001      	movs	r0, #1
 80048ac:	f007 fdda 	bl	800c464 <vTaskDelay>
		AUDIO_PLAYER_Process(pdTRUE);
 80048b0:	e7f8      	b.n	80048a4 <audio_task+0x8>
	...

080048b4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80048ba:	f001 fd03 	bl	80062c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80048be:	f000 f845 	bl	800494c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80048c2:	f000 f9b7 	bl	8004c34 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80048c6:	f000 f96b 	bl	8004ba0 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 80048ca:	f000 f933 	bl	8004b34 <MX_SPI1_Init>
	MX_DMA_Init();
 80048ce:	f000 f991 	bl	8004bf4 <MX_DMA_Init>
	MX_I2S3_Init();
 80048d2:	f000 f901 	bl	8004ad8 <MX_I2S3_Init>
	MX_I2C1_Init();
 80048d6:	f000 f8a3 	bl	8004a20 <MX_I2C1_Init>
	MX_I2C2_Init();
 80048da:	f000 f8cf 	bl	8004a7c <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
	LCD_Init();
 80048de:	f7fc fab5 	bl	8000e4c <LCD_Init>

	// Init SD card here
	SD_init();
 80048e2:	f7ff fdb5 	bl	8004450 <SD_init>

	// Parse SD card media files first
	AUDIO_StorageParse();
 80048e6:	f7fc fa11 	bl	8000d0c <AUDIO_StorageParse>

	// Start task here
	xTaskCreate(OLED_task, "OLED_task", STACK_SIZE, (void*) NULL, 14, NULL);
 80048ea:	2300      	movs	r3, #0
 80048ec:	9301      	str	r3, [sp, #4]
 80048ee:	230e      	movs	r3, #14
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	2300      	movs	r3, #0
 80048f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048f8:	490e      	ldr	r1, [pc, #56]	; (8004934 <main+0x80>)
 80048fa:	480f      	ldr	r0, [pc, #60]	; (8004938 <main+0x84>)
 80048fc:	f007 fc74 	bl	800c1e8 <xTaskCreate>
	xTaskCreate(timer_task, "timer_task", STACK_SIZE, (void*) NULL, 1, NULL);
 8004900:	2300      	movs	r3, #0
 8004902:	9301      	str	r3, [sp, #4]
 8004904:	2301      	movs	r3, #1
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	2300      	movs	r3, #0
 800490a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800490e:	490b      	ldr	r1, [pc, #44]	; (800493c <main+0x88>)
 8004910:	480b      	ldr	r0, [pc, #44]	; (8004940 <main+0x8c>)
 8004912:	f007 fc69 	bl	800c1e8 <xTaskCreate>
	xTaskCreate(audio_task, "audio_task", STACK_SIZE, (void*) NULL, 3, NULL);
 8004916:	2300      	movs	r3, #0
 8004918:	9301      	str	r3, [sp, #4]
 800491a:	2303      	movs	r3, #3
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	2300      	movs	r3, #0
 8004920:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004924:	4907      	ldr	r1, [pc, #28]	; (8004944 <main+0x90>)
 8004926:	4808      	ldr	r0, [pc, #32]	; (8004948 <main+0x94>)
 8004928:	f007 fc5e 	bl	800c1e8 <xTaskCreate>

	// Start scheduler here
	vTaskStartScheduler();
 800492c:	f007 fdce 	bl	800c4cc <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8004930:	e7fe      	b.n	8004930 <main+0x7c>
 8004932:	bf00      	nop
 8004934:	0800e9b0 	.word	0x0800e9b0
 8004938:	08004539 	.word	0x08004539
 800493c:	0800e9bc 	.word	0x0800e9bc
 8004940:	0800487d 	.word	0x0800487d
 8004944:	0800e9c8 	.word	0x0800e9c8
 8004948:	0800489d 	.word	0x0800489d

0800494c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800494c:	b580      	push	{r7, lr}
 800494e:	b094      	sub	sp, #80	; 0x50
 8004950:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004952:	f107 0320 	add.w	r3, r7, #32
 8004956:	2230      	movs	r2, #48	; 0x30
 8004958:	2100      	movs	r1, #0
 800495a:	4618      	mov	r0, r3
 800495c:	f009 fa3e 	bl	800dddc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004960:	f107 030c 	add.w	r3, r7, #12
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	605a      	str	r2, [r3, #4]
 800496a:	609a      	str	r2, [r3, #8]
 800496c:	60da      	str	r2, [r3, #12]
 800496e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8004970:	2300      	movs	r3, #0
 8004972:	60bb      	str	r3, [r7, #8]
 8004974:	4b28      	ldr	r3, [pc, #160]	; (8004a18 <SystemClock_Config+0xcc>)
 8004976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004978:	4a27      	ldr	r2, [pc, #156]	; (8004a18 <SystemClock_Config+0xcc>)
 800497a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800497e:	6413      	str	r3, [r2, #64]	; 0x40
 8004980:	4b25      	ldr	r3, [pc, #148]	; (8004a18 <SystemClock_Config+0xcc>)
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004988:	60bb      	str	r3, [r7, #8]
 800498a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800498c:	2300      	movs	r3, #0
 800498e:	607b      	str	r3, [r7, #4]
 8004990:	4b22      	ldr	r3, [pc, #136]	; (8004a1c <SystemClock_Config+0xd0>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a21      	ldr	r2, [pc, #132]	; (8004a1c <SystemClock_Config+0xd0>)
 8004996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800499a:	6013      	str	r3, [r2, #0]
 800499c:	4b1f      	ldr	r3, [pc, #124]	; (8004a1c <SystemClock_Config+0xd0>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049a4:	607b      	str	r3, [r7, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80049a8:	2301      	movs	r3, #1
 80049aa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80049ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049b2:	2302      	movs	r3, #2
 80049b4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80049b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80049ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80049bc:	2308      	movs	r3, #8
 80049be:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80049c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80049c4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80049c6:	2302      	movs	r3, #2
 80049c8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80049ca:	2304      	movs	r3, #4
 80049cc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80049ce:	f107 0320 	add.w	r3, r7, #32
 80049d2:	4618      	mov	r0, r3
 80049d4:	f004 fee4 	bl	80097a0 <HAL_RCC_OscConfig>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <SystemClock_Config+0x96>
		Error_Handler();
 80049de:	f000 fb91 	bl	8005104 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80049e2:	230f      	movs	r3, #15
 80049e4:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80049e6:	2302      	movs	r3, #2
 80049e8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049ea:	2300      	movs	r3, #0
 80049ec:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80049ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80049f2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80049f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80049f8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80049fa:	f107 030c 	add.w	r3, r7, #12
 80049fe:	2105      	movs	r1, #5
 8004a00:	4618      	mov	r0, r3
 8004a02:	f005 f945 	bl	8009c90 <HAL_RCC_ClockConfig>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <SystemClock_Config+0xc4>
		Error_Handler();
 8004a0c:	f000 fb7a 	bl	8005104 <Error_Handler>
	}
}
 8004a10:	bf00      	nop
 8004a12:	3750      	adds	r7, #80	; 0x50
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	40007000 	.word	0x40007000

08004a20 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8004a24:	4b12      	ldr	r3, [pc, #72]	; (8004a70 <MX_I2C1_Init+0x50>)
 8004a26:	4a13      	ldr	r2, [pc, #76]	; (8004a74 <MX_I2C1_Init+0x54>)
 8004a28:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8004a2a:	4b11      	ldr	r3, [pc, #68]	; (8004a70 <MX_I2C1_Init+0x50>)
 8004a2c:	4a12      	ldr	r2, [pc, #72]	; (8004a78 <MX_I2C1_Init+0x58>)
 8004a2e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004a30:	4b0f      	ldr	r3, [pc, #60]	; (8004a70 <MX_I2C1_Init+0x50>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8004a36:	4b0e      	ldr	r3, [pc, #56]	; (8004a70 <MX_I2C1_Init+0x50>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004a3c:	4b0c      	ldr	r3, [pc, #48]	; (8004a70 <MX_I2C1_Init+0x50>)
 8004a3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a42:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004a44:	4b0a      	ldr	r3, [pc, #40]	; (8004a70 <MX_I2C1_Init+0x50>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8004a4a:	4b09      	ldr	r3, [pc, #36]	; (8004a70 <MX_I2C1_Init+0x50>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004a50:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <MX_I2C1_Init+0x50>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004a56:	4b06      	ldr	r3, [pc, #24]	; (8004a70 <MX_I2C1_Init+0x50>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8004a5c:	4804      	ldr	r0, [pc, #16]	; (8004a70 <MX_I2C1_Init+0x50>)
 8004a5e:	f002 fc81 	bl	8007364 <HAL_I2C_Init>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8004a68:	f000 fb4c 	bl	8005104 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8004a6c:	bf00      	nop
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	20000668 	.word	0x20000668
 8004a74:	40005400 	.word	0x40005400
 8004a78:	000186a0 	.word	0x000186a0

08004a7c <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8004a80:	4b12      	ldr	r3, [pc, #72]	; (8004acc <MX_I2C2_Init+0x50>)
 8004a82:	4a13      	ldr	r2, [pc, #76]	; (8004ad0 <MX_I2C2_Init+0x54>)
 8004a84:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8004a86:	4b11      	ldr	r3, [pc, #68]	; (8004acc <MX_I2C2_Init+0x50>)
 8004a88:	4a12      	ldr	r2, [pc, #72]	; (8004ad4 <MX_I2C2_Init+0x58>)
 8004a8a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004a8c:	4b0f      	ldr	r3, [pc, #60]	; (8004acc <MX_I2C2_Init+0x50>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8004a92:	4b0e      	ldr	r3, [pc, #56]	; (8004acc <MX_I2C2_Init+0x50>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004a98:	4b0c      	ldr	r3, [pc, #48]	; (8004acc <MX_I2C2_Init+0x50>)
 8004a9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a9e:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004aa0:	4b0a      	ldr	r3, [pc, #40]	; (8004acc <MX_I2C2_Init+0x50>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8004aa6:	4b09      	ldr	r3, [pc, #36]	; (8004acc <MX_I2C2_Init+0x50>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004aac:	4b07      	ldr	r3, [pc, #28]	; (8004acc <MX_I2C2_Init+0x50>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004ab2:	4b06      	ldr	r3, [pc, #24]	; (8004acc <MX_I2C2_Init+0x50>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8004ab8:	4804      	ldr	r0, [pc, #16]	; (8004acc <MX_I2C2_Init+0x50>)
 8004aba:	f002 fc53 	bl	8007364 <HAL_I2C_Init>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <MX_I2C2_Init+0x4c>
		Error_Handler();
 8004ac4:	f000 fb1e 	bl	8005104 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8004ac8:	bf00      	nop
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	200006bc 	.word	0x200006bc
 8004ad0:	40005800 	.word	0x40005800
 8004ad4:	000186a0 	.word	0x000186a0

08004ad8 <MX_I2S3_Init>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 8004adc:	4b13      	ldr	r3, [pc, #76]	; (8004b2c <MX_I2S3_Init+0x54>)
 8004ade:	4a14      	ldr	r2, [pc, #80]	; (8004b30 <MX_I2S3_Init+0x58>)
 8004ae0:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8004ae2:	4b12      	ldr	r3, [pc, #72]	; (8004b2c <MX_I2S3_Init+0x54>)
 8004ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ae8:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8004aea:	4b10      	ldr	r3, [pc, #64]	; (8004b2c <MX_I2S3_Init+0x54>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8004af0:	4b0e      	ldr	r3, [pc, #56]	; (8004b2c <MX_I2S3_Init+0x54>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8004af6:	4b0d      	ldr	r3, [pc, #52]	; (8004b2c <MX_I2S3_Init+0x54>)
 8004af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004afc:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8004afe:	4b0b      	ldr	r3, [pc, #44]	; (8004b2c <MX_I2S3_Init+0x54>)
 8004b00:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004b04:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8004b06:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <MX_I2S3_Init+0x54>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8004b0c:	4b07      	ldr	r3, [pc, #28]	; (8004b2c <MX_I2S3_Init+0x54>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8004b12:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <MX_I2S3_Init+0x54>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 8004b18:	4804      	ldr	r0, [pc, #16]	; (8004b2c <MX_I2S3_Init+0x54>)
 8004b1a:	f003 fda1 	bl	8008660 <HAL_I2S_Init>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <MX_I2S3_Init+0x50>
		Error_Handler();
 8004b24:	f000 faee 	bl	8005104 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 8004b28:	bf00      	nop
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	20000710 	.word	0x20000710
 8004b30:	40003c00 	.word	0x40003c00

08004b34 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
void MX_SPI1_Init(void) {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8004b38:	4b17      	ldr	r3, [pc, #92]	; (8004b98 <MX_SPI1_Init+0x64>)
 8004b3a:	4a18      	ldr	r2, [pc, #96]	; (8004b9c <MX_SPI1_Init+0x68>)
 8004b3c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8004b3e:	4b16      	ldr	r3, [pc, #88]	; (8004b98 <MX_SPI1_Init+0x64>)
 8004b40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004b44:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004b46:	4b14      	ldr	r3, [pc, #80]	; (8004b98 <MX_SPI1_Init+0x64>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004b4c:	4b12      	ldr	r3, [pc, #72]	; (8004b98 <MX_SPI1_Init+0x64>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b52:	4b11      	ldr	r3, [pc, #68]	; (8004b98 <MX_SPI1_Init+0x64>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004b58:	4b0f      	ldr	r3, [pc, #60]	; (8004b98 <MX_SPI1_Init+0x64>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8004b5e:	4b0e      	ldr	r3, [pc, #56]	; (8004b98 <MX_SPI1_Init+0x64>)
 8004b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b64:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004b66:	4b0c      	ldr	r3, [pc, #48]	; (8004b98 <MX_SPI1_Init+0x64>)
 8004b68:	2208      	movs	r2, #8
 8004b6a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <MX_SPI1_Init+0x64>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b72:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <MX_SPI1_Init+0x64>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b78:	4b07      	ldr	r3, [pc, #28]	; (8004b98 <MX_SPI1_Init+0x64>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8004b7e:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <MX_SPI1_Init+0x64>)
 8004b80:	220a      	movs	r2, #10
 8004b82:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8004b84:	4804      	ldr	r0, [pc, #16]	; (8004b98 <MX_SPI1_Init+0x64>)
 8004b86:	f005 fc41 	bl	800a40c <HAL_SPI_Init>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <MX_SPI1_Init+0x60>
		Error_Handler();
 8004b90:	f000 fab8 	bl	8005104 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8004b94:	bf00      	nop
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	200007b8 	.word	0x200007b8
 8004b9c:	40013000 	.word	0x40013000

08004ba0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8004ba4:	4b11      	ldr	r3, [pc, #68]	; (8004bec <MX_USART2_UART_Init+0x4c>)
 8004ba6:	4a12      	ldr	r2, [pc, #72]	; (8004bf0 <MX_USART2_UART_Init+0x50>)
 8004ba8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8004baa:	4b10      	ldr	r3, [pc, #64]	; (8004bec <MX_USART2_UART_Init+0x4c>)
 8004bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004bb0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004bb2:	4b0e      	ldr	r3, [pc, #56]	; (8004bec <MX_USART2_UART_Init+0x4c>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <MX_USART2_UART_Init+0x4c>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8004bbe:	4b0b      	ldr	r3, [pc, #44]	; (8004bec <MX_USART2_UART_Init+0x4c>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004bc4:	4b09      	ldr	r3, [pc, #36]	; (8004bec <MX_USART2_UART_Init+0x4c>)
 8004bc6:	220c      	movs	r2, #12
 8004bc8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bca:	4b08      	ldr	r3, [pc, #32]	; (8004bec <MX_USART2_UART_Init+0x4c>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bd0:	4b06      	ldr	r3, [pc, #24]	; (8004bec <MX_USART2_UART_Init+0x4c>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8004bd6:	4805      	ldr	r0, [pc, #20]	; (8004bec <MX_USART2_UART_Init+0x4c>)
 8004bd8:	f006 f9e4 	bl	800afa4 <HAL_UART_Init>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8004be2:	f000 fa8f 	bl	8005104 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8004be6:	bf00      	nop
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000810 	.word	0x20000810
 8004bf0:	40004400 	.word	0x40004400

08004bf4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	607b      	str	r3, [r7, #4]
 8004bfe:	4b0c      	ldr	r3, [pc, #48]	; (8004c30 <MX_DMA_Init+0x3c>)
 8004c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c02:	4a0b      	ldr	r2, [pc, #44]	; (8004c30 <MX_DMA_Init+0x3c>)
 8004c04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c08:	6313      	str	r3, [r2, #48]	; 0x30
 8004c0a:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <MX_DMA_Init+0x3c>)
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c12:	607b      	str	r3, [r7, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8004c16:	2200      	movs	r2, #0
 8004c18:	2100      	movs	r1, #0
 8004c1a:	2010      	movs	r0, #16
 8004c1c:	f001 fc70 	bl	8006500 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004c20:	2010      	movs	r0, #16
 8004c22:	f001 fc89 	bl	8006538 <HAL_NVIC_EnableIRQ>

}
 8004c26:	bf00      	nop
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	40023800 	.word	0x40023800

08004c34 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08a      	sub	sp, #40	; 0x28
 8004c38:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004c3a:	f107 0314 	add.w	r3, r7, #20
 8004c3e:	2200      	movs	r2, #0
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	605a      	str	r2, [r3, #4]
 8004c44:	609a      	str	r2, [r3, #8]
 8004c46:	60da      	str	r2, [r3, #12]
 8004c48:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	613b      	str	r3, [r7, #16]
 8004c4e:	4b48      	ldr	r3, [pc, #288]	; (8004d70 <MX_GPIO_Init+0x13c>)
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	4a47      	ldr	r2, [pc, #284]	; (8004d70 <MX_GPIO_Init+0x13c>)
 8004c54:	f043 0310 	orr.w	r3, r3, #16
 8004c58:	6313      	str	r3, [r2, #48]	; 0x30
 8004c5a:	4b45      	ldr	r3, [pc, #276]	; (8004d70 <MX_GPIO_Init+0x13c>)
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5e:	f003 0310 	and.w	r3, r3, #16
 8004c62:	613b      	str	r3, [r7, #16]
 8004c64:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	4b41      	ldr	r3, [pc, #260]	; (8004d70 <MX_GPIO_Init+0x13c>)
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	4a40      	ldr	r2, [pc, #256]	; (8004d70 <MX_GPIO_Init+0x13c>)
 8004c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c74:	6313      	str	r3, [r2, #48]	; 0x30
 8004c76:	4b3e      	ldr	r3, [pc, #248]	; (8004d70 <MX_GPIO_Init+0x13c>)
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004c82:	2300      	movs	r3, #0
 8004c84:	60bb      	str	r3, [r7, #8]
 8004c86:	4b3a      	ldr	r3, [pc, #232]	; (8004d70 <MX_GPIO_Init+0x13c>)
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	4a39      	ldr	r2, [pc, #228]	; (8004d70 <MX_GPIO_Init+0x13c>)
 8004c8c:	f043 0301 	orr.w	r3, r3, #1
 8004c90:	6313      	str	r3, [r2, #48]	; 0x30
 8004c92:	4b37      	ldr	r3, [pc, #220]	; (8004d70 <MX_GPIO_Init+0x13c>)
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	60bb      	str	r3, [r7, #8]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	607b      	str	r3, [r7, #4]
 8004ca2:	4b33      	ldr	r3, [pc, #204]	; (8004d70 <MX_GPIO_Init+0x13c>)
 8004ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca6:	4a32      	ldr	r2, [pc, #200]	; (8004d70 <MX_GPIO_Init+0x13c>)
 8004ca8:	f043 0304 	orr.w	r3, r3, #4
 8004cac:	6313      	str	r3, [r2, #48]	; 0x30
 8004cae:	4b30      	ldr	r3, [pc, #192]	; (8004d70 <MX_GPIO_Init+0x13c>)
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb2:	f003 0304 	and.w	r3, r3, #4
 8004cb6:	607b      	str	r3, [r7, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004cba:	2300      	movs	r3, #0
 8004cbc:	603b      	str	r3, [r7, #0]
 8004cbe:	4b2c      	ldr	r3, [pc, #176]	; (8004d70 <MX_GPIO_Init+0x13c>)
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	4a2b      	ldr	r2, [pc, #172]	; (8004d70 <MX_GPIO_Init+0x13c>)
 8004cc4:	f043 0302 	orr.w	r3, r3, #2
 8004cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8004cca:	4b29      	ldr	r3, [pc, #164]	; (8004d70 <MX_GPIO_Init+0x13c>)
 8004ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SDcard_CS_GPIO_Port, SDcard_CS_Pin, GPIO_PIN_RESET);
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	2110      	movs	r1, #16
 8004cda:	4826      	ldr	r0, [pc, #152]	; (8004d74 <MX_GPIO_Init+0x140>)
 8004cdc:	f002 fb10 	bl	8007300 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PE2 PE3 PE4 PE0
	 PE1 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_0
 8004ce0:	231f      	movs	r3, #31
 8004ce2:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_1;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004ce4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004ce8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004cee:	f107 0314 	add.w	r3, r7, #20
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4820      	ldr	r0, [pc, #128]	; (8004d78 <MX_GPIO_Init+0x144>)
 8004cf6:	f002 f86b 	bl	8006dd0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SDcard_CS_Pin */
	GPIO_InitStruct.Pin = SDcard_CS_Pin;
 8004cfa:	2310      	movs	r3, #16
 8004cfc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d06:	2300      	movs	r3, #0
 8004d08:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SDcard_CS_GPIO_Port, &GPIO_InitStruct);
 8004d0a:	f107 0314 	add.w	r3, r7, #20
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4818      	ldr	r0, [pc, #96]	; (8004d74 <MX_GPIO_Init+0x140>)
 8004d12:	f002 f85d 	bl	8006dd0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 8004d16:	2200      	movs	r2, #0
 8004d18:	210f      	movs	r1, #15
 8004d1a:	2006      	movs	r0, #6
 8004d1c:	f001 fbf0 	bl	8006500 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004d20:	2006      	movs	r0, #6
 8004d22:	f001 fc09 	bl	8006538 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 15, 0);
 8004d26:	2200      	movs	r2, #0
 8004d28:	210f      	movs	r1, #15
 8004d2a:	2007      	movs	r0, #7
 8004d2c:	f001 fbe8 	bl	8006500 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8004d30:	2007      	movs	r0, #7
 8004d32:	f001 fc01 	bl	8006538 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 15, 0);
 8004d36:	2200      	movs	r2, #0
 8004d38:	210f      	movs	r1, #15
 8004d3a:	2008      	movs	r0, #8
 8004d3c:	f001 fbe0 	bl	8006500 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004d40:	2008      	movs	r0, #8
 8004d42:	f001 fbf9 	bl	8006538 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 15, 0);
 8004d46:	2200      	movs	r2, #0
 8004d48:	210f      	movs	r1, #15
 8004d4a:	2009      	movs	r0, #9
 8004d4c:	f001 fbd8 	bl	8006500 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004d50:	2009      	movs	r0, #9
 8004d52:	f001 fbf1 	bl	8006538 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 8004d56:	2200      	movs	r2, #0
 8004d58:	210f      	movs	r1, #15
 8004d5a:	200a      	movs	r0, #10
 8004d5c:	f001 fbd0 	bl	8006500 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004d60:	200a      	movs	r0, #10
 8004d62:	f001 fbe9 	bl	8006538 <HAL_NVIC_EnableIRQ>

}
 8004d66:	bf00      	nop
 8004d68:	3728      	adds	r7, #40	; 0x28
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	40023800 	.word	0x40023800
 8004d74:	40020800 	.word	0x40020800
 8004d78:	40021000 	.word	0x40021000

08004d7c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b0c4      	sub	sp, #272	; 0x110
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	4602      	mov	r2, r0
 8004d84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d88:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8004d8c:	801a      	strh	r2, [r3, #0]
	if ((globalTime - lastEventTime) < 1)
 8004d8e:	4b9d      	ldr	r3, [pc, #628]	; (8005004 <HAL_GPIO_EXTI_Callback+0x288>)
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	4b9d      	ldr	r3, [pc, #628]	; (8005008 <HAL_GPIO_EXTI_Callback+0x28c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f340 818b 	ble.w	80050b4 <HAL_GPIO_EXTI_Callback+0x338>
		return;
	// Start interrupt event
	char buf[256];
	int button = -1;
 8004d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004da2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	switch (GPIO_Pin) {
 8004da6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004daa:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8004dae:	881b      	ldrh	r3, [r3, #0]
 8004db0:	3b01      	subs	r3, #1
 8004db2:	2b0f      	cmp	r3, #15
 8004db4:	f200 8180 	bhi.w	80050b8 <HAL_GPIO_EXTI_Callback+0x33c>
 8004db8:	a201      	add	r2, pc, #4	; (adr r2, 8004dc0 <HAL_GPIO_EXTI_Callback+0x44>)
 8004dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbe:	bf00      	nop
 8004dc0:	08004e01 	.word	0x08004e01
 8004dc4:	08004e53 	.word	0x08004e53
 8004dc8:	080050b9 	.word	0x080050b9
 8004dcc:	08004f17 	.word	0x08004f17
 8004dd0:	080050b9 	.word	0x080050b9
 8004dd4:	080050b9 	.word	0x080050b9
 8004dd8:	080050b9 	.word	0x080050b9
 8004ddc:	08004f6d 	.word	0x08004f6d
 8004de0:	080050b9 	.word	0x080050b9
 8004de4:	080050b9 	.word	0x080050b9
 8004de8:	080050b9 	.word	0x080050b9
 8004dec:	080050b9 	.word	0x080050b9
 8004df0:	080050b9 	.word	0x080050b9
 8004df4:	080050b9 	.word	0x080050b9
 8004df8:	080050b9 	.word	0x080050b9
 8004dfc:	08004fe3 	.word	0x08004fe3
	case GPIO_PIN_0:
		button = 0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		if (OLED_display_status == OLED_MENU) {
 8004e06:	4b81      	ldr	r3, [pc, #516]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 812e 	beq.w	800506c <HAL_GPIO_EXTI_Callback+0x2f0>
			// Do nothing when at menu
		} else if (OLED_display_status == OLED_FILE_BROWSER) {
 8004e10:	4b7e      	ldr	r3, [pc, #504]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d103      	bne.n	8004e20 <HAL_GPIO_EXTI_Callback+0xa4>
			// When at file browser
			// Press first button to go back to menu
			OLED_display_status = OLED_MENU;
 8004e18:	4b7c      	ldr	r3, [pc, #496]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
			OLED_display_status = OLED_MENU;
		} else if (OLED_display_status == OLED_ABOUT) {
			// Press any key to return to menu
			OLED_display_status = OLED_MENU;
		}
		break;
 8004e1e:	e125      	b.n	800506c <HAL_GPIO_EXTI_Callback+0x2f0>
		} else if (OLED_display_status == OLED_PLAYER) {
 8004e20:	4b7a      	ldr	r3, [pc, #488]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d103      	bne.n	8004e30 <HAL_GPIO_EXTI_Callback+0xb4>
			OLED_display_status = OLED_MENU;
 8004e28:	4b78      	ldr	r3, [pc, #480]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
		break;
 8004e2e:	e11d      	b.n	800506c <HAL_GPIO_EXTI_Callback+0x2f0>
		} else if (OLED_display_status == OLED_SETTING) {
 8004e30:	4b76      	ldr	r3, [pc, #472]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b03      	cmp	r3, #3
 8004e36:	d103      	bne.n	8004e40 <HAL_GPIO_EXTI_Callback+0xc4>
			OLED_display_status = OLED_MENU;
 8004e38:	4b74      	ldr	r3, [pc, #464]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	601a      	str	r2, [r3, #0]
		break;
 8004e3e:	e115      	b.n	800506c <HAL_GPIO_EXTI_Callback+0x2f0>
		} else if (OLED_display_status == OLED_ABOUT) {
 8004e40:	4b72      	ldr	r3, [pc, #456]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	f040 8111 	bne.w	800506c <HAL_GPIO_EXTI_Callback+0x2f0>
			OLED_display_status = OLED_MENU;
 8004e4a:	4b70      	ldr	r3, [pc, #448]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]
		break;
 8004e50:	e10c      	b.n	800506c <HAL_GPIO_EXTI_Callback+0x2f0>
	case GPIO_PIN_1:
		button = 1;
 8004e52:	2301      	movs	r3, #1
 8004e54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		if (OLED_display_status == OLED_MENU) {
 8004e58:	4b6c      	ldr	r3, [pc, #432]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d11f      	bne.n	8004ea0 <HAL_GPIO_EXTI_Callback+0x124>
			switch (menu_select) {
 8004e60:	4b6b      	ldr	r3, [pc, #428]	; (8005010 <HAL_GPIO_EXTI_Callback+0x294>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b03      	cmp	r3, #3
 8004e66:	d854      	bhi.n	8004f12 <HAL_GPIO_EXTI_Callback+0x196>
 8004e68:	a201      	add	r2, pc, #4	; (adr r2, 8004e70 <HAL_GPIO_EXTI_Callback+0xf4>)
 8004e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6e:	bf00      	nop
 8004e70:	08004e81 	.word	0x08004e81
 8004e74:	08004e89 	.word	0x08004e89
 8004e78:	08004e91 	.word	0x08004e91
 8004e7c:	08004e99 	.word	0x08004e99
			case MENU_FILE_BROWSER:
				OLED_display_status = OLED_FILE_BROWSER;
 8004e80:	4b62      	ldr	r3, [pc, #392]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004e82:	2201      	movs	r2, #1
 8004e84:	601a      	str	r2, [r3, #0]
				break;
 8004e86:	e045      	b.n	8004f14 <HAL_GPIO_EXTI_Callback+0x198>
			case MENU_PLAYER:
				OLED_display_status = OLED_PLAYER;
 8004e88:	4b60      	ldr	r3, [pc, #384]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	601a      	str	r2, [r3, #0]
				break;
 8004e8e:	e041      	b.n	8004f14 <HAL_GPIO_EXTI_Callback+0x198>
			case MENU_SETTING:
				OLED_display_status = OLED_SETTING;
 8004e90:	4b5e      	ldr	r3, [pc, #376]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004e92:	2203      	movs	r2, #3
 8004e94:	601a      	str	r2, [r3, #0]
				break;
 8004e96:	e03d      	b.n	8004f14 <HAL_GPIO_EXTI_Callback+0x198>
			case MENU_ABOUT:
				OLED_display_status = OLED_ABOUT;
 8004e98:	4b5c      	ldr	r3, [pc, #368]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004e9a:	2204      	movs	r2, #4
 8004e9c:	601a      	str	r2, [r3, #0]
				break;
 8004e9e:	e039      	b.n	8004f14 <HAL_GPIO_EXTI_Callback+0x198>
			default:
				break;
			}
		} else if (OLED_display_status == OLED_FILE_BROWSER) {
 8004ea0:	4b5a      	ldr	r3, [pc, #360]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d109      	bne.n	8004ebc <HAL_GPIO_EXTI_Callback+0x140>
			// Press this button to select file to play
			AUDIO_PLAYER_Start(file_select);
 8004ea8:	4b5a      	ldr	r3, [pc, #360]	; (8005014 <HAL_GPIO_EXTI_Callback+0x298>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f001 f83c 	bl	8005f2c <AUDIO_PLAYER_Start>
			// Change display to OLED_PLAYER
			OLED_display_status = OLED_PLAYER;
 8004eb4:	4b55      	ldr	r3, [pc, #340]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	601a      	str	r2, [r3, #0]
			}
		} else if (OLED_display_status == OLED_ABOUT) {
			// Press any key to return to menu
			OLED_display_status = OLED_MENU;
		}
		break;
 8004eba:	e0d9      	b.n	8005070 <HAL_GPIO_EXTI_Callback+0x2f4>
		} else if (OLED_display_status == OLED_PLAYER) {
 8004ebc:	4b53      	ldr	r3, [pc, #332]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d110      	bne.n	8004ee6 <HAL_GPIO_EXTI_Callback+0x16a>
			if (AudioState == AUDIO_STATE_PLAY)
 8004ec4:	4b54      	ldr	r3, [pc, #336]	; (8005018 <HAL_GPIO_EXTI_Callback+0x29c>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	2b03      	cmp	r3, #3
 8004eca:	d103      	bne.n	8004ed4 <HAL_GPIO_EXTI_Callback+0x158>
				AudioState = AUDIO_STATE_PAUSE;
 8004ecc:	4b52      	ldr	r3, [pc, #328]	; (8005018 <HAL_GPIO_EXTI_Callback+0x29c>)
 8004ece:	220a      	movs	r2, #10
 8004ed0:	701a      	strb	r2, [r3, #0]
		break;
 8004ed2:	e0cd      	b.n	8005070 <HAL_GPIO_EXTI_Callback+0x2f4>
			else if (AudioState == AUDIO_STATE_WAIT)
 8004ed4:	4b50      	ldr	r3, [pc, #320]	; (8005018 <HAL_GPIO_EXTI_Callback+0x29c>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	f040 80c9 	bne.w	8005070 <HAL_GPIO_EXTI_Callback+0x2f4>
				AudioState = AUDIO_STATE_RESUME;
 8004ede:	4b4e      	ldr	r3, [pc, #312]	; (8005018 <HAL_GPIO_EXTI_Callback+0x29c>)
 8004ee0:	220b      	movs	r2, #11
 8004ee2:	701a      	strb	r2, [r3, #0]
		break;
 8004ee4:	e0c4      	b.n	8005070 <HAL_GPIO_EXTI_Callback+0x2f4>
		} else if (OLED_display_status == OLED_SETTING) {
 8004ee6:	4b49      	ldr	r3, [pc, #292]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b03      	cmp	r3, #3
 8004eec:	d108      	bne.n	8004f00 <HAL_GPIO_EXTI_Callback+0x184>
			if (setting_select == SETTING_VOLUME) {
 8004eee:	4b4b      	ldr	r3, [pc, #300]	; (800501c <HAL_GPIO_EXTI_Callback+0x2a0>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	f040 80bc 	bne.w	8005070 <HAL_GPIO_EXTI_Callback+0x2f4>
				AudioState = AUDIO_STATE_VOLUME_DOWN;
 8004ef8:	4b47      	ldr	r3, [pc, #284]	; (8005018 <HAL_GPIO_EXTI_Callback+0x29c>)
 8004efa:	220d      	movs	r2, #13
 8004efc:	701a      	strb	r2, [r3, #0]
		break;
 8004efe:	e0b7      	b.n	8005070 <HAL_GPIO_EXTI_Callback+0x2f4>
		} else if (OLED_display_status == OLED_ABOUT) {
 8004f00:	4b42      	ldr	r3, [pc, #264]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	f040 80b3 	bne.w	8005070 <HAL_GPIO_EXTI_Callback+0x2f4>
			OLED_display_status = OLED_MENU;
 8004f0a:	4b40      	ldr	r3, [pc, #256]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]
		break;
 8004f10:	e0ae      	b.n	8005070 <HAL_GPIO_EXTI_Callback+0x2f4>
				break;
 8004f12:	bf00      	nop
		break;
 8004f14:	e0ac      	b.n	8005070 <HAL_GPIO_EXTI_Callback+0x2f4>
	case GPIO_PIN_2:
		button = 2;
 8004f16:	2302      	movs	r3, #2
 8004f18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		if (OLED_display_status == OLED_MENU) {
 8004f1c:	4b3b      	ldr	r3, [pc, #236]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 80a7 	beq.w	8005074 <HAL_GPIO_EXTI_Callback+0x2f8>
			// Do nothing
		} else if (OLED_display_status == OLED_FILE_BROWSER) {
 8004f26:	4b39      	ldr	r3, [pc, #228]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	f000 80a2 	beq.w	8005074 <HAL_GPIO_EXTI_Callback+0x2f8>
			// Do nothing
		} else if (OLED_display_status == OLED_PLAYER) {
 8004f30:	4b36      	ldr	r3, [pc, #216]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d103      	bne.n	8004f40 <HAL_GPIO_EXTI_Callback+0x1c4>
			// Press this button to stop
			AudioState = AUDIO_STATE_STOP;
 8004f38:	4b37      	ldr	r3, [pc, #220]	; (8005018 <HAL_GPIO_EXTI_Callback+0x29c>)
 8004f3a:	2209      	movs	r2, #9
 8004f3c:	701a      	strb	r2, [r3, #0]
			}
		} else if (OLED_display_status == OLED_ABOUT) {
			// Press any key to return to menu
			OLED_display_status = OLED_MENU;
		}
		break;
 8004f3e:	e099      	b.n	8005074 <HAL_GPIO_EXTI_Callback+0x2f8>
		} else if (OLED_display_status == OLED_SETTING) {
 8004f40:	4b32      	ldr	r3, [pc, #200]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b03      	cmp	r3, #3
 8004f46:	d108      	bne.n	8004f5a <HAL_GPIO_EXTI_Callback+0x1de>
			if (setting_select == SETTING_VOLUME) {
 8004f48:	4b34      	ldr	r3, [pc, #208]	; (800501c <HAL_GPIO_EXTI_Callback+0x2a0>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	f040 8091 	bne.w	8005074 <HAL_GPIO_EXTI_Callback+0x2f8>
				AudioState = AUDIO_STATE_VOLUME_UP;
 8004f52:	4b31      	ldr	r3, [pc, #196]	; (8005018 <HAL_GPIO_EXTI_Callback+0x29c>)
 8004f54:	220c      	movs	r2, #12
 8004f56:	701a      	strb	r2, [r3, #0]
		break;
 8004f58:	e08c      	b.n	8005074 <HAL_GPIO_EXTI_Callback+0x2f8>
		} else if (OLED_display_status == OLED_ABOUT) {
 8004f5a:	4b2c      	ldr	r3, [pc, #176]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	f040 8088 	bne.w	8005074 <HAL_GPIO_EXTI_Callback+0x2f8>
			OLED_display_status = OLED_MENU;
 8004f64:	4b29      	ldr	r3, [pc, #164]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	601a      	str	r2, [r3, #0]
		break;
 8004f6a:	e083      	b.n	8005074 <HAL_GPIO_EXTI_Callback+0x2f8>
	case GPIO_PIN_3:
		button = 3;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		if (OLED_display_status == OLED_MENU) {
 8004f72:	4b26      	ldr	r3, [pc, #152]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d111      	bne.n	8004f9e <HAL_GPIO_EXTI_Callback+0x222>
			if (menu_select != MENU_FILE_BROWSER)
 8004f7a:	4b25      	ldr	r3, [pc, #148]	; (8005010 <HAL_GPIO_EXTI_Callback+0x294>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d005      	beq.n	8004f8e <HAL_GPIO_EXTI_Callback+0x212>
				menu_select--;
 8004f82:	4b23      	ldr	r3, [pc, #140]	; (8005010 <HAL_GPIO_EXTI_Callback+0x294>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	3b01      	subs	r3, #1
 8004f88:	4a21      	ldr	r2, [pc, #132]	; (8005010 <HAL_GPIO_EXTI_Callback+0x294>)
 8004f8a:	6013      	str	r3, [r2, #0]
			OLED_display_status = OLED_MENU;
		} else if (OLED_display_status == OLED_ABOUT) {
			// Press any key to return to menu
			OLED_display_status = OLED_MENU;
		}
		break;
 8004f8c:	e074      	b.n	8005078 <HAL_GPIO_EXTI_Callback+0x2fc>
			else if(menu_select == MENU_FILE_BROWSER)
 8004f8e:	4b20      	ldr	r3, [pc, #128]	; (8005010 <HAL_GPIO_EXTI_Callback+0x294>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d170      	bne.n	8005078 <HAL_GPIO_EXTI_Callback+0x2fc>
				menu_select = MENU_ABOUT;
 8004f96:	4b1e      	ldr	r3, [pc, #120]	; (8005010 <HAL_GPIO_EXTI_Callback+0x294>)
 8004f98:	2203      	movs	r2, #3
 8004f9a:	601a      	str	r2, [r3, #0]
		break;
 8004f9c:	e06c      	b.n	8005078 <HAL_GPIO_EXTI_Callback+0x2fc>
		} else if (OLED_display_status == OLED_FILE_BROWSER) {
 8004f9e:	4b1b      	ldr	r3, [pc, #108]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d109      	bne.n	8004fba <HAL_GPIO_EXTI_Callback+0x23e>
			if (file_select > 0) file_select--;
 8004fa6:	4b1b      	ldr	r3, [pc, #108]	; (8005014 <HAL_GPIO_EXTI_Callback+0x298>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	dd64      	ble.n	8005078 <HAL_GPIO_EXTI_Callback+0x2fc>
 8004fae:	4b19      	ldr	r3, [pc, #100]	; (8005014 <HAL_GPIO_EXTI_Callback+0x298>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	4a17      	ldr	r2, [pc, #92]	; (8005014 <HAL_GPIO_EXTI_Callback+0x298>)
 8004fb6:	6013      	str	r3, [r2, #0]
		break;
 8004fb8:	e05e      	b.n	8005078 <HAL_GPIO_EXTI_Callback+0x2fc>
		} else if (OLED_display_status == OLED_PLAYER) {
 8004fba:	4b14      	ldr	r3, [pc, #80]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d05a      	beq.n	8005078 <HAL_GPIO_EXTI_Callback+0x2fc>
		} else if (OLED_display_status == OLED_SETTING) {
 8004fc2:	4b12      	ldr	r3, [pc, #72]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b03      	cmp	r3, #3
 8004fc8:	d103      	bne.n	8004fd2 <HAL_GPIO_EXTI_Callback+0x256>
			OLED_display_status = OLED_MENU;
 8004fca:	4b10      	ldr	r3, [pc, #64]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]
		break;
 8004fd0:	e052      	b.n	8005078 <HAL_GPIO_EXTI_Callback+0x2fc>
		} else if (OLED_display_status == OLED_ABOUT) {
 8004fd2:	4b0e      	ldr	r3, [pc, #56]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d14e      	bne.n	8005078 <HAL_GPIO_EXTI_Callback+0x2fc>
			OLED_display_status = OLED_MENU;
 8004fda:	4b0c      	ldr	r3, [pc, #48]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]
		break;
 8004fe0:	e04a      	b.n	8005078 <HAL_GPIO_EXTI_Callback+0x2fc>
	case GPIO_PIN_4:
		button = 4;
 8004fe2:	2304      	movs	r3, #4
 8004fe4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		if (OLED_display_status == OLED_MENU) {
 8004fe8:	4b08      	ldr	r3, [pc, #32]	; (800500c <HAL_GPIO_EXTI_Callback+0x290>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d11f      	bne.n	8005030 <HAL_GPIO_EXTI_Callback+0x2b4>
			if (menu_select != MENU_ABOUT)
 8004ff0:	4b07      	ldr	r3, [pc, #28]	; (8005010 <HAL_GPIO_EXTI_Callback+0x294>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2b03      	cmp	r3, #3
 8004ff6:	d013      	beq.n	8005020 <HAL_GPIO_EXTI_Callback+0x2a4>
				menu_select++;
 8004ff8:	4b05      	ldr	r3, [pc, #20]	; (8005010 <HAL_GPIO_EXTI_Callback+0x294>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	4a04      	ldr	r2, [pc, #16]	; (8005010 <HAL_GPIO_EXTI_Callback+0x294>)
 8005000:	6013      	str	r3, [r2, #0]
			// Do nothing
		} else if (OLED_display_status == OLED_ABOUT) {
			// Press any key to return to menu
			OLED_display_status = OLED_MENU;
		}
		break;
 8005002:	e03b      	b.n	800507c <HAL_GPIO_EXTI_Callback+0x300>
 8005004:	20000860 	.word	0x20000860
 8005008:	20000864 	.word	0x20000864
 800500c:	20000854 	.word	0x20000854
 8005010:	20000858 	.word	0x20000858
 8005014:	2000085c 	.word	0x2000085c
 8005018:	200018c0 	.word	0x200018c0
 800501c:	20000054 	.word	0x20000054
			else if(menu_select == MENU_ABOUT)
 8005020:	4b28      	ldr	r3, [pc, #160]	; (80050c4 <HAL_GPIO_EXTI_Callback+0x348>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b03      	cmp	r3, #3
 8005026:	d129      	bne.n	800507c <HAL_GPIO_EXTI_Callback+0x300>
				menu_select = MENU_FILE_BROWSER;
 8005028:	4b26      	ldr	r3, [pc, #152]	; (80050c4 <HAL_GPIO_EXTI_Callback+0x348>)
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
		break;
 800502e:	e025      	b.n	800507c <HAL_GPIO_EXTI_Callback+0x300>
		} else if (OLED_display_status == OLED_FILE_BROWSER) {
 8005030:	4b25      	ldr	r3, [pc, #148]	; (80050c8 <HAL_GPIO_EXTI_Callback+0x34c>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d109      	bne.n	800504c <HAL_GPIO_EXTI_Callback+0x2d0>
			if (file_select < 2) file_select++;
 8005038:	4b24      	ldr	r3, [pc, #144]	; (80050cc <HAL_GPIO_EXTI_Callback+0x350>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b01      	cmp	r3, #1
 800503e:	dc1d      	bgt.n	800507c <HAL_GPIO_EXTI_Callback+0x300>
 8005040:	4b22      	ldr	r3, [pc, #136]	; (80050cc <HAL_GPIO_EXTI_Callback+0x350>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3301      	adds	r3, #1
 8005046:	4a21      	ldr	r2, [pc, #132]	; (80050cc <HAL_GPIO_EXTI_Callback+0x350>)
 8005048:	6013      	str	r3, [r2, #0]
		break;
 800504a:	e017      	b.n	800507c <HAL_GPIO_EXTI_Callback+0x300>
		} else if (OLED_display_status == OLED_PLAYER) {
 800504c:	4b1e      	ldr	r3, [pc, #120]	; (80050c8 <HAL_GPIO_EXTI_Callback+0x34c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d013      	beq.n	800507c <HAL_GPIO_EXTI_Callback+0x300>
		} else if (OLED_display_status == OLED_SETTING) {
 8005054:	4b1c      	ldr	r3, [pc, #112]	; (80050c8 <HAL_GPIO_EXTI_Callback+0x34c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b03      	cmp	r3, #3
 800505a:	d00f      	beq.n	800507c <HAL_GPIO_EXTI_Callback+0x300>
		} else if (OLED_display_status == OLED_ABOUT) {
 800505c:	4b1a      	ldr	r3, [pc, #104]	; (80050c8 <HAL_GPIO_EXTI_Callback+0x34c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b04      	cmp	r3, #4
 8005062:	d10b      	bne.n	800507c <HAL_GPIO_EXTI_Callback+0x300>
			OLED_display_status = OLED_MENU;
 8005064:	4b18      	ldr	r3, [pc, #96]	; (80050c8 <HAL_GPIO_EXTI_Callback+0x34c>)
 8005066:	2200      	movs	r2, #0
 8005068:	601a      	str	r2, [r3, #0]
		break;
 800506a:	e007      	b.n	800507c <HAL_GPIO_EXTI_Callback+0x300>
		break;
 800506c:	bf00      	nop
 800506e:	e006      	b.n	800507e <HAL_GPIO_EXTI_Callback+0x302>
		break;
 8005070:	bf00      	nop
 8005072:	e004      	b.n	800507e <HAL_GPIO_EXTI_Callback+0x302>
		break;
 8005074:	bf00      	nop
 8005076:	e002      	b.n	800507e <HAL_GPIO_EXTI_Callback+0x302>
		break;
 8005078:	bf00      	nop
 800507a:	e000      	b.n	800507e <HAL_GPIO_EXTI_Callback+0x302>
		break;
 800507c:	bf00      	nop
	default:
		return;
		break;
	}
	sprintf(buf, "External IO button %d pressed!\n\r", button);
 800507e:	f107 030c 	add.w	r3, r7, #12
 8005082:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005086:	4912      	ldr	r1, [pc, #72]	; (80050d0 <HAL_GPIO_EXTI_Callback+0x354>)
 8005088:	4618      	mov	r0, r3
 800508a:	f008 feaf 	bl	800ddec <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 800508e:	f107 030c 	add.w	r3, r7, #12
 8005092:	4618      	mov	r0, r3
 8005094:	f7fb f89c 	bl	80001d0 <strlen>
 8005098:	4603      	mov	r3, r0
 800509a:	b29a      	uxth	r2, r3
 800509c:	f107 010c 	add.w	r1, r7, #12
 80050a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80050a4:	480b      	ldr	r0, [pc, #44]	; (80050d4 <HAL_GPIO_EXTI_Callback+0x358>)
 80050a6:	f005 ffca 	bl	800b03e <HAL_UART_Transmit>

	// Update lastEventTime
	lastEventTime = globalTime;
 80050aa:	4b0b      	ldr	r3, [pc, #44]	; (80050d8 <HAL_GPIO_EXTI_Callback+0x35c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a0b      	ldr	r2, [pc, #44]	; (80050dc <HAL_GPIO_EXTI_Callback+0x360>)
 80050b0:	6013      	str	r3, [r2, #0]
	return;
 80050b2:	e002      	b.n	80050ba <HAL_GPIO_EXTI_Callback+0x33e>
		return;
 80050b4:	bf00      	nop
 80050b6:	e000      	b.n	80050ba <HAL_GPIO_EXTI_Callback+0x33e>
		return;
 80050b8:	bf00      	nop
}
 80050ba:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	20000858 	.word	0x20000858
 80050c8:	20000854 	.word	0x20000854
 80050cc:	2000085c 	.word	0x2000085c
 80050d0:	0800e9d4 	.word	0x0800e9d4
 80050d4:	20000810 	.word	0x20000810
 80050d8:	20000860 	.word	0x20000860
 80050dc:	20000864 	.word	0x20000864

080050e0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a04      	ldr	r2, [pc, #16]	; (8005100 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d101      	bne.n	80050f6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80050f2:	f001 f909 	bl	8006308 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80050f6:	bf00      	nop
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	40001400 	.word	0x40001400

08005104 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005108:	b672      	cpsid	i
}
 800510a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800510c:	e7fe      	b.n	800510c <Error_Handler+0x8>
	...

08005110 <SPI1_Error>:

/////////////////////////////////////////////////////// ��ֲ�޸������� //////////////////////////////////////////////////////////


void SPI1_Error(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
	__HAL_SPI_DISABLE(&hspi1);
 8005114:	4b0b      	ldr	r3, [pc, #44]	; (8005144 <SPI1_Error+0x34>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	4b0a      	ldr	r3, [pc, #40]	; (8005144 <SPI1_Error+0x34>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005122:	601a      	str	r2, [r3, #0]
    HAL_SPI_DeInit(&hspi1);
 8005124:	4807      	ldr	r0, [pc, #28]	; (8005144 <SPI1_Error+0x34>)
 8005126:	f005 f9fa 	bl	800a51e <HAL_SPI_DeInit>
    MX_SPI1_Init();
 800512a:	f7ff fd03 	bl	8004b34 <MX_SPI1_Init>
	__HAL_SPI_ENABLE(&hspi1);
 800512e:	4b05      	ldr	r3, [pc, #20]	; (8005144 <SPI1_Error+0x34>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	4b03      	ldr	r3, [pc, #12]	; (8005144 <SPI1_Error+0x34>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800513c:	601a      	str	r2, [r3, #0]
}
 800513e:	bf00      	nop
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	200007b8 	.word	0x200007b8

08005148 <SPI1_ReadWriteByte>:

uint8_t SPI1_ReadWriteByte(uint8_t TxDate)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af02      	add	r7, sp, #8
 800514e:	4603      	mov	r3, r0
 8005150:	71fb      	strb	r3, [r7, #7]
    uint8_t RxData = 0;
 8005152:	2300      	movs	r3, #0
 8005154:	73fb      	strb	r3, [r7, #15]
    if(HAL_SPI_TransmitReceive(&hspi1, &TxDate, &RxData, 1, 1000) != HAL_OK)
 8005156:	f107 020f 	add.w	r2, r7, #15
 800515a:	1df9      	adds	r1, r7, #7
 800515c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	2301      	movs	r3, #1
 8005164:	4806      	ldr	r0, [pc, #24]	; (8005180 <SPI1_ReadWriteByte+0x38>)
 8005166:	f005 fa02 	bl	800a56e <HAL_SPI_TransmitReceive>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <SPI1_ReadWriteByte+0x2c>
    {
        SPI1_Error();
 8005170:	f7ff ffce 	bl	8005110 <SPI1_Error>
    }
    return RxData;
 8005174:	7bfb      	ldrb	r3, [r7, #15]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	200007b8 	.word	0x200007b8

08005184 <SD_SPI_ReadWriteByte>:
 * SD��SPI�ӿڶ�дһ���ֽ�
 * @param  TxData ��д����ֽ�
 * @return        ����SPI�Ľ���
 */
uint8_t SD_SPI_ReadWriteByte(uint8_t TxData)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	4603      	mov	r3, r0
 800518c:	71fb      	strb	r3, [r7, #7]
    return SPI1_ReadWriteByte(TxData);
 800518e:	79fb      	ldrb	r3, [r7, #7]
 8005190:	4618      	mov	r0, r3
 8005192:	f7ff ffd9 	bl	8005148 <SPI1_ReadWriteByte>
 8005196:	4603      	mov	r3, r0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <SD_SPI_Init>:

/// SPIӲ�����ʼ��
void SD_SPI_Init(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
    MX_SPI1_Init();
 80051a4:	f7ff fcc6 	bl	8004b34 <MX_SPI1_Init>
	__HAL_SPI_ENABLE(&hspi1);
 80051a8:	4b08      	ldr	r3, [pc, #32]	; (80051cc <SD_SPI_Init+0x2c>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	4b07      	ldr	r3, [pc, #28]	; (80051cc <SD_SPI_Init+0x2c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051b6:	601a      	str	r2, [r3, #0]
    SD_SPI_ReadWriteByte(0xFF);
 80051b8:	20ff      	movs	r0, #255	; 0xff
 80051ba:	f7ff ffe3 	bl	8005184 <SD_SPI_ReadWriteByte>
    SD_CS_H();
 80051be:	2201      	movs	r2, #1
 80051c0:	2110      	movs	r1, #16
 80051c2:	4803      	ldr	r0, [pc, #12]	; (80051d0 <SD_SPI_Init+0x30>)
 80051c4:	f002 f89c 	bl	8007300 <HAL_GPIO_WritePin>
}
 80051c8:	bf00      	nop
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	200007b8 	.word	0x200007b8
 80051d0:	40020800 	.word	0x40020800

080051d4 <SD_DisSelect>:

////////////////////////////////////////////////////////  SD SPI ��������  /////////////////////////////////////////////////////////////

//ȡ��ѡ��,�ͷ�SPI����
void SD_DisSelect(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
    SD_CS_H();
 80051d8:	2201      	movs	r2, #1
 80051da:	2110      	movs	r1, #16
 80051dc:	4803      	ldr	r0, [pc, #12]	; (80051ec <SD_DisSelect+0x18>)
 80051de:	f002 f88f 	bl	8007300 <HAL_GPIO_WritePin>
    SD_SPI_ReadWriteByte(0xff);//�ṩ�����8��ʱ��
 80051e2:	20ff      	movs	r0, #255	; 0xff
 80051e4:	f7ff ffce 	bl	8005184 <SD_SPI_ReadWriteByte>
}
 80051e8:	bf00      	nop
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	40020800 	.word	0x40020800

080051f0 <SD_Select>:
/**
 * ѡ��SD�����ȴ���׼����
 * @return  0���ɹ�  1��ʧ��
 */
uint8_t SD_Select(void)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	af00      	add	r7, sp, #0
    SD_CS_L();
 80051f4:	2200      	movs	r2, #0
 80051f6:	2110      	movs	r1, #16
 80051f8:	4807      	ldr	r0, [pc, #28]	; (8005218 <SD_Select+0x28>)
 80051fa:	f002 f881 	bl	8007300 <HAL_GPIO_WritePin>
    if (SD_WaitReady() == 0)return 0; //�ȴ��ɹ�
 80051fe:	f000 f80d 	bl	800521c <SD_WaitReady>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <SD_Select+0x1c>
 8005208:	2300      	movs	r3, #0
 800520a:	e002      	b.n	8005212 <SD_Select+0x22>
    SD_DisSelect();
 800520c:	f7ff ffe2 	bl	80051d4 <SD_DisSelect>
    return 1;//�ȴ�ʧ��
 8005210:	2301      	movs	r3, #1
}
 8005212:	4618      	mov	r0, r3
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	40020800 	.word	0x40020800

0800521c <SD_WaitReady>:
/**
 * �ȴ�SD��׼����
 * @return  0���ɹ�  other��ʧ��
 */
uint8_t SD_WaitReady(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
    uint32_t t = 0;
 8005222:	2300      	movs	r3, #0
 8005224:	607b      	str	r3, [r7, #4]
    do
    {
        if (SD_SPI_ReadWriteByte(0XFF) == 0XFF)return 0; //OK
 8005226:	20ff      	movs	r0, #255	; 0xff
 8005228:	f7ff ffac 	bl	8005184 <SD_SPI_ReadWriteByte>
 800522c:	4603      	mov	r3, r0
 800522e:	2bff      	cmp	r3, #255	; 0xff
 8005230:	d101      	bne.n	8005236 <SD_WaitReady+0x1a>
 8005232:	2300      	movs	r3, #0
 8005234:	e008      	b.n	8005248 <SD_WaitReady+0x2c>
        t++;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3301      	adds	r3, #1
 800523a:	607b      	str	r3, [r7, #4]
    }
    while (t < 0xFFFFFF); //�ȴ�
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8005242:	4293      	cmp	r3, r2
 8005244:	d3ef      	bcc.n	8005226 <SD_WaitReady+0xa>
    return 1;
 8005246:	2301      	movs	r3, #1
}
 8005248:	4618      	mov	r0, r3
 800524a:	3708      	adds	r7, #8
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <SD_GetResponse>:
 * �ȴ�SD����Ӧ
 * @param  Response Ҫ�õ��Ļ�Ӧֵ
 * @return          0���ɹ�  other��ʧ��
 */
uint8_t SD_GetResponse(uint8_t Response)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	71fb      	strb	r3, [r7, #7]
    uint16_t Count = 0xFFF; //�ȴ�����
 800525a:	f640 73ff 	movw	r3, #4095	; 0xfff
 800525e:	81fb      	strh	r3, [r7, #14]
    while ((SD_SPI_ReadWriteByte(0XFF) != Response) && Count)Count--; //�ȴ��õ�׼ȷ�Ļ�Ӧ
 8005260:	e002      	b.n	8005268 <SD_GetResponse+0x18>
 8005262:	89fb      	ldrh	r3, [r7, #14]
 8005264:	3b01      	subs	r3, #1
 8005266:	81fb      	strh	r3, [r7, #14]
 8005268:	20ff      	movs	r0, #255	; 0xff
 800526a:	f7ff ff8b 	bl	8005184 <SD_SPI_ReadWriteByte>
 800526e:	4603      	mov	r3, r0
 8005270:	461a      	mov	r2, r3
 8005272:	79fb      	ldrb	r3, [r7, #7]
 8005274:	4293      	cmp	r3, r2
 8005276:	d002      	beq.n	800527e <SD_GetResponse+0x2e>
 8005278:	89fb      	ldrh	r3, [r7, #14]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1f1      	bne.n	8005262 <SD_GetResponse+0x12>
    if (Count == 0)return MSD_RESPONSE_FAILURE; //�õ���Ӧʧ��
 800527e:	89fb      	ldrh	r3, [r7, #14]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <SD_GetResponse+0x38>
 8005284:	23ff      	movs	r3, #255	; 0xff
 8005286:	e000      	b.n	800528a <SD_GetResponse+0x3a>
    else return MSD_RESPONSE_NO_ERROR;//��ȷ��Ӧ
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <SD_RecvData>:
 * @param  buf ��Ž��յ�����
 * @param  len ���յ����ݳ���
 * @return     0���ɹ�  other��ʧ��
 */
uint8_t SD_RecvData(uint8_t*buf, uint16_t len)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b082      	sub	sp, #8
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	460b      	mov	r3, r1
 800529c:	807b      	strh	r3, [r7, #2]
    if (SD_GetResponse(0xFE))return 1; //�ȴ�SD������������ʼ����0xFE
 800529e:	20fe      	movs	r0, #254	; 0xfe
 80052a0:	f7ff ffd6 	bl	8005250 <SD_GetResponse>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00b      	beq.n	80052c2 <SD_RecvData+0x30>
 80052aa:	2301      	movs	r3, #1
 80052ac:	e015      	b.n	80052da <SD_RecvData+0x48>
    while (len--) //��ʼ��������
    {
        *buf = SD_SPI_ReadWriteByte(0xFF);
 80052ae:	20ff      	movs	r0, #255	; 0xff
 80052b0:	f7ff ff68 	bl	8005184 <SD_SPI_ReadWriteByte>
 80052b4:	4603      	mov	r3, r0
 80052b6:	461a      	mov	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	701a      	strb	r2, [r3, #0]
        buf++;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	3301      	adds	r3, #1
 80052c0:	607b      	str	r3, [r7, #4]
    while (len--) //��ʼ��������
 80052c2:	887b      	ldrh	r3, [r7, #2]
 80052c4:	1e5a      	subs	r2, r3, #1
 80052c6:	807a      	strh	r2, [r7, #2]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1f0      	bne.n	80052ae <SD_RecvData+0x1c>
    }
    //������2��αCRC��dummy CRC��
    SD_SPI_ReadWriteByte(0xFF);
 80052cc:	20ff      	movs	r0, #255	; 0xff
 80052ce:	f7ff ff59 	bl	8005184 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(0xFF);
 80052d2:	20ff      	movs	r0, #255	; 0xff
 80052d4:	f7ff ff56 	bl	8005184 <SD_SPI_ReadWriteByte>
    return 0;//��ȡ�ɹ�
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <SD_SendBlock>:
 * @param  buf ��д������ݣ�size=512
 * @param  cmd ָ��
 * @return     0���ɹ�  other��ʧ��
 */
uint8_t SD_SendBlock(uint8_t*buf, uint8_t cmd)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b084      	sub	sp, #16
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	460b      	mov	r3, r1
 80052ec:	70fb      	strb	r3, [r7, #3]
    uint16_t t;
    if (SD_WaitReady())return 1; //�ȴ�׼��ʧЧ
 80052ee:	f7ff ff95 	bl	800521c <SD_WaitReady>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <SD_SendBlock+0x1a>
 80052f8:	2301      	movs	r3, #1
 80052fa:	e02a      	b.n	8005352 <SD_SendBlock+0x70>
    SD_SPI_ReadWriteByte(cmd);
 80052fc:	78fb      	ldrb	r3, [r7, #3]
 80052fe:	4618      	mov	r0, r3
 8005300:	f7ff ff40 	bl	8005184 <SD_SPI_ReadWriteByte>
    if (cmd != 0XFD) //���ǽ���ָ��
 8005304:	78fb      	ldrb	r3, [r7, #3]
 8005306:	2bfd      	cmp	r3, #253	; 0xfd
 8005308:	d022      	beq.n	8005350 <SD_SendBlock+0x6e>
    {
        for (t = 0; t < 512; t++)SD_SPI_ReadWriteByte(buf[t]); //����ٶ�,���ٺ�������ʱ��
 800530a:	2300      	movs	r3, #0
 800530c:	81fb      	strh	r3, [r7, #14]
 800530e:	e009      	b.n	8005324 <SD_SendBlock+0x42>
 8005310:	89fb      	ldrh	r3, [r7, #14]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	4413      	add	r3, r2
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff ff33 	bl	8005184 <SD_SPI_ReadWriteByte>
 800531e:	89fb      	ldrh	r3, [r7, #14]
 8005320:	3301      	adds	r3, #1
 8005322:	81fb      	strh	r3, [r7, #14]
 8005324:	89fb      	ldrh	r3, [r7, #14]
 8005326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800532a:	d3f1      	bcc.n	8005310 <SD_SendBlock+0x2e>
        SD_SPI_ReadWriteByte(0xFF);//����crc
 800532c:	20ff      	movs	r0, #255	; 0xff
 800532e:	f7ff ff29 	bl	8005184 <SD_SPI_ReadWriteByte>
        SD_SPI_ReadWriteByte(0xFF);
 8005332:	20ff      	movs	r0, #255	; 0xff
 8005334:	f7ff ff26 	bl	8005184 <SD_SPI_ReadWriteByte>
        t = SD_SPI_ReadWriteByte(0xFF); //������Ӧ
 8005338:	20ff      	movs	r0, #255	; 0xff
 800533a:	f7ff ff23 	bl	8005184 <SD_SPI_ReadWriteByte>
 800533e:	4603      	mov	r3, r0
 8005340:	81fb      	strh	r3, [r7, #14]
        if ((t & 0x1F) != 0x05)return 2; //��Ӧ����
 8005342:	89fb      	ldrh	r3, [r7, #14]
 8005344:	f003 031f 	and.w	r3, r3, #31
 8005348:	2b05      	cmp	r3, #5
 800534a:	d001      	beq.n	8005350 <SD_SendBlock+0x6e>
 800534c:	2302      	movs	r3, #2
 800534e:	e000      	b.n	8005352 <SD_SendBlock+0x70>
    }
    return 0;//д��ɹ�
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <SD_SendCmd>:
 * @param  arg ����
 * @param  crc crcУ��ֵ
 * @return     SD�����ص���Ӧֵ
 */
uint8_t SD_SendCmd(uint8_t cmd, uint32_t arg, uint8_t crc)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b084      	sub	sp, #16
 800535e:	af00      	add	r7, sp, #0
 8005360:	4603      	mov	r3, r0
 8005362:	6039      	str	r1, [r7, #0]
 8005364:	71fb      	strb	r3, [r7, #7]
 8005366:	4613      	mov	r3, r2
 8005368:	71bb      	strb	r3, [r7, #6]
    uint8_t r1;
    uint8_t Retry = 0;
 800536a:	2300      	movs	r3, #0
 800536c:	73fb      	strb	r3, [r7, #15]
    SD_DisSelect();//ȡ���ϴ�Ƭѡ
 800536e:	f7ff ff31 	bl	80051d4 <SD_DisSelect>
    if (SD_Select())return 0XFF; //ƬѡʧЧ
 8005372:	f7ff ff3d 	bl	80051f0 <SD_Select>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <SD_SendCmd+0x26>
 800537c:	23ff      	movs	r3, #255	; 0xff
 800537e:	e038      	b.n	80053f2 <SD_SendCmd+0x98>
    //����
    SD_SPI_ReadWriteByte(cmd | 0x40);//�ֱ�д������
 8005380:	79fb      	ldrb	r3, [r7, #7]
 8005382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005386:	b2db      	uxtb	r3, r3
 8005388:	4618      	mov	r0, r3
 800538a:	f7ff fefb 	bl	8005184 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg >> 24);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	0e1b      	lsrs	r3, r3, #24
 8005392:	b2db      	uxtb	r3, r3
 8005394:	4618      	mov	r0, r3
 8005396:	f7ff fef5 	bl	8005184 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg >> 16);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	0c1b      	lsrs	r3, r3, #16
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7ff feef 	bl	8005184 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg >> 8);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	0a1b      	lsrs	r3, r3, #8
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7ff fee9 	bl	8005184 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7ff fee4 	bl	8005184 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(crc);
 80053bc:	79bb      	ldrb	r3, [r7, #6]
 80053be:	4618      	mov	r0, r3
 80053c0:	f7ff fee0 	bl	8005184 <SD_SPI_ReadWriteByte>
    if (cmd == CMD12)SD_SPI_ReadWriteByte(0xff); //Skip a stuff byte when stop reading
 80053c4:	79fb      	ldrb	r3, [r7, #7]
 80053c6:	2b0c      	cmp	r3, #12
 80053c8:	d102      	bne.n	80053d0 <SD_SendCmd+0x76>
 80053ca:	20ff      	movs	r0, #255	; 0xff
 80053cc:	f7ff feda 	bl	8005184 <SD_SPI_ReadWriteByte>
    //�ȴ���Ӧ����ʱ�˳�
    Retry = 0X1F;
 80053d0:	231f      	movs	r3, #31
 80053d2:	73fb      	strb	r3, [r7, #15]
    do
    {
        r1 = SD_SPI_ReadWriteByte(0xFF);
 80053d4:	20ff      	movs	r0, #255	; 0xff
 80053d6:	f7ff fed5 	bl	8005184 <SD_SPI_ReadWriteByte>
 80053da:	4603      	mov	r3, r0
 80053dc:	73bb      	strb	r3, [r7, #14]
    }
    while ((r1 & 0X80) && Retry--);
 80053de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	da04      	bge.n	80053f0 <SD_SendCmd+0x96>
 80053e6:	7bfb      	ldrb	r3, [r7, #15]
 80053e8:	1e5a      	subs	r2, r3, #1
 80053ea:	73fa      	strb	r2, [r7, #15]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1f1      	bne.n	80053d4 <SD_SendCmd+0x7a>
    //����״ֵ̬
    return r1;
 80053f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
	...

080053fc <SD_Initialize>:
    if (retry == 200)return 1; //ʧ��
    return 0;//�ɹ�
}
/// ��ʼ��SD��
uint8_t SD_Initialize(void)
{
 80053fc:	b590      	push	{r4, r7, lr}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
    uint8_t r1;      // ���SD���ķ���ֵ
    uint16_t retry;  // �������г�ʱ����
    uint8_t buf[4];
    uint16_t i;

    SD_SPI_Init();		//��ʼ��IO
 8005402:	f7ff fecd 	bl	80051a0 <SD_SPI_Init>
	//for(i=0;i<0xf00;i++);//����ʱ���ȴ�SD���ϵ����
//    SD_Select();
    for (i = 0; i < 10; i++)SD_SPI_ReadWriteByte(0XFF); //��������74������
 8005406:	2300      	movs	r3, #0
 8005408:	817b      	strh	r3, [r7, #10]
 800540a:	e005      	b.n	8005418 <SD_Initialize+0x1c>
 800540c:	20ff      	movs	r0, #255	; 0xff
 800540e:	f7ff feb9 	bl	8005184 <SD_SPI_ReadWriteByte>
 8005412:	897b      	ldrh	r3, [r7, #10]
 8005414:	3301      	adds	r3, #1
 8005416:	817b      	strh	r3, [r7, #10]
 8005418:	897b      	ldrh	r3, [r7, #10]
 800541a:	2b09      	cmp	r3, #9
 800541c:	d9f6      	bls.n	800540c <SD_Initialize+0x10>
    retry = 20;
 800541e:	2314      	movs	r3, #20
 8005420:	81bb      	strh	r3, [r7, #12]
    do
    {
        r1 = SD_SendCmd(CMD0, 0, 0x95); //����IDLE״̬
 8005422:	2295      	movs	r2, #149	; 0x95
 8005424:	2100      	movs	r1, #0
 8005426:	2000      	movs	r0, #0
 8005428:	f7ff ff97 	bl	800535a <SD_SendCmd>
 800542c:	4603      	mov	r3, r0
 800542e:	73fb      	strb	r3, [r7, #15]
    }
    while ((r1 != 0X01) && retry--);
 8005430:	7bfb      	ldrb	r3, [r7, #15]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d004      	beq.n	8005440 <SD_Initialize+0x44>
 8005436:	89bb      	ldrh	r3, [r7, #12]
 8005438:	1e5a      	subs	r2, r3, #1
 800543a:	81ba      	strh	r2, [r7, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1f0      	bne.n	8005422 <SD_Initialize+0x26>
    SD_Type = 0; //Ĭ���޿�
 8005440:	4b67      	ldr	r3, [pc, #412]	; (80055e0 <SD_Initialize+0x1e4>)
 8005442:	2200      	movs	r2, #0
 8005444:	701a      	strb	r2, [r3, #0]
    if (r1 == 0X01)
 8005446:	7bfb      	ldrb	r3, [r7, #15]
 8005448:	2b01      	cmp	r3, #1
 800544a:	f040 80b7 	bne.w	80055bc <SD_Initialize+0x1c0>
    {
        if (SD_SendCmd(CMD8, 0x1AA, 0x87) == 1) //SD V2.0
 800544e:	2287      	movs	r2, #135	; 0x87
 8005450:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005454:	2008      	movs	r0, #8
 8005456:	f7ff ff80 	bl	800535a <SD_SendCmd>
 800545a:	4603      	mov	r3, r0
 800545c:	2b01      	cmp	r3, #1
 800545e:	d15f      	bne.n	8005520 <SD_Initialize+0x124>
        {
            for (i = 0; i < 4; i++)buf[i] = SD_SPI_ReadWriteByte(0XFF);	//Get trailing return value of R7 resp
 8005460:	2300      	movs	r3, #0
 8005462:	817b      	strh	r3, [r7, #10]
 8005464:	e00d      	b.n	8005482 <SD_Initialize+0x86>
 8005466:	897c      	ldrh	r4, [r7, #10]
 8005468:	20ff      	movs	r0, #255	; 0xff
 800546a:	f7ff fe8b 	bl	8005184 <SD_SPI_ReadWriteByte>
 800546e:	4603      	mov	r3, r0
 8005470:	461a      	mov	r2, r3
 8005472:	f104 0310 	add.w	r3, r4, #16
 8005476:	443b      	add	r3, r7
 8005478:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800547c:	897b      	ldrh	r3, [r7, #10]
 800547e:	3301      	adds	r3, #1
 8005480:	817b      	strh	r3, [r7, #10]
 8005482:	897b      	ldrh	r3, [r7, #10]
 8005484:	2b03      	cmp	r3, #3
 8005486:	d9ee      	bls.n	8005466 <SD_Initialize+0x6a>
            if (buf[2] == 0X01 && buf[3] == 0XAA) //���Ƿ�֧��2.7~3.6V
 8005488:	79bb      	ldrb	r3, [r7, #6]
 800548a:	2b01      	cmp	r3, #1
 800548c:	f040 8096 	bne.w	80055bc <SD_Initialize+0x1c0>
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	2baa      	cmp	r3, #170	; 0xaa
 8005494:	f040 8092 	bne.w	80055bc <SD_Initialize+0x1c0>
            {
                retry = 0XFFFE;
 8005498:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800549c:	81bb      	strh	r3, [r7, #12]
                do
                {
                    SD_SendCmd(CMD55, 0, 0X01);	//����CMD55
 800549e:	2201      	movs	r2, #1
 80054a0:	2100      	movs	r1, #0
 80054a2:	2037      	movs	r0, #55	; 0x37
 80054a4:	f7ff ff59 	bl	800535a <SD_SendCmd>
                    r1 = SD_SendCmd(CMD41, 0x40000000, 0X01); //����CMD41
 80054a8:	2201      	movs	r2, #1
 80054aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80054ae:	2029      	movs	r0, #41	; 0x29
 80054b0:	f7ff ff53 	bl	800535a <SD_SendCmd>
 80054b4:	4603      	mov	r3, r0
 80054b6:	73fb      	strb	r3, [r7, #15]
                }
                while (r1 && retry--);
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d004      	beq.n	80054c8 <SD_Initialize+0xcc>
 80054be:	89bb      	ldrh	r3, [r7, #12]
 80054c0:	1e5a      	subs	r2, r3, #1
 80054c2:	81ba      	strh	r2, [r7, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1ea      	bne.n	800549e <SD_Initialize+0xa2>
                if (retry && SD_SendCmd(CMD58, 0, 0X01) == 0) //����SD2.0���汾��ʼ
 80054c8:	89bb      	ldrh	r3, [r7, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d076      	beq.n	80055bc <SD_Initialize+0x1c0>
 80054ce:	2201      	movs	r2, #1
 80054d0:	2100      	movs	r1, #0
 80054d2:	203a      	movs	r0, #58	; 0x3a
 80054d4:	f7ff ff41 	bl	800535a <SD_SendCmd>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d16e      	bne.n	80055bc <SD_Initialize+0x1c0>
                {
                    for (i = 0; i < 4; i++)buf[i] = SD_SPI_ReadWriteByte(0XFF); //�õ�OCRֵ
 80054de:	2300      	movs	r3, #0
 80054e0:	817b      	strh	r3, [r7, #10]
 80054e2:	e00d      	b.n	8005500 <SD_Initialize+0x104>
 80054e4:	897c      	ldrh	r4, [r7, #10]
 80054e6:	20ff      	movs	r0, #255	; 0xff
 80054e8:	f7ff fe4c 	bl	8005184 <SD_SPI_ReadWriteByte>
 80054ec:	4603      	mov	r3, r0
 80054ee:	461a      	mov	r2, r3
 80054f0:	f104 0310 	add.w	r3, r4, #16
 80054f4:	443b      	add	r3, r7
 80054f6:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80054fa:	897b      	ldrh	r3, [r7, #10]
 80054fc:	3301      	adds	r3, #1
 80054fe:	817b      	strh	r3, [r7, #10]
 8005500:	897b      	ldrh	r3, [r7, #10]
 8005502:	2b03      	cmp	r3, #3
 8005504:	d9ee      	bls.n	80054e4 <SD_Initialize+0xe8>
                    if (buf[0] & 0x40)SD_Type = SD_TYPE_V2HC; //���CCS
 8005506:	793b      	ldrb	r3, [r7, #4]
 8005508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550c:	2b00      	cmp	r3, #0
 800550e:	d003      	beq.n	8005518 <SD_Initialize+0x11c>
 8005510:	4b33      	ldr	r3, [pc, #204]	; (80055e0 <SD_Initialize+0x1e4>)
 8005512:	2206      	movs	r2, #6
 8005514:	701a      	strb	r2, [r3, #0]
 8005516:	e051      	b.n	80055bc <SD_Initialize+0x1c0>
                    else SD_Type = SD_TYPE_V2;
 8005518:	4b31      	ldr	r3, [pc, #196]	; (80055e0 <SD_Initialize+0x1e4>)
 800551a:	2204      	movs	r2, #4
 800551c:	701a      	strb	r2, [r3, #0]
 800551e:	e04d      	b.n	80055bc <SD_Initialize+0x1c0>
                }
            }
        }
        else //SD V1.x/ MMC	V3
        {
            SD_SendCmd(CMD55, 0, 0X01);		//����CMD55
 8005520:	2201      	movs	r2, #1
 8005522:	2100      	movs	r1, #0
 8005524:	2037      	movs	r0, #55	; 0x37
 8005526:	f7ff ff18 	bl	800535a <SD_SendCmd>
            r1 = SD_SendCmd(CMD41, 0, 0X01);	//����CMD41
 800552a:	2201      	movs	r2, #1
 800552c:	2100      	movs	r1, #0
 800552e:	2029      	movs	r0, #41	; 0x29
 8005530:	f7ff ff13 	bl	800535a <SD_SendCmd>
 8005534:	4603      	mov	r3, r0
 8005536:	73fb      	strb	r3, [r7, #15]
            if (r1 <= 1)
 8005538:	7bfb      	ldrb	r3, [r7, #15]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d81a      	bhi.n	8005574 <SD_Initialize+0x178>
            {
                SD_Type = SD_TYPE_V1;
 800553e:	4b28      	ldr	r3, [pc, #160]	; (80055e0 <SD_Initialize+0x1e4>)
 8005540:	2202      	movs	r2, #2
 8005542:	701a      	strb	r2, [r3, #0]
                retry = 0XFFFE;
 8005544:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005548:	81bb      	strh	r3, [r7, #12]
                do //�ȴ��˳�IDLEģʽ
                {
                    SD_SendCmd(CMD55, 0, 0X01);	//����CMD55
 800554a:	2201      	movs	r2, #1
 800554c:	2100      	movs	r1, #0
 800554e:	2037      	movs	r0, #55	; 0x37
 8005550:	f7ff ff03 	bl	800535a <SD_SendCmd>
                    r1 = SD_SendCmd(CMD41, 0, 0X01); //����CMD41
 8005554:	2201      	movs	r2, #1
 8005556:	2100      	movs	r1, #0
 8005558:	2029      	movs	r0, #41	; 0x29
 800555a:	f7ff fefe 	bl	800535a <SD_SendCmd>
 800555e:	4603      	mov	r3, r0
 8005560:	73fb      	strb	r3, [r7, #15]
                }
                while (r1 && retry--);
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d01a      	beq.n	800559e <SD_Initialize+0x1a2>
 8005568:	89bb      	ldrh	r3, [r7, #12]
 800556a:	1e5a      	subs	r2, r3, #1
 800556c:	81ba      	strh	r2, [r7, #12]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1eb      	bne.n	800554a <SD_Initialize+0x14e>
 8005572:	e014      	b.n	800559e <SD_Initialize+0x1a2>
            }
            else
            {
                SD_Type = SD_TYPE_MMC; //MMC V3
 8005574:	4b1a      	ldr	r3, [pc, #104]	; (80055e0 <SD_Initialize+0x1e4>)
 8005576:	2201      	movs	r2, #1
 8005578:	701a      	strb	r2, [r3, #0]
                retry = 0XFFFE;
 800557a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800557e:	81bb      	strh	r3, [r7, #12]
                do //�ȴ��˳�IDLEģʽ
                {
                    r1 = SD_SendCmd(CMD1, 0, 0X01); //����CMD1
 8005580:	2201      	movs	r2, #1
 8005582:	2100      	movs	r1, #0
 8005584:	2001      	movs	r0, #1
 8005586:	f7ff fee8 	bl	800535a <SD_SendCmd>
 800558a:	4603      	mov	r3, r0
 800558c:	73fb      	strb	r3, [r7, #15]
                }
                while (r1 && retry--);
 800558e:	7bfb      	ldrb	r3, [r7, #15]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d004      	beq.n	800559e <SD_Initialize+0x1a2>
 8005594:	89bb      	ldrh	r3, [r7, #12]
 8005596:	1e5a      	subs	r2, r3, #1
 8005598:	81ba      	strh	r2, [r7, #12]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1f0      	bne.n	8005580 <SD_Initialize+0x184>
            }
            if (retry == 0 || SD_SendCmd(CMD16, 512, 0X01) != 0)SD_Type = SD_TYPE_ERR; //����Ŀ�
 800559e:	89bb      	ldrh	r3, [r7, #12]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d008      	beq.n	80055b6 <SD_Initialize+0x1ba>
 80055a4:	2201      	movs	r2, #1
 80055a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055aa:	2010      	movs	r0, #16
 80055ac:	f7ff fed5 	bl	800535a <SD_SendCmd>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <SD_Initialize+0x1c0>
 80055b6:	4b0a      	ldr	r3, [pc, #40]	; (80055e0 <SD_Initialize+0x1e4>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	701a      	strb	r2, [r3, #0]
        }
    }
    SD_DisSelect();//ȡ��Ƭѡ
 80055bc:	f7ff fe0a 	bl	80051d4 <SD_DisSelect>
    if (SD_Type)return 0;
 80055c0:	4b07      	ldr	r3, [pc, #28]	; (80055e0 <SD_Initialize+0x1e4>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <SD_Initialize+0x1d0>
 80055c8:	2300      	movs	r3, #0
 80055ca:	e005      	b.n	80055d8 <SD_Initialize+0x1dc>
    else if (r1)return r1;
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <SD_Initialize+0x1da>
 80055d2:	7bfb      	ldrb	r3, [r7, #15]
 80055d4:	e000      	b.n	80055d8 <SD_Initialize+0x1dc>
    return 0xaa;//��������
 80055d6:	23aa      	movs	r3, #170	; 0xaa
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd90      	pop	{r4, r7, pc}
 80055e0:	20000868 	.word	0x20000868

080055e4 <SD_ReadDisk>:
 * @param  sector �������
 * @param  cnt    Ҫ��ȡ����������
 * @return        0���ɹ�  other��ʧ��
 */
uint8_t SD_ReadDisk(uint8_t*buf, uint32_t sector, uint8_t cnt)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	4613      	mov	r3, r2
 80055f0:	71fb      	strb	r3, [r7, #7]
    uint8_t r1;
    if (SD_Type != SD_TYPE_V2HC)sector <<= 9; //ת��Ϊ�ֽڵ�ַ
 80055f2:	4b21      	ldr	r3, [pc, #132]	; (8005678 <SD_ReadDisk+0x94>)
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	2b06      	cmp	r3, #6
 80055f8:	d002      	beq.n	8005600 <SD_ReadDisk+0x1c>
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	025b      	lsls	r3, r3, #9
 80055fe:	60bb      	str	r3, [r7, #8]
    if (cnt == 1)
 8005600:	79fb      	ldrb	r3, [r7, #7]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d111      	bne.n	800562a <SD_ReadDisk+0x46>
    {
        r1 = SD_SendCmd(CMD17, sector, 0X01); //������
 8005606:	2201      	movs	r2, #1
 8005608:	68b9      	ldr	r1, [r7, #8]
 800560a:	2011      	movs	r0, #17
 800560c:	f7ff fea5 	bl	800535a <SD_SendCmd>
 8005610:	4603      	mov	r3, r0
 8005612:	75fb      	strb	r3, [r7, #23]
        if (r1 == 0) //ָ��ͳɹ�
 8005614:	7dfb      	ldrb	r3, [r7, #23]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d127      	bne.n	800566a <SD_ReadDisk+0x86>
        {
            r1 = SD_RecvData(buf, 512); //����512���ֽ�
 800561a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f7ff fe37 	bl	8005292 <SD_RecvData>
 8005624:	4603      	mov	r3, r0
 8005626:	75fb      	strb	r3, [r7, #23]
 8005628:	e01f      	b.n	800566a <SD_ReadDisk+0x86>
        }
    }
    else
    {
        r1 = SD_SendCmd(CMD18, sector, 0X01); //����������
 800562a:	2201      	movs	r2, #1
 800562c:	68b9      	ldr	r1, [r7, #8]
 800562e:	2012      	movs	r0, #18
 8005630:	f7ff fe93 	bl	800535a <SD_SendCmd>
 8005634:	4603      	mov	r3, r0
 8005636:	75fb      	strb	r3, [r7, #23]
        do
        {
            r1 = SD_RecvData(buf, 512); //����512���ֽ�
 8005638:	f44f 7100 	mov.w	r1, #512	; 0x200
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f7ff fe28 	bl	8005292 <SD_RecvData>
 8005642:	4603      	mov	r3, r0
 8005644:	75fb      	strb	r3, [r7, #23]
            buf += 512;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800564c:	60fb      	str	r3, [r7, #12]
        }
        while (--cnt && r1 == 0);
 800564e:	79fb      	ldrb	r3, [r7, #7]
 8005650:	3b01      	subs	r3, #1
 8005652:	71fb      	strb	r3, [r7, #7]
 8005654:	79fb      	ldrb	r3, [r7, #7]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d002      	beq.n	8005660 <SD_ReadDisk+0x7c>
 800565a:	7dfb      	ldrb	r3, [r7, #23]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0eb      	beq.n	8005638 <SD_ReadDisk+0x54>
        SD_SendCmd(CMD12, 0, 0X01);	//����ֹͣ����
 8005660:	2201      	movs	r2, #1
 8005662:	2100      	movs	r1, #0
 8005664:	200c      	movs	r0, #12
 8005666:	f7ff fe78 	bl	800535a <SD_SendCmd>
    }
    SD_DisSelect();//ȡ��Ƭѡ
 800566a:	f7ff fdb3 	bl	80051d4 <SD_DisSelect>
    return r1;//
 800566e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	20000868 	.word	0x20000868

0800567c <SD_WriteDisk>:
 * @param  sector �������
 * @param  cnt    Ҫд�����������
 * @return        0���ɹ�  other��ʧ��
 */
uint8_t SD_WriteDisk(uint8_t*buf, uint32_t sector, uint8_t cnt)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	4613      	mov	r3, r2
 8005688:	71fb      	strb	r3, [r7, #7]
    uint8_t r1;
    if (SD_Type != SD_TYPE_V2HC)sector *= 512; //ת��Ϊ�ֽڵ�ַ
 800568a:	4b2a      	ldr	r3, [pc, #168]	; (8005734 <SD_WriteDisk+0xb8>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b06      	cmp	r3, #6
 8005690:	d002      	beq.n	8005698 <SD_WriteDisk+0x1c>
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	025b      	lsls	r3, r3, #9
 8005696:	60bb      	str	r3, [r7, #8]
    if (cnt == 1)
 8005698:	79fb      	ldrb	r3, [r7, #7]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d110      	bne.n	80056c0 <SD_WriteDisk+0x44>
    {
        r1 = SD_SendCmd(CMD24, sector, 0X01); //������
 800569e:	2201      	movs	r2, #1
 80056a0:	68b9      	ldr	r1, [r7, #8]
 80056a2:	2018      	movs	r0, #24
 80056a4:	f7ff fe59 	bl	800535a <SD_SendCmd>
 80056a8:	4603      	mov	r3, r0
 80056aa:	75fb      	strb	r3, [r7, #23]
        if (r1 == 0) //ָ��ͳɹ�
 80056ac:	7dfb      	ldrb	r3, [r7, #23]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d138      	bne.n	8005724 <SD_WriteDisk+0xa8>
        {
            r1 = SD_SendBlock(buf, 0xFE); //д512���ֽ�
 80056b2:	21fe      	movs	r1, #254	; 0xfe
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f7ff fe14 	bl	80052e2 <SD_SendBlock>
 80056ba:	4603      	mov	r3, r0
 80056bc:	75fb      	strb	r3, [r7, #23]
 80056be:	e031      	b.n	8005724 <SD_WriteDisk+0xa8>
        }
    }
    else
    {
        if (SD_Type != SD_TYPE_MMC)
 80056c0:	4b1c      	ldr	r3, [pc, #112]	; (8005734 <SD_WriteDisk+0xb8>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d00a      	beq.n	80056de <SD_WriteDisk+0x62>
        {
            SD_SendCmd(CMD55, 0, 0X01);
 80056c8:	2201      	movs	r2, #1
 80056ca:	2100      	movs	r1, #0
 80056cc:	2037      	movs	r0, #55	; 0x37
 80056ce:	f7ff fe44 	bl	800535a <SD_SendCmd>
            SD_SendCmd(CMD23, cnt, 0X01); //����ָ��
 80056d2:	79fb      	ldrb	r3, [r7, #7]
 80056d4:	2201      	movs	r2, #1
 80056d6:	4619      	mov	r1, r3
 80056d8:	2017      	movs	r0, #23
 80056da:	f7ff fe3e 	bl	800535a <SD_SendCmd>
        }
        r1 = SD_SendCmd(CMD25, sector, 0X01); //����������
 80056de:	2201      	movs	r2, #1
 80056e0:	68b9      	ldr	r1, [r7, #8]
 80056e2:	2019      	movs	r0, #25
 80056e4:	f7ff fe39 	bl	800535a <SD_SendCmd>
 80056e8:	4603      	mov	r3, r0
 80056ea:	75fb      	strb	r3, [r7, #23]
        if (r1 == 0)
 80056ec:	7dfb      	ldrb	r3, [r7, #23]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d118      	bne.n	8005724 <SD_WriteDisk+0xa8>
        {
            do
            {
                r1 = SD_SendBlock(buf, 0xFC); //����512���ֽ�
 80056f2:	21fc      	movs	r1, #252	; 0xfc
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f7ff fdf4 	bl	80052e2 <SD_SendBlock>
 80056fa:	4603      	mov	r3, r0
 80056fc:	75fb      	strb	r3, [r7, #23]
                buf += 512;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005704:	60fb      	str	r3, [r7, #12]
            }
            while (--cnt && r1 == 0);
 8005706:	79fb      	ldrb	r3, [r7, #7]
 8005708:	3b01      	subs	r3, #1
 800570a:	71fb      	strb	r3, [r7, #7]
 800570c:	79fb      	ldrb	r3, [r7, #7]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d002      	beq.n	8005718 <SD_WriteDisk+0x9c>
 8005712:	7dfb      	ldrb	r3, [r7, #23]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0ec      	beq.n	80056f2 <SD_WriteDisk+0x76>
            r1 = SD_SendBlock(0, 0xFD); //����512���ֽ�
 8005718:	21fd      	movs	r1, #253	; 0xfd
 800571a:	2000      	movs	r0, #0
 800571c:	f7ff fde1 	bl	80052e2 <SD_SendBlock>
 8005720:	4603      	mov	r3, r0
 8005722:	75fb      	strb	r3, [r7, #23]
        }
    }
    SD_DisSelect();//ȡ��Ƭѡ
 8005724:	f7ff fd56 	bl	80051d4 <SD_DisSelect>
    return r1;//
 8005728:	7dfb      	ldrb	r3, [r7, #23]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3718      	adds	r7, #24
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20000868 	.word	0x20000868

08005738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800573e:	2300      	movs	r3, #0
 8005740:	607b      	str	r3, [r7, #4]
 8005742:	4b10      	ldr	r3, [pc, #64]	; (8005784 <HAL_MspInit+0x4c>)
 8005744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005746:	4a0f      	ldr	r2, [pc, #60]	; (8005784 <HAL_MspInit+0x4c>)
 8005748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800574c:	6453      	str	r3, [r2, #68]	; 0x44
 800574e:	4b0d      	ldr	r3, [pc, #52]	; (8005784 <HAL_MspInit+0x4c>)
 8005750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005756:	607b      	str	r3, [r7, #4]
 8005758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800575a:	2300      	movs	r3, #0
 800575c:	603b      	str	r3, [r7, #0]
 800575e:	4b09      	ldr	r3, [pc, #36]	; (8005784 <HAL_MspInit+0x4c>)
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	4a08      	ldr	r2, [pc, #32]	; (8005784 <HAL_MspInit+0x4c>)
 8005764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005768:	6413      	str	r3, [r2, #64]	; 0x40
 800576a:	4b06      	ldr	r3, [pc, #24]	; (8005784 <HAL_MspInit+0x4c>)
 800576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005772:	603b      	str	r3, [r7, #0]
 8005774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005776:	bf00      	nop
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	40023800 	.word	0x40023800

08005788 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b08c      	sub	sp, #48	; 0x30
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005790:	f107 031c 	add.w	r3, r7, #28
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	605a      	str	r2, [r3, #4]
 800579a:	609a      	str	r2, [r3, #8]
 800579c:	60da      	str	r2, [r3, #12]
 800579e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a33      	ldr	r2, [pc, #204]	; (8005874 <HAL_I2C_MspInit+0xec>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d12d      	bne.n	8005806 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057aa:	2300      	movs	r3, #0
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	4b32      	ldr	r3, [pc, #200]	; (8005878 <HAL_I2C_MspInit+0xf0>)
 80057b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b2:	4a31      	ldr	r2, [pc, #196]	; (8005878 <HAL_I2C_MspInit+0xf0>)
 80057b4:	f043 0302 	orr.w	r3, r3, #2
 80057b8:	6313      	str	r3, [r2, #48]	; 0x30
 80057ba:	4b2f      	ldr	r3, [pc, #188]	; (8005878 <HAL_I2C_MspInit+0xf0>)
 80057bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	61bb      	str	r3, [r7, #24]
 80057c4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80057c6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80057ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057cc:	2312      	movs	r3, #18
 80057ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d0:	2300      	movs	r3, #0
 80057d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057d4:	2303      	movs	r3, #3
 80057d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80057d8:	2304      	movs	r3, #4
 80057da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057dc:	f107 031c 	add.w	r3, r7, #28
 80057e0:	4619      	mov	r1, r3
 80057e2:	4826      	ldr	r0, [pc, #152]	; (800587c <HAL_I2C_MspInit+0xf4>)
 80057e4:	f001 faf4 	bl	8006dd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80057e8:	2300      	movs	r3, #0
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	4b22      	ldr	r3, [pc, #136]	; (8005878 <HAL_I2C_MspInit+0xf0>)
 80057ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f0:	4a21      	ldr	r2, [pc, #132]	; (8005878 <HAL_I2C_MspInit+0xf0>)
 80057f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057f6:	6413      	str	r3, [r2, #64]	; 0x40
 80057f8:	4b1f      	ldr	r3, [pc, #124]	; (8005878 <HAL_I2C_MspInit+0xf0>)
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005800:	617b      	str	r3, [r7, #20]
 8005802:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005804:	e031      	b.n	800586a <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a1d      	ldr	r2, [pc, #116]	; (8005880 <HAL_I2C_MspInit+0xf8>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d12c      	bne.n	800586a <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005810:	2300      	movs	r3, #0
 8005812:	613b      	str	r3, [r7, #16]
 8005814:	4b18      	ldr	r3, [pc, #96]	; (8005878 <HAL_I2C_MspInit+0xf0>)
 8005816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005818:	4a17      	ldr	r2, [pc, #92]	; (8005878 <HAL_I2C_MspInit+0xf0>)
 800581a:	f043 0302 	orr.w	r3, r3, #2
 800581e:	6313      	str	r3, [r2, #48]	; 0x30
 8005820:	4b15      	ldr	r3, [pc, #84]	; (8005878 <HAL_I2C_MspInit+0xf0>)
 8005822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005824:	f003 0302 	and.w	r3, r3, #2
 8005828:	613b      	str	r3, [r7, #16]
 800582a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800582c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005832:	2312      	movs	r3, #18
 8005834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005836:	2300      	movs	r3, #0
 8005838:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800583a:	2303      	movs	r3, #3
 800583c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800583e:	2304      	movs	r3, #4
 8005840:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005842:	f107 031c 	add.w	r3, r7, #28
 8005846:	4619      	mov	r1, r3
 8005848:	480c      	ldr	r0, [pc, #48]	; (800587c <HAL_I2C_MspInit+0xf4>)
 800584a:	f001 fac1 	bl	8006dd0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	4b09      	ldr	r3, [pc, #36]	; (8005878 <HAL_I2C_MspInit+0xf0>)
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	4a08      	ldr	r2, [pc, #32]	; (8005878 <HAL_I2C_MspInit+0xf0>)
 8005858:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800585c:	6413      	str	r3, [r2, #64]	; 0x40
 800585e:	4b06      	ldr	r3, [pc, #24]	; (8005878 <HAL_I2C_MspInit+0xf0>)
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005866:	60fb      	str	r3, [r7, #12]
 8005868:	68fb      	ldr	r3, [r7, #12]
}
 800586a:	bf00      	nop
 800586c:	3730      	adds	r7, #48	; 0x30
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	40005400 	.word	0x40005400
 8005878:	40023800 	.word	0x40023800
 800587c:	40020400 	.word	0x40020400
 8005880:	40005800 	.word	0x40005800

08005884 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a15      	ldr	r2, [pc, #84]	; (80058e8 <HAL_I2C_MspDeInit+0x64>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d10f      	bne.n	80058b6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8005896:	4b15      	ldr	r3, [pc, #84]	; (80058ec <HAL_I2C_MspDeInit+0x68>)
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	4a14      	ldr	r2, [pc, #80]	; (80058ec <HAL_I2C_MspDeInit+0x68>)
 800589c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058a0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80058a2:	2140      	movs	r1, #64	; 0x40
 80058a4:	4812      	ldr	r0, [pc, #72]	; (80058f0 <HAL_I2C_MspDeInit+0x6c>)
 80058a6:	f001 fc2f 	bl	8007108 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80058aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058ae:	4810      	ldr	r0, [pc, #64]	; (80058f0 <HAL_I2C_MspDeInit+0x6c>)
 80058b0:	f001 fc2a 	bl	8007108 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80058b4:	e014      	b.n	80058e0 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C2)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a0e      	ldr	r2, [pc, #56]	; (80058f4 <HAL_I2C_MspDeInit+0x70>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d10f      	bne.n	80058e0 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C2_CLK_DISABLE();
 80058c0:	4b0a      	ldr	r3, [pc, #40]	; (80058ec <HAL_I2C_MspDeInit+0x68>)
 80058c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c4:	4a09      	ldr	r2, [pc, #36]	; (80058ec <HAL_I2C_MspDeInit+0x68>)
 80058c6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80058ca:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80058cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80058d0:	4807      	ldr	r0, [pc, #28]	; (80058f0 <HAL_I2C_MspDeInit+0x6c>)
 80058d2:	f001 fc19 	bl	8007108 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80058d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058da:	4805      	ldr	r0, [pc, #20]	; (80058f0 <HAL_I2C_MspDeInit+0x6c>)
 80058dc:	f001 fc14 	bl	8007108 <HAL_GPIO_DeInit>
}
 80058e0:	bf00      	nop
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	40005400 	.word	0x40005400
 80058ec:	40023800 	.word	0x40023800
 80058f0:	40020400 	.word	0x40020400
 80058f4:	40005800 	.word	0x40005800

080058f8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08e      	sub	sp, #56	; 0x38
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	605a      	str	r2, [r3, #4]
 800590a:	609a      	str	r2, [r3, #8]
 800590c:	60da      	str	r2, [r3, #12]
 800590e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005910:	f107 0314 	add.w	r3, r7, #20
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	605a      	str	r2, [r3, #4]
 800591a:	609a      	str	r2, [r3, #8]
 800591c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a4e      	ldr	r2, [pc, #312]	; (8005a5c <HAL_I2S_MspInit+0x164>)
 8005924:	4293      	cmp	r3, r2
 8005926:	f040 8095 	bne.w	8005a54 <HAL_I2S_MspInit+0x15c>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800592a:	2301      	movs	r3, #1
 800592c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 800592e:	f240 130f 	movw	r3, #271	; 0x10f
 8005932:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 8005934:	2306      	movs	r3, #6
 8005936:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005938:	f107 0314 	add.w	r3, r7, #20
 800593c:	4618      	mov	r0, r3
 800593e:	f004 fbf9 	bl	800a134 <HAL_RCCEx_PeriphCLKConfig>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 8005948:	f7ff fbdc 	bl	8005104 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800594c:	2300      	movs	r3, #0
 800594e:	613b      	str	r3, [r7, #16]
 8005950:	4b43      	ldr	r3, [pc, #268]	; (8005a60 <HAL_I2S_MspInit+0x168>)
 8005952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005954:	4a42      	ldr	r2, [pc, #264]	; (8005a60 <HAL_I2S_MspInit+0x168>)
 8005956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800595a:	6413      	str	r3, [r2, #64]	; 0x40
 800595c:	4b40      	ldr	r3, [pc, #256]	; (8005a60 <HAL_I2S_MspInit+0x168>)
 800595e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005964:	613b      	str	r3, [r7, #16]
 8005966:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005968:	2300      	movs	r3, #0
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	4b3c      	ldr	r3, [pc, #240]	; (8005a60 <HAL_I2S_MspInit+0x168>)
 800596e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005970:	4a3b      	ldr	r2, [pc, #236]	; (8005a60 <HAL_I2S_MspInit+0x168>)
 8005972:	f043 0301 	orr.w	r3, r3, #1
 8005976:	6313      	str	r3, [r2, #48]	; 0x30
 8005978:	4b39      	ldr	r3, [pc, #228]	; (8005a60 <HAL_I2S_MspInit+0x168>)
 800597a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	60fb      	str	r3, [r7, #12]
 8005982:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005984:	2300      	movs	r3, #0
 8005986:	60bb      	str	r3, [r7, #8]
 8005988:	4b35      	ldr	r3, [pc, #212]	; (8005a60 <HAL_I2S_MspInit+0x168>)
 800598a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598c:	4a34      	ldr	r2, [pc, #208]	; (8005a60 <HAL_I2S_MspInit+0x168>)
 800598e:	f043 0304 	orr.w	r3, r3, #4
 8005992:	6313      	str	r3, [r2, #48]	; 0x30
 8005994:	4b32      	ldr	r3, [pc, #200]	; (8005a60 <HAL_I2S_MspInit+0x168>)
 8005996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005998:	f003 0304 	and.w	r3, r3, #4
 800599c:	60bb      	str	r3, [r7, #8]
 800599e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80059a0:	2310      	movs	r3, #16
 80059a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059a4:	2302      	movs	r3, #2
 80059a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059a8:	2300      	movs	r3, #0
 80059aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059ac:	2300      	movs	r3, #0
 80059ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80059b0:	2306      	movs	r3, #6
 80059b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059b8:	4619      	mov	r1, r3
 80059ba:	482a      	ldr	r0, [pc, #168]	; (8005a64 <HAL_I2S_MspInit+0x16c>)
 80059bc:	f001 fa08 	bl	8006dd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80059c0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80059c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059c6:	2302      	movs	r3, #2
 80059c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ca:	2300      	movs	r3, #0
 80059cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059ce:	2300      	movs	r3, #0
 80059d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80059d2:	2306      	movs	r3, #6
 80059d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059da:	4619      	mov	r1, r3
 80059dc:	4822      	ldr	r0, [pc, #136]	; (8005a68 <HAL_I2S_MspInit+0x170>)
 80059de:	f001 f9f7 	bl	8006dd0 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80059e2:	4b22      	ldr	r3, [pc, #136]	; (8005a6c <HAL_I2S_MspInit+0x174>)
 80059e4:	4a22      	ldr	r2, [pc, #136]	; (8005a70 <HAL_I2S_MspInit+0x178>)
 80059e6:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80059e8:	4b20      	ldr	r3, [pc, #128]	; (8005a6c <HAL_I2S_MspInit+0x174>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80059ee:	4b1f      	ldr	r3, [pc, #124]	; (8005a6c <HAL_I2S_MspInit+0x174>)
 80059f0:	2240      	movs	r2, #64	; 0x40
 80059f2:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059f4:	4b1d      	ldr	r3, [pc, #116]	; (8005a6c <HAL_I2S_MspInit+0x174>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80059fa:	4b1c      	ldr	r3, [pc, #112]	; (8005a6c <HAL_I2S_MspInit+0x174>)
 80059fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a00:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005a02:	4b1a      	ldr	r3, [pc, #104]	; (8005a6c <HAL_I2S_MspInit+0x174>)
 8005a04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a08:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005a0a:	4b18      	ldr	r3, [pc, #96]	; (8005a6c <HAL_I2S_MspInit+0x174>)
 8005a0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a10:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8005a12:	4b16      	ldr	r3, [pc, #88]	; (8005a6c <HAL_I2S_MspInit+0x174>)
 8005a14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a18:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005a1a:	4b14      	ldr	r3, [pc, #80]	; (8005a6c <HAL_I2S_MspInit+0x174>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005a20:	4b12      	ldr	r3, [pc, #72]	; (8005a6c <HAL_I2S_MspInit+0x174>)
 8005a22:	2204      	movs	r2, #4
 8005a24:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005a26:	4b11      	ldr	r3, [pc, #68]	; (8005a6c <HAL_I2S_MspInit+0x174>)
 8005a28:	2203      	movs	r2, #3
 8005a2a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8005a2c:	4b0f      	ldr	r3, [pc, #60]	; (8005a6c <HAL_I2S_MspInit+0x174>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005a32:	4b0e      	ldr	r3, [pc, #56]	; (8005a6c <HAL_I2S_MspInit+0x174>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8005a38:	480c      	ldr	r0, [pc, #48]	; (8005a6c <HAL_I2S_MspInit+0x174>)
 8005a3a:	f000 fd8b 	bl	8006554 <HAL_DMA_Init>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <HAL_I2S_MspInit+0x150>
    {
      Error_Handler();
 8005a44:	f7ff fb5e 	bl	8005104 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a08      	ldr	r2, [pc, #32]	; (8005a6c <HAL_I2S_MspInit+0x174>)
 8005a4c:	639a      	str	r2, [r3, #56]	; 0x38
 8005a4e:	4a07      	ldr	r2, [pc, #28]	; (8005a6c <HAL_I2S_MspInit+0x174>)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005a54:	bf00      	nop
 8005a56:	3738      	adds	r7, #56	; 0x38
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	40003c00 	.word	0x40003c00
 8005a60:	40023800 	.word	0x40023800
 8005a64:	40020000 	.word	0x40020000
 8005a68:	40020800 	.word	0x40020800
 8005a6c:	20000758 	.word	0x20000758
 8005a70:	40026088 	.word	0x40026088

08005a74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08a      	sub	sp, #40	; 0x28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a7c:	f107 0314 	add.w	r3, r7, #20
 8005a80:	2200      	movs	r2, #0
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	605a      	str	r2, [r3, #4]
 8005a86:	609a      	str	r2, [r3, #8]
 8005a88:	60da      	str	r2, [r3, #12]
 8005a8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a19      	ldr	r2, [pc, #100]	; (8005af8 <HAL_SPI_MspInit+0x84>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d12b      	bne.n	8005aee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005a96:	2300      	movs	r3, #0
 8005a98:	613b      	str	r3, [r7, #16]
 8005a9a:	4b18      	ldr	r3, [pc, #96]	; (8005afc <HAL_SPI_MspInit+0x88>)
 8005a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a9e:	4a17      	ldr	r2, [pc, #92]	; (8005afc <HAL_SPI_MspInit+0x88>)
 8005aa0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8005aa6:	4b15      	ldr	r3, [pc, #84]	; (8005afc <HAL_SPI_MspInit+0x88>)
 8005aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005aae:	613b      	str	r3, [r7, #16]
 8005ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	4b11      	ldr	r3, [pc, #68]	; (8005afc <HAL_SPI_MspInit+0x88>)
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	4a10      	ldr	r2, [pc, #64]	; (8005afc <HAL_SPI_MspInit+0x88>)
 8005abc:	f043 0301 	orr.w	r3, r3, #1
 8005ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ac2:	4b0e      	ldr	r3, [pc, #56]	; (8005afc <HAL_SPI_MspInit+0x88>)
 8005ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005ace:	23e0      	movs	r3, #224	; 0xe0
 8005ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ada:	2303      	movs	r3, #3
 8005adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005ade:	2305      	movs	r3, #5
 8005ae0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ae2:	f107 0314 	add.w	r3, r7, #20
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	4805      	ldr	r0, [pc, #20]	; (8005b00 <HAL_SPI_MspInit+0x8c>)
 8005aea:	f001 f971 	bl	8006dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005aee:	bf00      	nop
 8005af0:	3728      	adds	r7, #40	; 0x28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	40013000 	.word	0x40013000
 8005afc:	40023800 	.word	0x40023800
 8005b00:	40020000 	.word	0x40020000

08005b04 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a08      	ldr	r2, [pc, #32]	; (8005b34 <HAL_SPI_MspDeInit+0x30>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d109      	bne.n	8005b2a <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8005b16:	4b08      	ldr	r3, [pc, #32]	; (8005b38 <HAL_SPI_MspDeInit+0x34>)
 8005b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1a:	4a07      	ldr	r2, [pc, #28]	; (8005b38 <HAL_SPI_MspDeInit+0x34>)
 8005b1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b20:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8005b22:	21e0      	movs	r1, #224	; 0xe0
 8005b24:	4805      	ldr	r0, [pc, #20]	; (8005b3c <HAL_SPI_MspDeInit+0x38>)
 8005b26:	f001 faef 	bl	8007108 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8005b2a:	bf00      	nop
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	40013000 	.word	0x40013000
 8005b38:	40023800 	.word	0x40023800
 8005b3c:	40020000 	.word	0x40020000

08005b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08a      	sub	sp, #40	; 0x28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b48:	f107 0314 	add.w	r3, r7, #20
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	605a      	str	r2, [r3, #4]
 8005b52:	609a      	str	r2, [r3, #8]
 8005b54:	60da      	str	r2, [r3, #12]
 8005b56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a19      	ldr	r2, [pc, #100]	; (8005bc4 <HAL_UART_MspInit+0x84>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d12b      	bne.n	8005bba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005b62:	2300      	movs	r3, #0
 8005b64:	613b      	str	r3, [r7, #16]
 8005b66:	4b18      	ldr	r3, [pc, #96]	; (8005bc8 <HAL_UART_MspInit+0x88>)
 8005b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6a:	4a17      	ldr	r2, [pc, #92]	; (8005bc8 <HAL_UART_MspInit+0x88>)
 8005b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b70:	6413      	str	r3, [r2, #64]	; 0x40
 8005b72:	4b15      	ldr	r3, [pc, #84]	; (8005bc8 <HAL_UART_MspInit+0x88>)
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b7a:	613b      	str	r3, [r7, #16]
 8005b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60fb      	str	r3, [r7, #12]
 8005b82:	4b11      	ldr	r3, [pc, #68]	; (8005bc8 <HAL_UART_MspInit+0x88>)
 8005b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b86:	4a10      	ldr	r2, [pc, #64]	; (8005bc8 <HAL_UART_MspInit+0x88>)
 8005b88:	f043 0301 	orr.w	r3, r3, #1
 8005b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b8e:	4b0e      	ldr	r3, [pc, #56]	; (8005bc8 <HAL_UART_MspInit+0x88>)
 8005b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005b9a:	230c      	movs	r3, #12
 8005b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005baa:	2307      	movs	r3, #7
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bae:	f107 0314 	add.w	r3, r7, #20
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4805      	ldr	r0, [pc, #20]	; (8005bcc <HAL_UART_MspInit+0x8c>)
 8005bb6:	f001 f90b 	bl	8006dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005bba:	bf00      	nop
 8005bbc:	3728      	adds	r7, #40	; 0x28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	40004400 	.word	0x40004400
 8005bc8:	40023800 	.word	0x40023800
 8005bcc:	40020000 	.word	0x40020000

08005bd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b08c      	sub	sp, #48	; 0x30
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8005be0:	2200      	movs	r2, #0
 8005be2:	6879      	ldr	r1, [r7, #4]
 8005be4:	2037      	movs	r0, #55	; 0x37
 8005be6:	f000 fc8b 	bl	8006500 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005bea:	2037      	movs	r0, #55	; 0x37
 8005bec:	f000 fca4 	bl	8006538 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	4b1f      	ldr	r3, [pc, #124]	; (8005c74 <HAL_InitTick+0xa4>)
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf8:	4a1e      	ldr	r2, [pc, #120]	; (8005c74 <HAL_InitTick+0xa4>)
 8005bfa:	f043 0320 	orr.w	r3, r3, #32
 8005bfe:	6413      	str	r3, [r2, #64]	; 0x40
 8005c00:	4b1c      	ldr	r3, [pc, #112]	; (8005c74 <HAL_InitTick+0xa4>)
 8005c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c04:	f003 0320 	and.w	r3, r3, #32
 8005c08:	60fb      	str	r3, [r7, #12]
 8005c0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005c0c:	f107 0210 	add.w	r2, r7, #16
 8005c10:	f107 0314 	add.w	r3, r7, #20
 8005c14:	4611      	mov	r1, r2
 8005c16:	4618      	mov	r0, r3
 8005c18:	f004 fa5a 	bl	800a0d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005c1c:	f004 fa30 	bl	800a080 <HAL_RCC_GetPCLK1Freq>
 8005c20:	4603      	mov	r3, r0
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c28:	4a13      	ldr	r2, [pc, #76]	; (8005c78 <HAL_InitTick+0xa8>)
 8005c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2e:	0c9b      	lsrs	r3, r3, #18
 8005c30:	3b01      	subs	r3, #1
 8005c32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8005c34:	4b11      	ldr	r3, [pc, #68]	; (8005c7c <HAL_InitTick+0xac>)
 8005c36:	4a12      	ldr	r2, [pc, #72]	; (8005c80 <HAL_InitTick+0xb0>)
 8005c38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8005c3a:	4b10      	ldr	r3, [pc, #64]	; (8005c7c <HAL_InitTick+0xac>)
 8005c3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005c40:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8005c42:	4a0e      	ldr	r2, [pc, #56]	; (8005c7c <HAL_InitTick+0xac>)
 8005c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c46:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8005c48:	4b0c      	ldr	r3, [pc, #48]	; (8005c7c <HAL_InitTick+0xac>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c4e:	4b0b      	ldr	r3, [pc, #44]	; (8005c7c <HAL_InitTick+0xac>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8005c54:	4809      	ldr	r0, [pc, #36]	; (8005c7c <HAL_InitTick+0xac>)
 8005c56:	f004 fef7 	bl	800aa48 <HAL_TIM_Base_Init>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d104      	bne.n	8005c6a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8005c60:	4806      	ldr	r0, [pc, #24]	; (8005c7c <HAL_InitTick+0xac>)
 8005c62:	f004 ff4b 	bl	800aafc <HAL_TIM_Base_Start_IT>
 8005c66:	4603      	mov	r3, r0
 8005c68:	e000      	b.n	8005c6c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3730      	adds	r7, #48	; 0x30
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	40023800 	.word	0x40023800
 8005c78:	431bde83 	.word	0x431bde83
 8005c7c:	2000086c 	.word	0x2000086c
 8005c80:	40001400 	.word	0x40001400

08005c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005c88:	e7fe      	b.n	8005c88 <NMI_Handler+0x4>

08005c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c8e:	e7fe      	b.n	8005c8e <HardFault_Handler+0x4>

08005c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c90:	b480      	push	{r7}
 8005c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c94:	e7fe      	b.n	8005c94 <MemManage_Handler+0x4>

08005c96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c96:	b480      	push	{r7}
 8005c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c9a:	e7fe      	b.n	8005c9a <BusFault_Handler+0x4>

08005c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ca0:	e7fe      	b.n	8005ca0 <UsageFault_Handler+0x4>

08005ca2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005ca6:	bf00      	nop
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005cb4:	2001      	movs	r0, #1
 8005cb6:	f001 fb3d 	bl	8007334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005cba:	bf00      	nop
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005cc2:	2002      	movs	r0, #2
 8005cc4:	f001 fb36 	bl	8007334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005cc8:	bf00      	nop
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005cd0:	2004      	movs	r0, #4
 8005cd2:	f001 fb2f 	bl	8007334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005cd6:	bf00      	nop
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005cde:	2008      	movs	r0, #8
 8005ce0:	f001 fb28 	bl	8007334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005ce4:	bf00      	nop
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005cec:	2010      	movs	r0, #16
 8005cee:	f001 fb21 	bl	8007334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005cf2:	bf00      	nop
 8005cf4:	bd80      	pop	{r7, pc}
	...

08005cf8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8005cfc:	4802      	ldr	r0, [pc, #8]	; (8005d08 <DMA1_Stream5_IRQHandler+0x10>)
 8005cfe:	f000 fdfd 	bl	80068fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005d02:	bf00      	nop
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	20000758 	.word	0x20000758

08005d0c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005d10:	4802      	ldr	r0, [pc, #8]	; (8005d1c <TIM7_IRQHandler+0x10>)
 8005d12:	f004 ff63 	bl	800abdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005d16:	bf00      	nop
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	2000086c 	.word	0x2000086c

08005d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005d28:	4a14      	ldr	r2, [pc, #80]	; (8005d7c <_sbrk+0x5c>)
 8005d2a:	4b15      	ldr	r3, [pc, #84]	; (8005d80 <_sbrk+0x60>)
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005d34:	4b13      	ldr	r3, [pc, #76]	; (8005d84 <_sbrk+0x64>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d102      	bne.n	8005d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005d3c:	4b11      	ldr	r3, [pc, #68]	; (8005d84 <_sbrk+0x64>)
 8005d3e:	4a12      	ldr	r2, [pc, #72]	; (8005d88 <_sbrk+0x68>)
 8005d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005d42:	4b10      	ldr	r3, [pc, #64]	; (8005d84 <_sbrk+0x64>)
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4413      	add	r3, r2
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d207      	bcs.n	8005d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005d50:	f008 f80c 	bl	800dd6c <__errno>
 8005d54:	4603      	mov	r3, r0
 8005d56:	220c      	movs	r2, #12
 8005d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d5e:	e009      	b.n	8005d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005d60:	4b08      	ldr	r3, [pc, #32]	; (8005d84 <_sbrk+0x64>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005d66:	4b07      	ldr	r3, [pc, #28]	; (8005d84 <_sbrk+0x64>)
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	4a05      	ldr	r2, [pc, #20]	; (8005d84 <_sbrk+0x64>)
 8005d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005d72:	68fb      	ldr	r3, [r7, #12]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	20020000 	.word	0x20020000
 8005d80:	00000400 	.word	0x00000400
 8005d84:	200008b4 	.word	0x200008b4
 8005d88:	20014d90 	.word	0x20014d90

08005d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d90:	4b06      	ldr	r3, [pc, #24]	; (8005dac <SystemInit+0x20>)
 8005d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d96:	4a05      	ldr	r2, [pc, #20]	; (8005dac <SystemInit+0x20>)
 8005d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005da0:	bf00      	nop
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	e000ed00 	.word	0xe000ed00

08005db0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
    BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b0c2      	sub	sp, #264	; 0x108
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	4602      	mov	r2, r0
 8005db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dbc:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8005dc0:	701a      	strb	r2, [r3, #0]
    /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8005dc2:	4b21      	ldr	r3, [pc, #132]	; (8005e48 <USER_initialize+0x98>)
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	701a      	strb	r2, [r3, #0]

    char buf[256];
    sprintf(buf, "# SD Card Init ");
 8005dc8:	f107 0308 	add.w	r3, r7, #8
 8005dcc:	491f      	ldr	r1, [pc, #124]	; (8005e4c <USER_initialize+0x9c>)
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f008 f80c 	bl	800ddec <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 8005dd4:	f107 0308 	add.w	r3, r7, #8
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fa f9f9 	bl	80001d0 <strlen>
 8005dde:	4603      	mov	r3, r0
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	f107 0108 	add.w	r1, r7, #8
 8005de6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005dea:	4819      	ldr	r0, [pc, #100]	; (8005e50 <USER_initialize+0xa0>)
 8005dec:	f005 f927 	bl	800b03e <HAL_UART_Transmit>
    if(SD_Initialize() == 0)
 8005df0:	f7ff fb04 	bl	80053fc <SD_Initialize>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d102      	bne.n	8005e00 <USER_initialize+0x50>
    {
        Stat = RES_OK;
 8005dfa:	4b13      	ldr	r3, [pc, #76]	; (8005e48 <USER_initialize+0x98>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	701a      	strb	r2, [r3, #0]
    }
    sprintf(buf, "%s!\r\n", Stat == RES_OK ? "Successfully" : "Failed");
 8005e00:	4b11      	ldr	r3, [pc, #68]	; (8005e48 <USER_initialize+0x98>)
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <USER_initialize+0x5e>
 8005e0a:	4a12      	ldr	r2, [pc, #72]	; (8005e54 <USER_initialize+0xa4>)
 8005e0c:	e000      	b.n	8005e10 <USER_initialize+0x60>
 8005e0e:	4a12      	ldr	r2, [pc, #72]	; (8005e58 <USER_initialize+0xa8>)
 8005e10:	f107 0308 	add.w	r3, r7, #8
 8005e14:	4911      	ldr	r1, [pc, #68]	; (8005e5c <USER_initialize+0xac>)
 8005e16:	4618      	mov	r0, r3
 8005e18:	f007 ffe8 	bl	800ddec <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 8005e1c:	f107 0308 	add.w	r3, r7, #8
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7fa f9d5 	bl	80001d0 <strlen>
 8005e26:	4603      	mov	r3, r0
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	f107 0108 	add.w	r1, r7, #8
 8005e2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e32:	4807      	ldr	r0, [pc, #28]	; (8005e50 <USER_initialize+0xa0>)
 8005e34:	f005 f903 	bl	800b03e <HAL_UART_Transmit>

    return Stat;
 8005e38:	4b03      	ldr	r3, [pc, #12]	; (8005e48 <USER_initialize+0x98>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	b2db      	uxtb	r3, r3
    /* USER CODE END INIT */
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	2000005c 	.word	0x2000005c
 8005e4c:	0800e9f8 	.word	0x0800e9f8
 8005e50:	20000810 	.word	0x20000810
 8005e54:	0800ea08 	.word	0x0800ea08
 8005e58:	0800ea18 	.word	0x0800ea18
 8005e5c:	0800ea20 	.word	0x0800ea20

08005e60 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
    BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	4603      	mov	r3, r0
 8005e68:	71fb      	strb	r3, [r7, #7]
    /* USER CODE BEGIN STATUS */
    return RES_OK;
 8005e6a:	2300      	movs	r3, #0
    /* USER CODE END STATUS */
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <USER_read>:
    BYTE pdrv,      /* Physical drive nmuber to identify the drive */
    BYTE *buff,     /* Data buffer to store read data */
    DWORD sector,   /* Sector address in LBA */
    UINT count      /* Number of sectors to read */
)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	607a      	str	r2, [r7, #4]
 8005e82:	603b      	str	r3, [r7, #0]
 8005e84:	4603      	mov	r3, r0
 8005e86:	73fb      	strb	r3, [r7, #15]
    /* USER CODE BEGIN READ */
    return SD_ReadDisk(buff, sector, count) == 0 ? RES_OK : RES_ERROR;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	6879      	ldr	r1, [r7, #4]
 8005e90:	68b8      	ldr	r0, [r7, #8]
 8005e92:	f7ff fba7 	bl	80055e4 <SD_ReadDisk>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	bf14      	ite	ne
 8005e9c:	2301      	movne	r3, #1
 8005e9e:	2300      	moveq	r3, #0
 8005ea0:	b2db      	uxtb	r3, r3
    /* USER CODE END READ */
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <USER_write>:
    BYTE pdrv,          /* Physical drive nmuber to identify the drive */
    const BYTE *buff,   /* Data to be written */
    DWORD sector,       /* Sector address in LBA */
    UINT count          /* Number of sectors to write */
)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b084      	sub	sp, #16
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
 8005eb4:	603b      	str	r3, [r7, #0]
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	73fb      	strb	r3, [r7, #15]
    /* USER CODE BEGIN WRITE */
    /* USER CODE HERE */
    return SD_WriteDisk((uint8_t *)buff, sector, count) == 0 ? RES_OK : RES_ERROR;;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	6879      	ldr	r1, [r7, #4]
 8005ec2:	68b8      	ldr	r0, [r7, #8]
 8005ec4:	f7ff fbda 	bl	800567c <SD_WriteDisk>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	bf14      	ite	ne
 8005ece:	2301      	movne	r3, #1
 8005ed0:	2300      	moveq	r3, #0
 8005ed2:	b2db      	uxtb	r3, r3
    /* USER CODE END WRITE */
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <USER_ioctl>:
DRESULT USER_ioctl (
    BYTE pdrv,      /* Physical drive nmuber (0..) */
    BYTE cmd,       /* Control code */
    void *buff      /* Buffer to send/receive control data */
)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	603a      	str	r2, [r7, #0]
 8005ee6:	71fb      	strb	r3, [r7, #7]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	71bb      	strb	r3, [r7, #6]
    /* USER CODE BEGIN IOCTL */
    return RES_OK;
 8005eec:	2300      	movs	r3, #0
    /* USER CODE END IOCTL */
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
	...

08005efc <PlayerInit>:

FIL WavFile;

/* Private function prototypes -----------------------------------------------*/
uint8_t PlayerInit(uint32_t AudioFreq)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
	/* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */
	if(AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 8005f04:	4b08      	ldr	r3, [pc, #32]	; (8005f28 <PlayerInit+0x2c>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	2003      	movs	r0, #3
 8005f10:	f7fa fb38 	bl	8000584 <AUDIO_OUT_Init>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <PlayerInit+0x22>
	{
		return 1;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e000      	b.n	8005f20 <PlayerInit+0x24>
	}
	else
	{
		return 0;
 8005f1e:	2300      	movs	r3, #0
	}
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	20000074 	.word	0x20000074

08005f2c <AUDIO_PLAYER_Start>:
  * @brief  Starts Audio streaming.    
  * @param  idx: File index
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	4603      	mov	r3, r0
 8005f34:	71fb      	strb	r3, [r7, #7]
  uint bytesread;

  f_close(&WavFile);
 8005f36:	4828      	ldr	r0, [pc, #160]	; (8005fd8 <AUDIO_PLAYER_Start+0xac>)
 8005f38:	f7fd fdd6 	bl	8003ae8 <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 8005f3c:	f7fa ff76 	bl	8000e2c <AUDIO_GetWavObjectNumber>
 8005f40:	4603      	mov	r3, r0
 8005f42:	461a      	mov	r2, r3
 8005f44:	79fb      	ldrb	r3, [r7, #7]
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d93f      	bls.n	8005fcc <AUDIO_PLAYER_Start+0xa0>
  {

    //Open WAV file
    f_open(&WavFile, (char *)FileList.file[idx].name, FA_READ);
 8005f4c:	79fa      	ldrb	r2, [r7, #7]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	4413      	add	r3, r2
 8005f58:	4a20      	ldr	r2, [pc, #128]	; (8005fdc <AUDIO_PLAYER_Start+0xb0>)
 8005f5a:	4413      	add	r3, r2
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	2201      	movs	r2, #1
 8005f60:	4619      	mov	r1, r3
 8005f62:	481d      	ldr	r0, [pc, #116]	; (8005fd8 <AUDIO_PLAYER_Start+0xac>)
 8005f64:	f7fd fa40 	bl	80033e8 <f_open>
    //Read WAV file Header
    f_read(&WavFile, &WaveFormat, sizeof(WaveFormat), &bytesread);
 8005f68:	f107 030c 	add.w	r3, r7, #12
 8005f6c:	222c      	movs	r2, #44	; 0x2c
 8005f6e:	491c      	ldr	r1, [pc, #112]	; (8005fe0 <AUDIO_PLAYER_Start+0xb4>)
 8005f70:	4819      	ldr	r0, [pc, #100]	; (8005fd8 <AUDIO_PLAYER_Start+0xac>)
 8005f72:	f7fd fbf9 	bl	8003768 <f_read>
    
    /*Adjust the Audio frequency */
    PlayerInit(WaveFormat.SampleRate);
 8005f76:	4b1a      	ldr	r3, [pc, #104]	; (8005fe0 <AUDIO_PLAYER_Start+0xb4>)
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7ff ffbe 	bl	8005efc <PlayerInit>
    
    BufferCtl.state = BUFFER_OFFSET_NONE;
 8005f80:	4b18      	ldr	r3, [pc, #96]	; (8005fe4 <AUDIO_PLAYER_Start+0xb8>)
 8005f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f86:	2200      	movs	r2, #0
 8005f88:	701a      	strb	r2, [r3, #0]
    
    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 0);
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	4812      	ldr	r0, [pc, #72]	; (8005fd8 <AUDIO_PLAYER_Start+0xac>)
 8005f8e:	f7fd fdd5 	bl	8003b3c <f_lseek>
    
    /* Fill whole buffer at first time */
    if(f_read(&WavFile,&BufferCtl.buff[0],AUDIO_OUT_BUFFER_SIZE,(void *)&bytesread) == FR_OK)
 8005f92:	f107 030c 	add.w	r3, r7, #12
 8005f96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f9a:	4912      	ldr	r1, [pc, #72]	; (8005fe4 <AUDIO_PLAYER_Start+0xb8>)
 8005f9c:	480e      	ldr	r0, [pc, #56]	; (8005fd8 <AUDIO_PLAYER_Start+0xac>)
 8005f9e:	f7fd fbe3 	bl	8003768 <f_read>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d111      	bne.n	8005fcc <AUDIO_PLAYER_Start+0xa0>
    {
      AudioState = AUDIO_STATE_PLAY;
 8005fa8:	4b0f      	ldr	r3, [pc, #60]	; (8005fe8 <AUDIO_PLAYER_Start+0xbc>)
 8005faa:	2203      	movs	r2, #3
 8005fac:	701a      	strb	r2, [r3, #0]
        if(bytesread != 0)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00b      	beq.n	8005fcc <AUDIO_PLAYER_Start+0xa0>
        {
          AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8005fb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005fb8:	480a      	ldr	r0, [pc, #40]	; (8005fe4 <AUDIO_PLAYER_Start+0xb8>)
 8005fba:	f7fa fb31 	bl	8000620 <AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	4a08      	ldr	r2, [pc, #32]	; (8005fe4 <AUDIO_PLAYER_Start+0xb8>)
 8005fc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005fc6:	6053      	str	r3, [r2, #4]
          return AUDIO_ERROR_NONE;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	e000      	b.n	8005fce <AUDIO_PLAYER_Start+0xa2>
        }
      }
  }
  return AUDIO_ERROR_IO;
 8005fcc:	2301      	movs	r3, #1
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20001ccc 	.word	0x20001ccc
 8005fdc:	200018c4 	.word	0x200018c4
 8005fe0:	20001ca0 	.word	0x20001ca0
 8005fe4:	200008b8 	.word	0x200008b8
 8005fe8:	200018c0 	.word	0x200018c0

08005fec <AUDIO_PLAYER_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(bool isLoop)
{
 8005fec:	b590      	push	{r4, r7, lr}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	73fb      	strb	r3, [r7, #15]
  
  switch(AudioState)
 8005ffa:	4b82      	ldr	r3, [pc, #520]	; (8006204 <AUDIO_PLAYER_Process+0x218>)
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	3b03      	subs	r3, #3
 8006000:	2b0a      	cmp	r3, #10
 8006002:	f200 80f6 	bhi.w	80061f2 <AUDIO_PLAYER_Process+0x206>
 8006006:	a201      	add	r2, pc, #4	; (adr r2, 800600c <AUDIO_PLAYER_Process+0x20>)
 8006008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600c:	08006039 	.word	0x08006039
 8006010:	080061f3 	.word	0x080061f3
 8006014:	080060ff 	.word	0x080060ff
 8006018:	0800614d 	.word	0x0800614d
 800601c:	080061f3 	.word	0x080061f3
 8006020:	080061f3 	.word	0x080061f3
 8006024:	080060ed 	.word	0x080060ed
 8006028:	0800618f 	.word	0x0800618f
 800602c:	0800619b 	.word	0x0800619b
 8006030:	080061a7 	.word	0x080061a7
 8006034:	080061cd 	.word	0x080061cd
  {
  case AUDIO_STATE_PLAY:
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 8006038:	4b73      	ldr	r3, [pc, #460]	; (8006208 <AUDIO_PLAYER_Process+0x21c>)
 800603a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	4b72      	ldr	r3, [pc, #456]	; (800620c <AUDIO_PLAYER_Process+0x220>)
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	429a      	cmp	r2, r3
 8006046:	d305      	bcc.n	8006054 <AUDIO_PLAYER_Process+0x68>
    {
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8006048:	2002      	movs	r0, #2
 800604a:	f7fa fb3f 	bl	80006cc <AUDIO_OUT_Stop>
      AudioState = AUDIO_STATE_NEXT;
 800604e:	4b6d      	ldr	r3, [pc, #436]	; (8006204 <AUDIO_PLAYER_Process+0x218>)
 8006050:	2205      	movs	r2, #5
 8006052:	701a      	strb	r2, [r3, #0]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 8006054:	4b6c      	ldr	r3, [pc, #432]	; (8006208 <AUDIO_PLAYER_Process+0x21c>)
 8006056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d11e      	bne.n	800609e <AUDIO_PLAYER_Process+0xb2>
    {
      if(f_read(&WavFile, &BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8006060:	f107 0308 	add.w	r3, r7, #8
 8006064:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006068:	4967      	ldr	r1, [pc, #412]	; (8006208 <AUDIO_PLAYER_Process+0x21c>)
 800606a:	4869      	ldr	r0, [pc, #420]	; (8006210 <AUDIO_PLAYER_Process+0x224>)
 800606c:	f7fd fb7c 	bl	8003768 <f_read>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d004      	beq.n	8006080 <AUDIO_PLAYER_Process+0x94>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8006076:	2002      	movs	r0, #2
 8006078:	f7fa fb28 	bl	80006cc <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 800607c:	2301      	movs	r3, #1
 800607e:	e0bc      	b.n	80061fa <AUDIO_PLAYER_Process+0x20e>
      } 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8006080:	4b61      	ldr	r3, [pc, #388]	; (8006208 <AUDIO_PLAYER_Process+0x21c>)
 8006082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006086:	2200      	movs	r2, #0
 8006088:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 800608a:	4b5f      	ldr	r3, [pc, #380]	; (8006208 <AUDIO_PLAYER_Process+0x21c>)
 800608c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	4413      	add	r3, r2
 8006096:	4a5c      	ldr	r2, [pc, #368]	; (8006208 <AUDIO_PLAYER_Process+0x21c>)
 8006098:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800609c:	6053      	str	r3, [r2, #4]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 800609e:	4b5a      	ldr	r3, [pc, #360]	; (8006208 <AUDIO_PLAYER_Process+0x21c>)
 80060a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	f040 80a5 	bne.w	80061f6 <AUDIO_PLAYER_Process+0x20a>
    {
      if(f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 80060ac:	f107 0308 	add.w	r3, r7, #8
 80060b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060b4:	4957      	ldr	r1, [pc, #348]	; (8006214 <AUDIO_PLAYER_Process+0x228>)
 80060b6:	4856      	ldr	r0, [pc, #344]	; (8006210 <AUDIO_PLAYER_Process+0x224>)
 80060b8:	f7fd fb56 	bl	8003768 <f_read>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d004      	beq.n	80060cc <AUDIO_PLAYER_Process+0xe0>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80060c2:	2002      	movs	r0, #2
 80060c4:	f7fa fb02 	bl	80006cc <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 80060c8:	2301      	movs	r3, #1
 80060ca:	e096      	b.n	80061fa <AUDIO_PLAYER_Process+0x20e>
      } 
 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 80060cc:	4b4e      	ldr	r3, [pc, #312]	; (8006208 <AUDIO_PLAYER_Process+0x21c>)
 80060ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060d2:	2200      	movs	r2, #0
 80060d4:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 80060d6:	4b4c      	ldr	r3, [pc, #304]	; (8006208 <AUDIO_PLAYER_Process+0x21c>)
 80060d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	4413      	add	r3, r2
 80060e2:	4a49      	ldr	r2, [pc, #292]	; (8006208 <AUDIO_PLAYER_Process+0x21c>)
 80060e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80060e8:	6053      	str	r3, [r2, #4]
    }
    break;
 80060ea:	e084      	b.n	80061f6 <AUDIO_PLAYER_Process+0x20a>
    
  case AUDIO_STATE_STOP:
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80060ec:	2002      	movs	r0, #2
 80060ee:	f7fa faed 	bl	80006cc <AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE; 
 80060f2:	4b44      	ldr	r3, [pc, #272]	; (8006204 <AUDIO_PLAYER_Process+0x218>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 80060f8:	2301      	movs	r3, #1
 80060fa:	73fb      	strb	r3, [r7, #15]
    break;
 80060fc:	e07c      	b.n	80061f8 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_NEXT:
    if(++FilePos >= AUDIO_GetWavObjectNumber())
 80060fe:	4b46      	ldr	r3, [pc, #280]	; (8006218 <AUDIO_PLAYER_Process+0x22c>)
 8006100:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006104:	b29b      	uxth	r3, r3
 8006106:	3301      	adds	r3, #1
 8006108:	b29b      	uxth	r3, r3
 800610a:	b21a      	sxth	r2, r3
 800610c:	4b42      	ldr	r3, [pc, #264]	; (8006218 <AUDIO_PLAYER_Process+0x22c>)
 800610e:	801a      	strh	r2, [r3, #0]
 8006110:	4b41      	ldr	r3, [pc, #260]	; (8006218 <AUDIO_PLAYER_Process+0x22c>)
 8006112:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006116:	461c      	mov	r4, r3
 8006118:	f7fa fe88 	bl	8000e2c <AUDIO_GetWavObjectNumber>
 800611c:	4603      	mov	r3, r0
 800611e:	429c      	cmp	r4, r3
 8006120:	db09      	blt.n	8006136 <AUDIO_PLAYER_Process+0x14a>
    {
    	if (isLoop)
 8006122:	79fb      	ldrb	r3, [r7, #7]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <AUDIO_PLAYER_Process+0x144>
    	{
    		FilePos = 0;
 8006128:	4b3b      	ldr	r3, [pc, #236]	; (8006218 <AUDIO_PLAYER_Process+0x22c>)
 800612a:	2200      	movs	r2, #0
 800612c:	801a      	strh	r2, [r3, #0]
 800612e:	e002      	b.n	8006136 <AUDIO_PLAYER_Process+0x14a>
    	}
    	else
    	{
    		AudioState =AUDIO_STATE_STOP;
 8006130:	4b34      	ldr	r3, [pc, #208]	; (8006204 <AUDIO_PLAYER_Process+0x218>)
 8006132:	2209      	movs	r2, #9
 8006134:	701a      	strb	r2, [r3, #0]
    	}
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8006136:	2002      	movs	r0, #2
 8006138:	f7fa fac8 	bl	80006cc <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 800613c:	4b36      	ldr	r3, [pc, #216]	; (8006218 <AUDIO_PLAYER_Process+0x22c>)
 800613e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006142:	b2db      	uxtb	r3, r3
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff fef1 	bl	8005f2c <AUDIO_PLAYER_Start>
    break;    
 800614a:	e055      	b.n	80061f8 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PREVIOUS:
    if(--FilePos < 0)
 800614c:	4b32      	ldr	r3, [pc, #200]	; (8006218 <AUDIO_PLAYER_Process+0x22c>)
 800614e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006152:	b29b      	uxth	r3, r3
 8006154:	3b01      	subs	r3, #1
 8006156:	b29b      	uxth	r3, r3
 8006158:	b21a      	sxth	r2, r3
 800615a:	4b2f      	ldr	r3, [pc, #188]	; (8006218 <AUDIO_PLAYER_Process+0x22c>)
 800615c:	801a      	strh	r2, [r3, #0]
 800615e:	4b2e      	ldr	r3, [pc, #184]	; (8006218 <AUDIO_PLAYER_Process+0x22c>)
 8006160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006164:	2b00      	cmp	r3, #0
 8006166:	da07      	bge.n	8006178 <AUDIO_PLAYER_Process+0x18c>
    {
      FilePos = AUDIO_GetWavObjectNumber() - 1;
 8006168:	f7fa fe60 	bl	8000e2c <AUDIO_GetWavObjectNumber>
 800616c:	4603      	mov	r3, r0
 800616e:	3b01      	subs	r3, #1
 8006170:	b29b      	uxth	r3, r3
 8006172:	b21a      	sxth	r2, r3
 8006174:	4b28      	ldr	r3, [pc, #160]	; (8006218 <AUDIO_PLAYER_Process+0x22c>)
 8006176:	801a      	strh	r2, [r3, #0]
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8006178:	2002      	movs	r0, #2
 800617a:	f7fa faa7 	bl	80006cc <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 800617e:	4b26      	ldr	r3, [pc, #152]	; (8006218 <AUDIO_PLAYER_Process+0x22c>)
 8006180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006184:	b2db      	uxtb	r3, r3
 8006186:	4618      	mov	r0, r3
 8006188:	f7ff fed0 	bl	8005f2c <AUDIO_PLAYER_Start>
    break;   
 800618c:	e034      	b.n	80061f8 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PAUSE:
    AUDIO_OUT_Pause();
 800618e:	f7fa fa71 	bl	8000674 <AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 8006192:	4b1c      	ldr	r3, [pc, #112]	; (8006204 <AUDIO_PLAYER_Process+0x218>)
 8006194:	2201      	movs	r2, #1
 8006196:	701a      	strb	r2, [r3, #0]
    break;
 8006198:	e02e      	b.n	80061f8 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_RESUME:
    AUDIO_OUT_Resume();
 800619a:	f7fa fa81 	bl	80006a0 <AUDIO_OUT_Resume>
    AudioState = AUDIO_STATE_PLAY;
 800619e:	4b19      	ldr	r3, [pc, #100]	; (8006204 <AUDIO_PLAYER_Process+0x218>)
 80061a0:	2203      	movs	r2, #3
 80061a2:	701a      	strb	r2, [r3, #0]
    break;
 80061a4:	e028      	b.n	80061f8 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_UP: 
    if( uwVolume <= 90)
 80061a6:	4b1d      	ldr	r3, [pc, #116]	; (800621c <AUDIO_PLAYER_Process+0x230>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b5a      	cmp	r3, #90	; 0x5a
 80061ac:	d804      	bhi.n	80061b8 <AUDIO_PLAYER_Process+0x1cc>
    {
      uwVolume += 10;
 80061ae:	4b1b      	ldr	r3, [pc, #108]	; (800621c <AUDIO_PLAYER_Process+0x230>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	330a      	adds	r3, #10
 80061b4:	4a19      	ldr	r2, [pc, #100]	; (800621c <AUDIO_PLAYER_Process+0x230>)
 80061b6:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 80061b8:	4b18      	ldr	r3, [pc, #96]	; (800621c <AUDIO_PLAYER_Process+0x230>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fa faac 	bl	800071c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 80061c4:	4b0f      	ldr	r3, [pc, #60]	; (8006204 <AUDIO_PLAYER_Process+0x218>)
 80061c6:	2203      	movs	r2, #3
 80061c8:	701a      	strb	r2, [r3, #0]
    break;
 80061ca:	e015      	b.n	80061f8 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_DOWN:    
    if( uwVolume >= 10)
 80061cc:	4b13      	ldr	r3, [pc, #76]	; (800621c <AUDIO_PLAYER_Process+0x230>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b09      	cmp	r3, #9
 80061d2:	d904      	bls.n	80061de <AUDIO_PLAYER_Process+0x1f2>
    {
      uwVolume -= 10;
 80061d4:	4b11      	ldr	r3, [pc, #68]	; (800621c <AUDIO_PLAYER_Process+0x230>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3b0a      	subs	r3, #10
 80061da:	4a10      	ldr	r2, [pc, #64]	; (800621c <AUDIO_PLAYER_Process+0x230>)
 80061dc:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 80061de:	4b0f      	ldr	r3, [pc, #60]	; (800621c <AUDIO_PLAYER_Process+0x230>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7fa fa99 	bl	800071c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 80061ea:	4b06      	ldr	r3, [pc, #24]	; (8006204 <AUDIO_PLAYER_Process+0x218>)
 80061ec:	2203      	movs	r2, #3
 80061ee:	701a      	strb	r2, [r3, #0]
    break;
 80061f0:	e002      	b.n	80061f8 <AUDIO_PLAYER_Process+0x20c>
  case AUDIO_STATE_WAIT:
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT:    
  default:
    /* Do Nothing */
    break;
 80061f2:	bf00      	nop
 80061f4:	e000      	b.n	80061f8 <AUDIO_PLAYER_Process+0x20c>
    break;
 80061f6:	bf00      	nop
  }
  return audio_error;
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd90      	pop	{r4, r7, pc}
 8006202:	bf00      	nop
 8006204:	200018c0 	.word	0x200018c0
 8006208:	200008b8 	.word	0x200008b8
 800620c:	20001ca0 	.word	0x20001ca0
 8006210:	20001ccc 	.word	0x20001ccc
 8006214:	200010b8 	.word	0x200010b8
 8006218:	200018c2 	.word	0x200018c2
 800621c:	20000074 	.word	0x20000074

08006220 <AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_TransferComplete_CallBack(void)
{
 8006220:	b480      	push	{r7}
 8006222:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8006224:	4b06      	ldr	r3, [pc, #24]	; (8006240 <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	2b03      	cmp	r3, #3
 800622a:	d104      	bne.n	8006236 <AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 800622c:	4b05      	ldr	r3, [pc, #20]	; (8006244 <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 800622e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006232:	2202      	movs	r2, #2
 8006234:	701a      	strb	r2, [r3, #0]
  }
}
 8006236:	bf00      	nop
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr
 8006240:	200018c0 	.word	0x200018c0
 8006244:	200008b8 	.word	0x200008b8

08006248 <AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8006248:	b480      	push	{r7}
 800624a:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 800624c:	4b06      	ldr	r3, [pc, #24]	; (8006268 <AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	2b03      	cmp	r3, #3
 8006252:	d104      	bne.n	800625e <AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 8006254:	4b05      	ldr	r3, [pc, #20]	; (800626c <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 8006256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800625a:	2201      	movs	r2, #1
 800625c:	701a      	strb	r2, [r3, #0]
  }
}
 800625e:	bf00      	nop
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	200018c0 	.word	0x200018c0
 800626c:	200008b8 	.word	0x200008b8

08006270 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80062a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006274:	480d      	ldr	r0, [pc, #52]	; (80062ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006276:	490e      	ldr	r1, [pc, #56]	; (80062b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006278:	4a0e      	ldr	r2, [pc, #56]	; (80062b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800627a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800627c:	e002      	b.n	8006284 <LoopCopyDataInit>

0800627e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800627e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006282:	3304      	adds	r3, #4

08006284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006288:	d3f9      	bcc.n	800627e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800628a:	4a0b      	ldr	r2, [pc, #44]	; (80062b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800628c:	4c0b      	ldr	r4, [pc, #44]	; (80062bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800628e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006290:	e001      	b.n	8006296 <LoopFillZerobss>

08006292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006294:	3204      	adds	r2, #4

08006296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006298:	d3fb      	bcc.n	8006292 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800629a:	f7ff fd77 	bl	8005d8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800629e:	f007 fd6b 	bl	800dd78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80062a2:	f7fe fb07 	bl	80048b4 <main>
  bx  lr    
 80062a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80062a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80062ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80062b0:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 80062b4:	0800ed64 	.word	0x0800ed64
  ldr r2, =_sbss
 80062b8:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 80062bc:	20014d8c 	.word	0x20014d8c

080062c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80062c0:	e7fe      	b.n	80062c0 <ADC_IRQHandler>
	...

080062c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80062c8:	4b0e      	ldr	r3, [pc, #56]	; (8006304 <HAL_Init+0x40>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a0d      	ldr	r2, [pc, #52]	; (8006304 <HAL_Init+0x40>)
 80062ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80062d4:	4b0b      	ldr	r3, [pc, #44]	; (8006304 <HAL_Init+0x40>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a0a      	ldr	r2, [pc, #40]	; (8006304 <HAL_Init+0x40>)
 80062da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80062e0:	4b08      	ldr	r3, [pc, #32]	; (8006304 <HAL_Init+0x40>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a07      	ldr	r2, [pc, #28]	; (8006304 <HAL_Init+0x40>)
 80062e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80062ec:	2003      	movs	r0, #3
 80062ee:	f000 f8fc 	bl	80064ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80062f2:	200f      	movs	r0, #15
 80062f4:	f7ff fc6c 	bl	8005bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80062f8:	f7ff fa1e 	bl	8005738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	40023c00 	.word	0x40023c00

08006308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006308:	b480      	push	{r7}
 800630a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800630c:	4b06      	ldr	r3, [pc, #24]	; (8006328 <HAL_IncTick+0x20>)
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	461a      	mov	r2, r3
 8006312:	4b06      	ldr	r3, [pc, #24]	; (800632c <HAL_IncTick+0x24>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4413      	add	r3, r2
 8006318:	4a04      	ldr	r2, [pc, #16]	; (800632c <HAL_IncTick+0x24>)
 800631a:	6013      	str	r3, [r2, #0]
}
 800631c:	bf00      	nop
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	2000007c 	.word	0x2000007c
 800632c:	20001efc 	.word	0x20001efc

08006330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006330:	b480      	push	{r7}
 8006332:	af00      	add	r7, sp, #0
  return uwTick;
 8006334:	4b03      	ldr	r3, [pc, #12]	; (8006344 <HAL_GetTick+0x14>)
 8006336:	681b      	ldr	r3, [r3, #0]
}
 8006338:	4618      	mov	r0, r3
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	20001efc 	.word	0x20001efc

08006348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006350:	f7ff ffee 	bl	8006330 <HAL_GetTick>
 8006354:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006360:	d005      	beq.n	800636e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006362:	4b0a      	ldr	r3, [pc, #40]	; (800638c <HAL_Delay+0x44>)
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	461a      	mov	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4413      	add	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800636e:	bf00      	nop
 8006370:	f7ff ffde 	bl	8006330 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	429a      	cmp	r2, r3
 800637e:	d8f7      	bhi.n	8006370 <HAL_Delay+0x28>
  {
  }
}
 8006380:	bf00      	nop
 8006382:	bf00      	nop
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	2000007c 	.word	0x2000007c

08006390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f003 0307 	and.w	r3, r3, #7
 800639e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063a0:	4b0c      	ldr	r3, [pc, #48]	; (80063d4 <__NVIC_SetPriorityGrouping+0x44>)
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80063ac:	4013      	ands	r3, r2
 80063ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80063b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80063bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80063c2:	4a04      	ldr	r2, [pc, #16]	; (80063d4 <__NVIC_SetPriorityGrouping+0x44>)
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	60d3      	str	r3, [r2, #12]
}
 80063c8:	bf00      	nop
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	e000ed00 	.word	0xe000ed00

080063d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80063d8:	b480      	push	{r7}
 80063da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80063dc:	4b04      	ldr	r3, [pc, #16]	; (80063f0 <__NVIC_GetPriorityGrouping+0x18>)
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	0a1b      	lsrs	r3, r3, #8
 80063e2:	f003 0307 	and.w	r3, r3, #7
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr
 80063f0:	e000ed00 	.word	0xe000ed00

080063f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	4603      	mov	r3, r0
 80063fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006402:	2b00      	cmp	r3, #0
 8006404:	db0b      	blt.n	800641e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006406:	79fb      	ldrb	r3, [r7, #7]
 8006408:	f003 021f 	and.w	r2, r3, #31
 800640c:	4907      	ldr	r1, [pc, #28]	; (800642c <__NVIC_EnableIRQ+0x38>)
 800640e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006412:	095b      	lsrs	r3, r3, #5
 8006414:	2001      	movs	r0, #1
 8006416:	fa00 f202 	lsl.w	r2, r0, r2
 800641a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800641e:	bf00      	nop
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	e000e100 	.word	0xe000e100

08006430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	4603      	mov	r3, r0
 8006438:	6039      	str	r1, [r7, #0]
 800643a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800643c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006440:	2b00      	cmp	r3, #0
 8006442:	db0a      	blt.n	800645a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	b2da      	uxtb	r2, r3
 8006448:	490c      	ldr	r1, [pc, #48]	; (800647c <__NVIC_SetPriority+0x4c>)
 800644a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800644e:	0112      	lsls	r2, r2, #4
 8006450:	b2d2      	uxtb	r2, r2
 8006452:	440b      	add	r3, r1
 8006454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006458:	e00a      	b.n	8006470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	b2da      	uxtb	r2, r3
 800645e:	4908      	ldr	r1, [pc, #32]	; (8006480 <__NVIC_SetPriority+0x50>)
 8006460:	79fb      	ldrb	r3, [r7, #7]
 8006462:	f003 030f 	and.w	r3, r3, #15
 8006466:	3b04      	subs	r3, #4
 8006468:	0112      	lsls	r2, r2, #4
 800646a:	b2d2      	uxtb	r2, r2
 800646c:	440b      	add	r3, r1
 800646e:	761a      	strb	r2, [r3, #24]
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	e000e100 	.word	0xe000e100
 8006480:	e000ed00 	.word	0xe000ed00

08006484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006484:	b480      	push	{r7}
 8006486:	b089      	sub	sp, #36	; 0x24
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f003 0307 	and.w	r3, r3, #7
 8006496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	f1c3 0307 	rsb	r3, r3, #7
 800649e:	2b04      	cmp	r3, #4
 80064a0:	bf28      	it	cs
 80064a2:	2304      	movcs	r3, #4
 80064a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	3304      	adds	r3, #4
 80064aa:	2b06      	cmp	r3, #6
 80064ac:	d902      	bls.n	80064b4 <NVIC_EncodePriority+0x30>
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	3b03      	subs	r3, #3
 80064b2:	e000      	b.n	80064b6 <NVIC_EncodePriority+0x32>
 80064b4:	2300      	movs	r3, #0
 80064b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	fa02 f303 	lsl.w	r3, r2, r3
 80064c2:	43da      	mvns	r2, r3
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	401a      	ands	r2, r3
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80064cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	fa01 f303 	lsl.w	r3, r1, r3
 80064d6:	43d9      	mvns	r1, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064dc:	4313      	orrs	r3, r2
         );
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3724      	adds	r7, #36	; 0x24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b082      	sub	sp, #8
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f7ff ff4c 	bl	8006390 <__NVIC_SetPriorityGrouping>
}
 80064f8:	bf00      	nop
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	4603      	mov	r3, r0
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800650e:	2300      	movs	r3, #0
 8006510:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006512:	f7ff ff61 	bl	80063d8 <__NVIC_GetPriorityGrouping>
 8006516:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	68b9      	ldr	r1, [r7, #8]
 800651c:	6978      	ldr	r0, [r7, #20]
 800651e:	f7ff ffb1 	bl	8006484 <NVIC_EncodePriority>
 8006522:	4602      	mov	r2, r0
 8006524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006528:	4611      	mov	r1, r2
 800652a:	4618      	mov	r0, r3
 800652c:	f7ff ff80 	bl	8006430 <__NVIC_SetPriority>
}
 8006530:	bf00      	nop
 8006532:	3718      	adds	r7, #24
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	4603      	mov	r3, r0
 8006540:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006546:	4618      	mov	r0, r3
 8006548:	f7ff ff54 	bl	80063f4 <__NVIC_EnableIRQ>
}
 800654c:	bf00      	nop
 800654e:	3708      	adds	r7, #8
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800655c:	2300      	movs	r3, #0
 800655e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006560:	f7ff fee6 	bl	8006330 <HAL_GetTick>
 8006564:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e099      	b.n	80066a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 0201 	bic.w	r2, r2, #1
 800658e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006590:	e00f      	b.n	80065b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006592:	f7ff fecd 	bl	8006330 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	2b05      	cmp	r3, #5
 800659e:	d908      	bls.n	80065b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2220      	movs	r2, #32
 80065a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2203      	movs	r2, #3
 80065aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e078      	b.n	80066a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0301 	and.w	r3, r3, #1
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1e8      	bne.n	8006592 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	4b38      	ldr	r3, [pc, #224]	; (80066ac <HAL_DMA_Init+0x158>)
 80065cc:	4013      	ands	r3, r2
 80065ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	4313      	orrs	r3, r2
 8006602:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006608:	2b04      	cmp	r3, #4
 800660a:	d107      	bne.n	800661c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006614:	4313      	orrs	r3, r2
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	4313      	orrs	r3, r2
 800661a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f023 0307 	bic.w	r3, r3, #7
 8006632:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	4313      	orrs	r3, r2
 800663c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006642:	2b04      	cmp	r3, #4
 8006644:	d117      	bne.n	8006676 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	4313      	orrs	r3, r2
 800664e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00e      	beq.n	8006676 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fb3d 	bl	8006cd8 <DMA_CheckFifoParam>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d008      	beq.n	8006676 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2240      	movs	r2, #64	; 0x40
 8006668:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006672:	2301      	movs	r3, #1
 8006674:	e016      	b.n	80066a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 faf4 	bl	8006c6c <DMA_CalcBaseAndBitshift>
 8006684:	4603      	mov	r3, r0
 8006686:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800668c:	223f      	movs	r2, #63	; 0x3f
 800668e:	409a      	lsls	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3718      	adds	r7, #24
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	f010803f 	.word	0xf010803f

080066b0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e050      	b.n	8006764 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d101      	bne.n	80066d2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80066ce:	2302      	movs	r3, #2
 80066d0:	e048      	b.n	8006764 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 0201 	bic.w	r2, r2, #1
 80066e0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2200      	movs	r2, #0
 80066e8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2200      	movs	r2, #0
 80066f0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2200      	movs	r2, #0
 80066f8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2200      	movs	r2, #0
 8006700:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2200      	movs	r2, #0
 8006708:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2221      	movs	r2, #33	; 0x21
 8006710:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 faaa 	bl	8006c6c <DMA_CalcBaseAndBitshift>
 8006718:	4603      	mov	r3, r0
 800671a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006744:	223f      	movs	r2, #63	; 0x3f
 8006746:	409a      	lsls	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006782:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800678a:	2b01      	cmp	r3, #1
 800678c:	d101      	bne.n	8006792 <HAL_DMA_Start_IT+0x26>
 800678e:	2302      	movs	r3, #2
 8006790:	e040      	b.n	8006814 <HAL_DMA_Start_IT+0xa8>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d12f      	bne.n	8006806 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2202      	movs	r2, #2
 80067aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	68b9      	ldr	r1, [r7, #8]
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f000 fa28 	bl	8006c10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067c4:	223f      	movs	r2, #63	; 0x3f
 80067c6:	409a      	lsls	r2, r3
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f042 0216 	orr.w	r2, r2, #22
 80067da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d007      	beq.n	80067f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f042 0208 	orr.w	r2, r2, #8
 80067f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0201 	orr.w	r2, r2, #1
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	e005      	b.n	8006812 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800680e:	2302      	movs	r3, #2
 8006810:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006812:	7dfb      	ldrb	r3, [r7, #23]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006828:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800682a:	f7ff fd81 	bl	8006330 <HAL_GetTick>
 800682e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b02      	cmp	r3, #2
 800683a:	d008      	beq.n	800684e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2280      	movs	r2, #128	; 0x80
 8006840:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e052      	b.n	80068f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f022 0216 	bic.w	r2, r2, #22
 800685c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	695a      	ldr	r2, [r3, #20]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800686c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006872:	2b00      	cmp	r3, #0
 8006874:	d103      	bne.n	800687e <HAL_DMA_Abort+0x62>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800687a:	2b00      	cmp	r3, #0
 800687c:	d007      	beq.n	800688e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 0208 	bic.w	r2, r2, #8
 800688c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 0201 	bic.w	r2, r2, #1
 800689c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800689e:	e013      	b.n	80068c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80068a0:	f7ff fd46 	bl	8006330 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	2b05      	cmp	r3, #5
 80068ac:	d90c      	bls.n	80068c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2220      	movs	r2, #32
 80068b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2203      	movs	r2, #3
 80068b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e015      	b.n	80068f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1e4      	bne.n	80068a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068da:	223f      	movs	r2, #63	; 0x3f
 80068dc:	409a      	lsls	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006904:	2300      	movs	r3, #0
 8006906:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006908:	4b8e      	ldr	r3, [pc, #568]	; (8006b44 <HAL_DMA_IRQHandler+0x248>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a8e      	ldr	r2, [pc, #568]	; (8006b48 <HAL_DMA_IRQHandler+0x24c>)
 800690e:	fba2 2303 	umull	r2, r3, r2, r3
 8006912:	0a9b      	lsrs	r3, r3, #10
 8006914:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800691a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006926:	2208      	movs	r2, #8
 8006928:	409a      	lsls	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	4013      	ands	r3, r2
 800692e:	2b00      	cmp	r3, #0
 8006930:	d01a      	beq.n	8006968 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	2b00      	cmp	r3, #0
 800693e:	d013      	beq.n	8006968 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 0204 	bic.w	r2, r2, #4
 800694e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006954:	2208      	movs	r2, #8
 8006956:	409a      	lsls	r2, r3
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006960:	f043 0201 	orr.w	r2, r3, #1
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800696c:	2201      	movs	r2, #1
 800696e:	409a      	lsls	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4013      	ands	r3, r2
 8006974:	2b00      	cmp	r3, #0
 8006976:	d012      	beq.n	800699e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00b      	beq.n	800699e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800698a:	2201      	movs	r2, #1
 800698c:	409a      	lsls	r2, r3
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006996:	f043 0202 	orr.w	r2, r3, #2
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069a2:	2204      	movs	r2, #4
 80069a4:	409a      	lsls	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	4013      	ands	r3, r2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d012      	beq.n	80069d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0302 	and.w	r3, r3, #2
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00b      	beq.n	80069d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069c0:	2204      	movs	r2, #4
 80069c2:	409a      	lsls	r2, r3
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069cc:	f043 0204 	orr.w	r2, r3, #4
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d8:	2210      	movs	r2, #16
 80069da:	409a      	lsls	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4013      	ands	r3, r2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d043      	beq.n	8006a6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0308 	and.w	r3, r3, #8
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d03c      	beq.n	8006a6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f6:	2210      	movs	r2, #16
 80069f8:	409a      	lsls	r2, r3
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d018      	beq.n	8006a3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d108      	bne.n	8006a2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d024      	beq.n	8006a6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	4798      	blx	r3
 8006a2a:	e01f      	b.n	8006a6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d01b      	beq.n	8006a6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	4798      	blx	r3
 8006a3c:	e016      	b.n	8006a6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d107      	bne.n	8006a5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 0208 	bic.w	r2, r2, #8
 8006a5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d003      	beq.n	8006a6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a70:	2220      	movs	r2, #32
 8006a72:	409a      	lsls	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4013      	ands	r3, r2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f000 808f 	beq.w	8006b9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0310 	and.w	r3, r3, #16
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 8087 	beq.w	8006b9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a92:	2220      	movs	r2, #32
 8006a94:	409a      	lsls	r2, r3
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b05      	cmp	r3, #5
 8006aa4:	d136      	bne.n	8006b14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 0216 	bic.w	r2, r2, #22
 8006ab4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	695a      	ldr	r2, [r3, #20]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ac4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d103      	bne.n	8006ad6 <HAL_DMA_IRQHandler+0x1da>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d007      	beq.n	8006ae6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 0208 	bic.w	r2, r2, #8
 8006ae4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aea:	223f      	movs	r2, #63	; 0x3f
 8006aec:	409a      	lsls	r2, r3
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d07e      	beq.n	8006c08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	4798      	blx	r3
        }
        return;
 8006b12:	e079      	b.n	8006c08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d01d      	beq.n	8006b5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10d      	bne.n	8006b4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d031      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	4798      	blx	r3
 8006b40:	e02c      	b.n	8006b9c <HAL_DMA_IRQHandler+0x2a0>
 8006b42:	bf00      	nop
 8006b44:	20000058 	.word	0x20000058
 8006b48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d023      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	4798      	blx	r3
 8006b5c:	e01e      	b.n	8006b9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10f      	bne.n	8006b8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 0210 	bic.w	r2, r2, #16
 8006b7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d003      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d032      	beq.n	8006c0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba8:	f003 0301 	and.w	r3, r3, #1
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d022      	beq.n	8006bf6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2205      	movs	r2, #5
 8006bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f022 0201 	bic.w	r2, r2, #1
 8006bc6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	60bb      	str	r3, [r7, #8]
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d307      	bcc.n	8006be4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1f2      	bne.n	8006bc8 <HAL_DMA_IRQHandler+0x2cc>
 8006be2:	e000      	b.n	8006be6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006be4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d005      	beq.n	8006c0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	4798      	blx	r3
 8006c06:	e000      	b.n	8006c0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006c08:	bf00      	nop
    }
  }
}
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
 8006c1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	2b40      	cmp	r3, #64	; 0x40
 8006c3c:	d108      	bne.n	8006c50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006c4e:	e007      	b.n	8006c60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68ba      	ldr	r2, [r7, #8]
 8006c56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	60da      	str	r2, [r3, #12]
}
 8006c60:	bf00      	nop
 8006c62:	3714      	adds	r7, #20
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	3b10      	subs	r3, #16
 8006c7c:	4a14      	ldr	r2, [pc, #80]	; (8006cd0 <DMA_CalcBaseAndBitshift+0x64>)
 8006c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c82:	091b      	lsrs	r3, r3, #4
 8006c84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006c86:	4a13      	ldr	r2, [pc, #76]	; (8006cd4 <DMA_CalcBaseAndBitshift+0x68>)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d909      	bls.n	8006cae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006ca2:	f023 0303 	bic.w	r3, r3, #3
 8006ca6:	1d1a      	adds	r2, r3, #4
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	659a      	str	r2, [r3, #88]	; 0x58
 8006cac:	e007      	b.n	8006cbe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006cb6:	f023 0303 	bic.w	r3, r3, #3
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3714      	adds	r7, #20
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	aaaaaaab 	.word	0xaaaaaaab
 8006cd4:	0800ed18 	.word	0x0800ed18

08006cd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d11f      	bne.n	8006d32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	2b03      	cmp	r3, #3
 8006cf6:	d856      	bhi.n	8006da6 <DMA_CheckFifoParam+0xce>
 8006cf8:	a201      	add	r2, pc, #4	; (adr r2, 8006d00 <DMA_CheckFifoParam+0x28>)
 8006cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfe:	bf00      	nop
 8006d00:	08006d11 	.word	0x08006d11
 8006d04:	08006d23 	.word	0x08006d23
 8006d08:	08006d11 	.word	0x08006d11
 8006d0c:	08006da7 	.word	0x08006da7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d046      	beq.n	8006daa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d20:	e043      	b.n	8006daa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d2a:	d140      	bne.n	8006dae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d30:	e03d      	b.n	8006dae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d3a:	d121      	bne.n	8006d80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	d837      	bhi.n	8006db2 <DMA_CheckFifoParam+0xda>
 8006d42:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <DMA_CheckFifoParam+0x70>)
 8006d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d48:	08006d59 	.word	0x08006d59
 8006d4c:	08006d5f 	.word	0x08006d5f
 8006d50:	08006d59 	.word	0x08006d59
 8006d54:	08006d71 	.word	0x08006d71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d5c:	e030      	b.n	8006dc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d025      	beq.n	8006db6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d6e:	e022      	b.n	8006db6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d78:	d11f      	bne.n	8006dba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006d7e:	e01c      	b.n	8006dba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d903      	bls.n	8006d8e <DMA_CheckFifoParam+0xb6>
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2b03      	cmp	r3, #3
 8006d8a:	d003      	beq.n	8006d94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006d8c:	e018      	b.n	8006dc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	73fb      	strb	r3, [r7, #15]
      break;
 8006d92:	e015      	b.n	8006dc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00e      	beq.n	8006dbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	73fb      	strb	r3, [r7, #15]
      break;
 8006da4:	e00b      	b.n	8006dbe <DMA_CheckFifoParam+0xe6>
      break;
 8006da6:	bf00      	nop
 8006da8:	e00a      	b.n	8006dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8006daa:	bf00      	nop
 8006dac:	e008      	b.n	8006dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8006dae:	bf00      	nop
 8006db0:	e006      	b.n	8006dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8006db2:	bf00      	nop
 8006db4:	e004      	b.n	8006dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8006db6:	bf00      	nop
 8006db8:	e002      	b.n	8006dc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8006dba:	bf00      	nop
 8006dbc:	e000      	b.n	8006dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8006dbe:	bf00      	nop
    }
  } 
  
  return status; 
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3714      	adds	r7, #20
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop

08006dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b089      	sub	sp, #36	; 0x24
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006de6:	2300      	movs	r3, #0
 8006de8:	61fb      	str	r3, [r7, #28]
 8006dea:	e16b      	b.n	80070c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006dec:	2201      	movs	r2, #1
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	fa02 f303 	lsl.w	r3, r2, r3
 8006df4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	f040 815a 	bne.w	80070be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f003 0303 	and.w	r3, r3, #3
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d005      	beq.n	8006e22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d130      	bne.n	8006e84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	005b      	lsls	r3, r3, #1
 8006e2c:	2203      	movs	r2, #3
 8006e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e32:	43db      	mvns	r3, r3
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	4013      	ands	r3, r2
 8006e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	68da      	ldr	r2, [r3, #12]
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	005b      	lsls	r3, r3, #1
 8006e42:	fa02 f303 	lsl.w	r3, r2, r3
 8006e46:	69ba      	ldr	r2, [r7, #24]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e58:	2201      	movs	r2, #1
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e60:	43db      	mvns	r3, r3
 8006e62:	69ba      	ldr	r2, [r7, #24]
 8006e64:	4013      	ands	r3, r2
 8006e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	091b      	lsrs	r3, r3, #4
 8006e6e:	f003 0201 	and.w	r2, r3, #1
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	fa02 f303 	lsl.w	r3, r2, r3
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	f003 0303 	and.w	r3, r3, #3
 8006e8c:	2b03      	cmp	r3, #3
 8006e8e:	d017      	beq.n	8006ec0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	005b      	lsls	r3, r3, #1
 8006e9a:	2203      	movs	r2, #3
 8006e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea0:	43db      	mvns	r3, r3
 8006ea2:	69ba      	ldr	r2, [r7, #24]
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	689a      	ldr	r2, [r3, #8]
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	005b      	lsls	r3, r3, #1
 8006eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb4:	69ba      	ldr	r2, [r7, #24]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f003 0303 	and.w	r3, r3, #3
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d123      	bne.n	8006f14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	08da      	lsrs	r2, r3, #3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	3208      	adds	r2, #8
 8006ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	f003 0307 	and.w	r3, r3, #7
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	220f      	movs	r2, #15
 8006ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee8:	43db      	mvns	r3, r3
 8006eea:	69ba      	ldr	r2, [r7, #24]
 8006eec:	4013      	ands	r3, r2
 8006eee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	691a      	ldr	r2, [r3, #16]
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	f003 0307 	and.w	r3, r3, #7
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	fa02 f303 	lsl.w	r3, r2, r3
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	08da      	lsrs	r2, r3, #3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	3208      	adds	r2, #8
 8006f0e:	69b9      	ldr	r1, [r7, #24]
 8006f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	005b      	lsls	r3, r3, #1
 8006f1e:	2203      	movs	r2, #3
 8006f20:	fa02 f303 	lsl.w	r3, r2, r3
 8006f24:	43db      	mvns	r3, r3
 8006f26:	69ba      	ldr	r2, [r7, #24]
 8006f28:	4013      	ands	r3, r2
 8006f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f003 0203 	and.w	r2, r3, #3
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	005b      	lsls	r3, r3, #1
 8006f38:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	69ba      	ldr	r2, [r7, #24]
 8006f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f000 80b4 	beq.w	80070be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f56:	2300      	movs	r3, #0
 8006f58:	60fb      	str	r3, [r7, #12]
 8006f5a:	4b60      	ldr	r3, [pc, #384]	; (80070dc <HAL_GPIO_Init+0x30c>)
 8006f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5e:	4a5f      	ldr	r2, [pc, #380]	; (80070dc <HAL_GPIO_Init+0x30c>)
 8006f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f64:	6453      	str	r3, [r2, #68]	; 0x44
 8006f66:	4b5d      	ldr	r3, [pc, #372]	; (80070dc <HAL_GPIO_Init+0x30c>)
 8006f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f72:	4a5b      	ldr	r2, [pc, #364]	; (80070e0 <HAL_GPIO_Init+0x310>)
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	089b      	lsrs	r3, r3, #2
 8006f78:	3302      	adds	r3, #2
 8006f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	f003 0303 	and.w	r3, r3, #3
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	220f      	movs	r2, #15
 8006f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8e:	43db      	mvns	r3, r3
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	4013      	ands	r3, r2
 8006f94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a52      	ldr	r2, [pc, #328]	; (80070e4 <HAL_GPIO_Init+0x314>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d02b      	beq.n	8006ff6 <HAL_GPIO_Init+0x226>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a51      	ldr	r2, [pc, #324]	; (80070e8 <HAL_GPIO_Init+0x318>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d025      	beq.n	8006ff2 <HAL_GPIO_Init+0x222>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a50      	ldr	r2, [pc, #320]	; (80070ec <HAL_GPIO_Init+0x31c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d01f      	beq.n	8006fee <HAL_GPIO_Init+0x21e>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a4f      	ldr	r2, [pc, #316]	; (80070f0 <HAL_GPIO_Init+0x320>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d019      	beq.n	8006fea <HAL_GPIO_Init+0x21a>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a4e      	ldr	r2, [pc, #312]	; (80070f4 <HAL_GPIO_Init+0x324>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d013      	beq.n	8006fe6 <HAL_GPIO_Init+0x216>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a4d      	ldr	r2, [pc, #308]	; (80070f8 <HAL_GPIO_Init+0x328>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d00d      	beq.n	8006fe2 <HAL_GPIO_Init+0x212>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a4c      	ldr	r2, [pc, #304]	; (80070fc <HAL_GPIO_Init+0x32c>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d007      	beq.n	8006fde <HAL_GPIO_Init+0x20e>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a4b      	ldr	r2, [pc, #300]	; (8007100 <HAL_GPIO_Init+0x330>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d101      	bne.n	8006fda <HAL_GPIO_Init+0x20a>
 8006fd6:	2307      	movs	r3, #7
 8006fd8:	e00e      	b.n	8006ff8 <HAL_GPIO_Init+0x228>
 8006fda:	2308      	movs	r3, #8
 8006fdc:	e00c      	b.n	8006ff8 <HAL_GPIO_Init+0x228>
 8006fde:	2306      	movs	r3, #6
 8006fe0:	e00a      	b.n	8006ff8 <HAL_GPIO_Init+0x228>
 8006fe2:	2305      	movs	r3, #5
 8006fe4:	e008      	b.n	8006ff8 <HAL_GPIO_Init+0x228>
 8006fe6:	2304      	movs	r3, #4
 8006fe8:	e006      	b.n	8006ff8 <HAL_GPIO_Init+0x228>
 8006fea:	2303      	movs	r3, #3
 8006fec:	e004      	b.n	8006ff8 <HAL_GPIO_Init+0x228>
 8006fee:	2302      	movs	r3, #2
 8006ff0:	e002      	b.n	8006ff8 <HAL_GPIO_Init+0x228>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e000      	b.n	8006ff8 <HAL_GPIO_Init+0x228>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	69fa      	ldr	r2, [r7, #28]
 8006ffa:	f002 0203 	and.w	r2, r2, #3
 8006ffe:	0092      	lsls	r2, r2, #2
 8007000:	4093      	lsls	r3, r2
 8007002:	69ba      	ldr	r2, [r7, #24]
 8007004:	4313      	orrs	r3, r2
 8007006:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007008:	4935      	ldr	r1, [pc, #212]	; (80070e0 <HAL_GPIO_Init+0x310>)
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	089b      	lsrs	r3, r3, #2
 800700e:	3302      	adds	r3, #2
 8007010:	69ba      	ldr	r2, [r7, #24]
 8007012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007016:	4b3b      	ldr	r3, [pc, #236]	; (8007104 <HAL_GPIO_Init+0x334>)
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	43db      	mvns	r3, r3
 8007020:	69ba      	ldr	r2, [r7, #24]
 8007022:	4013      	ands	r3, r2
 8007024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007032:	69ba      	ldr	r2, [r7, #24]
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	4313      	orrs	r3, r2
 8007038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800703a:	4a32      	ldr	r2, [pc, #200]	; (8007104 <HAL_GPIO_Init+0x334>)
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007040:	4b30      	ldr	r3, [pc, #192]	; (8007104 <HAL_GPIO_Init+0x334>)
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	43db      	mvns	r3, r3
 800704a:	69ba      	ldr	r2, [r7, #24]
 800704c:	4013      	ands	r3, r2
 800704e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d003      	beq.n	8007064 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	4313      	orrs	r3, r2
 8007062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007064:	4a27      	ldr	r2, [pc, #156]	; (8007104 <HAL_GPIO_Init+0x334>)
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800706a:	4b26      	ldr	r3, [pc, #152]	; (8007104 <HAL_GPIO_Init+0x334>)
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	43db      	mvns	r3, r3
 8007074:	69ba      	ldr	r2, [r7, #24]
 8007076:	4013      	ands	r3, r2
 8007078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d003      	beq.n	800708e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007086:	69ba      	ldr	r2, [r7, #24]
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	4313      	orrs	r3, r2
 800708c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800708e:	4a1d      	ldr	r2, [pc, #116]	; (8007104 <HAL_GPIO_Init+0x334>)
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007094:	4b1b      	ldr	r3, [pc, #108]	; (8007104 <HAL_GPIO_Init+0x334>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	43db      	mvns	r3, r3
 800709e:	69ba      	ldr	r2, [r7, #24]
 80070a0:	4013      	ands	r3, r2
 80070a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d003      	beq.n	80070b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80070b0:	69ba      	ldr	r2, [r7, #24]
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80070b8:	4a12      	ldr	r2, [pc, #72]	; (8007104 <HAL_GPIO_Init+0x334>)
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	3301      	adds	r3, #1
 80070c2:	61fb      	str	r3, [r7, #28]
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	2b0f      	cmp	r3, #15
 80070c8:	f67f ae90 	bls.w	8006dec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80070cc:	bf00      	nop
 80070ce:	bf00      	nop
 80070d0:	3724      	adds	r7, #36	; 0x24
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	40023800 	.word	0x40023800
 80070e0:	40013800 	.word	0x40013800
 80070e4:	40020000 	.word	0x40020000
 80070e8:	40020400 	.word	0x40020400
 80070ec:	40020800 	.word	0x40020800
 80070f0:	40020c00 	.word	0x40020c00
 80070f4:	40021000 	.word	0x40021000
 80070f8:	40021400 	.word	0x40021400
 80070fc:	40021800 	.word	0x40021800
 8007100:	40021c00 	.word	0x40021c00
 8007104:	40013c00 	.word	0x40013c00

08007108 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007108:	b480      	push	{r7}
 800710a:	b087      	sub	sp, #28
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007112:	2300      	movs	r3, #0
 8007114:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8007116:	2300      	movs	r3, #0
 8007118:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800711a:	2300      	movs	r3, #0
 800711c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800711e:	2300      	movs	r3, #0
 8007120:	617b      	str	r3, [r7, #20]
 8007122:	e0cd      	b.n	80072c0 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007124:	2201      	movs	r2, #1
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	fa02 f303 	lsl.w	r3, r2, r3
 800712c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	4013      	ands	r3, r2
 8007134:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	429a      	cmp	r2, r3
 800713c:	f040 80bd 	bne.w	80072ba <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007140:	4a65      	ldr	r2, [pc, #404]	; (80072d8 <HAL_GPIO_DeInit+0x1d0>)
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	089b      	lsrs	r3, r3, #2
 8007146:	3302      	adds	r3, #2
 8007148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800714c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f003 0303 	and.w	r3, r3, #3
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	220f      	movs	r2, #15
 8007158:	fa02 f303 	lsl.w	r3, r2, r3
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	4013      	ands	r3, r2
 8007160:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a5d      	ldr	r2, [pc, #372]	; (80072dc <HAL_GPIO_DeInit+0x1d4>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d02b      	beq.n	80071c2 <HAL_GPIO_DeInit+0xba>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a5c      	ldr	r2, [pc, #368]	; (80072e0 <HAL_GPIO_DeInit+0x1d8>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d025      	beq.n	80071be <HAL_GPIO_DeInit+0xb6>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a5b      	ldr	r2, [pc, #364]	; (80072e4 <HAL_GPIO_DeInit+0x1dc>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d01f      	beq.n	80071ba <HAL_GPIO_DeInit+0xb2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a5a      	ldr	r2, [pc, #360]	; (80072e8 <HAL_GPIO_DeInit+0x1e0>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d019      	beq.n	80071b6 <HAL_GPIO_DeInit+0xae>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a59      	ldr	r2, [pc, #356]	; (80072ec <HAL_GPIO_DeInit+0x1e4>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d013      	beq.n	80071b2 <HAL_GPIO_DeInit+0xaa>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a58      	ldr	r2, [pc, #352]	; (80072f0 <HAL_GPIO_DeInit+0x1e8>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d00d      	beq.n	80071ae <HAL_GPIO_DeInit+0xa6>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a57      	ldr	r2, [pc, #348]	; (80072f4 <HAL_GPIO_DeInit+0x1ec>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d007      	beq.n	80071aa <HAL_GPIO_DeInit+0xa2>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a56      	ldr	r2, [pc, #344]	; (80072f8 <HAL_GPIO_DeInit+0x1f0>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d101      	bne.n	80071a6 <HAL_GPIO_DeInit+0x9e>
 80071a2:	2307      	movs	r3, #7
 80071a4:	e00e      	b.n	80071c4 <HAL_GPIO_DeInit+0xbc>
 80071a6:	2308      	movs	r3, #8
 80071a8:	e00c      	b.n	80071c4 <HAL_GPIO_DeInit+0xbc>
 80071aa:	2306      	movs	r3, #6
 80071ac:	e00a      	b.n	80071c4 <HAL_GPIO_DeInit+0xbc>
 80071ae:	2305      	movs	r3, #5
 80071b0:	e008      	b.n	80071c4 <HAL_GPIO_DeInit+0xbc>
 80071b2:	2304      	movs	r3, #4
 80071b4:	e006      	b.n	80071c4 <HAL_GPIO_DeInit+0xbc>
 80071b6:	2303      	movs	r3, #3
 80071b8:	e004      	b.n	80071c4 <HAL_GPIO_DeInit+0xbc>
 80071ba:	2302      	movs	r3, #2
 80071bc:	e002      	b.n	80071c4 <HAL_GPIO_DeInit+0xbc>
 80071be:	2301      	movs	r3, #1
 80071c0:	e000      	b.n	80071c4 <HAL_GPIO_DeInit+0xbc>
 80071c2:	2300      	movs	r3, #0
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	f002 0203 	and.w	r2, r2, #3
 80071ca:	0092      	lsls	r2, r2, #2
 80071cc:	4093      	lsls	r3, r2
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d132      	bne.n	800723a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80071d4:	4b49      	ldr	r3, [pc, #292]	; (80072fc <HAL_GPIO_DeInit+0x1f4>)
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	43db      	mvns	r3, r3
 80071dc:	4947      	ldr	r1, [pc, #284]	; (80072fc <HAL_GPIO_DeInit+0x1f4>)
 80071de:	4013      	ands	r3, r2
 80071e0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80071e2:	4b46      	ldr	r3, [pc, #280]	; (80072fc <HAL_GPIO_DeInit+0x1f4>)
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	43db      	mvns	r3, r3
 80071ea:	4944      	ldr	r1, [pc, #272]	; (80072fc <HAL_GPIO_DeInit+0x1f4>)
 80071ec:	4013      	ands	r3, r2
 80071ee:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80071f0:	4b42      	ldr	r3, [pc, #264]	; (80072fc <HAL_GPIO_DeInit+0x1f4>)
 80071f2:	68da      	ldr	r2, [r3, #12]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	43db      	mvns	r3, r3
 80071f8:	4940      	ldr	r1, [pc, #256]	; (80072fc <HAL_GPIO_DeInit+0x1f4>)
 80071fa:	4013      	ands	r3, r2
 80071fc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80071fe:	4b3f      	ldr	r3, [pc, #252]	; (80072fc <HAL_GPIO_DeInit+0x1f4>)
 8007200:	689a      	ldr	r2, [r3, #8]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	43db      	mvns	r3, r3
 8007206:	493d      	ldr	r1, [pc, #244]	; (80072fc <HAL_GPIO_DeInit+0x1f4>)
 8007208:	4013      	ands	r3, r2
 800720a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	f003 0303 	and.w	r3, r3, #3
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	220f      	movs	r2, #15
 8007216:	fa02 f303 	lsl.w	r3, r2, r3
 800721a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800721c:	4a2e      	ldr	r2, [pc, #184]	; (80072d8 <HAL_GPIO_DeInit+0x1d0>)
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	089b      	lsrs	r3, r3, #2
 8007222:	3302      	adds	r3, #2
 8007224:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	43da      	mvns	r2, r3
 800722c:	482a      	ldr	r0, [pc, #168]	; (80072d8 <HAL_GPIO_DeInit+0x1d0>)
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	089b      	lsrs	r3, r3, #2
 8007232:	400a      	ands	r2, r1
 8007234:	3302      	adds	r3, #2
 8007236:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	005b      	lsls	r3, r3, #1
 8007242:	2103      	movs	r1, #3
 8007244:	fa01 f303 	lsl.w	r3, r1, r3
 8007248:	43db      	mvns	r3, r3
 800724a:	401a      	ands	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	08da      	lsrs	r2, r3, #3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	3208      	adds	r2, #8
 8007258:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f003 0307 	and.w	r3, r3, #7
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	220f      	movs	r2, #15
 8007266:	fa02 f303 	lsl.w	r3, r2, r3
 800726a:	43db      	mvns	r3, r3
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	08d2      	lsrs	r2, r2, #3
 8007270:	4019      	ands	r1, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	3208      	adds	r2, #8
 8007276:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68da      	ldr	r2, [r3, #12]
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	005b      	lsls	r3, r3, #1
 8007282:	2103      	movs	r1, #3
 8007284:	fa01 f303 	lsl.w	r3, r1, r3
 8007288:	43db      	mvns	r3, r3
 800728a:	401a      	ands	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685a      	ldr	r2, [r3, #4]
 8007294:	2101      	movs	r1, #1
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	fa01 f303 	lsl.w	r3, r1, r3
 800729c:	43db      	mvns	r3, r3
 800729e:	401a      	ands	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	2103      	movs	r1, #3
 80072ae:	fa01 f303 	lsl.w	r3, r1, r3
 80072b2:	43db      	mvns	r3, r3
 80072b4:	401a      	ands	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	3301      	adds	r3, #1
 80072be:	617b      	str	r3, [r7, #20]
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	2b0f      	cmp	r3, #15
 80072c4:	f67f af2e 	bls.w	8007124 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80072c8:	bf00      	nop
 80072ca:	bf00      	nop
 80072cc:	371c      	adds	r7, #28
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	40013800 	.word	0x40013800
 80072dc:	40020000 	.word	0x40020000
 80072e0:	40020400 	.word	0x40020400
 80072e4:	40020800 	.word	0x40020800
 80072e8:	40020c00 	.word	0x40020c00
 80072ec:	40021000 	.word	0x40021000
 80072f0:	40021400 	.word	0x40021400
 80072f4:	40021800 	.word	0x40021800
 80072f8:	40021c00 	.word	0x40021c00
 80072fc:	40013c00 	.word	0x40013c00

08007300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	460b      	mov	r3, r1
 800730a:	807b      	strh	r3, [r7, #2]
 800730c:	4613      	mov	r3, r2
 800730e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007310:	787b      	ldrb	r3, [r7, #1]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d003      	beq.n	800731e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007316:	887a      	ldrh	r2, [r7, #2]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800731c:	e003      	b.n	8007326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800731e:	887b      	ldrh	r3, [r7, #2]
 8007320:	041a      	lsls	r2, r3, #16
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	619a      	str	r2, [r3, #24]
}
 8007326:	bf00      	nop
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
	...

08007334 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	4603      	mov	r3, r0
 800733c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800733e:	4b08      	ldr	r3, [pc, #32]	; (8007360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007340:	695a      	ldr	r2, [r3, #20]
 8007342:	88fb      	ldrh	r3, [r7, #6]
 8007344:	4013      	ands	r3, r2
 8007346:	2b00      	cmp	r3, #0
 8007348:	d006      	beq.n	8007358 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800734a:	4a05      	ldr	r2, [pc, #20]	; (8007360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800734c:	88fb      	ldrh	r3, [r7, #6]
 800734e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007350:	88fb      	ldrh	r3, [r7, #6]
 8007352:	4618      	mov	r0, r3
 8007354:	f7fd fd12 	bl	8004d7c <HAL_GPIO_EXTI_Callback>
  }
}
 8007358:	bf00      	nop
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	40013c00 	.word	0x40013c00

08007364 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d101      	bne.n	8007376 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e12b      	b.n	80075ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d106      	bne.n	8007390 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7fe f9fc 	bl	8005788 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2224      	movs	r2, #36	; 0x24
 8007394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f022 0201 	bic.w	r2, r2, #1
 80073a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80073c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80073c8:	f002 fe5a 	bl	800a080 <HAL_RCC_GetPCLK1Freq>
 80073cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	4a81      	ldr	r2, [pc, #516]	; (80075d8 <HAL_I2C_Init+0x274>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d807      	bhi.n	80073e8 <HAL_I2C_Init+0x84>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	4a80      	ldr	r2, [pc, #512]	; (80075dc <HAL_I2C_Init+0x278>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	bf94      	ite	ls
 80073e0:	2301      	movls	r3, #1
 80073e2:	2300      	movhi	r3, #0
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	e006      	b.n	80073f6 <HAL_I2C_Init+0x92>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4a7d      	ldr	r2, [pc, #500]	; (80075e0 <HAL_I2C_Init+0x27c>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	bf94      	ite	ls
 80073f0:	2301      	movls	r3, #1
 80073f2:	2300      	movhi	r3, #0
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d001      	beq.n	80073fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e0e7      	b.n	80075ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	4a78      	ldr	r2, [pc, #480]	; (80075e4 <HAL_I2C_Init+0x280>)
 8007402:	fba2 2303 	umull	r2, r3, r2, r3
 8007406:	0c9b      	lsrs	r3, r3, #18
 8007408:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	430a      	orrs	r2, r1
 800741c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	4a6a      	ldr	r2, [pc, #424]	; (80075d8 <HAL_I2C_Init+0x274>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d802      	bhi.n	8007438 <HAL_I2C_Init+0xd4>
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	3301      	adds	r3, #1
 8007436:	e009      	b.n	800744c <HAL_I2C_Init+0xe8>
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800743e:	fb02 f303 	mul.w	r3, r2, r3
 8007442:	4a69      	ldr	r2, [pc, #420]	; (80075e8 <HAL_I2C_Init+0x284>)
 8007444:	fba2 2303 	umull	r2, r3, r2, r3
 8007448:	099b      	lsrs	r3, r3, #6
 800744a:	3301      	adds	r3, #1
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	6812      	ldr	r2, [r2, #0]
 8007450:	430b      	orrs	r3, r1
 8007452:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800745e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	495c      	ldr	r1, [pc, #368]	; (80075d8 <HAL_I2C_Init+0x274>)
 8007468:	428b      	cmp	r3, r1
 800746a:	d819      	bhi.n	80074a0 <HAL_I2C_Init+0x13c>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	1e59      	subs	r1, r3, #1
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	005b      	lsls	r3, r3, #1
 8007476:	fbb1 f3f3 	udiv	r3, r1, r3
 800747a:	1c59      	adds	r1, r3, #1
 800747c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007480:	400b      	ands	r3, r1
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00a      	beq.n	800749c <HAL_I2C_Init+0x138>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	1e59      	subs	r1, r3, #1
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	005b      	lsls	r3, r3, #1
 8007490:	fbb1 f3f3 	udiv	r3, r1, r3
 8007494:	3301      	adds	r3, #1
 8007496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800749a:	e051      	b.n	8007540 <HAL_I2C_Init+0x1dc>
 800749c:	2304      	movs	r3, #4
 800749e:	e04f      	b.n	8007540 <HAL_I2C_Init+0x1dc>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d111      	bne.n	80074cc <HAL_I2C_Init+0x168>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	1e58      	subs	r0, r3, #1
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6859      	ldr	r1, [r3, #4]
 80074b0:	460b      	mov	r3, r1
 80074b2:	005b      	lsls	r3, r3, #1
 80074b4:	440b      	add	r3, r1
 80074b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80074ba:	3301      	adds	r3, #1
 80074bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	bf0c      	ite	eq
 80074c4:	2301      	moveq	r3, #1
 80074c6:	2300      	movne	r3, #0
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	e012      	b.n	80074f2 <HAL_I2C_Init+0x18e>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	1e58      	subs	r0, r3, #1
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6859      	ldr	r1, [r3, #4]
 80074d4:	460b      	mov	r3, r1
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	440b      	add	r3, r1
 80074da:	0099      	lsls	r1, r3, #2
 80074dc:	440b      	add	r3, r1
 80074de:	fbb0 f3f3 	udiv	r3, r0, r3
 80074e2:	3301      	adds	r3, #1
 80074e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	bf0c      	ite	eq
 80074ec:	2301      	moveq	r3, #1
 80074ee:	2300      	movne	r3, #0
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d001      	beq.n	80074fa <HAL_I2C_Init+0x196>
 80074f6:	2301      	movs	r3, #1
 80074f8:	e022      	b.n	8007540 <HAL_I2C_Init+0x1dc>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d10e      	bne.n	8007520 <HAL_I2C_Init+0x1bc>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	1e58      	subs	r0, r3, #1
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6859      	ldr	r1, [r3, #4]
 800750a:	460b      	mov	r3, r1
 800750c:	005b      	lsls	r3, r3, #1
 800750e:	440b      	add	r3, r1
 8007510:	fbb0 f3f3 	udiv	r3, r0, r3
 8007514:	3301      	adds	r3, #1
 8007516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800751a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800751e:	e00f      	b.n	8007540 <HAL_I2C_Init+0x1dc>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	1e58      	subs	r0, r3, #1
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6859      	ldr	r1, [r3, #4]
 8007528:	460b      	mov	r3, r1
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	440b      	add	r3, r1
 800752e:	0099      	lsls	r1, r3, #2
 8007530:	440b      	add	r3, r1
 8007532:	fbb0 f3f3 	udiv	r3, r0, r3
 8007536:	3301      	adds	r3, #1
 8007538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800753c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007540:	6879      	ldr	r1, [r7, #4]
 8007542:	6809      	ldr	r1, [r1, #0]
 8007544:	4313      	orrs	r3, r2
 8007546:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	69da      	ldr	r2, [r3, #28]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	431a      	orrs	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	430a      	orrs	r2, r1
 8007562:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800756e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	6911      	ldr	r1, [r2, #16]
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	68d2      	ldr	r2, [r2, #12]
 800757a:	4311      	orrs	r1, r2
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	6812      	ldr	r2, [r2, #0]
 8007580:	430b      	orrs	r3, r1
 8007582:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	695a      	ldr	r2, [r3, #20]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	431a      	orrs	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	430a      	orrs	r2, r1
 800759e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f042 0201 	orr.w	r2, r2, #1
 80075ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2220      	movs	r2, #32
 80075ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	000186a0 	.word	0x000186a0
 80075dc:	001e847f 	.word	0x001e847f
 80075e0:	003d08ff 	.word	0x003d08ff
 80075e4:	431bde83 	.word	0x431bde83
 80075e8:	10624dd3 	.word	0x10624dd3

080075ec <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d101      	bne.n	80075fe <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e021      	b.n	8007642 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2224      	movs	r2, #36	; 0x24
 8007602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f022 0201 	bic.w	r2, r2, #1
 8007614:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7fe f934 	bl	8005884 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
	...

0800764c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b088      	sub	sp, #32
 8007650:	af02      	add	r7, sp, #8
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	607a      	str	r2, [r7, #4]
 8007656:	461a      	mov	r2, r3
 8007658:	460b      	mov	r3, r1
 800765a:	817b      	strh	r3, [r7, #10]
 800765c:	4613      	mov	r3, r2
 800765e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007660:	f7fe fe66 	bl	8006330 <HAL_GetTick>
 8007664:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b20      	cmp	r3, #32
 8007670:	f040 80e0 	bne.w	8007834 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	2319      	movs	r3, #25
 800767a:	2201      	movs	r2, #1
 800767c:	4970      	ldr	r1, [pc, #448]	; (8007840 <HAL_I2C_Master_Transmit+0x1f4>)
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f000 fe10 	bl	80082a4 <I2C_WaitOnFlagUntilTimeout>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800768a:	2302      	movs	r3, #2
 800768c:	e0d3      	b.n	8007836 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007694:	2b01      	cmp	r3, #1
 8007696:	d101      	bne.n	800769c <HAL_I2C_Master_Transmit+0x50>
 8007698:	2302      	movs	r3, #2
 800769a:	e0cc      	b.n	8007836 <HAL_I2C_Master_Transmit+0x1ea>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d007      	beq.n	80076c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f042 0201 	orr.w	r2, r2, #1
 80076c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2221      	movs	r2, #33	; 0x21
 80076d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2210      	movs	r2, #16
 80076de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	893a      	ldrh	r2, [r7, #8]
 80076f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	4a50      	ldr	r2, [pc, #320]	; (8007844 <HAL_I2C_Master_Transmit+0x1f8>)
 8007702:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007704:	8979      	ldrh	r1, [r7, #10]
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	6a3a      	ldr	r2, [r7, #32]
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f000 fbca 	bl	8007ea4 <I2C_MasterRequestWrite>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e08d      	b.n	8007836 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800771a:	2300      	movs	r3, #0
 800771c:	613b      	str	r3, [r7, #16]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	613b      	str	r3, [r7, #16]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	613b      	str	r3, [r7, #16]
 800772e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007730:	e066      	b.n	8007800 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	6a39      	ldr	r1, [r7, #32]
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f000 fe8a 	bl	8008450 <I2C_WaitOnTXEFlagUntilTimeout>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00d      	beq.n	800775e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007746:	2b04      	cmp	r3, #4
 8007748:	d107      	bne.n	800775a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007758:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e06b      	b.n	8007836 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007762:	781a      	ldrb	r2, [r3, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776e:	1c5a      	adds	r2, r3, #1
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007778:	b29b      	uxth	r3, r3
 800777a:	3b01      	subs	r3, #1
 800777c:	b29a      	uxth	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007786:	3b01      	subs	r3, #1
 8007788:	b29a      	uxth	r2, r3
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	695b      	ldr	r3, [r3, #20]
 8007794:	f003 0304 	and.w	r3, r3, #4
 8007798:	2b04      	cmp	r3, #4
 800779a:	d11b      	bne.n	80077d4 <HAL_I2C_Master_Transmit+0x188>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d017      	beq.n	80077d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	781a      	ldrb	r2, [r3, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b4:	1c5a      	adds	r2, r3, #1
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077be:	b29b      	uxth	r3, r3
 80077c0:	3b01      	subs	r3, #1
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077cc:	3b01      	subs	r3, #1
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077d4:	697a      	ldr	r2, [r7, #20]
 80077d6:	6a39      	ldr	r1, [r7, #32]
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 fe7a 	bl	80084d2 <I2C_WaitOnBTFFlagUntilTimeout>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00d      	beq.n	8007800 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e8:	2b04      	cmp	r3, #4
 80077ea:	d107      	bne.n	80077fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e01a      	b.n	8007836 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007804:	2b00      	cmp	r3, #0
 8007806:	d194      	bne.n	8007732 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007816:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2220      	movs	r2, #32
 800781c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007830:	2300      	movs	r3, #0
 8007832:	e000      	b.n	8007836 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007834:	2302      	movs	r3, #2
  }
}
 8007836:	4618      	mov	r0, r3
 8007838:	3718      	adds	r7, #24
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	00100002 	.word	0x00100002
 8007844:	ffff0000 	.word	0xffff0000

08007848 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b088      	sub	sp, #32
 800784c:	af02      	add	r7, sp, #8
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	4608      	mov	r0, r1
 8007852:	4611      	mov	r1, r2
 8007854:	461a      	mov	r2, r3
 8007856:	4603      	mov	r3, r0
 8007858:	817b      	strh	r3, [r7, #10]
 800785a:	460b      	mov	r3, r1
 800785c:	813b      	strh	r3, [r7, #8]
 800785e:	4613      	mov	r3, r2
 8007860:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007862:	f7fe fd65 	bl	8006330 <HAL_GetTick>
 8007866:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b20      	cmp	r3, #32
 8007872:	f040 80d9 	bne.w	8007a28 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	2319      	movs	r3, #25
 800787c:	2201      	movs	r2, #1
 800787e:	496d      	ldr	r1, [pc, #436]	; (8007a34 <HAL_I2C_Mem_Write+0x1ec>)
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f000 fd0f 	bl	80082a4 <I2C_WaitOnFlagUntilTimeout>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d001      	beq.n	8007890 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800788c:	2302      	movs	r3, #2
 800788e:	e0cc      	b.n	8007a2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007896:	2b01      	cmp	r3, #1
 8007898:	d101      	bne.n	800789e <HAL_I2C_Mem_Write+0x56>
 800789a:	2302      	movs	r3, #2
 800789c:	e0c5      	b.n	8007a2a <HAL_I2C_Mem_Write+0x1e2>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d007      	beq.n	80078c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f042 0201 	orr.w	r2, r2, #1
 80078c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2221      	movs	r2, #33	; 0x21
 80078d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2240      	movs	r2, #64	; 0x40
 80078e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6a3a      	ldr	r2, [r7, #32]
 80078ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80078f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	4a4d      	ldr	r2, [pc, #308]	; (8007a38 <HAL_I2C_Mem_Write+0x1f0>)
 8007904:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007906:	88f8      	ldrh	r0, [r7, #6]
 8007908:	893a      	ldrh	r2, [r7, #8]
 800790a:	8979      	ldrh	r1, [r7, #10]
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	9301      	str	r3, [sp, #4]
 8007910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	4603      	mov	r3, r0
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f000 fb46 	bl	8007fa8 <I2C_RequestMemoryWrite>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d052      	beq.n	80079c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e081      	b.n	8007a2a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f000 fd90 	bl	8008450 <I2C_WaitOnTXEFlagUntilTimeout>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00d      	beq.n	8007952 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793a:	2b04      	cmp	r3, #4
 800793c:	d107      	bne.n	800794e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800794c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e06b      	b.n	8007a2a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007956:	781a      	ldrb	r2, [r3, #0]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007962:	1c5a      	adds	r2, r3, #1
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800796c:	3b01      	subs	r3, #1
 800796e:	b29a      	uxth	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007978:	b29b      	uxth	r3, r3
 800797a:	3b01      	subs	r3, #1
 800797c:	b29a      	uxth	r2, r3
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	695b      	ldr	r3, [r3, #20]
 8007988:	f003 0304 	and.w	r3, r3, #4
 800798c:	2b04      	cmp	r3, #4
 800798e:	d11b      	bne.n	80079c8 <HAL_I2C_Mem_Write+0x180>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007994:	2b00      	cmp	r3, #0
 8007996:	d017      	beq.n	80079c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799c:	781a      	ldrb	r2, [r3, #0]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a8:	1c5a      	adds	r2, r3, #1
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079b2:	3b01      	subs	r3, #1
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079be:	b29b      	uxth	r3, r3
 80079c0:	3b01      	subs	r3, #1
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1aa      	bne.n	8007926 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f000 fd7c 	bl	80084d2 <I2C_WaitOnBTFFlagUntilTimeout>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00d      	beq.n	80079fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e4:	2b04      	cmp	r3, #4
 80079e6:	d107      	bne.n	80079f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e016      	b.n	8007a2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2220      	movs	r2, #32
 8007a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	e000      	b.n	8007a2a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007a28:	2302      	movs	r3, #2
  }
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3718      	adds	r7, #24
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	00100002 	.word	0x00100002
 8007a38:	ffff0000 	.word	0xffff0000

08007a3c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b08c      	sub	sp, #48	; 0x30
 8007a40:	af02      	add	r7, sp, #8
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	4608      	mov	r0, r1
 8007a46:	4611      	mov	r1, r2
 8007a48:	461a      	mov	r2, r3
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	817b      	strh	r3, [r7, #10]
 8007a4e:	460b      	mov	r3, r1
 8007a50:	813b      	strh	r3, [r7, #8]
 8007a52:	4613      	mov	r3, r2
 8007a54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007a56:	f7fe fc6b 	bl	8006330 <HAL_GetTick>
 8007a5a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	2b20      	cmp	r3, #32
 8007a66:	f040 8208 	bne.w	8007e7a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	2319      	movs	r3, #25
 8007a70:	2201      	movs	r2, #1
 8007a72:	497b      	ldr	r1, [pc, #492]	; (8007c60 <HAL_I2C_Mem_Read+0x224>)
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f000 fc15 	bl	80082a4 <I2C_WaitOnFlagUntilTimeout>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d001      	beq.n	8007a84 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007a80:	2302      	movs	r3, #2
 8007a82:	e1fb      	b.n	8007e7c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d101      	bne.n	8007a92 <HAL_I2C_Mem_Read+0x56>
 8007a8e:	2302      	movs	r3, #2
 8007a90:	e1f4      	b.n	8007e7c <HAL_I2C_Mem_Read+0x440>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0301 	and.w	r3, r3, #1
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d007      	beq.n	8007ab8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f042 0201 	orr.w	r2, r2, #1
 8007ab6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ac6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2222      	movs	r2, #34	; 0x22
 8007acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2240      	movs	r2, #64	; 0x40
 8007ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ae2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007ae8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	4a5b      	ldr	r2, [pc, #364]	; (8007c64 <HAL_I2C_Mem_Read+0x228>)
 8007af8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007afa:	88f8      	ldrh	r0, [r7, #6]
 8007afc:	893a      	ldrh	r2, [r7, #8]
 8007afe:	8979      	ldrh	r1, [r7, #10]
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	9301      	str	r3, [sp, #4]
 8007b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	4603      	mov	r3, r0
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f000 fae2 	bl	80080d4 <I2C_RequestMemoryRead>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e1b0      	b.n	8007e7c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d113      	bne.n	8007b4a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b22:	2300      	movs	r3, #0
 8007b24:	623b      	str	r3, [r7, #32]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	695b      	ldr	r3, [r3, #20]
 8007b2c:	623b      	str	r3, [r7, #32]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	623b      	str	r3, [r7, #32]
 8007b36:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b46:	601a      	str	r2, [r3, #0]
 8007b48:	e184      	b.n	8007e54 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d11b      	bne.n	8007b8a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b62:	2300      	movs	r3, #0
 8007b64:	61fb      	str	r3, [r7, #28]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	695b      	ldr	r3, [r3, #20]
 8007b6c:	61fb      	str	r3, [r7, #28]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	61fb      	str	r3, [r7, #28]
 8007b76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b86:	601a      	str	r2, [r3, #0]
 8007b88:	e164      	b.n	8007e54 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d11b      	bne.n	8007bca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ba0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	61bb      	str	r3, [r7, #24]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	61bb      	str	r3, [r7, #24]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	61bb      	str	r3, [r7, #24]
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	e144      	b.n	8007e54 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bca:	2300      	movs	r3, #0
 8007bcc:	617b      	str	r3, [r7, #20]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	617b      	str	r3, [r7, #20]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	617b      	str	r3, [r7, #20]
 8007bde:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007be0:	e138      	b.n	8007e54 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007be6:	2b03      	cmp	r3, #3
 8007be8:	f200 80f1 	bhi.w	8007dce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d123      	bne.n	8007c3c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f000 fcab 	bl	8008554 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d001      	beq.n	8007c08 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e139      	b.n	8007e7c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	691a      	ldr	r2, [r3, #16]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c12:	b2d2      	uxtb	r2, r2
 8007c14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1a:	1c5a      	adds	r2, r3, #1
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c24:	3b01      	subs	r3, #1
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	3b01      	subs	r3, #1
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c3a:	e10b      	b.n	8007e54 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d14e      	bne.n	8007ce2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	4906      	ldr	r1, [pc, #24]	; (8007c68 <HAL_I2C_Mem_Read+0x22c>)
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f000 fb28 	bl	80082a4 <I2C_WaitOnFlagUntilTimeout>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d008      	beq.n	8007c6c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e10e      	b.n	8007e7c <HAL_I2C_Mem_Read+0x440>
 8007c5e:	bf00      	nop
 8007c60:	00100002 	.word	0x00100002
 8007c64:	ffff0000 	.word	0xffff0000
 8007c68:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	691a      	ldr	r2, [r3, #16]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c86:	b2d2      	uxtb	r2, r2
 8007c88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8e:	1c5a      	adds	r2, r3, #1
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	691a      	ldr	r2, [r3, #16]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb8:	b2d2      	uxtb	r2, r2
 8007cba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc0:	1c5a      	adds	r2, r3, #1
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007ce0:	e0b8      	b.n	8007e54 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce8:	2200      	movs	r2, #0
 8007cea:	4966      	ldr	r1, [pc, #408]	; (8007e84 <HAL_I2C_Mem_Read+0x448>)
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f000 fad9 	bl	80082a4 <I2C_WaitOnFlagUntilTimeout>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d001      	beq.n	8007cfc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e0bf      	b.n	8007e7c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	691a      	ldr	r2, [r3, #16]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d16:	b2d2      	uxtb	r2, r2
 8007d18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1e:	1c5a      	adds	r2, r3, #1
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	3b01      	subs	r3, #1
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d40:	9300      	str	r3, [sp, #0]
 8007d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d44:	2200      	movs	r2, #0
 8007d46:	494f      	ldr	r1, [pc, #316]	; (8007e84 <HAL_I2C_Mem_Read+0x448>)
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f000 faab 	bl	80082a4 <I2C_WaitOnFlagUntilTimeout>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e091      	b.n	8007e7c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	691a      	ldr	r2, [r3, #16]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d72:	b2d2      	uxtb	r2, r2
 8007d74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7a:	1c5a      	adds	r2, r3, #1
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d84:	3b01      	subs	r3, #1
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	3b01      	subs	r3, #1
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	691a      	ldr	r2, [r3, #16]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da4:	b2d2      	uxtb	r2, r2
 8007da6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dac:	1c5a      	adds	r2, r3, #1
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007db6:	3b01      	subs	r3, #1
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007dcc:	e042      	b.n	8007e54 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f000 fbbe 	bl	8008554 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e04c      	b.n	8007e7c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	691a      	ldr	r2, [r3, #16]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dec:	b2d2      	uxtb	r2, r2
 8007dee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df4:	1c5a      	adds	r2, r3, #1
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	b29a      	uxth	r2, r3
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	f003 0304 	and.w	r3, r3, #4
 8007e1e:	2b04      	cmp	r3, #4
 8007e20:	d118      	bne.n	8007e54 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	691a      	ldr	r2, [r3, #16]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2c:	b2d2      	uxtb	r2, r2
 8007e2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e34:	1c5a      	adds	r2, r3, #1
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f47f aec2 	bne.w	8007be2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2220      	movs	r2, #32
 8007e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007e76:	2300      	movs	r3, #0
 8007e78:	e000      	b.n	8007e7c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007e7a:	2302      	movs	r3, #2
  }
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3728      	adds	r7, #40	; 0x28
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	00010004 	.word	0x00010004

08007e88 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e96:	b2db      	uxtb	r3, r3
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b088      	sub	sp, #32
 8007ea8:	af02      	add	r7, sp, #8
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	607a      	str	r2, [r7, #4]
 8007eae:	603b      	str	r3, [r7, #0]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	2b08      	cmp	r3, #8
 8007ebe:	d006      	beq.n	8007ece <I2C_MasterRequestWrite+0x2a>
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d003      	beq.n	8007ece <I2C_MasterRequestWrite+0x2a>
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ecc:	d108      	bne.n	8007ee0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	e00b      	b.n	8007ef8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee4:	2b12      	cmp	r3, #18
 8007ee6:	d107      	bne.n	8007ef8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ef6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	9300      	str	r3, [sp, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f000 f9cd 	bl	80082a4 <I2C_WaitOnFlagUntilTimeout>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00d      	beq.n	8007f2c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f1e:	d103      	bne.n	8007f28 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e035      	b.n	8007f98 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f34:	d108      	bne.n	8007f48 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007f36:	897b      	ldrh	r3, [r7, #10]
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007f44:	611a      	str	r2, [r3, #16]
 8007f46:	e01b      	b.n	8007f80 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007f48:	897b      	ldrh	r3, [r7, #10]
 8007f4a:	11db      	asrs	r3, r3, #7
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	f003 0306 	and.w	r3, r3, #6
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	f063 030f 	orn	r3, r3, #15
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	490e      	ldr	r1, [pc, #56]	; (8007fa0 <I2C_MasterRequestWrite+0xfc>)
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f000 f9f3 	bl	8008352 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d001      	beq.n	8007f76 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e010      	b.n	8007f98 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007f76:	897b      	ldrh	r3, [r7, #10]
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	4907      	ldr	r1, [pc, #28]	; (8007fa4 <I2C_MasterRequestWrite+0x100>)
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f000 f9e3 	bl	8008352 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e000      	b.n	8007f98 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3718      	adds	r7, #24
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	00010008 	.word	0x00010008
 8007fa4:	00010002 	.word	0x00010002

08007fa8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b088      	sub	sp, #32
 8007fac:	af02      	add	r7, sp, #8
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	4608      	mov	r0, r1
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	817b      	strh	r3, [r7, #10]
 8007fba:	460b      	mov	r3, r1
 8007fbc:	813b      	strh	r3, [r7, #8]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	9300      	str	r3, [sp, #0]
 8007fd6:	6a3b      	ldr	r3, [r7, #32]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f000 f960 	bl	80082a4 <I2C_WaitOnFlagUntilTimeout>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00d      	beq.n	8008006 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ff8:	d103      	bne.n	8008002 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008000:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008002:	2303      	movs	r3, #3
 8008004:	e05f      	b.n	80080c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008006:	897b      	ldrh	r3, [r7, #10]
 8008008:	b2db      	uxtb	r3, r3
 800800a:	461a      	mov	r2, r3
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008014:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	6a3a      	ldr	r2, [r7, #32]
 800801a:	492d      	ldr	r1, [pc, #180]	; (80080d0 <I2C_RequestMemoryWrite+0x128>)
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f000 f998 	bl	8008352 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d001      	beq.n	800802c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e04c      	b.n	80080c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800802c:	2300      	movs	r3, #0
 800802e:	617b      	str	r3, [r7, #20]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	617b      	str	r3, [r7, #20]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	617b      	str	r3, [r7, #20]
 8008040:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008044:	6a39      	ldr	r1, [r7, #32]
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f000 fa02 	bl	8008450 <I2C_WaitOnTXEFlagUntilTimeout>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00d      	beq.n	800806e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008056:	2b04      	cmp	r3, #4
 8008058:	d107      	bne.n	800806a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008068:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e02b      	b.n	80080c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800806e:	88fb      	ldrh	r3, [r7, #6]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d105      	bne.n	8008080 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008074:	893b      	ldrh	r3, [r7, #8]
 8008076:	b2da      	uxtb	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	611a      	str	r2, [r3, #16]
 800807e:	e021      	b.n	80080c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008080:	893b      	ldrh	r3, [r7, #8]
 8008082:	0a1b      	lsrs	r3, r3, #8
 8008084:	b29b      	uxth	r3, r3
 8008086:	b2da      	uxtb	r2, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800808e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008090:	6a39      	ldr	r1, [r7, #32]
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f000 f9dc 	bl	8008450 <I2C_WaitOnTXEFlagUntilTimeout>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00d      	beq.n	80080ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a2:	2b04      	cmp	r3, #4
 80080a4:	d107      	bne.n	80080b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e005      	b.n	80080c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80080ba:	893b      	ldrh	r3, [r7, #8]
 80080bc:	b2da      	uxtb	r2, r3
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3718      	adds	r7, #24
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	00010002 	.word	0x00010002

080080d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b088      	sub	sp, #32
 80080d8:	af02      	add	r7, sp, #8
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	4608      	mov	r0, r1
 80080de:	4611      	mov	r1, r2
 80080e0:	461a      	mov	r2, r3
 80080e2:	4603      	mov	r3, r0
 80080e4:	817b      	strh	r3, [r7, #10]
 80080e6:	460b      	mov	r3, r1
 80080e8:	813b      	strh	r3, [r7, #8]
 80080ea:	4613      	mov	r3, r2
 80080ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80080fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800810c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800810e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008110:	9300      	str	r3, [sp, #0]
 8008112:	6a3b      	ldr	r3, [r7, #32]
 8008114:	2200      	movs	r2, #0
 8008116:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f000 f8c2 	bl	80082a4 <I2C_WaitOnFlagUntilTimeout>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00d      	beq.n	8008142 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008134:	d103      	bne.n	800813e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800813c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e0aa      	b.n	8008298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008142:	897b      	ldrh	r3, [r7, #10]
 8008144:	b2db      	uxtb	r3, r3
 8008146:	461a      	mov	r2, r3
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008150:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008154:	6a3a      	ldr	r2, [r7, #32]
 8008156:	4952      	ldr	r1, [pc, #328]	; (80082a0 <I2C_RequestMemoryRead+0x1cc>)
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	f000 f8fa 	bl	8008352 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d001      	beq.n	8008168 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e097      	b.n	8008298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008168:	2300      	movs	r3, #0
 800816a:	617b      	str	r3, [r7, #20]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	617b      	str	r3, [r7, #20]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	617b      	str	r3, [r7, #20]
 800817c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800817e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008180:	6a39      	ldr	r1, [r7, #32]
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f000 f964 	bl	8008450 <I2C_WaitOnTXEFlagUntilTimeout>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00d      	beq.n	80081aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008192:	2b04      	cmp	r3, #4
 8008194:	d107      	bne.n	80081a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	e076      	b.n	8008298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80081aa:	88fb      	ldrh	r3, [r7, #6]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d105      	bne.n	80081bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80081b0:	893b      	ldrh	r3, [r7, #8]
 80081b2:	b2da      	uxtb	r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	611a      	str	r2, [r3, #16]
 80081ba:	e021      	b.n	8008200 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80081bc:	893b      	ldrh	r3, [r7, #8]
 80081be:	0a1b      	lsrs	r3, r3, #8
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	b2da      	uxtb	r2, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081cc:	6a39      	ldr	r1, [r7, #32]
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f000 f93e 	bl	8008450 <I2C_WaitOnTXEFlagUntilTimeout>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00d      	beq.n	80081f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081de:	2b04      	cmp	r3, #4
 80081e0:	d107      	bne.n	80081f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e050      	b.n	8008298 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80081f6:	893b      	ldrh	r3, [r7, #8]
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008202:	6a39      	ldr	r1, [r7, #32]
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f000 f923 	bl	8008450 <I2C_WaitOnTXEFlagUntilTimeout>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00d      	beq.n	800822c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008214:	2b04      	cmp	r3, #4
 8008216:	d107      	bne.n	8008228 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008226:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e035      	b.n	8008298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800823a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800823c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	6a3b      	ldr	r3, [r7, #32]
 8008242:	2200      	movs	r2, #0
 8008244:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f000 f82b 	bl	80082a4 <I2C_WaitOnFlagUntilTimeout>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00d      	beq.n	8008270 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800825e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008262:	d103      	bne.n	800826c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800826a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800826c:	2303      	movs	r3, #3
 800826e:	e013      	b.n	8008298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008270:	897b      	ldrh	r3, [r7, #10]
 8008272:	b2db      	uxtb	r3, r3
 8008274:	f043 0301 	orr.w	r3, r3, #1
 8008278:	b2da      	uxtb	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008282:	6a3a      	ldr	r2, [r7, #32]
 8008284:	4906      	ldr	r1, [pc, #24]	; (80082a0 <I2C_RequestMemoryRead+0x1cc>)
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	f000 f863 	bl	8008352 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d001      	beq.n	8008296 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e000      	b.n	8008298 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3718      	adds	r7, #24
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	00010002 	.word	0x00010002

080082a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	603b      	str	r3, [r7, #0]
 80082b0:	4613      	mov	r3, r2
 80082b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80082b4:	e025      	b.n	8008302 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082bc:	d021      	beq.n	8008302 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082be:	f7fe f837 	bl	8006330 <HAL_GetTick>
 80082c2:	4602      	mov	r2, r0
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d302      	bcc.n	80082d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d116      	bne.n	8008302 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2200      	movs	r2, #0
 80082d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2220      	movs	r2, #32
 80082de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ee:	f043 0220 	orr.w	r2, r3, #32
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	e023      	b.n	800834a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	0c1b      	lsrs	r3, r3, #16
 8008306:	b2db      	uxtb	r3, r3
 8008308:	2b01      	cmp	r3, #1
 800830a:	d10d      	bne.n	8008328 <I2C_WaitOnFlagUntilTimeout+0x84>
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	43da      	mvns	r2, r3
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	4013      	ands	r3, r2
 8008318:	b29b      	uxth	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	bf0c      	ite	eq
 800831e:	2301      	moveq	r3, #1
 8008320:	2300      	movne	r3, #0
 8008322:	b2db      	uxtb	r3, r3
 8008324:	461a      	mov	r2, r3
 8008326:	e00c      	b.n	8008342 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	699b      	ldr	r3, [r3, #24]
 800832e:	43da      	mvns	r2, r3
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	4013      	ands	r3, r2
 8008334:	b29b      	uxth	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	bf0c      	ite	eq
 800833a:	2301      	moveq	r3, #1
 800833c:	2300      	movne	r3, #0
 800833e:	b2db      	uxtb	r3, r3
 8008340:	461a      	mov	r2, r3
 8008342:	79fb      	ldrb	r3, [r7, #7]
 8008344:	429a      	cmp	r2, r3
 8008346:	d0b6      	beq.n	80082b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b084      	sub	sp, #16
 8008356:	af00      	add	r7, sp, #0
 8008358:	60f8      	str	r0, [r7, #12]
 800835a:	60b9      	str	r1, [r7, #8]
 800835c:	607a      	str	r2, [r7, #4]
 800835e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008360:	e051      	b.n	8008406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	695b      	ldr	r3, [r3, #20]
 8008368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800836c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008370:	d123      	bne.n	80083ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008380:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800838a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2220      	movs	r2, #32
 8008396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a6:	f043 0204 	orr.w	r2, r3, #4
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e046      	b.n	8008448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083c0:	d021      	beq.n	8008406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083c2:	f7fd ffb5 	bl	8006330 <HAL_GetTick>
 80083c6:	4602      	mov	r2, r0
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	1ad3      	subs	r3, r2, r3
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d302      	bcc.n	80083d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d116      	bne.n	8008406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2200      	movs	r2, #0
 80083dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2220      	movs	r2, #32
 80083e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f2:	f043 0220 	orr.w	r2, r3, #32
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e020      	b.n	8008448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	0c1b      	lsrs	r3, r3, #16
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b01      	cmp	r3, #1
 800840e:	d10c      	bne.n	800842a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	695b      	ldr	r3, [r3, #20]
 8008416:	43da      	mvns	r2, r3
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	4013      	ands	r3, r2
 800841c:	b29b      	uxth	r3, r3
 800841e:	2b00      	cmp	r3, #0
 8008420:	bf14      	ite	ne
 8008422:	2301      	movne	r3, #1
 8008424:	2300      	moveq	r3, #0
 8008426:	b2db      	uxtb	r3, r3
 8008428:	e00b      	b.n	8008442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	43da      	mvns	r2, r3
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	4013      	ands	r3, r2
 8008436:	b29b      	uxth	r3, r3
 8008438:	2b00      	cmp	r3, #0
 800843a:	bf14      	ite	ne
 800843c:	2301      	movne	r3, #1
 800843e:	2300      	moveq	r3, #0
 8008440:	b2db      	uxtb	r3, r3
 8008442:	2b00      	cmp	r3, #0
 8008444:	d18d      	bne.n	8008362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800845c:	e02d      	b.n	80084ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f000 f8ce 	bl	8008600 <I2C_IsAcknowledgeFailed>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e02d      	b.n	80084ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008474:	d021      	beq.n	80084ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008476:	f7fd ff5b 	bl	8006330 <HAL_GetTick>
 800847a:	4602      	mov	r2, r0
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	1ad3      	subs	r3, r2, r3
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	429a      	cmp	r2, r3
 8008484:	d302      	bcc.n	800848c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d116      	bne.n	80084ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2220      	movs	r2, #32
 8008496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a6:	f043 0220 	orr.w	r2, r3, #32
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e007      	b.n	80084ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	695b      	ldr	r3, [r3, #20]
 80084c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084c4:	2b80      	cmp	r3, #128	; 0x80
 80084c6:	d1ca      	bne.n	800845e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b084      	sub	sp, #16
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	60f8      	str	r0, [r7, #12]
 80084da:	60b9      	str	r1, [r7, #8]
 80084dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80084de:	e02d      	b.n	800853c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f000 f88d 	bl	8008600 <I2C_IsAcknowledgeFailed>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d001      	beq.n	80084f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	e02d      	b.n	800854c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084f6:	d021      	beq.n	800853c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084f8:	f7fd ff1a 	bl	8006330 <HAL_GetTick>
 80084fc:	4602      	mov	r2, r0
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	429a      	cmp	r2, r3
 8008506:	d302      	bcc.n	800850e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d116      	bne.n	800853c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2200      	movs	r2, #0
 8008512:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2220      	movs	r2, #32
 8008518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008528:	f043 0220 	orr.w	r2, r3, #32
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2200      	movs	r2, #0
 8008534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e007      	b.n	800854c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	695b      	ldr	r3, [r3, #20]
 8008542:	f003 0304 	and.w	r3, r3, #4
 8008546:	2b04      	cmp	r3, #4
 8008548:	d1ca      	bne.n	80084e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008560:	e042      	b.n	80085e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	695b      	ldr	r3, [r3, #20]
 8008568:	f003 0310 	and.w	r3, r3, #16
 800856c:	2b10      	cmp	r3, #16
 800856e:	d119      	bne.n	80085a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f06f 0210 	mvn.w	r2, #16
 8008578:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2200      	movs	r2, #0
 800857e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2220      	movs	r2, #32
 8008584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e029      	b.n	80085f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085a4:	f7fd fec4 	bl	8006330 <HAL_GetTick>
 80085a8:	4602      	mov	r2, r0
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d302      	bcc.n	80085ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d116      	bne.n	80085e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2200      	movs	r2, #0
 80085be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2220      	movs	r2, #32
 80085c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d4:	f043 0220 	orr.w	r2, r3, #32
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	e007      	b.n	80085f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	695b      	ldr	r3, [r3, #20]
 80085ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085f2:	2b40      	cmp	r3, #64	; 0x40
 80085f4:	d1b5      	bne.n	8008562 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008616:	d11b      	bne.n	8008650 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008620:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2220      	movs	r2, #32
 800862c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863c:	f043 0204 	orr.w	r2, r3, #4
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e000      	b.n	8008652 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	370c      	adds	r7, #12
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
	...

08008660 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b088      	sub	sp, #32
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d101      	bne.n	8008672 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e128      	b.n	80088c4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008678:	b2db      	uxtb	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d109      	bne.n	8008692 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a90      	ldr	r2, [pc, #576]	; (80088cc <HAL_I2S_Init+0x26c>)
 800868a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f7fd f933 	bl	80058f8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2202      	movs	r2, #2
 8008696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	69db      	ldr	r3, [r3, #28]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	6812      	ldr	r2, [r2, #0]
 80086a4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80086a8:	f023 030f 	bic.w	r3, r3, #15
 80086ac:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2202      	movs	r2, #2
 80086b4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	695b      	ldr	r3, [r3, #20]
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d060      	beq.n	8008780 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d102      	bne.n	80086cc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80086c6:	2310      	movs	r3, #16
 80086c8:	617b      	str	r3, [r7, #20]
 80086ca:	e001      	b.n	80086d0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80086cc:	2320      	movs	r3, #32
 80086ce:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	2b20      	cmp	r3, #32
 80086d6:	d802      	bhi.n	80086de <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	005b      	lsls	r3, r3, #1
 80086dc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80086de:	2001      	movs	r0, #1
 80086e0:	f001 fe36 	bl	800a350 <HAL_RCCEx_GetPeriphCLKFreq>
 80086e4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086ee:	d125      	bne.n	800873c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d010      	beq.n	800871a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8008702:	4613      	mov	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	4413      	add	r3, r2
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	461a      	mov	r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	695b      	ldr	r3, [r3, #20]
 8008710:	fbb2 f3f3 	udiv	r3, r2, r3
 8008714:	3305      	adds	r3, #5
 8008716:	613b      	str	r3, [r7, #16]
 8008718:	e01f      	b.n	800875a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	00db      	lsls	r3, r3, #3
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	fbb2 f2f3 	udiv	r2, r2, r3
 8008724:	4613      	mov	r3, r2
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	4413      	add	r3, r2
 800872a:	005b      	lsls	r3, r3, #1
 800872c:	461a      	mov	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	695b      	ldr	r3, [r3, #20]
 8008732:	fbb2 f3f3 	udiv	r3, r2, r3
 8008736:	3305      	adds	r3, #5
 8008738:	613b      	str	r3, [r7, #16]
 800873a:	e00e      	b.n	800875a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	fbb2 f2f3 	udiv	r2, r2, r3
 8008744:	4613      	mov	r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	4413      	add	r3, r2
 800874a:	005b      	lsls	r3, r3, #1
 800874c:	461a      	mov	r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	695b      	ldr	r3, [r3, #20]
 8008752:	fbb2 f3f3 	udiv	r3, r2, r3
 8008756:	3305      	adds	r3, #5
 8008758:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	4a5c      	ldr	r2, [pc, #368]	; (80088d0 <HAL_I2S_Init+0x270>)
 800875e:	fba2 2303 	umull	r2, r3, r2, r3
 8008762:	08db      	lsrs	r3, r3, #3
 8008764:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	085b      	lsrs	r3, r3, #1
 8008776:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	021b      	lsls	r3, r3, #8
 800877c:	61bb      	str	r3, [r7, #24]
 800877e:	e003      	b.n	8008788 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8008780:	2302      	movs	r3, #2
 8008782:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8008784:	2300      	movs	r3, #0
 8008786:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	2b01      	cmp	r3, #1
 800878c:	d902      	bls.n	8008794 <HAL_I2S_Init+0x134>
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	2bff      	cmp	r3, #255	; 0xff
 8008792:	d907      	bls.n	80087a4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008798:	f043 0210 	orr.w	r2, r3, #16
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	e08f      	b.n	80088c4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	691a      	ldr	r2, [r3, #16]
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	ea42 0103 	orr.w	r1, r2, r3
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	69fa      	ldr	r2, [r7, #28]
 80087b4:	430a      	orrs	r2, r1
 80087b6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	69db      	ldr	r3, [r3, #28]
 80087be:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80087c2:	f023 030f 	bic.w	r3, r3, #15
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	6851      	ldr	r1, [r2, #4]
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	6892      	ldr	r2, [r2, #8]
 80087ce:	4311      	orrs	r1, r2
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	68d2      	ldr	r2, [r2, #12]
 80087d4:	4311      	orrs	r1, r2
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	6992      	ldr	r2, [r2, #24]
 80087da:	430a      	orrs	r2, r1
 80087dc:	431a      	orrs	r2, r3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087e6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a1b      	ldr	r3, [r3, #32]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d161      	bne.n	80088b4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a38      	ldr	r2, [pc, #224]	; (80088d4 <HAL_I2S_Init+0x274>)
 80087f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a37      	ldr	r2, [pc, #220]	; (80088d8 <HAL_I2S_Init+0x278>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d101      	bne.n	8008804 <HAL_I2S_Init+0x1a4>
 8008800:	4b36      	ldr	r3, [pc, #216]	; (80088dc <HAL_I2S_Init+0x27c>)
 8008802:	e001      	b.n	8008808 <HAL_I2S_Init+0x1a8>
 8008804:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008808:	69db      	ldr	r3, [r3, #28]
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	6812      	ldr	r2, [r2, #0]
 800880e:	4932      	ldr	r1, [pc, #200]	; (80088d8 <HAL_I2S_Init+0x278>)
 8008810:	428a      	cmp	r2, r1
 8008812:	d101      	bne.n	8008818 <HAL_I2S_Init+0x1b8>
 8008814:	4a31      	ldr	r2, [pc, #196]	; (80088dc <HAL_I2S_Init+0x27c>)
 8008816:	e001      	b.n	800881c <HAL_I2S_Init+0x1bc>
 8008818:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800881c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008820:	f023 030f 	bic.w	r3, r3, #15
 8008824:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a2b      	ldr	r2, [pc, #172]	; (80088d8 <HAL_I2S_Init+0x278>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d101      	bne.n	8008834 <HAL_I2S_Init+0x1d4>
 8008830:	4b2a      	ldr	r3, [pc, #168]	; (80088dc <HAL_I2S_Init+0x27c>)
 8008832:	e001      	b.n	8008838 <HAL_I2S_Init+0x1d8>
 8008834:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008838:	2202      	movs	r2, #2
 800883a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a25      	ldr	r2, [pc, #148]	; (80088d8 <HAL_I2S_Init+0x278>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d101      	bne.n	800884a <HAL_I2S_Init+0x1ea>
 8008846:	4b25      	ldr	r3, [pc, #148]	; (80088dc <HAL_I2S_Init+0x27c>)
 8008848:	e001      	b.n	800884e <HAL_I2S_Init+0x1ee>
 800884a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800884e:	69db      	ldr	r3, [r3, #28]
 8008850:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800885a:	d003      	beq.n	8008864 <HAL_I2S_Init+0x204>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d103      	bne.n	800886c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8008864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008868:	613b      	str	r3, [r7, #16]
 800886a:	e001      	b.n	8008870 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800886c:	2300      	movs	r3, #0
 800886e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800887a:	4313      	orrs	r3, r2
 800887c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008884:	4313      	orrs	r3, r2
 8008886:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	699b      	ldr	r3, [r3, #24]
 800888c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800888e:	4313      	orrs	r3, r2
 8008890:	b29a      	uxth	r2, r3
 8008892:	897b      	ldrh	r3, [r7, #10]
 8008894:	4313      	orrs	r3, r2
 8008896:	b29b      	uxth	r3, r3
 8008898:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800889c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a0d      	ldr	r2, [pc, #52]	; (80088d8 <HAL_I2S_Init+0x278>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d101      	bne.n	80088ac <HAL_I2S_Init+0x24c>
 80088a8:	4b0c      	ldr	r3, [pc, #48]	; (80088dc <HAL_I2S_Init+0x27c>)
 80088aa:	e001      	b.n	80088b0 <HAL_I2S_Init+0x250>
 80088ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80088b0:	897a      	ldrh	r2, [r7, #10]
 80088b2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2201      	movs	r2, #1
 80088be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3720      	adds	r7, #32
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	08009165 	.word	0x08009165
 80088d0:	cccccccd 	.word	0xcccccccd
 80088d4:	080092ed 	.word	0x080092ed
 80088d8:	40003800 	.word	0x40003800
 80088dc:	40003400 	.word	0x40003400

080088e0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	4613      	mov	r3, r2
 80088ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d002      	beq.n	80088fa <HAL_I2S_Transmit_DMA+0x1a>
 80088f4:	88fb      	ldrh	r3, [r7, #6]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d101      	bne.n	80088fe <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e08e      	b.n	8008a1c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b01      	cmp	r3, #1
 8008908:	d101      	bne.n	800890e <HAL_I2S_Transmit_DMA+0x2e>
 800890a:	2302      	movs	r3, #2
 800890c:	e086      	b.n	8008a1c <HAL_I2S_Transmit_DMA+0x13c>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2201      	movs	r2, #1
 8008912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b01      	cmp	r3, #1
 8008920:	d005      	beq.n	800892e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800892a:	2302      	movs	r3, #2
 800892c:	e076      	b.n	8008a1c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2203      	movs	r2, #3
 8008932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2200      	movs	r2, #0
 800893a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	68ba      	ldr	r2, [r7, #8]
 8008940:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	69db      	ldr	r3, [r3, #28]
 8008948:	f003 0307 	and.w	r3, r3, #7
 800894c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	2b03      	cmp	r3, #3
 8008952:	d002      	beq.n	800895a <HAL_I2S_Transmit_DMA+0x7a>
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	2b05      	cmp	r3, #5
 8008958:	d10a      	bne.n	8008970 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 800895a:	88fb      	ldrh	r3, [r7, #6]
 800895c:	005b      	lsls	r3, r3, #1
 800895e:	b29a      	uxth	r2, r3
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8008964:	88fb      	ldrh	r3, [r7, #6]
 8008966:	005b      	lsls	r3, r3, #1
 8008968:	b29a      	uxth	r2, r3
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800896e:	e005      	b.n	800897c <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	88fa      	ldrh	r2, [r7, #6]
 8008974:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	88fa      	ldrh	r2, [r7, #6]
 800897a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008980:	4a28      	ldr	r2, [pc, #160]	; (8008a24 <HAL_I2S_Transmit_DMA+0x144>)
 8008982:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008988:	4a27      	ldr	r2, [pc, #156]	; (8008a28 <HAL_I2S_Transmit_DMA+0x148>)
 800898a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008990:	4a26      	ldr	r2, [pc, #152]	; (8008a2c <HAL_I2S_Transmit_DMA+0x14c>)
 8008992:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800899c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80089a4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089aa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80089ac:	f7fd fede 	bl	800676c <HAL_DMA_Start_IT>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00f      	beq.n	80089d6 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ba:	f043 0208 	orr.w	r2, r3, #8
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e022      	b.n	8008a1c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	69db      	ldr	r3, [r3, #28]
 80089dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d107      	bne.n	80089f4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	69da      	ldr	r2, [r3, #28]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80089f2:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	f003 0302 	and.w	r3, r3, #2
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d107      	bne.n	8008a12 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	685a      	ldr	r2, [r3, #4]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f042 0202 	orr.w	r2, r2, #2
 8008a10:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3718      	adds	r7, #24
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	08009043 	.word	0x08009043
 8008a28:	08009001 	.word	0x08009001
 8008a2c:	0800905f 	.word	0x0800905f

08008a30 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d101      	bne.n	8008a48 <HAL_I2S_DMAPause+0x18>
 8008a44:	2302      	movs	r3, #2
 8008a46:	e04a      	b.n	8008ade <HAL_I2S_DMAPause+0xae>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	2b03      	cmp	r3, #3
 8008a5a:	d108      	bne.n	8008a6e <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	685a      	ldr	r2, [r3, #4]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f022 0202 	bic.w	r2, r2, #2
 8008a6a:	605a      	str	r2, [r3, #4]
 8008a6c:	e032      	b.n	8008ad4 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	2b04      	cmp	r3, #4
 8008a78:	d108      	bne.n	8008a8c <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	685a      	ldr	r2, [r3, #4]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f022 0201 	bic.w	r2, r2, #1
 8008a88:	605a      	str	r2, [r3, #4]
 8008a8a:	e023      	b.n	8008ad4 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	2b05      	cmp	r3, #5
 8008a96:	d11d      	bne.n	8008ad4 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	685a      	ldr	r2, [r3, #4]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f022 0203 	bic.w	r2, r2, #3
 8008aa6:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a0f      	ldr	r2, [pc, #60]	; (8008aec <HAL_I2S_DMAPause+0xbc>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d101      	bne.n	8008ab6 <HAL_I2S_DMAPause+0x86>
 8008ab2:	4b0f      	ldr	r3, [pc, #60]	; (8008af0 <HAL_I2S_DMAPause+0xc0>)
 8008ab4:	e001      	b.n	8008aba <HAL_I2S_DMAPause+0x8a>
 8008ab6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	490a      	ldr	r1, [pc, #40]	; (8008aec <HAL_I2S_DMAPause+0xbc>)
 8008ac2:	428b      	cmp	r3, r1
 8008ac4:	d101      	bne.n	8008aca <HAL_I2S_DMAPause+0x9a>
 8008ac6:	4b0a      	ldr	r3, [pc, #40]	; (8008af0 <HAL_I2S_DMAPause+0xc0>)
 8008ac8:	e001      	b.n	8008ace <HAL_I2S_DMAPause+0x9e>
 8008aca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ace:	f022 0203 	bic.w	r2, r2, #3
 8008ad2:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	370c      	adds	r7, #12
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	40003800 	.word	0x40003800
 8008af0:	40003400 	.word	0x40003400

08008af4 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d101      	bne.n	8008b0c <HAL_I2S_DMAResume+0x18>
 8008b08:	2302      	movs	r3, #2
 8008b0a:	e07d      	b.n	8008c08 <HAL_I2S_DMAResume+0x114>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	2b03      	cmp	r3, #3
 8008b1e:	d108      	bne.n	8008b32 <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	685a      	ldr	r2, [r3, #4]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f042 0202 	orr.w	r2, r2, #2
 8008b2e:	605a      	str	r2, [r3, #4]
 8008b30:	e056      	b.n	8008be0 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	2b04      	cmp	r3, #4
 8008b3c:	d108      	bne.n	8008b50 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	685a      	ldr	r2, [r3, #4]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f042 0201 	orr.w	r2, r2, #1
 8008b4c:	605a      	str	r2, [r3, #4]
 8008b4e:	e047      	b.n	8008be0 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	2b05      	cmp	r3, #5
 8008b5a:	d141      	bne.n	8008be0 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	685a      	ldr	r2, [r3, #4]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f042 0203 	orr.w	r2, r2, #3
 8008b6a:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a28      	ldr	r2, [pc, #160]	; (8008c14 <HAL_I2S_DMAResume+0x120>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d101      	bne.n	8008b7a <HAL_I2S_DMAResume+0x86>
 8008b76:	4b28      	ldr	r3, [pc, #160]	; (8008c18 <HAL_I2S_DMAResume+0x124>)
 8008b78:	e001      	b.n	8008b7e <HAL_I2S_DMAResume+0x8a>
 8008b7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008b7e:	685a      	ldr	r2, [r3, #4]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4923      	ldr	r1, [pc, #140]	; (8008c14 <HAL_I2S_DMAResume+0x120>)
 8008b86:	428b      	cmp	r3, r1
 8008b88:	d101      	bne.n	8008b8e <HAL_I2S_DMAResume+0x9a>
 8008b8a:	4b23      	ldr	r3, [pc, #140]	; (8008c18 <HAL_I2S_DMAResume+0x124>)
 8008b8c:	e001      	b.n	8008b92 <HAL_I2S_DMAResume+0x9e>
 8008b8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008b92:	f042 0203 	orr.w	r2, r2, #3
 8008b96:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a1d      	ldr	r2, [pc, #116]	; (8008c14 <HAL_I2S_DMAResume+0x120>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d101      	bne.n	8008ba6 <HAL_I2S_DMAResume+0xb2>
 8008ba2:	4b1d      	ldr	r3, [pc, #116]	; (8008c18 <HAL_I2S_DMAResume+0x124>)
 8008ba4:	e001      	b.n	8008baa <HAL_I2S_DMAResume+0xb6>
 8008ba6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008baa:	69db      	ldr	r3, [r3, #28]
 8008bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d115      	bne.n	8008be0 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a16      	ldr	r2, [pc, #88]	; (8008c14 <HAL_I2S_DMAResume+0x120>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d101      	bne.n	8008bc2 <HAL_I2S_DMAResume+0xce>
 8008bbe:	4b16      	ldr	r3, [pc, #88]	; (8008c18 <HAL_I2S_DMAResume+0x124>)
 8008bc0:	e001      	b.n	8008bc6 <HAL_I2S_DMAResume+0xd2>
 8008bc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008bc6:	69da      	ldr	r2, [r3, #28]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4911      	ldr	r1, [pc, #68]	; (8008c14 <HAL_I2S_DMAResume+0x120>)
 8008bce:	428b      	cmp	r3, r1
 8008bd0:	d101      	bne.n	8008bd6 <HAL_I2S_DMAResume+0xe2>
 8008bd2:	4b11      	ldr	r3, [pc, #68]	; (8008c18 <HAL_I2S_DMAResume+0x124>)
 8008bd4:	e001      	b.n	8008bda <HAL_I2S_DMAResume+0xe6>
 8008bd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008bda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008bde:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	69db      	ldr	r3, [r3, #28]
 8008be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d107      	bne.n	8008bfe <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	69da      	ldr	r2, [r3, #28]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008bfc:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr
 8008c14:	40003800 	.word	0x40003800
 8008c18:	40003400 	.word	0x40003400

08008c1c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b088      	sub	sp, #32
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008c24:	2300      	movs	r3, #0
 8008c26:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c30:	d004      	beq.n	8008c3c <HAL_I2S_DMAStop+0x20>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	f040 80d1 	bne.w	8008dde <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00f      	beq.n	8008c64 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7fd fde7 	bl	800681c <HAL_DMA_Abort>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d007      	beq.n	8008c64 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c58:	f043 0208 	orr.w	r2, r3, #8
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8008c64:	2364      	movs	r3, #100	; 0x64
 8008c66:	2201      	movs	r2, #1
 8008c68:	2102      	movs	r1, #2
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fb04 	bl	8009278 <I2S_WaitFlagStateUntilTimeout>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00b      	beq.n	8008c8e <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c7a:	f043 0201 	orr.w	r2, r3, #1
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8008c8e:	2364      	movs	r3, #100	; 0x64
 8008c90:	2200      	movs	r2, #0
 8008c92:	2180      	movs	r1, #128	; 0x80
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 faef 	bl	8009278 <I2S_WaitFlagStateUntilTimeout>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00b      	beq.n	8008cb8 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca4:	f043 0201 	orr.w	r2, r3, #1
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	69da      	ldr	r2, [r3, #28]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cc6:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008cc8:	2300      	movs	r3, #0
 8008cca:	617b      	str	r3, [r7, #20]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	617b      	str	r3, [r7, #20]
 8008cd4:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	685a      	ldr	r2, [r3, #4]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f022 0202 	bic.w	r2, r2, #2
 8008ce4:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	2b05      	cmp	r3, #5
 8008cf0:	f040 8165 	bne.w	8008fbe <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00f      	beq.n	8008d1c <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7fd fd8b 	bl	800681c <HAL_DMA_Abort>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d007      	beq.n	8008d1c <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d10:	f043 0208 	orr.w	r2, r3, #8
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a8a      	ldr	r2, [pc, #552]	; (8008f4c <HAL_I2S_DMAStop+0x330>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d101      	bne.n	8008d2a <HAL_I2S_DMAStop+0x10e>
 8008d26:	4b8a      	ldr	r3, [pc, #552]	; (8008f50 <HAL_I2S_DMAStop+0x334>)
 8008d28:	e001      	b.n	8008d2e <HAL_I2S_DMAStop+0x112>
 8008d2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008d2e:	69da      	ldr	r2, [r3, #28]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4985      	ldr	r1, [pc, #532]	; (8008f4c <HAL_I2S_DMAStop+0x330>)
 8008d36:	428b      	cmp	r3, r1
 8008d38:	d101      	bne.n	8008d3e <HAL_I2S_DMAStop+0x122>
 8008d3a:	4b85      	ldr	r3, [pc, #532]	; (8008f50 <HAL_I2S_DMAStop+0x334>)
 8008d3c:	e001      	b.n	8008d42 <HAL_I2S_DMAStop+0x126>
 8008d3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d46:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8008d48:	2300      	movs	r3, #0
 8008d4a:	613b      	str	r3, [r7, #16]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a7e      	ldr	r2, [pc, #504]	; (8008f4c <HAL_I2S_DMAStop+0x330>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d101      	bne.n	8008d5a <HAL_I2S_DMAStop+0x13e>
 8008d56:	4b7e      	ldr	r3, [pc, #504]	; (8008f50 <HAL_I2S_DMAStop+0x334>)
 8008d58:	e001      	b.n	8008d5e <HAL_I2S_DMAStop+0x142>
 8008d5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	613b      	str	r3, [r7, #16]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a79      	ldr	r2, [pc, #484]	; (8008f4c <HAL_I2S_DMAStop+0x330>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d101      	bne.n	8008d70 <HAL_I2S_DMAStop+0x154>
 8008d6c:	4b78      	ldr	r3, [pc, #480]	; (8008f50 <HAL_I2S_DMAStop+0x334>)
 8008d6e:	e001      	b.n	8008d74 <HAL_I2S_DMAStop+0x158>
 8008d70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	613b      	str	r3, [r7, #16]
 8008d78:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a73      	ldr	r2, [pc, #460]	; (8008f4c <HAL_I2S_DMAStop+0x330>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d101      	bne.n	8008d88 <HAL_I2S_DMAStop+0x16c>
 8008d84:	4b72      	ldr	r3, [pc, #456]	; (8008f50 <HAL_I2S_DMAStop+0x334>)
 8008d86:	e001      	b.n	8008d8c <HAL_I2S_DMAStop+0x170>
 8008d88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008d8c:	685a      	ldr	r2, [r3, #4]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	496e      	ldr	r1, [pc, #440]	; (8008f4c <HAL_I2S_DMAStop+0x330>)
 8008d94:	428b      	cmp	r3, r1
 8008d96:	d101      	bne.n	8008d9c <HAL_I2S_DMAStop+0x180>
 8008d98:	4b6d      	ldr	r3, [pc, #436]	; (8008f50 <HAL_I2S_DMAStop+0x334>)
 8008d9a:	e001      	b.n	8008da0 <HAL_I2S_DMAStop+0x184>
 8008d9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008da0:	f022 0201 	bic.w	r2, r2, #1
 8008da4:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10c      	bne.n	8008dc8 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008db2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8008dc6:	e0fa      	b.n	8008fbe <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a5f      	ldr	r2, [pc, #380]	; (8008f4c <HAL_I2S_DMAStop+0x330>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d101      	bne.n	8008dd6 <HAL_I2S_DMAStop+0x1ba>
 8008dd2:	4b5f      	ldr	r3, [pc, #380]	; (8008f50 <HAL_I2S_DMAStop+0x334>)
 8008dd4:	e001      	b.n	8008dda <HAL_I2S_DMAStop+0x1be>
 8008dd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008dda:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8008ddc:	e0ef      	b.n	8008fbe <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008de6:	d005      	beq.n	8008df4 <HAL_I2S_DMAStop+0x1d8>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008df0:	f040 80e5 	bne.w	8008fbe <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00f      	beq.n	8008e1c <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7fd fd0b 	bl	800681c <HAL_DMA_Abort>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d007      	beq.n	8008e1c <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e10:	f043 0208 	orr.w	r2, r3, #8
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	2b05      	cmp	r3, #5
 8008e26:	f040 809a 	bne.w	8008f5e <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00f      	beq.n	8008e52 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fd fcf0 	bl	800681c <HAL_DMA_Abort>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d007      	beq.n	8008e52 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e46:	f043 0208 	orr.w	r2, r3, #8
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8008e52:	f7fd fa6d 	bl	8006330 <HAL_GetTick>
 8008e56:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8008e58:	e012      	b.n	8008e80 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8008e5a:	f7fd fa69 	bl	8006330 <HAL_GetTick>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	1ad3      	subs	r3, r2, r3
 8008e64:	2b64      	cmp	r3, #100	; 0x64
 8008e66:	d90b      	bls.n	8008e80 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e6c:	f043 0201 	orr.w	r2, r3, #1
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a31      	ldr	r2, [pc, #196]	; (8008f4c <HAL_I2S_DMAStop+0x330>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d101      	bne.n	8008e8e <HAL_I2S_DMAStop+0x272>
 8008e8a:	4b31      	ldr	r3, [pc, #196]	; (8008f50 <HAL_I2S_DMAStop+0x334>)
 8008e8c:	e001      	b.n	8008e92 <HAL_I2S_DMAStop+0x276>
 8008e8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	f003 0302 	and.w	r3, r3, #2
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d1de      	bne.n	8008e5a <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8008e9c:	e012      	b.n	8008ec4 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8008e9e:	f7fd fa47 	bl	8006330 <HAL_GetTick>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	2b64      	cmp	r3, #100	; 0x64
 8008eaa:	d90b      	bls.n	8008ec4 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eb0:	f043 0201 	orr.w	r2, r3, #1
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a20      	ldr	r2, [pc, #128]	; (8008f4c <HAL_I2S_DMAStop+0x330>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d101      	bne.n	8008ed2 <HAL_I2S_DMAStop+0x2b6>
 8008ece:	4b20      	ldr	r3, [pc, #128]	; (8008f50 <HAL_I2S_DMAStop+0x334>)
 8008ed0:	e001      	b.n	8008ed6 <HAL_I2S_DMAStop+0x2ba>
 8008ed2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008edc:	2b80      	cmp	r3, #128	; 0x80
 8008ede:	d0de      	beq.n	8008e9e <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a19      	ldr	r2, [pc, #100]	; (8008f4c <HAL_I2S_DMAStop+0x330>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d101      	bne.n	8008eee <HAL_I2S_DMAStop+0x2d2>
 8008eea:	4b19      	ldr	r3, [pc, #100]	; (8008f50 <HAL_I2S_DMAStop+0x334>)
 8008eec:	e001      	b.n	8008ef2 <HAL_I2S_DMAStop+0x2d6>
 8008eee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ef2:	69da      	ldr	r2, [r3, #28]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4914      	ldr	r1, [pc, #80]	; (8008f4c <HAL_I2S_DMAStop+0x330>)
 8008efa:	428b      	cmp	r3, r1
 8008efc:	d101      	bne.n	8008f02 <HAL_I2S_DMAStop+0x2e6>
 8008efe:	4b14      	ldr	r3, [pc, #80]	; (8008f50 <HAL_I2S_DMAStop+0x334>)
 8008f00:	e001      	b.n	8008f06 <HAL_I2S_DMAStop+0x2ea>
 8008f02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f0a:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	60fb      	str	r3, [r7, #12]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a0d      	ldr	r2, [pc, #52]	; (8008f4c <HAL_I2S_DMAStop+0x330>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d101      	bne.n	8008f1e <HAL_I2S_DMAStop+0x302>
 8008f1a:	4b0d      	ldr	r3, [pc, #52]	; (8008f50 <HAL_I2S_DMAStop+0x334>)
 8008f1c:	e001      	b.n	8008f22 <HAL_I2S_DMAStop+0x306>
 8008f1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	60fb      	str	r3, [r7, #12]
 8008f26:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a07      	ldr	r2, [pc, #28]	; (8008f4c <HAL_I2S_DMAStop+0x330>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d101      	bne.n	8008f36 <HAL_I2S_DMAStop+0x31a>
 8008f32:	4b07      	ldr	r3, [pc, #28]	; (8008f50 <HAL_I2S_DMAStop+0x334>)
 8008f34:	e001      	b.n	8008f3a <HAL_I2S_DMAStop+0x31e>
 8008f36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008f3a:	685a      	ldr	r2, [r3, #4]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4902      	ldr	r1, [pc, #8]	; (8008f4c <HAL_I2S_DMAStop+0x330>)
 8008f42:	428b      	cmp	r3, r1
 8008f44:	d106      	bne.n	8008f54 <HAL_I2S_DMAStop+0x338>
 8008f46:	4b02      	ldr	r3, [pc, #8]	; (8008f50 <HAL_I2S_DMAStop+0x334>)
 8008f48:	e006      	b.n	8008f58 <HAL_I2S_DMAStop+0x33c>
 8008f4a:	bf00      	nop
 8008f4c:	40003800 	.word	0x40003800
 8008f50:	40003400 	.word	0x40003400
 8008f54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008f58:	f022 0202 	bic.w	r2, r2, #2
 8008f5c:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	69da      	ldr	r2, [r3, #28]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f6c:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008f6e:	2300      	movs	r3, #0
 8008f70:	60bb      	str	r3, [r7, #8]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	60bb      	str	r3, [r7, #8]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	60bb      	str	r3, [r7, #8]
 8008f82:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	685a      	ldr	r2, [r3, #4]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f022 0201 	bic.w	r2, r2, #1
 8008f92:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f9c:	d10c      	bne.n	8008fb8 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fa2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2201      	movs	r2, #1
 8008fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	77fb      	strb	r3, [r7, #31]
 8008fb6:	e002      	b.n	8008fbe <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8008fc6:	7ffb      	ldrb	r3, [r7, #31]
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3720      	adds	r7, #32
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8008fd8:	bf00      	nop
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ff2:	b2db      	uxtb	r3, r3
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800900c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	69db      	ldr	r3, [r3, #28]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d10e      	bne.n	8009034 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f022 0202 	bic.w	r2, r2, #2
 8009024:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2200      	movs	r2, #0
 800902a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f7f7 fb89 	bl	800074c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800903a:	bf00      	nop
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b084      	sub	sp, #16
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800904e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f7f7 fb8d 	bl	8000770 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8009056:	bf00      	nop
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b084      	sub	sp, #16
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800906a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	685a      	ldr	r2, [r3, #4]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f022 0203 	bic.w	r2, r2, #3
 800907a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2200      	movs	r2, #0
 8009086:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2201      	movs	r2, #1
 800908c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009094:	f043 0208 	orr.w	r2, r3, #8
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f7f7 fcd3 	bl	8000a48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80090a2:	bf00      	nop
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b082      	sub	sp, #8
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b6:	881a      	ldrh	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c2:	1c9a      	adds	r2, r3, #2
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	3b01      	subs	r3, #1
 80090d0:	b29a      	uxth	r2, r3
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090da:	b29b      	uxth	r3, r3
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d10e      	bne.n	80090fe <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685a      	ldr	r2, [r3, #4]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80090ee:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f7f7 fb27 	bl	800074c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80090fe:	bf00      	nop
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b082      	sub	sp, #8
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68da      	ldr	r2, [r3, #12]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009118:	b292      	uxth	r2, r2
 800911a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009120:	1c9a      	adds	r2, r3, #2
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800912a:	b29b      	uxth	r3, r3
 800912c:	3b01      	subs	r3, #1
 800912e:	b29a      	uxth	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009138:	b29b      	uxth	r3, r3
 800913a:	2b00      	cmp	r3, #0
 800913c:	d10e      	bne.n	800915c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	685a      	ldr	r2, [r3, #4]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800914c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2201      	movs	r2, #1
 8009152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f7ff ff3a 	bl	8008fd0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800915c:	bf00      	nop
 800915e:	3708      	adds	r7, #8
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b086      	sub	sp, #24
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800917a:	b2db      	uxtb	r3, r3
 800917c:	2b04      	cmp	r3, #4
 800917e:	d13a      	bne.n	80091f6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	f003 0301 	and.w	r3, r3, #1
 8009186:	2b01      	cmp	r3, #1
 8009188:	d109      	bne.n	800919e <I2S_IRQHandler+0x3a>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009194:	2b40      	cmp	r3, #64	; 0x40
 8009196:	d102      	bne.n	800919e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f7ff ffb4 	bl	8009106 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091a4:	2b40      	cmp	r3, #64	; 0x40
 80091a6:	d126      	bne.n	80091f6 <I2S_IRQHandler+0x92>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	f003 0320 	and.w	r3, r3, #32
 80091b2:	2b20      	cmp	r3, #32
 80091b4:	d11f      	bne.n	80091f6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	685a      	ldr	r2, [r3, #4]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80091c4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80091c6:	2300      	movs	r3, #0
 80091c8:	613b      	str	r3, [r7, #16]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	613b      	str	r3, [r7, #16]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	613b      	str	r3, [r7, #16]
 80091da:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091e8:	f043 0202 	orr.w	r2, r3, #2
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f7f7 fc29 	bl	8000a48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b03      	cmp	r3, #3
 8009200:	d136      	bne.n	8009270 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	f003 0302 	and.w	r3, r3, #2
 8009208:	2b02      	cmp	r3, #2
 800920a:	d109      	bne.n	8009220 <I2S_IRQHandler+0xbc>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009216:	2b80      	cmp	r3, #128	; 0x80
 8009218:	d102      	bne.n	8009220 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f7ff ff45 	bl	80090aa <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	f003 0308 	and.w	r3, r3, #8
 8009226:	2b08      	cmp	r3, #8
 8009228:	d122      	bne.n	8009270 <I2S_IRQHandler+0x10c>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	f003 0320 	and.w	r3, r3, #32
 8009234:	2b20      	cmp	r3, #32
 8009236:	d11b      	bne.n	8009270 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	685a      	ldr	r2, [r3, #4]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009246:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8009248:	2300      	movs	r3, #0
 800924a:	60fb      	str	r3, [r7, #12]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	60fb      	str	r3, [r7, #12]
 8009254:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2201      	movs	r2, #1
 800925a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009262:	f043 0204 	orr.w	r2, r3, #4
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f7f7 fbec 	bl	8000a48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009270:	bf00      	nop
 8009272:	3718      	adds	r7, #24
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b086      	sub	sp, #24
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	603b      	str	r3, [r7, #0]
 8009284:	4613      	mov	r3, r2
 8009286:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8009288:	f7fd f852 	bl	8006330 <HAL_GetTick>
 800928c:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800928e:	e018      	b.n	80092c2 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009296:	d014      	beq.n	80092c2 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8009298:	f7fd f84a 	bl	8006330 <HAL_GetTick>
 800929c:	4602      	mov	r2, r0
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	683a      	ldr	r2, [r7, #0]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d902      	bls.n	80092ae <I2S_WaitFlagStateUntilTimeout+0x36>
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d109      	bne.n	80092c2 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2201      	movs	r2, #1
 80092b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2200      	movs	r2, #0
 80092ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80092be:	2303      	movs	r3, #3
 80092c0:	e00f      	b.n	80092e2 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	689a      	ldr	r2, [r3, #8]
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	4013      	ands	r3, r2
 80092cc:	68ba      	ldr	r2, [r7, #8]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	bf0c      	ite	eq
 80092d2:	2301      	moveq	r3, #1
 80092d4:	2300      	movne	r3, #0
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	461a      	mov	r2, r3
 80092da:	79fb      	ldrb	r3, [r7, #7]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d1d7      	bne.n	8009290 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3718      	adds	r7, #24
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
	...

080092ec <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b088      	sub	sp, #32
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a92      	ldr	r2, [pc, #584]	; (800954c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d101      	bne.n	800930a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8009306:	4b92      	ldr	r3, [pc, #584]	; (8009550 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009308:	e001      	b.n	800930e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800930a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a8b      	ldr	r2, [pc, #556]	; (800954c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d101      	bne.n	8009328 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8009324:	4b8a      	ldr	r3, [pc, #552]	; (8009550 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009326:	e001      	b.n	800932c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8009328:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009338:	d004      	beq.n	8009344 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	f040 8099 	bne.w	8009476 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	f003 0302 	and.w	r3, r3, #2
 800934a:	2b02      	cmp	r3, #2
 800934c:	d107      	bne.n	800935e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009354:	2b00      	cmp	r3, #0
 8009356:	d002      	beq.n	800935e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 f925 	bl	80095a8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	f003 0301 	and.w	r3, r3, #1
 8009364:	2b01      	cmp	r3, #1
 8009366:	d107      	bne.n	8009378 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800936e:	2b00      	cmp	r3, #0
 8009370:	d002      	beq.n	8009378 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f9c8 	bl	8009708 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800937e:	2b40      	cmp	r3, #64	; 0x40
 8009380:	d13a      	bne.n	80093f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	f003 0320 	and.w	r3, r3, #32
 8009388:	2b00      	cmp	r3, #0
 800938a:	d035      	beq.n	80093f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a6e      	ldr	r2, [pc, #440]	; (800954c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d101      	bne.n	800939a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8009396:	4b6e      	ldr	r3, [pc, #440]	; (8009550 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009398:	e001      	b.n	800939e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800939a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800939e:	685a      	ldr	r2, [r3, #4]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4969      	ldr	r1, [pc, #420]	; (800954c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80093a6:	428b      	cmp	r3, r1
 80093a8:	d101      	bne.n	80093ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80093aa:	4b69      	ldr	r3, [pc, #420]	; (8009550 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80093ac:	e001      	b.n	80093b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80093ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80093b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80093b6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	685a      	ldr	r2, [r3, #4]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80093c6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80093c8:	2300      	movs	r3, #0
 80093ca:	60fb      	str	r3, [r7, #12]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	60fb      	str	r3, [r7, #12]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	60fb      	str	r3, [r7, #12]
 80093dc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2201      	movs	r2, #1
 80093e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ea:	f043 0202 	orr.w	r2, r3, #2
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f7f7 fb28 	bl	8000a48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	f003 0308 	and.w	r3, r3, #8
 80093fe:	2b08      	cmp	r3, #8
 8009400:	f040 80c3 	bne.w	800958a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	f003 0320 	and.w	r3, r3, #32
 800940a:	2b00      	cmp	r3, #0
 800940c:	f000 80bd 	beq.w	800958a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	685a      	ldr	r2, [r3, #4]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800941e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a49      	ldr	r2, [pc, #292]	; (800954c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d101      	bne.n	800942e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800942a:	4b49      	ldr	r3, [pc, #292]	; (8009550 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800942c:	e001      	b.n	8009432 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800942e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009432:	685a      	ldr	r2, [r3, #4]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4944      	ldr	r1, [pc, #272]	; (800954c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800943a:	428b      	cmp	r3, r1
 800943c:	d101      	bne.n	8009442 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800943e:	4b44      	ldr	r3, [pc, #272]	; (8009550 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009440:	e001      	b.n	8009446 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8009442:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009446:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800944a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800944c:	2300      	movs	r3, #0
 800944e:	60bb      	str	r3, [r7, #8]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	60bb      	str	r3, [r7, #8]
 8009458:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2201      	movs	r2, #1
 800945e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009466:	f043 0204 	orr.w	r2, r3, #4
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f7f7 faea 	bl	8000a48 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009474:	e089      	b.n	800958a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	f003 0302 	and.w	r3, r3, #2
 800947c:	2b02      	cmp	r3, #2
 800947e:	d107      	bne.n	8009490 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009486:	2b00      	cmp	r3, #0
 8009488:	d002      	beq.n	8009490 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f8be 	bl	800960c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	f003 0301 	and.w	r3, r3, #1
 8009496:	2b01      	cmp	r3, #1
 8009498:	d107      	bne.n	80094aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d002      	beq.n	80094aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 f8fd 	bl	80096a4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b0:	2b40      	cmp	r3, #64	; 0x40
 80094b2:	d12f      	bne.n	8009514 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	f003 0320 	and.w	r3, r3, #32
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d02a      	beq.n	8009514 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	685a      	ldr	r2, [r3, #4]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80094cc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a1e      	ldr	r2, [pc, #120]	; (800954c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d101      	bne.n	80094dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80094d8:	4b1d      	ldr	r3, [pc, #116]	; (8009550 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80094da:	e001      	b.n	80094e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80094dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80094e0:	685a      	ldr	r2, [r3, #4]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4919      	ldr	r1, [pc, #100]	; (800954c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80094e8:	428b      	cmp	r3, r1
 80094ea:	d101      	bne.n	80094f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80094ec:	4b18      	ldr	r3, [pc, #96]	; (8009550 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80094ee:	e001      	b.n	80094f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80094f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80094f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80094f8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2201      	movs	r2, #1
 80094fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009506:	f043 0202 	orr.w	r2, r3, #2
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f7f7 fa9a 	bl	8000a48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	f003 0308 	and.w	r3, r3, #8
 800951a:	2b08      	cmp	r3, #8
 800951c:	d136      	bne.n	800958c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	f003 0320 	and.w	r3, r3, #32
 8009524:	2b00      	cmp	r3, #0
 8009526:	d031      	beq.n	800958c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a07      	ldr	r2, [pc, #28]	; (800954c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d101      	bne.n	8009536 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8009532:	4b07      	ldr	r3, [pc, #28]	; (8009550 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009534:	e001      	b.n	800953a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8009536:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800953a:	685a      	ldr	r2, [r3, #4]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4902      	ldr	r1, [pc, #8]	; (800954c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009542:	428b      	cmp	r3, r1
 8009544:	d106      	bne.n	8009554 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8009546:	4b02      	ldr	r3, [pc, #8]	; (8009550 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009548:	e006      	b.n	8009558 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800954a:	bf00      	nop
 800954c:	40003800 	.word	0x40003800
 8009550:	40003400 	.word	0x40003400
 8009554:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009558:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800955c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	685a      	ldr	r2, [r3, #4]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800956c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2201      	movs	r2, #1
 8009572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800957a:	f043 0204 	orr.w	r2, r3, #4
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f7f7 fa60 	bl	8000a48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009588:	e000      	b.n	800958c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800958a:	bf00      	nop
}
 800958c:	bf00      	nop
 800958e:	3720      	adds	r7, #32
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b4:	1c99      	adds	r1, r3, #2
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	6251      	str	r1, [r2, #36]	; 0x24
 80095ba:	881a      	ldrh	r2, [r3, #0]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	3b01      	subs	r3, #1
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d113      	bne.n	8009602 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	685a      	ldr	r2, [r3, #4]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80095e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d106      	bne.n	8009602 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2201      	movs	r2, #1
 80095f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7ff ffc9 	bl	8009594 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009602:	bf00      	nop
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
	...

0800960c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009618:	1c99      	adds	r1, r3, #2
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	6251      	str	r1, [r2, #36]	; 0x24
 800961e:	8819      	ldrh	r1, [r3, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a1d      	ldr	r2, [pc, #116]	; (800969c <I2SEx_TxISR_I2SExt+0x90>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d101      	bne.n	800962e <I2SEx_TxISR_I2SExt+0x22>
 800962a:	4b1d      	ldr	r3, [pc, #116]	; (80096a0 <I2SEx_TxISR_I2SExt+0x94>)
 800962c:	e001      	b.n	8009632 <I2SEx_TxISR_I2SExt+0x26>
 800962e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009632:	460a      	mov	r2, r1
 8009634:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800963a:	b29b      	uxth	r3, r3
 800963c:	3b01      	subs	r3, #1
 800963e:	b29a      	uxth	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009648:	b29b      	uxth	r3, r3
 800964a:	2b00      	cmp	r3, #0
 800964c:	d121      	bne.n	8009692 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a12      	ldr	r2, [pc, #72]	; (800969c <I2SEx_TxISR_I2SExt+0x90>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d101      	bne.n	800965c <I2SEx_TxISR_I2SExt+0x50>
 8009658:	4b11      	ldr	r3, [pc, #68]	; (80096a0 <I2SEx_TxISR_I2SExt+0x94>)
 800965a:	e001      	b.n	8009660 <I2SEx_TxISR_I2SExt+0x54>
 800965c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009660:	685a      	ldr	r2, [r3, #4]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	490d      	ldr	r1, [pc, #52]	; (800969c <I2SEx_TxISR_I2SExt+0x90>)
 8009668:	428b      	cmp	r3, r1
 800966a:	d101      	bne.n	8009670 <I2SEx_TxISR_I2SExt+0x64>
 800966c:	4b0c      	ldr	r3, [pc, #48]	; (80096a0 <I2SEx_TxISR_I2SExt+0x94>)
 800966e:	e001      	b.n	8009674 <I2SEx_TxISR_I2SExt+0x68>
 8009670:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009674:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009678:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800967e:	b29b      	uxth	r3, r3
 8009680:	2b00      	cmp	r3, #0
 8009682:	d106      	bne.n	8009692 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f7ff ff81 	bl	8009594 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009692:	bf00      	nop
 8009694:	3708      	adds	r7, #8
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	40003800 	.word	0x40003800
 80096a0:	40003400 	.word	0x40003400

080096a4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	68d8      	ldr	r0, [r3, #12]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b6:	1c99      	adds	r1, r3, #2
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	62d1      	str	r1, [r2, #44]	; 0x2c
 80096bc:	b282      	uxth	r2, r0
 80096be:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	3b01      	subs	r3, #1
 80096c8:	b29a      	uxth	r2, r3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d113      	bne.n	8009700 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	685a      	ldr	r2, [r3, #4]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80096e6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d106      	bne.n	8009700 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2201      	movs	r2, #1
 80096f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7ff ff4a 	bl	8009594 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009700:	bf00      	nop
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a20      	ldr	r2, [pc, #128]	; (8009798 <I2SEx_RxISR_I2SExt+0x90>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d101      	bne.n	800971e <I2SEx_RxISR_I2SExt+0x16>
 800971a:	4b20      	ldr	r3, [pc, #128]	; (800979c <I2SEx_RxISR_I2SExt+0x94>)
 800971c:	e001      	b.n	8009722 <I2SEx_RxISR_I2SExt+0x1a>
 800971e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009722:	68d8      	ldr	r0, [r3, #12]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009728:	1c99      	adds	r1, r3, #2
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800972e:	b282      	uxth	r2, r0
 8009730:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009736:	b29b      	uxth	r3, r3
 8009738:	3b01      	subs	r3, #1
 800973a:	b29a      	uxth	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009744:	b29b      	uxth	r3, r3
 8009746:	2b00      	cmp	r3, #0
 8009748:	d121      	bne.n	800978e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a12      	ldr	r2, [pc, #72]	; (8009798 <I2SEx_RxISR_I2SExt+0x90>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d101      	bne.n	8009758 <I2SEx_RxISR_I2SExt+0x50>
 8009754:	4b11      	ldr	r3, [pc, #68]	; (800979c <I2SEx_RxISR_I2SExt+0x94>)
 8009756:	e001      	b.n	800975c <I2SEx_RxISR_I2SExt+0x54>
 8009758:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	490d      	ldr	r1, [pc, #52]	; (8009798 <I2SEx_RxISR_I2SExt+0x90>)
 8009764:	428b      	cmp	r3, r1
 8009766:	d101      	bne.n	800976c <I2SEx_RxISR_I2SExt+0x64>
 8009768:	4b0c      	ldr	r3, [pc, #48]	; (800979c <I2SEx_RxISR_I2SExt+0x94>)
 800976a:	e001      	b.n	8009770 <I2SEx_RxISR_I2SExt+0x68>
 800976c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009770:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009774:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800977a:	b29b      	uxth	r3, r3
 800977c:	2b00      	cmp	r3, #0
 800977e:	d106      	bne.n	800978e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f7ff ff03 	bl	8009594 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800978e:	bf00      	nop
 8009790:	3708      	adds	r7, #8
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	40003800 	.word	0x40003800
 800979c:	40003400 	.word	0x40003400

080097a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b086      	sub	sp, #24
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d101      	bne.n	80097b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	e267      	b.n	8009c82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f003 0301 	and.w	r3, r3, #1
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d075      	beq.n	80098aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80097be:	4b88      	ldr	r3, [pc, #544]	; (80099e0 <HAL_RCC_OscConfig+0x240>)
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	f003 030c 	and.w	r3, r3, #12
 80097c6:	2b04      	cmp	r3, #4
 80097c8:	d00c      	beq.n	80097e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80097ca:	4b85      	ldr	r3, [pc, #532]	; (80099e0 <HAL_RCC_OscConfig+0x240>)
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80097d2:	2b08      	cmp	r3, #8
 80097d4:	d112      	bne.n	80097fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80097d6:	4b82      	ldr	r3, [pc, #520]	; (80099e0 <HAL_RCC_OscConfig+0x240>)
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097e2:	d10b      	bne.n	80097fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097e4:	4b7e      	ldr	r3, [pc, #504]	; (80099e0 <HAL_RCC_OscConfig+0x240>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d05b      	beq.n	80098a8 <HAL_RCC_OscConfig+0x108>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d157      	bne.n	80098a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	e242      	b.n	8009c82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009804:	d106      	bne.n	8009814 <HAL_RCC_OscConfig+0x74>
 8009806:	4b76      	ldr	r3, [pc, #472]	; (80099e0 <HAL_RCC_OscConfig+0x240>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a75      	ldr	r2, [pc, #468]	; (80099e0 <HAL_RCC_OscConfig+0x240>)
 800980c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009810:	6013      	str	r3, [r2, #0]
 8009812:	e01d      	b.n	8009850 <HAL_RCC_OscConfig+0xb0>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800981c:	d10c      	bne.n	8009838 <HAL_RCC_OscConfig+0x98>
 800981e:	4b70      	ldr	r3, [pc, #448]	; (80099e0 <HAL_RCC_OscConfig+0x240>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a6f      	ldr	r2, [pc, #444]	; (80099e0 <HAL_RCC_OscConfig+0x240>)
 8009824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009828:	6013      	str	r3, [r2, #0]
 800982a:	4b6d      	ldr	r3, [pc, #436]	; (80099e0 <HAL_RCC_OscConfig+0x240>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a6c      	ldr	r2, [pc, #432]	; (80099e0 <HAL_RCC_OscConfig+0x240>)
 8009830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009834:	6013      	str	r3, [r2, #0]
 8009836:	e00b      	b.n	8009850 <HAL_RCC_OscConfig+0xb0>
 8009838:	4b69      	ldr	r3, [pc, #420]	; (80099e0 <HAL_RCC_OscConfig+0x240>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a68      	ldr	r2, [pc, #416]	; (80099e0 <HAL_RCC_OscConfig+0x240>)
 800983e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009842:	6013      	str	r3, [r2, #0]
 8009844:	4b66      	ldr	r3, [pc, #408]	; (80099e0 <HAL_RCC_OscConfig+0x240>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a65      	ldr	r2, [pc, #404]	; (80099e0 <HAL_RCC_OscConfig+0x240>)
 800984a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800984e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d013      	beq.n	8009880 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009858:	f7fc fd6a 	bl	8006330 <HAL_GetTick>
 800985c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800985e:	e008      	b.n	8009872 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009860:	f7fc fd66 	bl	8006330 <HAL_GetTick>
 8009864:	4602      	mov	r2, r0
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	2b64      	cmp	r3, #100	; 0x64
 800986c:	d901      	bls.n	8009872 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800986e:	2303      	movs	r3, #3
 8009870:	e207      	b.n	8009c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009872:	4b5b      	ldr	r3, [pc, #364]	; (80099e0 <HAL_RCC_OscConfig+0x240>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800987a:	2b00      	cmp	r3, #0
 800987c:	d0f0      	beq.n	8009860 <HAL_RCC_OscConfig+0xc0>
 800987e:	e014      	b.n	80098aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009880:	f7fc fd56 	bl	8006330 <HAL_GetTick>
 8009884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009886:	e008      	b.n	800989a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009888:	f7fc fd52 	bl	8006330 <HAL_GetTick>
 800988c:	4602      	mov	r2, r0
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	2b64      	cmp	r3, #100	; 0x64
 8009894:	d901      	bls.n	800989a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009896:	2303      	movs	r3, #3
 8009898:	e1f3      	b.n	8009c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800989a:	4b51      	ldr	r3, [pc, #324]	; (80099e0 <HAL_RCC_OscConfig+0x240>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1f0      	bne.n	8009888 <HAL_RCC_OscConfig+0xe8>
 80098a6:	e000      	b.n	80098aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f003 0302 	and.w	r3, r3, #2
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d063      	beq.n	800997e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80098b6:	4b4a      	ldr	r3, [pc, #296]	; (80099e0 <HAL_RCC_OscConfig+0x240>)
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	f003 030c 	and.w	r3, r3, #12
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d00b      	beq.n	80098da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80098c2:	4b47      	ldr	r3, [pc, #284]	; (80099e0 <HAL_RCC_OscConfig+0x240>)
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80098ca:	2b08      	cmp	r3, #8
 80098cc:	d11c      	bne.n	8009908 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80098ce:	4b44      	ldr	r3, [pc, #272]	; (80099e0 <HAL_RCC_OscConfig+0x240>)
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d116      	bne.n	8009908 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80098da:	4b41      	ldr	r3, [pc, #260]	; (80099e0 <HAL_RCC_OscConfig+0x240>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f003 0302 	and.w	r3, r3, #2
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d005      	beq.n	80098f2 <HAL_RCC_OscConfig+0x152>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d001      	beq.n	80098f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	e1c7      	b.n	8009c82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098f2:	4b3b      	ldr	r3, [pc, #236]	; (80099e0 <HAL_RCC_OscConfig+0x240>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	00db      	lsls	r3, r3, #3
 8009900:	4937      	ldr	r1, [pc, #220]	; (80099e0 <HAL_RCC_OscConfig+0x240>)
 8009902:	4313      	orrs	r3, r2
 8009904:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009906:	e03a      	b.n	800997e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d020      	beq.n	8009952 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009910:	4b34      	ldr	r3, [pc, #208]	; (80099e4 <HAL_RCC_OscConfig+0x244>)
 8009912:	2201      	movs	r2, #1
 8009914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009916:	f7fc fd0b 	bl	8006330 <HAL_GetTick>
 800991a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800991c:	e008      	b.n	8009930 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800991e:	f7fc fd07 	bl	8006330 <HAL_GetTick>
 8009922:	4602      	mov	r2, r0
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	1ad3      	subs	r3, r2, r3
 8009928:	2b02      	cmp	r3, #2
 800992a:	d901      	bls.n	8009930 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800992c:	2303      	movs	r3, #3
 800992e:	e1a8      	b.n	8009c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009930:	4b2b      	ldr	r3, [pc, #172]	; (80099e0 <HAL_RCC_OscConfig+0x240>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f003 0302 	and.w	r3, r3, #2
 8009938:	2b00      	cmp	r3, #0
 800993a:	d0f0      	beq.n	800991e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800993c:	4b28      	ldr	r3, [pc, #160]	; (80099e0 <HAL_RCC_OscConfig+0x240>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	00db      	lsls	r3, r3, #3
 800994a:	4925      	ldr	r1, [pc, #148]	; (80099e0 <HAL_RCC_OscConfig+0x240>)
 800994c:	4313      	orrs	r3, r2
 800994e:	600b      	str	r3, [r1, #0]
 8009950:	e015      	b.n	800997e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009952:	4b24      	ldr	r3, [pc, #144]	; (80099e4 <HAL_RCC_OscConfig+0x244>)
 8009954:	2200      	movs	r2, #0
 8009956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009958:	f7fc fcea 	bl	8006330 <HAL_GetTick>
 800995c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800995e:	e008      	b.n	8009972 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009960:	f7fc fce6 	bl	8006330 <HAL_GetTick>
 8009964:	4602      	mov	r2, r0
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	1ad3      	subs	r3, r2, r3
 800996a:	2b02      	cmp	r3, #2
 800996c:	d901      	bls.n	8009972 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800996e:	2303      	movs	r3, #3
 8009970:	e187      	b.n	8009c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009972:	4b1b      	ldr	r3, [pc, #108]	; (80099e0 <HAL_RCC_OscConfig+0x240>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f003 0302 	and.w	r3, r3, #2
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1f0      	bne.n	8009960 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f003 0308 	and.w	r3, r3, #8
 8009986:	2b00      	cmp	r3, #0
 8009988:	d036      	beq.n	80099f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	695b      	ldr	r3, [r3, #20]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d016      	beq.n	80099c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009992:	4b15      	ldr	r3, [pc, #84]	; (80099e8 <HAL_RCC_OscConfig+0x248>)
 8009994:	2201      	movs	r2, #1
 8009996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009998:	f7fc fcca 	bl	8006330 <HAL_GetTick>
 800999c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800999e:	e008      	b.n	80099b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80099a0:	f7fc fcc6 	bl	8006330 <HAL_GetTick>
 80099a4:	4602      	mov	r2, r0
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	1ad3      	subs	r3, r2, r3
 80099aa:	2b02      	cmp	r3, #2
 80099ac:	d901      	bls.n	80099b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80099ae:	2303      	movs	r3, #3
 80099b0:	e167      	b.n	8009c82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80099b2:	4b0b      	ldr	r3, [pc, #44]	; (80099e0 <HAL_RCC_OscConfig+0x240>)
 80099b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099b6:	f003 0302 	and.w	r3, r3, #2
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d0f0      	beq.n	80099a0 <HAL_RCC_OscConfig+0x200>
 80099be:	e01b      	b.n	80099f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80099c0:	4b09      	ldr	r3, [pc, #36]	; (80099e8 <HAL_RCC_OscConfig+0x248>)
 80099c2:	2200      	movs	r2, #0
 80099c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80099c6:	f7fc fcb3 	bl	8006330 <HAL_GetTick>
 80099ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80099cc:	e00e      	b.n	80099ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80099ce:	f7fc fcaf 	bl	8006330 <HAL_GetTick>
 80099d2:	4602      	mov	r2, r0
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	2b02      	cmp	r3, #2
 80099da:	d907      	bls.n	80099ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80099dc:	2303      	movs	r3, #3
 80099de:	e150      	b.n	8009c82 <HAL_RCC_OscConfig+0x4e2>
 80099e0:	40023800 	.word	0x40023800
 80099e4:	42470000 	.word	0x42470000
 80099e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80099ec:	4b88      	ldr	r3, [pc, #544]	; (8009c10 <HAL_RCC_OscConfig+0x470>)
 80099ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099f0:	f003 0302 	and.w	r3, r3, #2
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d1ea      	bne.n	80099ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 0304 	and.w	r3, r3, #4
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f000 8097 	beq.w	8009b34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a06:	2300      	movs	r3, #0
 8009a08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a0a:	4b81      	ldr	r3, [pc, #516]	; (8009c10 <HAL_RCC_OscConfig+0x470>)
 8009a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d10f      	bne.n	8009a36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a16:	2300      	movs	r3, #0
 8009a18:	60bb      	str	r3, [r7, #8]
 8009a1a:	4b7d      	ldr	r3, [pc, #500]	; (8009c10 <HAL_RCC_OscConfig+0x470>)
 8009a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1e:	4a7c      	ldr	r2, [pc, #496]	; (8009c10 <HAL_RCC_OscConfig+0x470>)
 8009a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a24:	6413      	str	r3, [r2, #64]	; 0x40
 8009a26:	4b7a      	ldr	r3, [pc, #488]	; (8009c10 <HAL_RCC_OscConfig+0x470>)
 8009a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a2e:	60bb      	str	r3, [r7, #8]
 8009a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a32:	2301      	movs	r3, #1
 8009a34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a36:	4b77      	ldr	r3, [pc, #476]	; (8009c14 <HAL_RCC_OscConfig+0x474>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d118      	bne.n	8009a74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009a42:	4b74      	ldr	r3, [pc, #464]	; (8009c14 <HAL_RCC_OscConfig+0x474>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a73      	ldr	r2, [pc, #460]	; (8009c14 <HAL_RCC_OscConfig+0x474>)
 8009a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009a4e:	f7fc fc6f 	bl	8006330 <HAL_GetTick>
 8009a52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a54:	e008      	b.n	8009a68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a56:	f7fc fc6b 	bl	8006330 <HAL_GetTick>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	1ad3      	subs	r3, r2, r3
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	d901      	bls.n	8009a68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009a64:	2303      	movs	r3, #3
 8009a66:	e10c      	b.n	8009c82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a68:	4b6a      	ldr	r3, [pc, #424]	; (8009c14 <HAL_RCC_OscConfig+0x474>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d0f0      	beq.n	8009a56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d106      	bne.n	8009a8a <HAL_RCC_OscConfig+0x2ea>
 8009a7c:	4b64      	ldr	r3, [pc, #400]	; (8009c10 <HAL_RCC_OscConfig+0x470>)
 8009a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a80:	4a63      	ldr	r2, [pc, #396]	; (8009c10 <HAL_RCC_OscConfig+0x470>)
 8009a82:	f043 0301 	orr.w	r3, r3, #1
 8009a86:	6713      	str	r3, [r2, #112]	; 0x70
 8009a88:	e01c      	b.n	8009ac4 <HAL_RCC_OscConfig+0x324>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	2b05      	cmp	r3, #5
 8009a90:	d10c      	bne.n	8009aac <HAL_RCC_OscConfig+0x30c>
 8009a92:	4b5f      	ldr	r3, [pc, #380]	; (8009c10 <HAL_RCC_OscConfig+0x470>)
 8009a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a96:	4a5e      	ldr	r2, [pc, #376]	; (8009c10 <HAL_RCC_OscConfig+0x470>)
 8009a98:	f043 0304 	orr.w	r3, r3, #4
 8009a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8009a9e:	4b5c      	ldr	r3, [pc, #368]	; (8009c10 <HAL_RCC_OscConfig+0x470>)
 8009aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aa2:	4a5b      	ldr	r2, [pc, #364]	; (8009c10 <HAL_RCC_OscConfig+0x470>)
 8009aa4:	f043 0301 	orr.w	r3, r3, #1
 8009aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8009aaa:	e00b      	b.n	8009ac4 <HAL_RCC_OscConfig+0x324>
 8009aac:	4b58      	ldr	r3, [pc, #352]	; (8009c10 <HAL_RCC_OscConfig+0x470>)
 8009aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ab0:	4a57      	ldr	r2, [pc, #348]	; (8009c10 <HAL_RCC_OscConfig+0x470>)
 8009ab2:	f023 0301 	bic.w	r3, r3, #1
 8009ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8009ab8:	4b55      	ldr	r3, [pc, #340]	; (8009c10 <HAL_RCC_OscConfig+0x470>)
 8009aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009abc:	4a54      	ldr	r2, [pc, #336]	; (8009c10 <HAL_RCC_OscConfig+0x470>)
 8009abe:	f023 0304 	bic.w	r3, r3, #4
 8009ac2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d015      	beq.n	8009af8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009acc:	f7fc fc30 	bl	8006330 <HAL_GetTick>
 8009ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ad2:	e00a      	b.n	8009aea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009ad4:	f7fc fc2c 	bl	8006330 <HAL_GetTick>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	1ad3      	subs	r3, r2, r3
 8009ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d901      	bls.n	8009aea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009ae6:	2303      	movs	r3, #3
 8009ae8:	e0cb      	b.n	8009c82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009aea:	4b49      	ldr	r3, [pc, #292]	; (8009c10 <HAL_RCC_OscConfig+0x470>)
 8009aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aee:	f003 0302 	and.w	r3, r3, #2
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d0ee      	beq.n	8009ad4 <HAL_RCC_OscConfig+0x334>
 8009af6:	e014      	b.n	8009b22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009af8:	f7fc fc1a 	bl	8006330 <HAL_GetTick>
 8009afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009afe:	e00a      	b.n	8009b16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b00:	f7fc fc16 	bl	8006330 <HAL_GetTick>
 8009b04:	4602      	mov	r2, r0
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	1ad3      	subs	r3, r2, r3
 8009b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d901      	bls.n	8009b16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009b12:	2303      	movs	r3, #3
 8009b14:	e0b5      	b.n	8009c82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b16:	4b3e      	ldr	r3, [pc, #248]	; (8009c10 <HAL_RCC_OscConfig+0x470>)
 8009b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b1a:	f003 0302 	and.w	r3, r3, #2
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d1ee      	bne.n	8009b00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009b22:	7dfb      	ldrb	r3, [r7, #23]
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d105      	bne.n	8009b34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b28:	4b39      	ldr	r3, [pc, #228]	; (8009c10 <HAL_RCC_OscConfig+0x470>)
 8009b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b2c:	4a38      	ldr	r2, [pc, #224]	; (8009c10 <HAL_RCC_OscConfig+0x470>)
 8009b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	699b      	ldr	r3, [r3, #24]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f000 80a1 	beq.w	8009c80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009b3e:	4b34      	ldr	r3, [pc, #208]	; (8009c10 <HAL_RCC_OscConfig+0x470>)
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	f003 030c 	and.w	r3, r3, #12
 8009b46:	2b08      	cmp	r3, #8
 8009b48:	d05c      	beq.n	8009c04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	699b      	ldr	r3, [r3, #24]
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	d141      	bne.n	8009bd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b52:	4b31      	ldr	r3, [pc, #196]	; (8009c18 <HAL_RCC_OscConfig+0x478>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b58:	f7fc fbea 	bl	8006330 <HAL_GetTick>
 8009b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b5e:	e008      	b.n	8009b72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b60:	f7fc fbe6 	bl	8006330 <HAL_GetTick>
 8009b64:	4602      	mov	r2, r0
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	d901      	bls.n	8009b72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	e087      	b.n	8009c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b72:	4b27      	ldr	r3, [pc, #156]	; (8009c10 <HAL_RCC_OscConfig+0x470>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1f0      	bne.n	8009b60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	69da      	ldr	r2, [r3, #28]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a1b      	ldr	r3, [r3, #32]
 8009b86:	431a      	orrs	r2, r3
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8c:	019b      	lsls	r3, r3, #6
 8009b8e:	431a      	orrs	r2, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b94:	085b      	lsrs	r3, r3, #1
 8009b96:	3b01      	subs	r3, #1
 8009b98:	041b      	lsls	r3, r3, #16
 8009b9a:	431a      	orrs	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba0:	061b      	lsls	r3, r3, #24
 8009ba2:	491b      	ldr	r1, [pc, #108]	; (8009c10 <HAL_RCC_OscConfig+0x470>)
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009ba8:	4b1b      	ldr	r3, [pc, #108]	; (8009c18 <HAL_RCC_OscConfig+0x478>)
 8009baa:	2201      	movs	r2, #1
 8009bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bae:	f7fc fbbf 	bl	8006330 <HAL_GetTick>
 8009bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009bb4:	e008      	b.n	8009bc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009bb6:	f7fc fbbb 	bl	8006330 <HAL_GetTick>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	1ad3      	subs	r3, r2, r3
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	d901      	bls.n	8009bc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	e05c      	b.n	8009c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009bc8:	4b11      	ldr	r3, [pc, #68]	; (8009c10 <HAL_RCC_OscConfig+0x470>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d0f0      	beq.n	8009bb6 <HAL_RCC_OscConfig+0x416>
 8009bd4:	e054      	b.n	8009c80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009bd6:	4b10      	ldr	r3, [pc, #64]	; (8009c18 <HAL_RCC_OscConfig+0x478>)
 8009bd8:	2200      	movs	r2, #0
 8009bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bdc:	f7fc fba8 	bl	8006330 <HAL_GetTick>
 8009be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009be2:	e008      	b.n	8009bf6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009be4:	f7fc fba4 	bl	8006330 <HAL_GetTick>
 8009be8:	4602      	mov	r2, r0
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	1ad3      	subs	r3, r2, r3
 8009bee:	2b02      	cmp	r3, #2
 8009bf0:	d901      	bls.n	8009bf6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009bf2:	2303      	movs	r3, #3
 8009bf4:	e045      	b.n	8009c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bf6:	4b06      	ldr	r3, [pc, #24]	; (8009c10 <HAL_RCC_OscConfig+0x470>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d1f0      	bne.n	8009be4 <HAL_RCC_OscConfig+0x444>
 8009c02:	e03d      	b.n	8009c80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	699b      	ldr	r3, [r3, #24]
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d107      	bne.n	8009c1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e038      	b.n	8009c82 <HAL_RCC_OscConfig+0x4e2>
 8009c10:	40023800 	.word	0x40023800
 8009c14:	40007000 	.word	0x40007000
 8009c18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009c1c:	4b1b      	ldr	r3, [pc, #108]	; (8009c8c <HAL_RCC_OscConfig+0x4ec>)
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d028      	beq.n	8009c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d121      	bne.n	8009c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d11a      	bne.n	8009c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009c46:	68fa      	ldr	r2, [r7, #12]
 8009c48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009c4c:	4013      	ands	r3, r2
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009c52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d111      	bne.n	8009c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c62:	085b      	lsrs	r3, r3, #1
 8009c64:	3b01      	subs	r3, #1
 8009c66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d107      	bne.n	8009c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d001      	beq.n	8009c80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e000      	b.n	8009c82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3718      	adds	r7, #24
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	40023800 	.word	0x40023800

08009c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d101      	bne.n	8009ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e0cc      	b.n	8009e3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009ca4:	4b68      	ldr	r3, [pc, #416]	; (8009e48 <HAL_RCC_ClockConfig+0x1b8>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f003 0307 	and.w	r3, r3, #7
 8009cac:	683a      	ldr	r2, [r7, #0]
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d90c      	bls.n	8009ccc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cb2:	4b65      	ldr	r3, [pc, #404]	; (8009e48 <HAL_RCC_ClockConfig+0x1b8>)
 8009cb4:	683a      	ldr	r2, [r7, #0]
 8009cb6:	b2d2      	uxtb	r2, r2
 8009cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cba:	4b63      	ldr	r3, [pc, #396]	; (8009e48 <HAL_RCC_ClockConfig+0x1b8>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f003 0307 	and.w	r3, r3, #7
 8009cc2:	683a      	ldr	r2, [r7, #0]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d001      	beq.n	8009ccc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e0b8      	b.n	8009e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f003 0302 	and.w	r3, r3, #2
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d020      	beq.n	8009d1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f003 0304 	and.w	r3, r3, #4
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d005      	beq.n	8009cf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009ce4:	4b59      	ldr	r3, [pc, #356]	; (8009e4c <HAL_RCC_ClockConfig+0x1bc>)
 8009ce6:	689b      	ldr	r3, [r3, #8]
 8009ce8:	4a58      	ldr	r2, [pc, #352]	; (8009e4c <HAL_RCC_ClockConfig+0x1bc>)
 8009cea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009cee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f003 0308 	and.w	r3, r3, #8
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d005      	beq.n	8009d08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009cfc:	4b53      	ldr	r3, [pc, #332]	; (8009e4c <HAL_RCC_ClockConfig+0x1bc>)
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	4a52      	ldr	r2, [pc, #328]	; (8009e4c <HAL_RCC_ClockConfig+0x1bc>)
 8009d02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009d06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d08:	4b50      	ldr	r3, [pc, #320]	; (8009e4c <HAL_RCC_ClockConfig+0x1bc>)
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	494d      	ldr	r1, [pc, #308]	; (8009e4c <HAL_RCC_ClockConfig+0x1bc>)
 8009d16:	4313      	orrs	r3, r2
 8009d18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f003 0301 	and.w	r3, r3, #1
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d044      	beq.n	8009db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d107      	bne.n	8009d3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d2e:	4b47      	ldr	r3, [pc, #284]	; (8009e4c <HAL_RCC_ClockConfig+0x1bc>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d119      	bne.n	8009d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e07f      	b.n	8009e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	d003      	beq.n	8009d4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009d4a:	2b03      	cmp	r3, #3
 8009d4c:	d107      	bne.n	8009d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d4e:	4b3f      	ldr	r3, [pc, #252]	; (8009e4c <HAL_RCC_ClockConfig+0x1bc>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d109      	bne.n	8009d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e06f      	b.n	8009e3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d5e:	4b3b      	ldr	r3, [pc, #236]	; (8009e4c <HAL_RCC_ClockConfig+0x1bc>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f003 0302 	and.w	r3, r3, #2
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d101      	bne.n	8009d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e067      	b.n	8009e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009d6e:	4b37      	ldr	r3, [pc, #220]	; (8009e4c <HAL_RCC_ClockConfig+0x1bc>)
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	f023 0203 	bic.w	r2, r3, #3
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	4934      	ldr	r1, [pc, #208]	; (8009e4c <HAL_RCC_ClockConfig+0x1bc>)
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009d80:	f7fc fad6 	bl	8006330 <HAL_GetTick>
 8009d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d86:	e00a      	b.n	8009d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d88:	f7fc fad2 	bl	8006330 <HAL_GetTick>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	1ad3      	subs	r3, r2, r3
 8009d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d901      	bls.n	8009d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	e04f      	b.n	8009e3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d9e:	4b2b      	ldr	r3, [pc, #172]	; (8009e4c <HAL_RCC_ClockConfig+0x1bc>)
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	f003 020c 	and.w	r2, r3, #12
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d1eb      	bne.n	8009d88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009db0:	4b25      	ldr	r3, [pc, #148]	; (8009e48 <HAL_RCC_ClockConfig+0x1b8>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f003 0307 	and.w	r3, r3, #7
 8009db8:	683a      	ldr	r2, [r7, #0]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d20c      	bcs.n	8009dd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009dbe:	4b22      	ldr	r3, [pc, #136]	; (8009e48 <HAL_RCC_ClockConfig+0x1b8>)
 8009dc0:	683a      	ldr	r2, [r7, #0]
 8009dc2:	b2d2      	uxtb	r2, r2
 8009dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009dc6:	4b20      	ldr	r3, [pc, #128]	; (8009e48 <HAL_RCC_ClockConfig+0x1b8>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f003 0307 	and.w	r3, r3, #7
 8009dce:	683a      	ldr	r2, [r7, #0]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d001      	beq.n	8009dd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	e032      	b.n	8009e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f003 0304 	and.w	r3, r3, #4
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d008      	beq.n	8009df6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009de4:	4b19      	ldr	r3, [pc, #100]	; (8009e4c <HAL_RCC_ClockConfig+0x1bc>)
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	4916      	ldr	r1, [pc, #88]	; (8009e4c <HAL_RCC_ClockConfig+0x1bc>)
 8009df2:	4313      	orrs	r3, r2
 8009df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f003 0308 	and.w	r3, r3, #8
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d009      	beq.n	8009e16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009e02:	4b12      	ldr	r3, [pc, #72]	; (8009e4c <HAL_RCC_ClockConfig+0x1bc>)
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	691b      	ldr	r3, [r3, #16]
 8009e0e:	00db      	lsls	r3, r3, #3
 8009e10:	490e      	ldr	r1, [pc, #56]	; (8009e4c <HAL_RCC_ClockConfig+0x1bc>)
 8009e12:	4313      	orrs	r3, r2
 8009e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009e16:	f000 f821 	bl	8009e5c <HAL_RCC_GetSysClockFreq>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	4b0b      	ldr	r3, [pc, #44]	; (8009e4c <HAL_RCC_ClockConfig+0x1bc>)
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	091b      	lsrs	r3, r3, #4
 8009e22:	f003 030f 	and.w	r3, r3, #15
 8009e26:	490a      	ldr	r1, [pc, #40]	; (8009e50 <HAL_RCC_ClockConfig+0x1c0>)
 8009e28:	5ccb      	ldrb	r3, [r1, r3]
 8009e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e2e:	4a09      	ldr	r2, [pc, #36]	; (8009e54 <HAL_RCC_ClockConfig+0x1c4>)
 8009e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009e32:	4b09      	ldr	r3, [pc, #36]	; (8009e58 <HAL_RCC_ClockConfig+0x1c8>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7fb feca 	bl	8005bd0 <HAL_InitTick>

  return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	40023c00 	.word	0x40023c00
 8009e4c:	40023800 	.word	0x40023800
 8009e50:	0800ed00 	.word	0x0800ed00
 8009e54:	20000058 	.word	0x20000058
 8009e58:	20000078 	.word	0x20000078

08009e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e60:	b094      	sub	sp, #80	; 0x50
 8009e62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009e64:	2300      	movs	r3, #0
 8009e66:	647b      	str	r3, [r7, #68]	; 0x44
 8009e68:	2300      	movs	r3, #0
 8009e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009e70:	2300      	movs	r3, #0
 8009e72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e74:	4b79      	ldr	r3, [pc, #484]	; (800a05c <HAL_RCC_GetSysClockFreq+0x200>)
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	f003 030c 	and.w	r3, r3, #12
 8009e7c:	2b08      	cmp	r3, #8
 8009e7e:	d00d      	beq.n	8009e9c <HAL_RCC_GetSysClockFreq+0x40>
 8009e80:	2b08      	cmp	r3, #8
 8009e82:	f200 80e1 	bhi.w	800a048 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d002      	beq.n	8009e90 <HAL_RCC_GetSysClockFreq+0x34>
 8009e8a:	2b04      	cmp	r3, #4
 8009e8c:	d003      	beq.n	8009e96 <HAL_RCC_GetSysClockFreq+0x3a>
 8009e8e:	e0db      	b.n	800a048 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009e90:	4b73      	ldr	r3, [pc, #460]	; (800a060 <HAL_RCC_GetSysClockFreq+0x204>)
 8009e92:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009e94:	e0db      	b.n	800a04e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009e96:	4b73      	ldr	r3, [pc, #460]	; (800a064 <HAL_RCC_GetSysClockFreq+0x208>)
 8009e98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009e9a:	e0d8      	b.n	800a04e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009e9c:	4b6f      	ldr	r3, [pc, #444]	; (800a05c <HAL_RCC_GetSysClockFreq+0x200>)
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ea4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009ea6:	4b6d      	ldr	r3, [pc, #436]	; (800a05c <HAL_RCC_GetSysClockFreq+0x200>)
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d063      	beq.n	8009f7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009eb2:	4b6a      	ldr	r3, [pc, #424]	; (800a05c <HAL_RCC_GetSysClockFreq+0x200>)
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	099b      	lsrs	r3, r3, #6
 8009eb8:	2200      	movs	r2, #0
 8009eba:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ebc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ec4:	633b      	str	r3, [r7, #48]	; 0x30
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8009eca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009ece:	4622      	mov	r2, r4
 8009ed0:	462b      	mov	r3, r5
 8009ed2:	f04f 0000 	mov.w	r0, #0
 8009ed6:	f04f 0100 	mov.w	r1, #0
 8009eda:	0159      	lsls	r1, r3, #5
 8009edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009ee0:	0150      	lsls	r0, r2, #5
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	4621      	mov	r1, r4
 8009ee8:	1a51      	subs	r1, r2, r1
 8009eea:	6139      	str	r1, [r7, #16]
 8009eec:	4629      	mov	r1, r5
 8009eee:	eb63 0301 	sbc.w	r3, r3, r1
 8009ef2:	617b      	str	r3, [r7, #20]
 8009ef4:	f04f 0200 	mov.w	r2, #0
 8009ef8:	f04f 0300 	mov.w	r3, #0
 8009efc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009f00:	4659      	mov	r1, fp
 8009f02:	018b      	lsls	r3, r1, #6
 8009f04:	4651      	mov	r1, sl
 8009f06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009f0a:	4651      	mov	r1, sl
 8009f0c:	018a      	lsls	r2, r1, #6
 8009f0e:	4651      	mov	r1, sl
 8009f10:	ebb2 0801 	subs.w	r8, r2, r1
 8009f14:	4659      	mov	r1, fp
 8009f16:	eb63 0901 	sbc.w	r9, r3, r1
 8009f1a:	f04f 0200 	mov.w	r2, #0
 8009f1e:	f04f 0300 	mov.w	r3, #0
 8009f22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009f26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009f2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009f2e:	4690      	mov	r8, r2
 8009f30:	4699      	mov	r9, r3
 8009f32:	4623      	mov	r3, r4
 8009f34:	eb18 0303 	adds.w	r3, r8, r3
 8009f38:	60bb      	str	r3, [r7, #8]
 8009f3a:	462b      	mov	r3, r5
 8009f3c:	eb49 0303 	adc.w	r3, r9, r3
 8009f40:	60fb      	str	r3, [r7, #12]
 8009f42:	f04f 0200 	mov.w	r2, #0
 8009f46:	f04f 0300 	mov.w	r3, #0
 8009f4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009f4e:	4629      	mov	r1, r5
 8009f50:	024b      	lsls	r3, r1, #9
 8009f52:	4621      	mov	r1, r4
 8009f54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009f58:	4621      	mov	r1, r4
 8009f5a:	024a      	lsls	r2, r1, #9
 8009f5c:	4610      	mov	r0, r2
 8009f5e:	4619      	mov	r1, r3
 8009f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f62:	2200      	movs	r2, #0
 8009f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f6c:	f7f6 f988 	bl	8000280 <__aeabi_uldivmod>
 8009f70:	4602      	mov	r2, r0
 8009f72:	460b      	mov	r3, r1
 8009f74:	4613      	mov	r3, r2
 8009f76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f78:	e058      	b.n	800a02c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f7a:	4b38      	ldr	r3, [pc, #224]	; (800a05c <HAL_RCC_GetSysClockFreq+0x200>)
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	099b      	lsrs	r3, r3, #6
 8009f80:	2200      	movs	r2, #0
 8009f82:	4618      	mov	r0, r3
 8009f84:	4611      	mov	r1, r2
 8009f86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009f8a:	623b      	str	r3, [r7, #32]
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8009f90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009f94:	4642      	mov	r2, r8
 8009f96:	464b      	mov	r3, r9
 8009f98:	f04f 0000 	mov.w	r0, #0
 8009f9c:	f04f 0100 	mov.w	r1, #0
 8009fa0:	0159      	lsls	r1, r3, #5
 8009fa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009fa6:	0150      	lsls	r0, r2, #5
 8009fa8:	4602      	mov	r2, r0
 8009faa:	460b      	mov	r3, r1
 8009fac:	4641      	mov	r1, r8
 8009fae:	ebb2 0a01 	subs.w	sl, r2, r1
 8009fb2:	4649      	mov	r1, r9
 8009fb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8009fb8:	f04f 0200 	mov.w	r2, #0
 8009fbc:	f04f 0300 	mov.w	r3, #0
 8009fc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009fc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009fc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009fcc:	ebb2 040a 	subs.w	r4, r2, sl
 8009fd0:	eb63 050b 	sbc.w	r5, r3, fp
 8009fd4:	f04f 0200 	mov.w	r2, #0
 8009fd8:	f04f 0300 	mov.w	r3, #0
 8009fdc:	00eb      	lsls	r3, r5, #3
 8009fde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009fe2:	00e2      	lsls	r2, r4, #3
 8009fe4:	4614      	mov	r4, r2
 8009fe6:	461d      	mov	r5, r3
 8009fe8:	4643      	mov	r3, r8
 8009fea:	18e3      	adds	r3, r4, r3
 8009fec:	603b      	str	r3, [r7, #0]
 8009fee:	464b      	mov	r3, r9
 8009ff0:	eb45 0303 	adc.w	r3, r5, r3
 8009ff4:	607b      	str	r3, [r7, #4]
 8009ff6:	f04f 0200 	mov.w	r2, #0
 8009ffa:	f04f 0300 	mov.w	r3, #0
 8009ffe:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a002:	4629      	mov	r1, r5
 800a004:	028b      	lsls	r3, r1, #10
 800a006:	4621      	mov	r1, r4
 800a008:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a00c:	4621      	mov	r1, r4
 800a00e:	028a      	lsls	r2, r1, #10
 800a010:	4610      	mov	r0, r2
 800a012:	4619      	mov	r1, r3
 800a014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a016:	2200      	movs	r2, #0
 800a018:	61bb      	str	r3, [r7, #24]
 800a01a:	61fa      	str	r2, [r7, #28]
 800a01c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a020:	f7f6 f92e 	bl	8000280 <__aeabi_uldivmod>
 800a024:	4602      	mov	r2, r0
 800a026:	460b      	mov	r3, r1
 800a028:	4613      	mov	r3, r2
 800a02a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a02c:	4b0b      	ldr	r3, [pc, #44]	; (800a05c <HAL_RCC_GetSysClockFreq+0x200>)
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	0c1b      	lsrs	r3, r3, #16
 800a032:	f003 0303 	and.w	r3, r3, #3
 800a036:	3301      	adds	r3, #1
 800a038:	005b      	lsls	r3, r3, #1
 800a03a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a03c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a03e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a040:	fbb2 f3f3 	udiv	r3, r2, r3
 800a044:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a046:	e002      	b.n	800a04e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a048:	4b05      	ldr	r3, [pc, #20]	; (800a060 <HAL_RCC_GetSysClockFreq+0x204>)
 800a04a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a04c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a04e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a050:	4618      	mov	r0, r3
 800a052:	3750      	adds	r7, #80	; 0x50
 800a054:	46bd      	mov	sp, r7
 800a056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a05a:	bf00      	nop
 800a05c:	40023800 	.word	0x40023800
 800a060:	00f42400 	.word	0x00f42400
 800a064:	007a1200 	.word	0x007a1200

0800a068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a068:	b480      	push	{r7}
 800a06a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a06c:	4b03      	ldr	r3, [pc, #12]	; (800a07c <HAL_RCC_GetHCLKFreq+0x14>)
 800a06e:	681b      	ldr	r3, [r3, #0]
}
 800a070:	4618      	mov	r0, r3
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr
 800a07a:	bf00      	nop
 800a07c:	20000058 	.word	0x20000058

0800a080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a084:	f7ff fff0 	bl	800a068 <HAL_RCC_GetHCLKFreq>
 800a088:	4602      	mov	r2, r0
 800a08a:	4b05      	ldr	r3, [pc, #20]	; (800a0a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	0a9b      	lsrs	r3, r3, #10
 800a090:	f003 0307 	and.w	r3, r3, #7
 800a094:	4903      	ldr	r1, [pc, #12]	; (800a0a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a096:	5ccb      	ldrb	r3, [r1, r3]
 800a098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	40023800 	.word	0x40023800
 800a0a4:	0800ed10 	.word	0x0800ed10

0800a0a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a0ac:	f7ff ffdc 	bl	800a068 <HAL_RCC_GetHCLKFreq>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	4b05      	ldr	r3, [pc, #20]	; (800a0c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	0b5b      	lsrs	r3, r3, #13
 800a0b8:	f003 0307 	and.w	r3, r3, #7
 800a0bc:	4903      	ldr	r1, [pc, #12]	; (800a0cc <HAL_RCC_GetPCLK2Freq+0x24>)
 800a0be:	5ccb      	ldrb	r3, [r1, r3]
 800a0c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	40023800 	.word	0x40023800
 800a0cc:	0800ed10 	.word	0x0800ed10

0800a0d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	220f      	movs	r2, #15
 800a0de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a0e0:	4b12      	ldr	r3, [pc, #72]	; (800a12c <HAL_RCC_GetClockConfig+0x5c>)
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	f003 0203 	and.w	r2, r3, #3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a0ec:	4b0f      	ldr	r3, [pc, #60]	; (800a12c <HAL_RCC_GetClockConfig+0x5c>)
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a0f8:	4b0c      	ldr	r3, [pc, #48]	; (800a12c <HAL_RCC_GetClockConfig+0x5c>)
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a104:	4b09      	ldr	r3, [pc, #36]	; (800a12c <HAL_RCC_GetClockConfig+0x5c>)
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	08db      	lsrs	r3, r3, #3
 800a10a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a112:	4b07      	ldr	r3, [pc, #28]	; (800a130 <HAL_RCC_GetClockConfig+0x60>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f003 0207 	and.w	r2, r3, #7
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	601a      	str	r2, [r3, #0]
}
 800a11e:	bf00      	nop
 800a120:	370c      	adds	r7, #12
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	40023800 	.word	0x40023800
 800a130:	40023c00 	.word	0x40023c00

0800a134 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b086      	sub	sp, #24
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a13c:	2300      	movs	r3, #0
 800a13e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a140:	2300      	movs	r3, #0
 800a142:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f003 0301 	and.w	r3, r3, #1
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d105      	bne.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d035      	beq.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a15c:	4b62      	ldr	r3, [pc, #392]	; (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a15e:	2200      	movs	r2, #0
 800a160:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a162:	f7fc f8e5 	bl	8006330 <HAL_GetTick>
 800a166:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a168:	e008      	b.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a16a:	f7fc f8e1 	bl	8006330 <HAL_GetTick>
 800a16e:	4602      	mov	r2, r0
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	1ad3      	subs	r3, r2, r3
 800a174:	2b02      	cmp	r3, #2
 800a176:	d901      	bls.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a178:	2303      	movs	r3, #3
 800a17a:	e0b0      	b.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a17c:	4b5b      	ldr	r3, [pc, #364]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a184:	2b00      	cmp	r3, #0
 800a186:	d1f0      	bne.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	019a      	lsls	r2, r3, #6
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	071b      	lsls	r3, r3, #28
 800a194:	4955      	ldr	r1, [pc, #340]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a196:	4313      	orrs	r3, r2
 800a198:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a19c:	4b52      	ldr	r3, [pc, #328]	; (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a19e:	2201      	movs	r2, #1
 800a1a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a1a2:	f7fc f8c5 	bl	8006330 <HAL_GetTick>
 800a1a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a1a8:	e008      	b.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a1aa:	f7fc f8c1 	bl	8006330 <HAL_GetTick>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	1ad3      	subs	r3, r2, r3
 800a1b4:	2b02      	cmp	r3, #2
 800a1b6:	d901      	bls.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a1b8:	2303      	movs	r3, #3
 800a1ba:	e090      	b.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a1bc:	4b4b      	ldr	r3, [pc, #300]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d0f0      	beq.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f003 0302 	and.w	r3, r3, #2
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f000 8083 	beq.w	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	60fb      	str	r3, [r7, #12]
 800a1da:	4b44      	ldr	r3, [pc, #272]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1de:	4a43      	ldr	r2, [pc, #268]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a1e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1e4:	6413      	str	r3, [r2, #64]	; 0x40
 800a1e6:	4b41      	ldr	r3, [pc, #260]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1ee:	60fb      	str	r3, [r7, #12]
 800a1f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a1f2:	4b3f      	ldr	r3, [pc, #252]	; (800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a3e      	ldr	r2, [pc, #248]	; (800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a1f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a1fe:	f7fc f897 	bl	8006330 <HAL_GetTick>
 800a202:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a204:	e008      	b.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a206:	f7fc f893 	bl	8006330 <HAL_GetTick>
 800a20a:	4602      	mov	r2, r0
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	1ad3      	subs	r3, r2, r3
 800a210:	2b02      	cmp	r3, #2
 800a212:	d901      	bls.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800a214:	2303      	movs	r3, #3
 800a216:	e062      	b.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a218:	4b35      	ldr	r3, [pc, #212]	; (800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a220:	2b00      	cmp	r3, #0
 800a222:	d0f0      	beq.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a224:	4b31      	ldr	r3, [pc, #196]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a22c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d02f      	beq.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a23c:	693a      	ldr	r2, [r7, #16]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d028      	beq.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a242:	4b2a      	ldr	r3, [pc, #168]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a24a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a24c:	4b29      	ldr	r3, [pc, #164]	; (800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a24e:	2201      	movs	r2, #1
 800a250:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a252:	4b28      	ldr	r3, [pc, #160]	; (800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a254:	2200      	movs	r2, #0
 800a256:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a258:	4a24      	ldr	r2, [pc, #144]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a25e:	4b23      	ldr	r3, [pc, #140]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a262:	f003 0301 	and.w	r3, r3, #1
 800a266:	2b01      	cmp	r3, #1
 800a268:	d114      	bne.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a26a:	f7fc f861 	bl	8006330 <HAL_GetTick>
 800a26e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a270:	e00a      	b.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a272:	f7fc f85d 	bl	8006330 <HAL_GetTick>
 800a276:	4602      	mov	r2, r0
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	1ad3      	subs	r3, r2, r3
 800a27c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a280:	4293      	cmp	r3, r2
 800a282:	d901      	bls.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800a284:	2303      	movs	r3, #3
 800a286:	e02a      	b.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a288:	4b18      	ldr	r3, [pc, #96]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a28a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a28c:	f003 0302 	and.w	r3, r3, #2
 800a290:	2b00      	cmp	r3, #0
 800a292:	d0ee      	beq.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a29c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2a0:	d10d      	bne.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a2a2:	4b12      	ldr	r3, [pc, #72]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a2b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2b6:	490d      	ldr	r1, [pc, #52]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	608b      	str	r3, [r1, #8]
 800a2bc:	e005      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a2be:	4b0b      	ldr	r3, [pc, #44]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	4a0a      	ldr	r2, [pc, #40]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a2c4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a2c8:	6093      	str	r3, [r2, #8]
 800a2ca:	4b08      	ldr	r3, [pc, #32]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a2cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a2d6:	4905      	ldr	r1, [pc, #20]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3718      	adds	r7, #24
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	42470068 	.word	0x42470068
 800a2ec:	40023800 	.word	0x40023800
 800a2f0:	40007000 	.word	0x40007000
 800a2f4:	42470e40 	.word	0x42470e40

0800a2f8 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2203      	movs	r2, #3
 800a304:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800a306:	4b11      	ldr	r3, [pc, #68]	; (800a34c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 800a308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a30c:	099b      	lsrs	r3, r3, #6
 800a30e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a316:	4b0d      	ldr	r3, [pc, #52]	; (800a34c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 800a318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a31c:	0f1b      	lsrs	r3, r3, #28
 800a31e:	f003 0207 	and.w	r2, r3, #7
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800a326:	4b09      	ldr	r3, [pc, #36]	; (800a34c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a32e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800a330:	4b06      	ldr	r3, [pc, #24]	; (800a34c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 800a332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a334:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	431a      	orrs	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 800a340:	bf00      	nop
 800a342:	3714      	adds	r7, #20
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr
 800a34c:	40023800 	.word	0x40023800

0800a350 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a350:	b480      	push	{r7}
 800a352:	b087      	sub	sp, #28
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800a358:	2300      	movs	r3, #0
 800a35a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800a35c:	2300      	movs	r3, #0
 800a35e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800a360:	2300      	movs	r3, #0
 800a362:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800a364:	2300      	movs	r3, #0
 800a366:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d13e      	bne.n	800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800a36e:	4b23      	ldr	r3, [pc, #140]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a370:	689b      	ldr	r3, [r3, #8]
 800a372:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a376:	60fb      	str	r3, [r7, #12]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d005      	beq.n	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2b01      	cmp	r3, #1
 800a382:	d12f      	bne.n	800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800a384:	4b1e      	ldr	r3, [pc, #120]	; (800a400 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a386:	617b      	str	r3, [r7, #20]
          break;
 800a388:	e02f      	b.n	800a3ea <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800a38a:	4b1c      	ldr	r3, [pc, #112]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a392:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a396:	d108      	bne.n	800a3aa <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a398:	4b18      	ldr	r3, [pc, #96]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3a0:	4a18      	ldr	r2, [pc, #96]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800a3a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3a6:	613b      	str	r3, [r7, #16]
 800a3a8:	e007      	b.n	800a3ba <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a3aa:	4b14      	ldr	r3, [pc, #80]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3b2:	4a15      	ldr	r2, [pc, #84]	; (800a408 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800a3b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3b8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800a3ba:	4b10      	ldr	r3, [pc, #64]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a3bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3c0:	099b      	lsrs	r3, r3, #6
 800a3c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	fb02 f303 	mul.w	r3, r2, r3
 800a3cc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800a3ce:	4b0b      	ldr	r3, [pc, #44]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a3d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3d4:	0f1b      	lsrs	r3, r3, #28
 800a3d6:	f003 0307 	and.w	r3, r3, #7
 800a3da:	68ba      	ldr	r2, [r7, #8]
 800a3dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3e0:	617b      	str	r3, [r7, #20]
          break;
 800a3e2:	e002      	b.n	800a3ea <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	617b      	str	r3, [r7, #20]
          break;
 800a3e8:	bf00      	nop
        }
      }
      break;
 800a3ea:	bf00      	nop
    }
  }
  return frequency;
 800a3ec:	697b      	ldr	r3, [r7, #20]
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	371c      	adds	r7, #28
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	40023800 	.word	0x40023800
 800a400:	00bb8000 	.word	0x00bb8000
 800a404:	007a1200 	.word	0x007a1200
 800a408:	00f42400 	.word	0x00f42400

0800a40c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d101      	bne.n	800a41e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a41a:	2301      	movs	r3, #1
 800a41c:	e07b      	b.n	800a516 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a422:	2b00      	cmp	r3, #0
 800a424:	d108      	bne.n	800a438 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a42e:	d009      	beq.n	800a444 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2200      	movs	r2, #0
 800a434:	61da      	str	r2, [r3, #28]
 800a436:	e005      	b.n	800a444 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a450:	b2db      	uxtb	r3, r3
 800a452:	2b00      	cmp	r3, #0
 800a454:	d106      	bne.n	800a464 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f7fb fb08 	bl	8005a74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2202      	movs	r2, #2
 800a468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a47a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a48c:	431a      	orrs	r2, r3
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a496:	431a      	orrs	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	691b      	ldr	r3, [r3, #16]
 800a49c:	f003 0302 	and.w	r3, r3, #2
 800a4a0:	431a      	orrs	r2, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	695b      	ldr	r3, [r3, #20]
 800a4a6:	f003 0301 	and.w	r3, r3, #1
 800a4aa:	431a      	orrs	r2, r3
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	699b      	ldr	r3, [r3, #24]
 800a4b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a4b4:	431a      	orrs	r2, r3
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	69db      	ldr	r3, [r3, #28]
 800a4ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4be:	431a      	orrs	r2, r3
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6a1b      	ldr	r3, [r3, #32]
 800a4c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4c8:	ea42 0103 	orr.w	r1, r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	430a      	orrs	r2, r1
 800a4da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	699b      	ldr	r3, [r3, #24]
 800a4e0:	0c1b      	lsrs	r3, r3, #16
 800a4e2:	f003 0104 	and.w	r1, r3, #4
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ea:	f003 0210 	and.w	r2, r3, #16
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	430a      	orrs	r2, r1
 800a4f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	69da      	ldr	r2, [r3, #28]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a504:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2201      	movs	r2, #1
 800a510:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	3708      	adds	r7, #8
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b082      	sub	sp, #8
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d101      	bne.n	800a530 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800a52c:	2301      	movs	r3, #1
 800a52e:	e01a      	b.n	800a566 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2202      	movs	r2, #2
 800a534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a546:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f7fb fadb 	bl	8005b04 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3708      	adds	r7, #8
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b08c      	sub	sp, #48	; 0x30
 800a572:	af00      	add	r7, sp, #0
 800a574:	60f8      	str	r0, [r7, #12]
 800a576:	60b9      	str	r1, [r7, #8]
 800a578:	607a      	str	r2, [r7, #4]
 800a57a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a57c:	2301      	movs	r3, #1
 800a57e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a580:	2300      	movs	r3, #0
 800a582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d101      	bne.n	800a594 <HAL_SPI_TransmitReceive+0x26>
 800a590:	2302      	movs	r3, #2
 800a592:	e18a      	b.n	800a8aa <HAL_SPI_TransmitReceive+0x33c>
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2201      	movs	r2, #1
 800a598:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a59c:	f7fb fec8 	bl	8006330 <HAL_GetTick>
 800a5a0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a5a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a5b2:	887b      	ldrh	r3, [r7, #2]
 800a5b4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a5b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d00f      	beq.n	800a5de <HAL_SPI_TransmitReceive+0x70>
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5c4:	d107      	bne.n	800a5d6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d103      	bne.n	800a5d6 <HAL_SPI_TransmitReceive+0x68>
 800a5ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a5d2:	2b04      	cmp	r3, #4
 800a5d4:	d003      	beq.n	800a5de <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a5d6:	2302      	movs	r3, #2
 800a5d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a5dc:	e15b      	b.n	800a896 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d005      	beq.n	800a5f0 <HAL_SPI_TransmitReceive+0x82>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d002      	beq.n	800a5f0 <HAL_SPI_TransmitReceive+0x82>
 800a5ea:	887b      	ldrh	r3, [r7, #2]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d103      	bne.n	800a5f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a5f6:	e14e      	b.n	800a896 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	2b04      	cmp	r3, #4
 800a602:	d003      	beq.n	800a60c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2205      	movs	r2, #5
 800a608:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2200      	movs	r2, #0
 800a610:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	887a      	ldrh	r2, [r7, #2]
 800a61c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	887a      	ldrh	r2, [r7, #2]
 800a622:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	68ba      	ldr	r2, [r7, #8]
 800a628:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	887a      	ldrh	r2, [r7, #2]
 800a62e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	887a      	ldrh	r2, [r7, #2]
 800a634:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2200      	movs	r2, #0
 800a640:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a64c:	2b40      	cmp	r3, #64	; 0x40
 800a64e:	d007      	beq.n	800a660 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a65e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	68db      	ldr	r3, [r3, #12]
 800a664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a668:	d178      	bne.n	800a75c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d002      	beq.n	800a678 <HAL_SPI_TransmitReceive+0x10a>
 800a672:	8b7b      	ldrh	r3, [r7, #26]
 800a674:	2b01      	cmp	r3, #1
 800a676:	d166      	bne.n	800a746 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a67c:	881a      	ldrh	r2, [r3, #0]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a688:	1c9a      	adds	r2, r3, #2
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a692:	b29b      	uxth	r3, r3
 800a694:	3b01      	subs	r3, #1
 800a696:	b29a      	uxth	r2, r3
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a69c:	e053      	b.n	800a746 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	f003 0302 	and.w	r3, r3, #2
 800a6a8:	2b02      	cmp	r3, #2
 800a6aa:	d11b      	bne.n	800a6e4 <HAL_SPI_TransmitReceive+0x176>
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d016      	beq.n	800a6e4 <HAL_SPI_TransmitReceive+0x176>
 800a6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d113      	bne.n	800a6e4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6c0:	881a      	ldrh	r2, [r3, #0]
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6cc:	1c9a      	adds	r2, r3, #2
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	b29a      	uxth	r2, r3
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	f003 0301 	and.w	r3, r3, #1
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d119      	bne.n	800a726 <HAL_SPI_TransmitReceive+0x1b8>
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d014      	beq.n	800a726 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	68da      	ldr	r2, [r3, #12]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a706:	b292      	uxth	r2, r2
 800a708:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a70e:	1c9a      	adds	r2, r3, #2
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a718:	b29b      	uxth	r3, r3
 800a71a:	3b01      	subs	r3, #1
 800a71c:	b29a      	uxth	r2, r3
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a722:	2301      	movs	r3, #1
 800a724:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a726:	f7fb fe03 	bl	8006330 <HAL_GetTick>
 800a72a:	4602      	mov	r2, r0
 800a72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72e:	1ad3      	subs	r3, r2, r3
 800a730:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a732:	429a      	cmp	r2, r3
 800a734:	d807      	bhi.n	800a746 <HAL_SPI_TransmitReceive+0x1d8>
 800a736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a738:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a73c:	d003      	beq.n	800a746 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a73e:	2303      	movs	r3, #3
 800a740:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a744:	e0a7      	b.n	800a896 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d1a6      	bne.n	800a69e <HAL_SPI_TransmitReceive+0x130>
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a754:	b29b      	uxth	r3, r3
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1a1      	bne.n	800a69e <HAL_SPI_TransmitReceive+0x130>
 800a75a:	e07c      	b.n	800a856 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d002      	beq.n	800a76a <HAL_SPI_TransmitReceive+0x1fc>
 800a764:	8b7b      	ldrh	r3, [r7, #26]
 800a766:	2b01      	cmp	r3, #1
 800a768:	d16b      	bne.n	800a842 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	330c      	adds	r3, #12
 800a774:	7812      	ldrb	r2, [r2, #0]
 800a776:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a77c:	1c5a      	adds	r2, r3, #1
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a786:	b29b      	uxth	r3, r3
 800a788:	3b01      	subs	r3, #1
 800a78a:	b29a      	uxth	r2, r3
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a790:	e057      	b.n	800a842 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	f003 0302 	and.w	r3, r3, #2
 800a79c:	2b02      	cmp	r3, #2
 800a79e:	d11c      	bne.n	800a7da <HAL_SPI_TransmitReceive+0x26c>
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d017      	beq.n	800a7da <HAL_SPI_TransmitReceive+0x26c>
 800a7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d114      	bne.n	800a7da <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	330c      	adds	r3, #12
 800a7ba:	7812      	ldrb	r2, [r2, #0]
 800a7bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7c2:	1c5a      	adds	r2, r3, #1
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	b29a      	uxth	r2, r3
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	f003 0301 	and.w	r3, r3, #1
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d119      	bne.n	800a81c <HAL_SPI_TransmitReceive+0x2ae>
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d014      	beq.n	800a81c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	68da      	ldr	r2, [r3, #12]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7fc:	b2d2      	uxtb	r2, r2
 800a7fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a804:	1c5a      	adds	r2, r3, #1
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a80e:	b29b      	uxth	r3, r3
 800a810:	3b01      	subs	r3, #1
 800a812:	b29a      	uxth	r2, r3
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a818:	2301      	movs	r3, #1
 800a81a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a81c:	f7fb fd88 	bl	8006330 <HAL_GetTick>
 800a820:	4602      	mov	r2, r0
 800a822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a824:	1ad3      	subs	r3, r2, r3
 800a826:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a828:	429a      	cmp	r2, r3
 800a82a:	d803      	bhi.n	800a834 <HAL_SPI_TransmitReceive+0x2c6>
 800a82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a832:	d102      	bne.n	800a83a <HAL_SPI_TransmitReceive+0x2cc>
 800a834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a836:	2b00      	cmp	r3, #0
 800a838:	d103      	bne.n	800a842 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a83a:	2303      	movs	r3, #3
 800a83c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a840:	e029      	b.n	800a896 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a846:	b29b      	uxth	r3, r3
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d1a2      	bne.n	800a792 <HAL_SPI_TransmitReceive+0x224>
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a850:	b29b      	uxth	r3, r3
 800a852:	2b00      	cmp	r3, #0
 800a854:	d19d      	bne.n	800a792 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a858:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f000 f8b2 	bl	800a9c4 <SPI_EndRxTxTransaction>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d006      	beq.n	800a874 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2220      	movs	r2, #32
 800a870:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a872:	e010      	b.n	800a896 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d10b      	bne.n	800a894 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a87c:	2300      	movs	r3, #0
 800a87e:	617b      	str	r3, [r7, #20]
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	617b      	str	r3, [r7, #20]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	617b      	str	r3, [r7, #20]
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	e000      	b.n	800a896 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a894:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2201      	movs	r2, #1
 800a89a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a8a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3730      	adds	r7, #48	; 0x30
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
	...

0800a8b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b088      	sub	sp, #32
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	60b9      	str	r1, [r7, #8]
 800a8be:	603b      	str	r3, [r7, #0]
 800a8c0:	4613      	mov	r3, r2
 800a8c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a8c4:	f7fb fd34 	bl	8006330 <HAL_GetTick>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8cc:	1a9b      	subs	r3, r3, r2
 800a8ce:	683a      	ldr	r2, [r7, #0]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a8d4:	f7fb fd2c 	bl	8006330 <HAL_GetTick>
 800a8d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a8da:	4b39      	ldr	r3, [pc, #228]	; (800a9c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	015b      	lsls	r3, r3, #5
 800a8e0:	0d1b      	lsrs	r3, r3, #20
 800a8e2:	69fa      	ldr	r2, [r7, #28]
 800a8e4:	fb02 f303 	mul.w	r3, r2, r3
 800a8e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a8ea:	e054      	b.n	800a996 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8f2:	d050      	beq.n	800a996 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a8f4:	f7fb fd1c 	bl	8006330 <HAL_GetTick>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	69bb      	ldr	r3, [r7, #24]
 800a8fc:	1ad3      	subs	r3, r2, r3
 800a8fe:	69fa      	ldr	r2, [r7, #28]
 800a900:	429a      	cmp	r2, r3
 800a902:	d902      	bls.n	800a90a <SPI_WaitFlagStateUntilTimeout+0x56>
 800a904:	69fb      	ldr	r3, [r7, #28]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d13d      	bne.n	800a986 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	685a      	ldr	r2, [r3, #4]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a918:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a922:	d111      	bne.n	800a948 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	689b      	ldr	r3, [r3, #8]
 800a928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a92c:	d004      	beq.n	800a938 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a936:	d107      	bne.n	800a948 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a946:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a94c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a950:	d10f      	bne.n	800a972 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a960:	601a      	str	r2, [r3, #0]
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a970:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2201      	movs	r2, #1
 800a976:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a982:	2303      	movs	r3, #3
 800a984:	e017      	b.n	800a9b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d101      	bne.n	800a990 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a98c:	2300      	movs	r3, #0
 800a98e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	3b01      	subs	r3, #1
 800a994:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	689a      	ldr	r2, [r3, #8]
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	4013      	ands	r3, r2
 800a9a0:	68ba      	ldr	r2, [r7, #8]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	bf0c      	ite	eq
 800a9a6:	2301      	moveq	r3, #1
 800a9a8:	2300      	movne	r3, #0
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	79fb      	ldrb	r3, [r7, #7]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d19b      	bne.n	800a8ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a9b4:	2300      	movs	r3, #0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3720      	adds	r7, #32
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	20000058 	.word	0x20000058

0800a9c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b088      	sub	sp, #32
 800a9c8:	af02      	add	r7, sp, #8
 800a9ca:	60f8      	str	r0, [r7, #12]
 800a9cc:	60b9      	str	r1, [r7, #8]
 800a9ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a9d0:	4b1b      	ldr	r3, [pc, #108]	; (800aa40 <SPI_EndRxTxTransaction+0x7c>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a1b      	ldr	r2, [pc, #108]	; (800aa44 <SPI_EndRxTxTransaction+0x80>)
 800a9d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a9da:	0d5b      	lsrs	r3, r3, #21
 800a9dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a9e0:	fb02 f303 	mul.w	r3, r2, r3
 800a9e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a9ee:	d112      	bne.n	800aa16 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	9300      	str	r3, [sp, #0]
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	2180      	movs	r1, #128	; 0x80
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f7ff ff5a 	bl	800a8b4 <SPI_WaitFlagStateUntilTimeout>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d016      	beq.n	800aa34 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa0a:	f043 0220 	orr.w	r2, r3, #32
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800aa12:	2303      	movs	r3, #3
 800aa14:	e00f      	b.n	800aa36 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00a      	beq.n	800aa32 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	3b01      	subs	r3, #1
 800aa20:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	689b      	ldr	r3, [r3, #8]
 800aa28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa2c:	2b80      	cmp	r3, #128	; 0x80
 800aa2e:	d0f2      	beq.n	800aa16 <SPI_EndRxTxTransaction+0x52>
 800aa30:	e000      	b.n	800aa34 <SPI_EndRxTxTransaction+0x70>
        break;
 800aa32:	bf00      	nop
  }

  return HAL_OK;
 800aa34:	2300      	movs	r3, #0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3718      	adds	r7, #24
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	20000058 	.word	0x20000058
 800aa44:	165e9f81 	.word	0x165e9f81

0800aa48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d101      	bne.n	800aa5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	e041      	b.n	800aade <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d106      	bne.n	800aa74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 f839 	bl	800aae6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2202      	movs	r2, #2
 800aa78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	3304      	adds	r3, #4
 800aa84:	4619      	mov	r1, r3
 800aa86:	4610      	mov	r0, r2
 800aa88:	f000 f9d8 	bl	800ae3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2201      	movs	r2, #1
 800aa98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2201      	movs	r2, #1
 800aab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2201      	movs	r2, #1
 800aab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2201      	movs	r2, #1
 800aac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2201      	movs	r2, #1
 800aac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2201      	movs	r2, #1
 800aad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aadc:	2300      	movs	r3, #0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3708      	adds	r7, #8
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800aae6:	b480      	push	{r7}
 800aae8:	b083      	sub	sp, #12
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800aaee:	bf00      	nop
 800aaf0:	370c      	adds	r7, #12
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr
	...

0800aafc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b085      	sub	sp, #20
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d001      	beq.n	800ab14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ab10:	2301      	movs	r3, #1
 800ab12:	e04e      	b.n	800abb2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2202      	movs	r2, #2
 800ab18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68da      	ldr	r2, [r3, #12]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f042 0201 	orr.w	r2, r2, #1
 800ab2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a23      	ldr	r2, [pc, #140]	; (800abc0 <HAL_TIM_Base_Start_IT+0xc4>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d022      	beq.n	800ab7c <HAL_TIM_Base_Start_IT+0x80>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab3e:	d01d      	beq.n	800ab7c <HAL_TIM_Base_Start_IT+0x80>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4a1f      	ldr	r2, [pc, #124]	; (800abc4 <HAL_TIM_Base_Start_IT+0xc8>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d018      	beq.n	800ab7c <HAL_TIM_Base_Start_IT+0x80>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4a1e      	ldr	r2, [pc, #120]	; (800abc8 <HAL_TIM_Base_Start_IT+0xcc>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d013      	beq.n	800ab7c <HAL_TIM_Base_Start_IT+0x80>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4a1c      	ldr	r2, [pc, #112]	; (800abcc <HAL_TIM_Base_Start_IT+0xd0>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d00e      	beq.n	800ab7c <HAL_TIM_Base_Start_IT+0x80>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a1b      	ldr	r2, [pc, #108]	; (800abd0 <HAL_TIM_Base_Start_IT+0xd4>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d009      	beq.n	800ab7c <HAL_TIM_Base_Start_IT+0x80>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a19      	ldr	r2, [pc, #100]	; (800abd4 <HAL_TIM_Base_Start_IT+0xd8>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d004      	beq.n	800ab7c <HAL_TIM_Base_Start_IT+0x80>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a18      	ldr	r2, [pc, #96]	; (800abd8 <HAL_TIM_Base_Start_IT+0xdc>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d111      	bne.n	800aba0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	689b      	ldr	r3, [r3, #8]
 800ab82:	f003 0307 	and.w	r3, r3, #7
 800ab86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2b06      	cmp	r3, #6
 800ab8c:	d010      	beq.n	800abb0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f042 0201 	orr.w	r2, r2, #1
 800ab9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab9e:	e007      	b.n	800abb0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f042 0201 	orr.w	r2, r2, #1
 800abae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800abb0:	2300      	movs	r3, #0
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3714      	adds	r7, #20
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop
 800abc0:	40010000 	.word	0x40010000
 800abc4:	40000400 	.word	0x40000400
 800abc8:	40000800 	.word	0x40000800
 800abcc:	40000c00 	.word	0x40000c00
 800abd0:	40010400 	.word	0x40010400
 800abd4:	40014000 	.word	0x40014000
 800abd8:	40001800 	.word	0x40001800

0800abdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	691b      	ldr	r3, [r3, #16]
 800abea:	f003 0302 	and.w	r3, r3, #2
 800abee:	2b02      	cmp	r3, #2
 800abf0:	d122      	bne.n	800ac38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	f003 0302 	and.w	r3, r3, #2
 800abfc:	2b02      	cmp	r3, #2
 800abfe:	d11b      	bne.n	800ac38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f06f 0202 	mvn.w	r2, #2
 800ac08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	699b      	ldr	r3, [r3, #24]
 800ac16:	f003 0303 	and.w	r3, r3, #3
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d003      	beq.n	800ac26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 f8ee 	bl	800ae00 <HAL_TIM_IC_CaptureCallback>
 800ac24:	e005      	b.n	800ac32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 f8e0 	bl	800adec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 f8f1 	bl	800ae14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	691b      	ldr	r3, [r3, #16]
 800ac3e:	f003 0304 	and.w	r3, r3, #4
 800ac42:	2b04      	cmp	r3, #4
 800ac44:	d122      	bne.n	800ac8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	68db      	ldr	r3, [r3, #12]
 800ac4c:	f003 0304 	and.w	r3, r3, #4
 800ac50:	2b04      	cmp	r3, #4
 800ac52:	d11b      	bne.n	800ac8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f06f 0204 	mvn.w	r2, #4
 800ac5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2202      	movs	r2, #2
 800ac62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	699b      	ldr	r3, [r3, #24]
 800ac6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d003      	beq.n	800ac7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 f8c4 	bl	800ae00 <HAL_TIM_IC_CaptureCallback>
 800ac78:	e005      	b.n	800ac86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 f8b6 	bl	800adec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 f8c7 	bl	800ae14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	691b      	ldr	r3, [r3, #16]
 800ac92:	f003 0308 	and.w	r3, r3, #8
 800ac96:	2b08      	cmp	r3, #8
 800ac98:	d122      	bne.n	800ace0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	68db      	ldr	r3, [r3, #12]
 800aca0:	f003 0308 	and.w	r3, r3, #8
 800aca4:	2b08      	cmp	r3, #8
 800aca6:	d11b      	bne.n	800ace0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f06f 0208 	mvn.w	r2, #8
 800acb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2204      	movs	r2, #4
 800acb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	69db      	ldr	r3, [r3, #28]
 800acbe:	f003 0303 	and.w	r3, r3, #3
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d003      	beq.n	800acce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 f89a 	bl	800ae00 <HAL_TIM_IC_CaptureCallback>
 800accc:	e005      	b.n	800acda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 f88c 	bl	800adec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 f89d 	bl	800ae14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2200      	movs	r2, #0
 800acde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	691b      	ldr	r3, [r3, #16]
 800ace6:	f003 0310 	and.w	r3, r3, #16
 800acea:	2b10      	cmp	r3, #16
 800acec:	d122      	bne.n	800ad34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	68db      	ldr	r3, [r3, #12]
 800acf4:	f003 0310 	and.w	r3, r3, #16
 800acf8:	2b10      	cmp	r3, #16
 800acfa:	d11b      	bne.n	800ad34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f06f 0210 	mvn.w	r2, #16
 800ad04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2208      	movs	r2, #8
 800ad0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	69db      	ldr	r3, [r3, #28]
 800ad12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d003      	beq.n	800ad22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 f870 	bl	800ae00 <HAL_TIM_IC_CaptureCallback>
 800ad20:	e005      	b.n	800ad2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 f862 	bl	800adec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f000 f873 	bl	800ae14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2200      	movs	r2, #0
 800ad32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	691b      	ldr	r3, [r3, #16]
 800ad3a:	f003 0301 	and.w	r3, r3, #1
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d10e      	bne.n	800ad60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	f003 0301 	and.w	r3, r3, #1
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d107      	bne.n	800ad60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f06f 0201 	mvn.w	r2, #1
 800ad58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f7fa f9c0 	bl	80050e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	691b      	ldr	r3, [r3, #16]
 800ad66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad6a:	2b80      	cmp	r3, #128	; 0x80
 800ad6c:	d10e      	bne.n	800ad8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad78:	2b80      	cmp	r3, #128	; 0x80
 800ad7a:	d107      	bne.n	800ad8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ad84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 f902 	bl	800af90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	691b      	ldr	r3, [r3, #16]
 800ad92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad96:	2b40      	cmp	r3, #64	; 0x40
 800ad98:	d10e      	bne.n	800adb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	68db      	ldr	r3, [r3, #12]
 800ada0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ada4:	2b40      	cmp	r3, #64	; 0x40
 800ada6:	d107      	bne.n	800adb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800adb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 f838 	bl	800ae28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	691b      	ldr	r3, [r3, #16]
 800adbe:	f003 0320 	and.w	r3, r3, #32
 800adc2:	2b20      	cmp	r3, #32
 800adc4:	d10e      	bne.n	800ade4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	f003 0320 	and.w	r3, r3, #32
 800add0:	2b20      	cmp	r3, #32
 800add2:	d107      	bne.n	800ade4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f06f 0220 	mvn.w	r2, #32
 800addc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 f8cc 	bl	800af7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ade4:	bf00      	nop
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800adf4:	bf00      	nop
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b083      	sub	sp, #12
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae08:	bf00      	nop
 800ae0a:	370c      	adds	r7, #12
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae1c:	bf00      	nop
 800ae1e:	370c      	adds	r7, #12
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr

0800ae28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b083      	sub	sp, #12
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae30:	bf00      	nop
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b085      	sub	sp, #20
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	4a40      	ldr	r2, [pc, #256]	; (800af50 <TIM_Base_SetConfig+0x114>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d013      	beq.n	800ae7c <TIM_Base_SetConfig+0x40>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae5a:	d00f      	beq.n	800ae7c <TIM_Base_SetConfig+0x40>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4a3d      	ldr	r2, [pc, #244]	; (800af54 <TIM_Base_SetConfig+0x118>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d00b      	beq.n	800ae7c <TIM_Base_SetConfig+0x40>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4a3c      	ldr	r2, [pc, #240]	; (800af58 <TIM_Base_SetConfig+0x11c>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d007      	beq.n	800ae7c <TIM_Base_SetConfig+0x40>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	4a3b      	ldr	r2, [pc, #236]	; (800af5c <TIM_Base_SetConfig+0x120>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d003      	beq.n	800ae7c <TIM_Base_SetConfig+0x40>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4a3a      	ldr	r2, [pc, #232]	; (800af60 <TIM_Base_SetConfig+0x124>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d108      	bne.n	800ae8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a2f      	ldr	r2, [pc, #188]	; (800af50 <TIM_Base_SetConfig+0x114>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d02b      	beq.n	800aeee <TIM_Base_SetConfig+0xb2>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae9c:	d027      	beq.n	800aeee <TIM_Base_SetConfig+0xb2>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4a2c      	ldr	r2, [pc, #176]	; (800af54 <TIM_Base_SetConfig+0x118>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d023      	beq.n	800aeee <TIM_Base_SetConfig+0xb2>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4a2b      	ldr	r2, [pc, #172]	; (800af58 <TIM_Base_SetConfig+0x11c>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d01f      	beq.n	800aeee <TIM_Base_SetConfig+0xb2>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4a2a      	ldr	r2, [pc, #168]	; (800af5c <TIM_Base_SetConfig+0x120>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d01b      	beq.n	800aeee <TIM_Base_SetConfig+0xb2>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	4a29      	ldr	r2, [pc, #164]	; (800af60 <TIM_Base_SetConfig+0x124>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d017      	beq.n	800aeee <TIM_Base_SetConfig+0xb2>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	4a28      	ldr	r2, [pc, #160]	; (800af64 <TIM_Base_SetConfig+0x128>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d013      	beq.n	800aeee <TIM_Base_SetConfig+0xb2>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	4a27      	ldr	r2, [pc, #156]	; (800af68 <TIM_Base_SetConfig+0x12c>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d00f      	beq.n	800aeee <TIM_Base_SetConfig+0xb2>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4a26      	ldr	r2, [pc, #152]	; (800af6c <TIM_Base_SetConfig+0x130>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d00b      	beq.n	800aeee <TIM_Base_SetConfig+0xb2>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	4a25      	ldr	r2, [pc, #148]	; (800af70 <TIM_Base_SetConfig+0x134>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d007      	beq.n	800aeee <TIM_Base_SetConfig+0xb2>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	4a24      	ldr	r2, [pc, #144]	; (800af74 <TIM_Base_SetConfig+0x138>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d003      	beq.n	800aeee <TIM_Base_SetConfig+0xb2>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	4a23      	ldr	r2, [pc, #140]	; (800af78 <TIM_Base_SetConfig+0x13c>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d108      	bne.n	800af00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	68db      	ldr	r3, [r3, #12]
 800aefa:	68fa      	ldr	r2, [r7, #12]
 800aefc:	4313      	orrs	r3, r2
 800aefe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	695b      	ldr	r3, [r3, #20]
 800af0a:	4313      	orrs	r3, r2
 800af0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	689a      	ldr	r2, [r3, #8]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	4a0a      	ldr	r2, [pc, #40]	; (800af50 <TIM_Base_SetConfig+0x114>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d003      	beq.n	800af34 <TIM_Base_SetConfig+0xf8>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	4a0c      	ldr	r2, [pc, #48]	; (800af60 <TIM_Base_SetConfig+0x124>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d103      	bne.n	800af3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	691a      	ldr	r2, [r3, #16]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2201      	movs	r2, #1
 800af40:	615a      	str	r2, [r3, #20]
}
 800af42:	bf00      	nop
 800af44:	3714      	adds	r7, #20
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr
 800af4e:	bf00      	nop
 800af50:	40010000 	.word	0x40010000
 800af54:	40000400 	.word	0x40000400
 800af58:	40000800 	.word	0x40000800
 800af5c:	40000c00 	.word	0x40000c00
 800af60:	40010400 	.word	0x40010400
 800af64:	40014000 	.word	0x40014000
 800af68:	40014400 	.word	0x40014400
 800af6c:	40014800 	.word	0x40014800
 800af70:	40001800 	.word	0x40001800
 800af74:	40001c00 	.word	0x40001c00
 800af78:	40002000 	.word	0x40002000

0800af7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af84:	bf00      	nop
 800af86:	370c      	adds	r7, #12
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr

0800af90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af90:	b480      	push	{r7}
 800af92:	b083      	sub	sp, #12
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af98:	bf00      	nop
 800af9a:	370c      	adds	r7, #12
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr

0800afa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d101      	bne.n	800afb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	e03f      	b.n	800b036 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d106      	bne.n	800afd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2200      	movs	r2, #0
 800afc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f7fa fdb8 	bl	8005b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2224      	movs	r2, #36	; 0x24
 800afd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	68da      	ldr	r2, [r3, #12]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800afe6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 f929 	bl	800b240 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	691a      	ldr	r2, [r3, #16]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800affc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	695a      	ldr	r2, [r3, #20]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b00c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	68da      	ldr	r2, [r3, #12]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b01c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2220      	movs	r2, #32
 800b028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2220      	movs	r2, #32
 800b030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b034:	2300      	movs	r3, #0
}
 800b036:	4618      	mov	r0, r3
 800b038:	3708      	adds	r7, #8
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b08a      	sub	sp, #40	; 0x28
 800b042:	af02      	add	r7, sp, #8
 800b044:	60f8      	str	r0, [r7, #12]
 800b046:	60b9      	str	r1, [r7, #8]
 800b048:	603b      	str	r3, [r7, #0]
 800b04a:	4613      	mov	r3, r2
 800b04c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b04e:	2300      	movs	r3, #0
 800b050:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	2b20      	cmp	r3, #32
 800b05c:	d17c      	bne.n	800b158 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d002      	beq.n	800b06a <HAL_UART_Transmit+0x2c>
 800b064:	88fb      	ldrh	r3, [r7, #6]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d101      	bne.n	800b06e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b06a:	2301      	movs	r3, #1
 800b06c:	e075      	b.n	800b15a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b074:	2b01      	cmp	r3, #1
 800b076:	d101      	bne.n	800b07c <HAL_UART_Transmit+0x3e>
 800b078:	2302      	movs	r3, #2
 800b07a:	e06e      	b.n	800b15a <HAL_UART_Transmit+0x11c>
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2201      	movs	r2, #1
 800b080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2200      	movs	r2, #0
 800b088:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2221      	movs	r2, #33	; 0x21
 800b08e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b092:	f7fb f94d 	bl	8006330 <HAL_GetTick>
 800b096:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	88fa      	ldrh	r2, [r7, #6]
 800b09c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	88fa      	ldrh	r2, [r7, #6]
 800b0a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	689b      	ldr	r3, [r3, #8]
 800b0a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0ac:	d108      	bne.n	800b0c0 <HAL_UART_Transmit+0x82>
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	691b      	ldr	r3, [r3, #16]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d104      	bne.n	800b0c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	61bb      	str	r3, [r7, #24]
 800b0be:	e003      	b.n	800b0c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b0d0:	e02a      	b.n	800b128 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	9300      	str	r3, [sp, #0]
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	2180      	movs	r1, #128	; 0x80
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	f000 f840 	bl	800b162 <UART_WaitOnFlagUntilTimeout>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d001      	beq.n	800b0ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b0e8:	2303      	movs	r3, #3
 800b0ea:	e036      	b.n	800b15a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b0ec:	69fb      	ldr	r3, [r7, #28]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d10b      	bne.n	800b10a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b0f2:	69bb      	ldr	r3, [r7, #24]
 800b0f4:	881b      	ldrh	r3, [r3, #0]
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b100:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	3302      	adds	r3, #2
 800b106:	61bb      	str	r3, [r7, #24]
 800b108:	e007      	b.n	800b11a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b10a:	69fb      	ldr	r3, [r7, #28]
 800b10c:	781a      	ldrb	r2, [r3, #0]
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	3301      	adds	r3, #1
 800b118:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b11e:	b29b      	uxth	r3, r3
 800b120:	3b01      	subs	r3, #1
 800b122:	b29a      	uxth	r2, r3
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d1cf      	bne.n	800b0d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	9300      	str	r3, [sp, #0]
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	2200      	movs	r2, #0
 800b13a:	2140      	movs	r1, #64	; 0x40
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	f000 f810 	bl	800b162 <UART_WaitOnFlagUntilTimeout>
 800b142:	4603      	mov	r3, r0
 800b144:	2b00      	cmp	r3, #0
 800b146:	d001      	beq.n	800b14c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b148:	2303      	movs	r3, #3
 800b14a:	e006      	b.n	800b15a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2220      	movs	r2, #32
 800b150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b154:	2300      	movs	r3, #0
 800b156:	e000      	b.n	800b15a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b158:	2302      	movs	r3, #2
  }
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3720      	adds	r7, #32
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b090      	sub	sp, #64	; 0x40
 800b166:	af00      	add	r7, sp, #0
 800b168:	60f8      	str	r0, [r7, #12]
 800b16a:	60b9      	str	r1, [r7, #8]
 800b16c:	603b      	str	r3, [r7, #0]
 800b16e:	4613      	mov	r3, r2
 800b170:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b172:	e050      	b.n	800b216 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b176:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b17a:	d04c      	beq.n	800b216 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b17c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d007      	beq.n	800b192 <UART_WaitOnFlagUntilTimeout+0x30>
 800b182:	f7fb f8d5 	bl	8006330 <HAL_GetTick>
 800b186:	4602      	mov	r2, r0
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	1ad3      	subs	r3, r2, r3
 800b18c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b18e:	429a      	cmp	r2, r3
 800b190:	d241      	bcs.n	800b216 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	330c      	adds	r3, #12
 800b198:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b19c:	e853 3f00 	ldrex	r3, [r3]
 800b1a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	330c      	adds	r3, #12
 800b1b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b1b2:	637a      	str	r2, [r7, #52]	; 0x34
 800b1b4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b1b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1ba:	e841 2300 	strex	r3, r2, [r1]
 800b1be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d1e5      	bne.n	800b192 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	3314      	adds	r3, #20
 800b1cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	e853 3f00 	ldrex	r3, [r3]
 800b1d4:	613b      	str	r3, [r7, #16]
   return(result);
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	f023 0301 	bic.w	r3, r3, #1
 800b1dc:	63bb      	str	r3, [r7, #56]	; 0x38
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	3314      	adds	r3, #20
 800b1e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1e6:	623a      	str	r2, [r7, #32]
 800b1e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ea:	69f9      	ldr	r1, [r7, #28]
 800b1ec:	6a3a      	ldr	r2, [r7, #32]
 800b1ee:	e841 2300 	strex	r3, r2, [r1]
 800b1f2:	61bb      	str	r3, [r7, #24]
   return(result);
 800b1f4:	69bb      	ldr	r3, [r7, #24]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d1e5      	bne.n	800b1c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2220      	movs	r2, #32
 800b1fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2220      	movs	r2, #32
 800b206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2200      	movs	r2, #0
 800b20e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b212:	2303      	movs	r3, #3
 800b214:	e00f      	b.n	800b236 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	4013      	ands	r3, r2
 800b220:	68ba      	ldr	r2, [r7, #8]
 800b222:	429a      	cmp	r2, r3
 800b224:	bf0c      	ite	eq
 800b226:	2301      	moveq	r3, #1
 800b228:	2300      	movne	r3, #0
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	461a      	mov	r2, r3
 800b22e:	79fb      	ldrb	r3, [r7, #7]
 800b230:	429a      	cmp	r2, r3
 800b232:	d09f      	beq.n	800b174 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3740      	adds	r7, #64	; 0x40
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
	...

0800b240 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b244:	b0c0      	sub	sp, #256	; 0x100
 800b246:	af00      	add	r7, sp, #0
 800b248:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b24c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	691b      	ldr	r3, [r3, #16]
 800b254:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b25c:	68d9      	ldr	r1, [r3, #12]
 800b25e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	ea40 0301 	orr.w	r3, r0, r1
 800b268:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b26a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b26e:	689a      	ldr	r2, [r3, #8]
 800b270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b274:	691b      	ldr	r3, [r3, #16]
 800b276:	431a      	orrs	r2, r3
 800b278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b27c:	695b      	ldr	r3, [r3, #20]
 800b27e:	431a      	orrs	r2, r3
 800b280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b284:	69db      	ldr	r3, [r3, #28]
 800b286:	4313      	orrs	r3, r2
 800b288:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b28c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	68db      	ldr	r3, [r3, #12]
 800b294:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b298:	f021 010c 	bic.w	r1, r1, #12
 800b29c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b2a6:	430b      	orrs	r3, r1
 800b2a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b2aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	695b      	ldr	r3, [r3, #20]
 800b2b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b2b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2ba:	6999      	ldr	r1, [r3, #24]
 800b2bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	ea40 0301 	orr.w	r3, r0, r1
 800b2c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b2c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2cc:	681a      	ldr	r2, [r3, #0]
 800b2ce:	4b8f      	ldr	r3, [pc, #572]	; (800b50c <UART_SetConfig+0x2cc>)
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d005      	beq.n	800b2e0 <UART_SetConfig+0xa0>
 800b2d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	4b8d      	ldr	r3, [pc, #564]	; (800b510 <UART_SetConfig+0x2d0>)
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d104      	bne.n	800b2ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b2e0:	f7fe fee2 	bl	800a0a8 <HAL_RCC_GetPCLK2Freq>
 800b2e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b2e8:	e003      	b.n	800b2f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b2ea:	f7fe fec9 	bl	800a080 <HAL_RCC_GetPCLK1Freq>
 800b2ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b2f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2f6:	69db      	ldr	r3, [r3, #28]
 800b2f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2fc:	f040 810c 	bne.w	800b518 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b304:	2200      	movs	r2, #0
 800b306:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b30a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b30e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b312:	4622      	mov	r2, r4
 800b314:	462b      	mov	r3, r5
 800b316:	1891      	adds	r1, r2, r2
 800b318:	65b9      	str	r1, [r7, #88]	; 0x58
 800b31a:	415b      	adcs	r3, r3
 800b31c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b31e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b322:	4621      	mov	r1, r4
 800b324:	eb12 0801 	adds.w	r8, r2, r1
 800b328:	4629      	mov	r1, r5
 800b32a:	eb43 0901 	adc.w	r9, r3, r1
 800b32e:	f04f 0200 	mov.w	r2, #0
 800b332:	f04f 0300 	mov.w	r3, #0
 800b336:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b33a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b33e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b342:	4690      	mov	r8, r2
 800b344:	4699      	mov	r9, r3
 800b346:	4623      	mov	r3, r4
 800b348:	eb18 0303 	adds.w	r3, r8, r3
 800b34c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b350:	462b      	mov	r3, r5
 800b352:	eb49 0303 	adc.w	r3, r9, r3
 800b356:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b35a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	2200      	movs	r2, #0
 800b362:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b366:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b36a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b36e:	460b      	mov	r3, r1
 800b370:	18db      	adds	r3, r3, r3
 800b372:	653b      	str	r3, [r7, #80]	; 0x50
 800b374:	4613      	mov	r3, r2
 800b376:	eb42 0303 	adc.w	r3, r2, r3
 800b37a:	657b      	str	r3, [r7, #84]	; 0x54
 800b37c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b380:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b384:	f7f4 ff7c 	bl	8000280 <__aeabi_uldivmod>
 800b388:	4602      	mov	r2, r0
 800b38a:	460b      	mov	r3, r1
 800b38c:	4b61      	ldr	r3, [pc, #388]	; (800b514 <UART_SetConfig+0x2d4>)
 800b38e:	fba3 2302 	umull	r2, r3, r3, r2
 800b392:	095b      	lsrs	r3, r3, #5
 800b394:	011c      	lsls	r4, r3, #4
 800b396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b39a:	2200      	movs	r2, #0
 800b39c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b3a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b3a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b3a8:	4642      	mov	r2, r8
 800b3aa:	464b      	mov	r3, r9
 800b3ac:	1891      	adds	r1, r2, r2
 800b3ae:	64b9      	str	r1, [r7, #72]	; 0x48
 800b3b0:	415b      	adcs	r3, r3
 800b3b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b3b8:	4641      	mov	r1, r8
 800b3ba:	eb12 0a01 	adds.w	sl, r2, r1
 800b3be:	4649      	mov	r1, r9
 800b3c0:	eb43 0b01 	adc.w	fp, r3, r1
 800b3c4:	f04f 0200 	mov.w	r2, #0
 800b3c8:	f04f 0300 	mov.w	r3, #0
 800b3cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b3d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b3d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b3d8:	4692      	mov	sl, r2
 800b3da:	469b      	mov	fp, r3
 800b3dc:	4643      	mov	r3, r8
 800b3de:	eb1a 0303 	adds.w	r3, sl, r3
 800b3e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b3e6:	464b      	mov	r3, r9
 800b3e8:	eb4b 0303 	adc.w	r3, fp, r3
 800b3ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b3f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b3fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b400:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b404:	460b      	mov	r3, r1
 800b406:	18db      	adds	r3, r3, r3
 800b408:	643b      	str	r3, [r7, #64]	; 0x40
 800b40a:	4613      	mov	r3, r2
 800b40c:	eb42 0303 	adc.w	r3, r2, r3
 800b410:	647b      	str	r3, [r7, #68]	; 0x44
 800b412:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b416:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b41a:	f7f4 ff31 	bl	8000280 <__aeabi_uldivmod>
 800b41e:	4602      	mov	r2, r0
 800b420:	460b      	mov	r3, r1
 800b422:	4611      	mov	r1, r2
 800b424:	4b3b      	ldr	r3, [pc, #236]	; (800b514 <UART_SetConfig+0x2d4>)
 800b426:	fba3 2301 	umull	r2, r3, r3, r1
 800b42a:	095b      	lsrs	r3, r3, #5
 800b42c:	2264      	movs	r2, #100	; 0x64
 800b42e:	fb02 f303 	mul.w	r3, r2, r3
 800b432:	1acb      	subs	r3, r1, r3
 800b434:	00db      	lsls	r3, r3, #3
 800b436:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b43a:	4b36      	ldr	r3, [pc, #216]	; (800b514 <UART_SetConfig+0x2d4>)
 800b43c:	fba3 2302 	umull	r2, r3, r3, r2
 800b440:	095b      	lsrs	r3, r3, #5
 800b442:	005b      	lsls	r3, r3, #1
 800b444:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b448:	441c      	add	r4, r3
 800b44a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b44e:	2200      	movs	r2, #0
 800b450:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b454:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b458:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b45c:	4642      	mov	r2, r8
 800b45e:	464b      	mov	r3, r9
 800b460:	1891      	adds	r1, r2, r2
 800b462:	63b9      	str	r1, [r7, #56]	; 0x38
 800b464:	415b      	adcs	r3, r3
 800b466:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b468:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b46c:	4641      	mov	r1, r8
 800b46e:	1851      	adds	r1, r2, r1
 800b470:	6339      	str	r1, [r7, #48]	; 0x30
 800b472:	4649      	mov	r1, r9
 800b474:	414b      	adcs	r3, r1
 800b476:	637b      	str	r3, [r7, #52]	; 0x34
 800b478:	f04f 0200 	mov.w	r2, #0
 800b47c:	f04f 0300 	mov.w	r3, #0
 800b480:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b484:	4659      	mov	r1, fp
 800b486:	00cb      	lsls	r3, r1, #3
 800b488:	4651      	mov	r1, sl
 800b48a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b48e:	4651      	mov	r1, sl
 800b490:	00ca      	lsls	r2, r1, #3
 800b492:	4610      	mov	r0, r2
 800b494:	4619      	mov	r1, r3
 800b496:	4603      	mov	r3, r0
 800b498:	4642      	mov	r2, r8
 800b49a:	189b      	adds	r3, r3, r2
 800b49c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b4a0:	464b      	mov	r3, r9
 800b4a2:	460a      	mov	r2, r1
 800b4a4:	eb42 0303 	adc.w	r3, r2, r3
 800b4a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b4ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b4b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b4bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	18db      	adds	r3, r3, r3
 800b4c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4c6:	4613      	mov	r3, r2
 800b4c8:	eb42 0303 	adc.w	r3, r2, r3
 800b4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b4d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b4d6:	f7f4 fed3 	bl	8000280 <__aeabi_uldivmod>
 800b4da:	4602      	mov	r2, r0
 800b4dc:	460b      	mov	r3, r1
 800b4de:	4b0d      	ldr	r3, [pc, #52]	; (800b514 <UART_SetConfig+0x2d4>)
 800b4e0:	fba3 1302 	umull	r1, r3, r3, r2
 800b4e4:	095b      	lsrs	r3, r3, #5
 800b4e6:	2164      	movs	r1, #100	; 0x64
 800b4e8:	fb01 f303 	mul.w	r3, r1, r3
 800b4ec:	1ad3      	subs	r3, r2, r3
 800b4ee:	00db      	lsls	r3, r3, #3
 800b4f0:	3332      	adds	r3, #50	; 0x32
 800b4f2:	4a08      	ldr	r2, [pc, #32]	; (800b514 <UART_SetConfig+0x2d4>)
 800b4f4:	fba2 2303 	umull	r2, r3, r2, r3
 800b4f8:	095b      	lsrs	r3, r3, #5
 800b4fa:	f003 0207 	and.w	r2, r3, #7
 800b4fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4422      	add	r2, r4
 800b506:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b508:	e105      	b.n	800b716 <UART_SetConfig+0x4d6>
 800b50a:	bf00      	nop
 800b50c:	40011000 	.word	0x40011000
 800b510:	40011400 	.word	0x40011400
 800b514:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b518:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b51c:	2200      	movs	r2, #0
 800b51e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b522:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b526:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b52a:	4642      	mov	r2, r8
 800b52c:	464b      	mov	r3, r9
 800b52e:	1891      	adds	r1, r2, r2
 800b530:	6239      	str	r1, [r7, #32]
 800b532:	415b      	adcs	r3, r3
 800b534:	627b      	str	r3, [r7, #36]	; 0x24
 800b536:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b53a:	4641      	mov	r1, r8
 800b53c:	1854      	adds	r4, r2, r1
 800b53e:	4649      	mov	r1, r9
 800b540:	eb43 0501 	adc.w	r5, r3, r1
 800b544:	f04f 0200 	mov.w	r2, #0
 800b548:	f04f 0300 	mov.w	r3, #0
 800b54c:	00eb      	lsls	r3, r5, #3
 800b54e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b552:	00e2      	lsls	r2, r4, #3
 800b554:	4614      	mov	r4, r2
 800b556:	461d      	mov	r5, r3
 800b558:	4643      	mov	r3, r8
 800b55a:	18e3      	adds	r3, r4, r3
 800b55c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b560:	464b      	mov	r3, r9
 800b562:	eb45 0303 	adc.w	r3, r5, r3
 800b566:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b56a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b576:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b57a:	f04f 0200 	mov.w	r2, #0
 800b57e:	f04f 0300 	mov.w	r3, #0
 800b582:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b586:	4629      	mov	r1, r5
 800b588:	008b      	lsls	r3, r1, #2
 800b58a:	4621      	mov	r1, r4
 800b58c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b590:	4621      	mov	r1, r4
 800b592:	008a      	lsls	r2, r1, #2
 800b594:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b598:	f7f4 fe72 	bl	8000280 <__aeabi_uldivmod>
 800b59c:	4602      	mov	r2, r0
 800b59e:	460b      	mov	r3, r1
 800b5a0:	4b60      	ldr	r3, [pc, #384]	; (800b724 <UART_SetConfig+0x4e4>)
 800b5a2:	fba3 2302 	umull	r2, r3, r3, r2
 800b5a6:	095b      	lsrs	r3, r3, #5
 800b5a8:	011c      	lsls	r4, r3, #4
 800b5aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b5b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b5b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b5bc:	4642      	mov	r2, r8
 800b5be:	464b      	mov	r3, r9
 800b5c0:	1891      	adds	r1, r2, r2
 800b5c2:	61b9      	str	r1, [r7, #24]
 800b5c4:	415b      	adcs	r3, r3
 800b5c6:	61fb      	str	r3, [r7, #28]
 800b5c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b5cc:	4641      	mov	r1, r8
 800b5ce:	1851      	adds	r1, r2, r1
 800b5d0:	6139      	str	r1, [r7, #16]
 800b5d2:	4649      	mov	r1, r9
 800b5d4:	414b      	adcs	r3, r1
 800b5d6:	617b      	str	r3, [r7, #20]
 800b5d8:	f04f 0200 	mov.w	r2, #0
 800b5dc:	f04f 0300 	mov.w	r3, #0
 800b5e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b5e4:	4659      	mov	r1, fp
 800b5e6:	00cb      	lsls	r3, r1, #3
 800b5e8:	4651      	mov	r1, sl
 800b5ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b5ee:	4651      	mov	r1, sl
 800b5f0:	00ca      	lsls	r2, r1, #3
 800b5f2:	4610      	mov	r0, r2
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	4642      	mov	r2, r8
 800b5fa:	189b      	adds	r3, r3, r2
 800b5fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b600:	464b      	mov	r3, r9
 800b602:	460a      	mov	r2, r1
 800b604:	eb42 0303 	adc.w	r3, r2, r3
 800b608:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b60c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	2200      	movs	r2, #0
 800b614:	67bb      	str	r3, [r7, #120]	; 0x78
 800b616:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b618:	f04f 0200 	mov.w	r2, #0
 800b61c:	f04f 0300 	mov.w	r3, #0
 800b620:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b624:	4649      	mov	r1, r9
 800b626:	008b      	lsls	r3, r1, #2
 800b628:	4641      	mov	r1, r8
 800b62a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b62e:	4641      	mov	r1, r8
 800b630:	008a      	lsls	r2, r1, #2
 800b632:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b636:	f7f4 fe23 	bl	8000280 <__aeabi_uldivmod>
 800b63a:	4602      	mov	r2, r0
 800b63c:	460b      	mov	r3, r1
 800b63e:	4b39      	ldr	r3, [pc, #228]	; (800b724 <UART_SetConfig+0x4e4>)
 800b640:	fba3 1302 	umull	r1, r3, r3, r2
 800b644:	095b      	lsrs	r3, r3, #5
 800b646:	2164      	movs	r1, #100	; 0x64
 800b648:	fb01 f303 	mul.w	r3, r1, r3
 800b64c:	1ad3      	subs	r3, r2, r3
 800b64e:	011b      	lsls	r3, r3, #4
 800b650:	3332      	adds	r3, #50	; 0x32
 800b652:	4a34      	ldr	r2, [pc, #208]	; (800b724 <UART_SetConfig+0x4e4>)
 800b654:	fba2 2303 	umull	r2, r3, r2, r3
 800b658:	095b      	lsrs	r3, r3, #5
 800b65a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b65e:	441c      	add	r4, r3
 800b660:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b664:	2200      	movs	r2, #0
 800b666:	673b      	str	r3, [r7, #112]	; 0x70
 800b668:	677a      	str	r2, [r7, #116]	; 0x74
 800b66a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b66e:	4642      	mov	r2, r8
 800b670:	464b      	mov	r3, r9
 800b672:	1891      	adds	r1, r2, r2
 800b674:	60b9      	str	r1, [r7, #8]
 800b676:	415b      	adcs	r3, r3
 800b678:	60fb      	str	r3, [r7, #12]
 800b67a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b67e:	4641      	mov	r1, r8
 800b680:	1851      	adds	r1, r2, r1
 800b682:	6039      	str	r1, [r7, #0]
 800b684:	4649      	mov	r1, r9
 800b686:	414b      	adcs	r3, r1
 800b688:	607b      	str	r3, [r7, #4]
 800b68a:	f04f 0200 	mov.w	r2, #0
 800b68e:	f04f 0300 	mov.w	r3, #0
 800b692:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b696:	4659      	mov	r1, fp
 800b698:	00cb      	lsls	r3, r1, #3
 800b69a:	4651      	mov	r1, sl
 800b69c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b6a0:	4651      	mov	r1, sl
 800b6a2:	00ca      	lsls	r2, r1, #3
 800b6a4:	4610      	mov	r0, r2
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	4642      	mov	r2, r8
 800b6ac:	189b      	adds	r3, r3, r2
 800b6ae:	66bb      	str	r3, [r7, #104]	; 0x68
 800b6b0:	464b      	mov	r3, r9
 800b6b2:	460a      	mov	r2, r1
 800b6b4:	eb42 0303 	adc.w	r3, r2, r3
 800b6b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b6ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	663b      	str	r3, [r7, #96]	; 0x60
 800b6c4:	667a      	str	r2, [r7, #100]	; 0x64
 800b6c6:	f04f 0200 	mov.w	r2, #0
 800b6ca:	f04f 0300 	mov.w	r3, #0
 800b6ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b6d2:	4649      	mov	r1, r9
 800b6d4:	008b      	lsls	r3, r1, #2
 800b6d6:	4641      	mov	r1, r8
 800b6d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b6dc:	4641      	mov	r1, r8
 800b6de:	008a      	lsls	r2, r1, #2
 800b6e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b6e4:	f7f4 fdcc 	bl	8000280 <__aeabi_uldivmod>
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	4b0d      	ldr	r3, [pc, #52]	; (800b724 <UART_SetConfig+0x4e4>)
 800b6ee:	fba3 1302 	umull	r1, r3, r3, r2
 800b6f2:	095b      	lsrs	r3, r3, #5
 800b6f4:	2164      	movs	r1, #100	; 0x64
 800b6f6:	fb01 f303 	mul.w	r3, r1, r3
 800b6fa:	1ad3      	subs	r3, r2, r3
 800b6fc:	011b      	lsls	r3, r3, #4
 800b6fe:	3332      	adds	r3, #50	; 0x32
 800b700:	4a08      	ldr	r2, [pc, #32]	; (800b724 <UART_SetConfig+0x4e4>)
 800b702:	fba2 2303 	umull	r2, r3, r2, r3
 800b706:	095b      	lsrs	r3, r3, #5
 800b708:	f003 020f 	and.w	r2, r3, #15
 800b70c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4422      	add	r2, r4
 800b714:	609a      	str	r2, [r3, #8]
}
 800b716:	bf00      	nop
 800b718:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b71c:	46bd      	mov	sp, r7
 800b71e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b722:	bf00      	nop
 800b724:	51eb851f 	.word	0x51eb851f

0800b728 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f103 0208 	add.w	r2, r3, #8
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b740:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f103 0208 	add.w	r2, r3, #8
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f103 0208 	add.w	r2, r3, #8
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2200      	movs	r2, #0
 800b75a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b75c:	bf00      	nop
 800b75e:	370c      	adds	r7, #12
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b768:	b480      	push	{r7}
 800b76a:	b083      	sub	sp, #12
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2200      	movs	r2, #0
 800b774:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b776:	bf00      	nop
 800b778:	370c      	adds	r7, #12
 800b77a:	46bd      	mov	sp, r7
 800b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b780:	4770      	bx	lr

0800b782 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b782:	b480      	push	{r7}
 800b784:	b085      	sub	sp, #20
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
 800b78a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	68fa      	ldr	r2, [r7, #12]
 800b796:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	689a      	ldr	r2, [r3, #8]
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	689b      	ldr	r3, [r3, #8]
 800b7a4:	683a      	ldr	r2, [r7, #0]
 800b7a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	683a      	ldr	r2, [r7, #0]
 800b7ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	1c5a      	adds	r2, r3, #1
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	601a      	str	r2, [r3, #0]
}
 800b7be:	bf00      	nop
 800b7c0:	3714      	adds	r7, #20
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c8:	4770      	bx	lr

0800b7ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b7ca:	b480      	push	{r7}
 800b7cc:	b085      	sub	sp, #20
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
 800b7d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7e0:	d103      	bne.n	800b7ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	691b      	ldr	r3, [r3, #16]
 800b7e6:	60fb      	str	r3, [r7, #12]
 800b7e8:	e00c      	b.n	800b804 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	3308      	adds	r3, #8
 800b7ee:	60fb      	str	r3, [r7, #12]
 800b7f0:	e002      	b.n	800b7f8 <vListInsert+0x2e>
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	60fb      	str	r3, [r7, #12]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	68ba      	ldr	r2, [r7, #8]
 800b800:	429a      	cmp	r2, r3
 800b802:	d2f6      	bcs.n	800b7f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	685a      	ldr	r2, [r3, #4]
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	683a      	ldr	r2, [r7, #0]
 800b812:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	68fa      	ldr	r2, [r7, #12]
 800b818:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	683a      	ldr	r2, [r7, #0]
 800b81e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	1c5a      	adds	r2, r3, #1
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	601a      	str	r2, [r3, #0]
}
 800b830:	bf00      	nop
 800b832:	3714      	adds	r7, #20
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr

0800b83c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b83c:	b480      	push	{r7}
 800b83e:	b085      	sub	sp, #20
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	691b      	ldr	r3, [r3, #16]
 800b848:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	6892      	ldr	r2, [r2, #8]
 800b852:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	689b      	ldr	r3, [r3, #8]
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	6852      	ldr	r2, [r2, #4]
 800b85c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	687a      	ldr	r2, [r7, #4]
 800b864:	429a      	cmp	r2, r3
 800b866:	d103      	bne.n	800b870 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	689a      	ldr	r2, [r3, #8]
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	1e5a      	subs	r2, r3, #1
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
}
 800b884:	4618      	mov	r0, r3
 800b886:	3714      	adds	r7, #20
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr

0800b890 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b084      	sub	sp, #16
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d10a      	bne.n	800b8ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a8:	f383 8811 	msr	BASEPRI, r3
 800b8ac:	f3bf 8f6f 	isb	sy
 800b8b0:	f3bf 8f4f 	dsb	sy
 800b8b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b8b6:	bf00      	nop
 800b8b8:	e7fe      	b.n	800b8b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b8ba:	f001 ff5b 	bl	800d774 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681a      	ldr	r2, [r3, #0]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8c6:	68f9      	ldr	r1, [r7, #12]
 800b8c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b8ca:	fb01 f303 	mul.w	r3, r1, r3
 800b8ce:	441a      	add	r2, r3
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681a      	ldr	r2, [r3, #0]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8ea:	3b01      	subs	r3, #1
 800b8ec:	68f9      	ldr	r1, [r7, #12]
 800b8ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b8f0:	fb01 f303 	mul.w	r3, r1, r3
 800b8f4:	441a      	add	r2, r3
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	22ff      	movs	r2, #255	; 0xff
 800b8fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	22ff      	movs	r2, #255	; 0xff
 800b906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d114      	bne.n	800b93a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	691b      	ldr	r3, [r3, #16]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d01a      	beq.n	800b94e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	3310      	adds	r3, #16
 800b91c:	4618      	mov	r0, r3
 800b91e:	f001 f841 	bl	800c9a4 <xTaskRemoveFromEventList>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d012      	beq.n	800b94e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b928:	4b0c      	ldr	r3, [pc, #48]	; (800b95c <xQueueGenericReset+0xcc>)
 800b92a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b92e:	601a      	str	r2, [r3, #0]
 800b930:	f3bf 8f4f 	dsb	sy
 800b934:	f3bf 8f6f 	isb	sy
 800b938:	e009      	b.n	800b94e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	3310      	adds	r3, #16
 800b93e:	4618      	mov	r0, r3
 800b940:	f7ff fef2 	bl	800b728 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	3324      	adds	r3, #36	; 0x24
 800b948:	4618      	mov	r0, r3
 800b94a:	f7ff feed 	bl	800b728 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b94e:	f001 ff41 	bl	800d7d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b952:	2301      	movs	r3, #1
}
 800b954:	4618      	mov	r0, r3
 800b956:	3710      	adds	r7, #16
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	e000ed04 	.word	0xe000ed04

0800b960 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b960:	b580      	push	{r7, lr}
 800b962:	b08a      	sub	sp, #40	; 0x28
 800b964:	af02      	add	r7, sp, #8
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	4613      	mov	r3, r2
 800b96c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d10a      	bne.n	800b98a <xQueueGenericCreate+0x2a>
	__asm volatile
 800b974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b978:	f383 8811 	msr	BASEPRI, r3
 800b97c:	f3bf 8f6f 	isb	sy
 800b980:	f3bf 8f4f 	dsb	sy
 800b984:	613b      	str	r3, [r7, #16]
}
 800b986:	bf00      	nop
 800b988:	e7fe      	b.n	800b988 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d102      	bne.n	800b996 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b990:	2300      	movs	r3, #0
 800b992:	61fb      	str	r3, [r7, #28]
 800b994:	e004      	b.n	800b9a0 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	68ba      	ldr	r2, [r7, #8]
 800b99a:	fb02 f303 	mul.w	r3, r2, r3
 800b99e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b9a0:	69fb      	ldr	r3, [r7, #28]
 800b9a2:	3350      	adds	r3, #80	; 0x50
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f002 f807 	bl	800d9b8 <pvPortMalloc>
 800b9aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b9ac:	69bb      	ldr	r3, [r7, #24]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d00d      	beq.n	800b9ce <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b9b2:	69bb      	ldr	r3, [r7, #24]
 800b9b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	3350      	adds	r3, #80	; 0x50
 800b9ba:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b9bc:	79fa      	ldrb	r2, [r7, #7]
 800b9be:	69bb      	ldr	r3, [r7, #24]
 800b9c0:	9300      	str	r3, [sp, #0]
 800b9c2:	4613      	mov	r3, r2
 800b9c4:	697a      	ldr	r2, [r7, #20]
 800b9c6:	68b9      	ldr	r1, [r7, #8]
 800b9c8:	68f8      	ldr	r0, [r7, #12]
 800b9ca:	f000 f805 	bl	800b9d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b9ce:	69bb      	ldr	r3, [r7, #24]
	}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3720      	adds	r7, #32
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	607a      	str	r2, [r7, #4]
 800b9e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d103      	bne.n	800b9f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b9ec:	69bb      	ldr	r3, [r7, #24]
 800b9ee:	69ba      	ldr	r2, [r7, #24]
 800b9f0:	601a      	str	r2, [r3, #0]
 800b9f2:	e002      	b.n	800b9fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b9f4:	69bb      	ldr	r3, [r7, #24]
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b9fa:	69bb      	ldr	r3, [r7, #24]
 800b9fc:	68fa      	ldr	r2, [r7, #12]
 800b9fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ba00:	69bb      	ldr	r3, [r7, #24]
 800ba02:	68ba      	ldr	r2, [r7, #8]
 800ba04:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ba06:	2101      	movs	r1, #1
 800ba08:	69b8      	ldr	r0, [r7, #24]
 800ba0a:	f7ff ff41 	bl	800b890 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ba0e:	69bb      	ldr	r3, [r7, #24]
 800ba10:	78fa      	ldrb	r2, [r7, #3]
 800ba12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ba16:	bf00      	nop
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
	...

0800ba20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b08e      	sub	sp, #56	; 0x38
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	60f8      	str	r0, [r7, #12]
 800ba28:	60b9      	str	r1, [r7, #8]
 800ba2a:	607a      	str	r2, [r7, #4]
 800ba2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ba36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d10a      	bne.n	800ba52 <xQueueGenericSend+0x32>
	__asm volatile
 800ba3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba40:	f383 8811 	msr	BASEPRI, r3
 800ba44:	f3bf 8f6f 	isb	sy
 800ba48:	f3bf 8f4f 	dsb	sy
 800ba4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ba4e:	bf00      	nop
 800ba50:	e7fe      	b.n	800ba50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d103      	bne.n	800ba60 <xQueueGenericSend+0x40>
 800ba58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d101      	bne.n	800ba64 <xQueueGenericSend+0x44>
 800ba60:	2301      	movs	r3, #1
 800ba62:	e000      	b.n	800ba66 <xQueueGenericSend+0x46>
 800ba64:	2300      	movs	r3, #0
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d10a      	bne.n	800ba80 <xQueueGenericSend+0x60>
	__asm volatile
 800ba6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba6e:	f383 8811 	msr	BASEPRI, r3
 800ba72:	f3bf 8f6f 	isb	sy
 800ba76:	f3bf 8f4f 	dsb	sy
 800ba7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ba7c:	bf00      	nop
 800ba7e:	e7fe      	b.n	800ba7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	2b02      	cmp	r3, #2
 800ba84:	d103      	bne.n	800ba8e <xQueueGenericSend+0x6e>
 800ba86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	d101      	bne.n	800ba92 <xQueueGenericSend+0x72>
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e000      	b.n	800ba94 <xQueueGenericSend+0x74>
 800ba92:	2300      	movs	r3, #0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d10a      	bne.n	800baae <xQueueGenericSend+0x8e>
	__asm volatile
 800ba98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9c:	f383 8811 	msr	BASEPRI, r3
 800baa0:	f3bf 8f6f 	isb	sy
 800baa4:	f3bf 8f4f 	dsb	sy
 800baa8:	623b      	str	r3, [r7, #32]
}
 800baaa:	bf00      	nop
 800baac:	e7fe      	b.n	800baac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800baae:	f001 f915 	bl	800ccdc <xTaskGetSchedulerState>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d102      	bne.n	800babe <xQueueGenericSend+0x9e>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d101      	bne.n	800bac2 <xQueueGenericSend+0xa2>
 800babe:	2301      	movs	r3, #1
 800bac0:	e000      	b.n	800bac4 <xQueueGenericSend+0xa4>
 800bac2:	2300      	movs	r3, #0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d10a      	bne.n	800bade <xQueueGenericSend+0xbe>
	__asm volatile
 800bac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bacc:	f383 8811 	msr	BASEPRI, r3
 800bad0:	f3bf 8f6f 	isb	sy
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	61fb      	str	r3, [r7, #28]
}
 800bada:	bf00      	nop
 800badc:	e7fe      	b.n	800badc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bade:	f001 fe49 	bl	800d774 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baea:	429a      	cmp	r2, r3
 800baec:	d302      	bcc.n	800baf4 <xQueueGenericSend+0xd4>
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	2b02      	cmp	r3, #2
 800baf2:	d129      	bne.n	800bb48 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800baf4:	683a      	ldr	r2, [r7, #0]
 800baf6:	68b9      	ldr	r1, [r7, #8]
 800baf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bafa:	f000 fa07 	bl	800bf0c <prvCopyDataToQueue>
 800bafe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d010      	beq.n	800bb2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0a:	3324      	adds	r3, #36	; 0x24
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f000 ff49 	bl	800c9a4 <xTaskRemoveFromEventList>
 800bb12:	4603      	mov	r3, r0
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d013      	beq.n	800bb40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bb18:	4b3f      	ldr	r3, [pc, #252]	; (800bc18 <xQueueGenericSend+0x1f8>)
 800bb1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb1e:	601a      	str	r2, [r3, #0]
 800bb20:	f3bf 8f4f 	dsb	sy
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	e00a      	b.n	800bb40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d007      	beq.n	800bb40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bb30:	4b39      	ldr	r3, [pc, #228]	; (800bc18 <xQueueGenericSend+0x1f8>)
 800bb32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb36:	601a      	str	r2, [r3, #0]
 800bb38:	f3bf 8f4f 	dsb	sy
 800bb3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bb40:	f001 fe48 	bl	800d7d4 <vPortExitCritical>
				return pdPASS;
 800bb44:	2301      	movs	r3, #1
 800bb46:	e063      	b.n	800bc10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d103      	bne.n	800bb56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb4e:	f001 fe41 	bl	800d7d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bb52:	2300      	movs	r3, #0
 800bb54:	e05c      	b.n	800bc10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d106      	bne.n	800bb6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb5c:	f107 0314 	add.w	r3, r7, #20
 800bb60:	4618      	mov	r0, r3
 800bb62:	f000 ff81 	bl	800ca68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb66:	2301      	movs	r3, #1
 800bb68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb6a:	f001 fe33 	bl	800d7d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb6e:	f000 fcfb 	bl	800c568 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb72:	f001 fdff 	bl	800d774 <vPortEnterCritical>
 800bb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb7c:	b25b      	sxtb	r3, r3
 800bb7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb82:	d103      	bne.n	800bb8c <xQueueGenericSend+0x16c>
 800bb84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb86:	2200      	movs	r2, #0
 800bb88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb92:	b25b      	sxtb	r3, r3
 800bb94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb98:	d103      	bne.n	800bba2 <xQueueGenericSend+0x182>
 800bb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bba2:	f001 fe17 	bl	800d7d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bba6:	1d3a      	adds	r2, r7, #4
 800bba8:	f107 0314 	add.w	r3, r7, #20
 800bbac:	4611      	mov	r1, r2
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f000 ff70 	bl	800ca94 <xTaskCheckForTimeOut>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d124      	bne.n	800bc04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bbba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbbc:	f000 fa9e 	bl	800c0fc <prvIsQueueFull>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d018      	beq.n	800bbf8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc8:	3310      	adds	r3, #16
 800bbca:	687a      	ldr	r2, [r7, #4]
 800bbcc:	4611      	mov	r1, r2
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f000 fe98 	bl	800c904 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bbd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbd6:	f000 fa29 	bl	800c02c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bbda:	f000 fcd3 	bl	800c584 <xTaskResumeAll>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	f47f af7c 	bne.w	800bade <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bbe6:	4b0c      	ldr	r3, [pc, #48]	; (800bc18 <xQueueGenericSend+0x1f8>)
 800bbe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbec:	601a      	str	r2, [r3, #0]
 800bbee:	f3bf 8f4f 	dsb	sy
 800bbf2:	f3bf 8f6f 	isb	sy
 800bbf6:	e772      	b.n	800bade <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bbf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbfa:	f000 fa17 	bl	800c02c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bbfe:	f000 fcc1 	bl	800c584 <xTaskResumeAll>
 800bc02:	e76c      	b.n	800bade <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bc04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc06:	f000 fa11 	bl	800c02c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc0a:	f000 fcbb 	bl	800c584 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bc0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3738      	adds	r7, #56	; 0x38
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	e000ed04 	.word	0xe000ed04

0800bc1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b08e      	sub	sp, #56	; 0x38
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	607a      	str	r2, [r7, #4]
 800bc28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d10a      	bne.n	800bc4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc38:	f383 8811 	msr	BASEPRI, r3
 800bc3c:	f3bf 8f6f 	isb	sy
 800bc40:	f3bf 8f4f 	dsb	sy
 800bc44:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc46:	bf00      	nop
 800bc48:	e7fe      	b.n	800bc48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d103      	bne.n	800bc58 <xQueueGenericSendFromISR+0x3c>
 800bc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d101      	bne.n	800bc5c <xQueueGenericSendFromISR+0x40>
 800bc58:	2301      	movs	r3, #1
 800bc5a:	e000      	b.n	800bc5e <xQueueGenericSendFromISR+0x42>
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d10a      	bne.n	800bc78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc66:	f383 8811 	msr	BASEPRI, r3
 800bc6a:	f3bf 8f6f 	isb	sy
 800bc6e:	f3bf 8f4f 	dsb	sy
 800bc72:	623b      	str	r3, [r7, #32]
}
 800bc74:	bf00      	nop
 800bc76:	e7fe      	b.n	800bc76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	2b02      	cmp	r3, #2
 800bc7c:	d103      	bne.n	800bc86 <xQueueGenericSendFromISR+0x6a>
 800bc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d101      	bne.n	800bc8a <xQueueGenericSendFromISR+0x6e>
 800bc86:	2301      	movs	r3, #1
 800bc88:	e000      	b.n	800bc8c <xQueueGenericSendFromISR+0x70>
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d10a      	bne.n	800bca6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc94:	f383 8811 	msr	BASEPRI, r3
 800bc98:	f3bf 8f6f 	isb	sy
 800bc9c:	f3bf 8f4f 	dsb	sy
 800bca0:	61fb      	str	r3, [r7, #28]
}
 800bca2:	bf00      	nop
 800bca4:	e7fe      	b.n	800bca4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bca6:	f001 fe47 	bl	800d938 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bcaa:	f3ef 8211 	mrs	r2, BASEPRI
 800bcae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb2:	f383 8811 	msr	BASEPRI, r3
 800bcb6:	f3bf 8f6f 	isb	sy
 800bcba:	f3bf 8f4f 	dsb	sy
 800bcbe:	61ba      	str	r2, [r7, #24]
 800bcc0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bcc2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bcc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d302      	bcc.n	800bcd8 <xQueueGenericSendFromISR+0xbc>
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	2b02      	cmp	r3, #2
 800bcd6:	d12c      	bne.n	800bd32 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bcd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bce2:	683a      	ldr	r2, [r7, #0]
 800bce4:	68b9      	ldr	r1, [r7, #8]
 800bce6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bce8:	f000 f910 	bl	800bf0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bcec:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bcf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcf4:	d112      	bne.n	800bd1c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d016      	beq.n	800bd2c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd00:	3324      	adds	r3, #36	; 0x24
 800bd02:	4618      	mov	r0, r3
 800bd04:	f000 fe4e 	bl	800c9a4 <xTaskRemoveFromEventList>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d00e      	beq.n	800bd2c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d00b      	beq.n	800bd2c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2201      	movs	r2, #1
 800bd18:	601a      	str	r2, [r3, #0]
 800bd1a:	e007      	b.n	800bd2c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bd1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd20:	3301      	adds	r3, #1
 800bd22:	b2db      	uxtb	r3, r3
 800bd24:	b25a      	sxtb	r2, r3
 800bd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bd30:	e001      	b.n	800bd36 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bd32:	2300      	movs	r3, #0
 800bd34:	637b      	str	r3, [r7, #52]	; 0x34
 800bd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd38:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bd40:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3738      	adds	r7, #56	; 0x38
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b08c      	sub	sp, #48	; 0x30
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	60b9      	str	r1, [r7, #8]
 800bd56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d10a      	bne.n	800bd7c <xQueueReceive+0x30>
	__asm volatile
 800bd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd6a:	f383 8811 	msr	BASEPRI, r3
 800bd6e:	f3bf 8f6f 	isb	sy
 800bd72:	f3bf 8f4f 	dsb	sy
 800bd76:	623b      	str	r3, [r7, #32]
}
 800bd78:	bf00      	nop
 800bd7a:	e7fe      	b.n	800bd7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d103      	bne.n	800bd8a <xQueueReceive+0x3e>
 800bd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d101      	bne.n	800bd8e <xQueueReceive+0x42>
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	e000      	b.n	800bd90 <xQueueReceive+0x44>
 800bd8e:	2300      	movs	r3, #0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d10a      	bne.n	800bdaa <xQueueReceive+0x5e>
	__asm volatile
 800bd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd98:	f383 8811 	msr	BASEPRI, r3
 800bd9c:	f3bf 8f6f 	isb	sy
 800bda0:	f3bf 8f4f 	dsb	sy
 800bda4:	61fb      	str	r3, [r7, #28]
}
 800bda6:	bf00      	nop
 800bda8:	e7fe      	b.n	800bda8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bdaa:	f000 ff97 	bl	800ccdc <xTaskGetSchedulerState>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d102      	bne.n	800bdba <xQueueReceive+0x6e>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d101      	bne.n	800bdbe <xQueueReceive+0x72>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	e000      	b.n	800bdc0 <xQueueReceive+0x74>
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d10a      	bne.n	800bdda <xQueueReceive+0x8e>
	__asm volatile
 800bdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc8:	f383 8811 	msr	BASEPRI, r3
 800bdcc:	f3bf 8f6f 	isb	sy
 800bdd0:	f3bf 8f4f 	dsb	sy
 800bdd4:	61bb      	str	r3, [r7, #24]
}
 800bdd6:	bf00      	nop
 800bdd8:	e7fe      	b.n	800bdd8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bdda:	f001 fccb 	bl	800d774 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bdde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bde2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d01f      	beq.n	800be2a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bdea:	68b9      	ldr	r1, [r7, #8]
 800bdec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdee:	f000 f8f7 	bl	800bfe0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf4:	1e5a      	subs	r2, r3, #1
 800bdf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfc:	691b      	ldr	r3, [r3, #16]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d00f      	beq.n	800be22 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be04:	3310      	adds	r3, #16
 800be06:	4618      	mov	r0, r3
 800be08:	f000 fdcc 	bl	800c9a4 <xTaskRemoveFromEventList>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d007      	beq.n	800be22 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800be12:	4b3d      	ldr	r3, [pc, #244]	; (800bf08 <xQueueReceive+0x1bc>)
 800be14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be18:	601a      	str	r2, [r3, #0]
 800be1a:	f3bf 8f4f 	dsb	sy
 800be1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800be22:	f001 fcd7 	bl	800d7d4 <vPortExitCritical>
				return pdPASS;
 800be26:	2301      	movs	r3, #1
 800be28:	e069      	b.n	800befe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d103      	bne.n	800be38 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be30:	f001 fcd0 	bl	800d7d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800be34:	2300      	movs	r3, #0
 800be36:	e062      	b.n	800befe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d106      	bne.n	800be4c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be3e:	f107 0310 	add.w	r3, r7, #16
 800be42:	4618      	mov	r0, r3
 800be44:	f000 fe10 	bl	800ca68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be48:	2301      	movs	r3, #1
 800be4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be4c:	f001 fcc2 	bl	800d7d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be50:	f000 fb8a 	bl	800c568 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be54:	f001 fc8e 	bl	800d774 <vPortEnterCritical>
 800be58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be5e:	b25b      	sxtb	r3, r3
 800be60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be64:	d103      	bne.n	800be6e <xQueueReceive+0x122>
 800be66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be68:	2200      	movs	r2, #0
 800be6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be74:	b25b      	sxtb	r3, r3
 800be76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be7a:	d103      	bne.n	800be84 <xQueueReceive+0x138>
 800be7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7e:	2200      	movs	r2, #0
 800be80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be84:	f001 fca6 	bl	800d7d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be88:	1d3a      	adds	r2, r7, #4
 800be8a:	f107 0310 	add.w	r3, r7, #16
 800be8e:	4611      	mov	r1, r2
 800be90:	4618      	mov	r0, r3
 800be92:	f000 fdff 	bl	800ca94 <xTaskCheckForTimeOut>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d123      	bne.n	800bee4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be9e:	f000 f917 	bl	800c0d0 <prvIsQueueEmpty>
 800bea2:	4603      	mov	r3, r0
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d017      	beq.n	800bed8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beaa:	3324      	adds	r3, #36	; 0x24
 800beac:	687a      	ldr	r2, [r7, #4]
 800beae:	4611      	mov	r1, r2
 800beb0:	4618      	mov	r0, r3
 800beb2:	f000 fd27 	bl	800c904 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800beb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beb8:	f000 f8b8 	bl	800c02c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bebc:	f000 fb62 	bl	800c584 <xTaskResumeAll>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d189      	bne.n	800bdda <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bec6:	4b10      	ldr	r3, [pc, #64]	; (800bf08 <xQueueReceive+0x1bc>)
 800bec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800becc:	601a      	str	r2, [r3, #0]
 800bece:	f3bf 8f4f 	dsb	sy
 800bed2:	f3bf 8f6f 	isb	sy
 800bed6:	e780      	b.n	800bdda <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beda:	f000 f8a7 	bl	800c02c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bede:	f000 fb51 	bl	800c584 <xTaskResumeAll>
 800bee2:	e77a      	b.n	800bdda <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bee6:	f000 f8a1 	bl	800c02c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800beea:	f000 fb4b 	bl	800c584 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800beee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bef0:	f000 f8ee 	bl	800c0d0 <prvIsQueueEmpty>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f43f af6f 	beq.w	800bdda <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800befc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3730      	adds	r7, #48	; 0x30
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	e000ed04 	.word	0xe000ed04

0800bf0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b086      	sub	sp, #24
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	60f8      	str	r0, [r7, #12]
 800bf14:	60b9      	str	r1, [r7, #8]
 800bf16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d10d      	bne.n	800bf46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d14d      	bne.n	800bfce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	689b      	ldr	r3, [r3, #8]
 800bf36:	4618      	mov	r0, r3
 800bf38:	f000 feee 	bl	800cd18 <xTaskPriorityDisinherit>
 800bf3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2200      	movs	r2, #0
 800bf42:	609a      	str	r2, [r3, #8]
 800bf44:	e043      	b.n	800bfce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d119      	bne.n	800bf80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	6858      	ldr	r0, [r3, #4]
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf54:	461a      	mov	r2, r3
 800bf56:	68b9      	ldr	r1, [r7, #8]
 800bf58:	f001 ff32 	bl	800ddc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	685a      	ldr	r2, [r3, #4]
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf64:	441a      	add	r2, r3
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	685a      	ldr	r2, [r3, #4]
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	689b      	ldr	r3, [r3, #8]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d32b      	bcc.n	800bfce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681a      	ldr	r2, [r3, #0]
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	605a      	str	r2, [r3, #4]
 800bf7e:	e026      	b.n	800bfce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	68d8      	ldr	r0, [r3, #12]
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf88:	461a      	mov	r2, r3
 800bf8a:	68b9      	ldr	r1, [r7, #8]
 800bf8c:	f001 ff18 	bl	800ddc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	68da      	ldr	r2, [r3, #12]
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf98:	425b      	negs	r3, r3
 800bf9a:	441a      	add	r2, r3
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	68da      	ldr	r2, [r3, #12]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d207      	bcs.n	800bfbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	689a      	ldr	r2, [r3, #8]
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfb4:	425b      	negs	r3, r3
 800bfb6:	441a      	add	r2, r3
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2b02      	cmp	r3, #2
 800bfc0:	d105      	bne.n	800bfce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d002      	beq.n	800bfce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	3b01      	subs	r3, #1
 800bfcc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	1c5a      	adds	r2, r3, #1
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bfd6:	697b      	ldr	r3, [r7, #20]
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3718      	adds	r7, #24
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d018      	beq.n	800c024 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	68da      	ldr	r2, [r3, #12]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bffa:	441a      	add	r2, r3
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	68da      	ldr	r2, [r3, #12]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	689b      	ldr	r3, [r3, #8]
 800c008:	429a      	cmp	r2, r3
 800c00a:	d303      	bcc.n	800c014 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	68d9      	ldr	r1, [r3, #12]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c01c:	461a      	mov	r2, r3
 800c01e:	6838      	ldr	r0, [r7, #0]
 800c020:	f001 fece 	bl	800ddc0 <memcpy>
	}
}
 800c024:	bf00      	nop
 800c026:	3708      	adds	r7, #8
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c034:	f001 fb9e 	bl	800d774 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c03e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c040:	e011      	b.n	800c066 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c046:	2b00      	cmp	r3, #0
 800c048:	d012      	beq.n	800c070 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	3324      	adds	r3, #36	; 0x24
 800c04e:	4618      	mov	r0, r3
 800c050:	f000 fca8 	bl	800c9a4 <xTaskRemoveFromEventList>
 800c054:	4603      	mov	r3, r0
 800c056:	2b00      	cmp	r3, #0
 800c058:	d001      	beq.n	800c05e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c05a:	f000 fd7d 	bl	800cb58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c05e:	7bfb      	ldrb	r3, [r7, #15]
 800c060:	3b01      	subs	r3, #1
 800c062:	b2db      	uxtb	r3, r3
 800c064:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	dce9      	bgt.n	800c042 <prvUnlockQueue+0x16>
 800c06e:	e000      	b.n	800c072 <prvUnlockQueue+0x46>
					break;
 800c070:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	22ff      	movs	r2, #255	; 0xff
 800c076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c07a:	f001 fbab 	bl	800d7d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c07e:	f001 fb79 	bl	800d774 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c088:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c08a:	e011      	b.n	800c0b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	691b      	ldr	r3, [r3, #16]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d012      	beq.n	800c0ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	3310      	adds	r3, #16
 800c098:	4618      	mov	r0, r3
 800c09a:	f000 fc83 	bl	800c9a4 <xTaskRemoveFromEventList>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d001      	beq.n	800c0a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c0a4:	f000 fd58 	bl	800cb58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c0a8:	7bbb      	ldrb	r3, [r7, #14]
 800c0aa:	3b01      	subs	r3, #1
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c0b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	dce9      	bgt.n	800c08c <prvUnlockQueue+0x60>
 800c0b8:	e000      	b.n	800c0bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c0ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	22ff      	movs	r2, #255	; 0xff
 800c0c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c0c4:	f001 fb86 	bl	800d7d4 <vPortExitCritical>
}
 800c0c8:	bf00      	nop
 800c0ca:	3710      	adds	r7, #16
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b084      	sub	sp, #16
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0d8:	f001 fb4c 	bl	800d774 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d102      	bne.n	800c0ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	60fb      	str	r3, [r7, #12]
 800c0e8:	e001      	b.n	800c0ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c0ee:	f001 fb71 	bl	800d7d4 <vPortExitCritical>

	return xReturn;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3710      	adds	r7, #16
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c104:	f001 fb36 	bl	800d774 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c110:	429a      	cmp	r2, r3
 800c112:	d102      	bne.n	800c11a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c114:	2301      	movs	r3, #1
 800c116:	60fb      	str	r3, [r7, #12]
 800c118:	e001      	b.n	800c11e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c11a:	2300      	movs	r3, #0
 800c11c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c11e:	f001 fb59 	bl	800d7d4 <vPortExitCritical>

	return xReturn;
 800c122:	68fb      	ldr	r3, [r7, #12]
}
 800c124:	4618      	mov	r0, r3
 800c126:	3710      	adds	r7, #16
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c12c:	b480      	push	{r7}
 800c12e:	b085      	sub	sp, #20
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c136:	2300      	movs	r3, #0
 800c138:	60fb      	str	r3, [r7, #12]
 800c13a:	e014      	b.n	800c166 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c13c:	4a0f      	ldr	r2, [pc, #60]	; (800c17c <vQueueAddToRegistry+0x50>)
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d10b      	bne.n	800c160 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c148:	490c      	ldr	r1, [pc, #48]	; (800c17c <vQueueAddToRegistry+0x50>)
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	683a      	ldr	r2, [r7, #0]
 800c14e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c152:	4a0a      	ldr	r2, [pc, #40]	; (800c17c <vQueueAddToRegistry+0x50>)
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	00db      	lsls	r3, r3, #3
 800c158:	4413      	add	r3, r2
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c15e:	e006      	b.n	800c16e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	3301      	adds	r3, #1
 800c164:	60fb      	str	r3, [r7, #12]
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2b07      	cmp	r3, #7
 800c16a:	d9e7      	bls.n	800c13c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c16c:	bf00      	nop
 800c16e:	bf00      	nop
 800c170:	3714      	adds	r7, #20
 800c172:	46bd      	mov	sp, r7
 800c174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c178:	4770      	bx	lr
 800c17a:	bf00      	nop
 800c17c:	20001f00 	.word	0x20001f00

0800c180 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c180:	b580      	push	{r7, lr}
 800c182:	b086      	sub	sp, #24
 800c184:	af00      	add	r7, sp, #0
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	60b9      	str	r1, [r7, #8]
 800c18a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c190:	f001 faf0 	bl	800d774 <vPortEnterCritical>
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c19a:	b25b      	sxtb	r3, r3
 800c19c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1a0:	d103      	bne.n	800c1aa <vQueueWaitForMessageRestricted+0x2a>
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1b0:	b25b      	sxtb	r3, r3
 800c1b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1b6:	d103      	bne.n	800c1c0 <vQueueWaitForMessageRestricted+0x40>
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1c0:	f001 fb08 	bl	800d7d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d106      	bne.n	800c1da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	3324      	adds	r3, #36	; 0x24
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	68b9      	ldr	r1, [r7, #8]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f000 fbb9 	bl	800c94c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c1da:	6978      	ldr	r0, [r7, #20]
 800c1dc:	f7ff ff26 	bl	800c02c <prvUnlockQueue>
	}
 800c1e0:	bf00      	nop
 800c1e2:	3718      	adds	r7, #24
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b08c      	sub	sp, #48	; 0x30
 800c1ec:	af04      	add	r7, sp, #16
 800c1ee:	60f8      	str	r0, [r7, #12]
 800c1f0:	60b9      	str	r1, [r7, #8]
 800c1f2:	603b      	str	r3, [r7, #0]
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c1f8:	88fb      	ldrh	r3, [r7, #6]
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f001 fbdb 	bl	800d9b8 <pvPortMalloc>
 800c202:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00e      	beq.n	800c228 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c20a:	2058      	movs	r0, #88	; 0x58
 800c20c:	f001 fbd4 	bl	800d9b8 <pvPortMalloc>
 800c210:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c212:	69fb      	ldr	r3, [r7, #28]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d003      	beq.n	800c220 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	697a      	ldr	r2, [r7, #20]
 800c21c:	631a      	str	r2, [r3, #48]	; 0x30
 800c21e:	e005      	b.n	800c22c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c220:	6978      	ldr	r0, [r7, #20]
 800c222:	f001 fc8d 	bl	800db40 <vPortFree>
 800c226:	e001      	b.n	800c22c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c228:	2300      	movs	r3, #0
 800c22a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c22c:	69fb      	ldr	r3, [r7, #28]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d013      	beq.n	800c25a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c232:	88fa      	ldrh	r2, [r7, #6]
 800c234:	2300      	movs	r3, #0
 800c236:	9303      	str	r3, [sp, #12]
 800c238:	69fb      	ldr	r3, [r7, #28]
 800c23a:	9302      	str	r3, [sp, #8]
 800c23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23e:	9301      	str	r3, [sp, #4]
 800c240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c242:	9300      	str	r3, [sp, #0]
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	68b9      	ldr	r1, [r7, #8]
 800c248:	68f8      	ldr	r0, [r7, #12]
 800c24a:	f000 f80e 	bl	800c26a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c24e:	69f8      	ldr	r0, [r7, #28]
 800c250:	f000 f89a 	bl	800c388 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c254:	2301      	movs	r3, #1
 800c256:	61bb      	str	r3, [r7, #24]
 800c258:	e002      	b.n	800c260 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c25a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c25e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c260:	69bb      	ldr	r3, [r7, #24]
	}
 800c262:	4618      	mov	r0, r3
 800c264:	3720      	adds	r7, #32
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b088      	sub	sp, #32
 800c26e:	af00      	add	r7, sp, #0
 800c270:	60f8      	str	r0, [r7, #12]
 800c272:	60b9      	str	r1, [r7, #8]
 800c274:	607a      	str	r2, [r7, #4]
 800c276:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	461a      	mov	r2, r3
 800c282:	21a5      	movs	r1, #165	; 0xa5
 800c284:	f001 fdaa 	bl	800dddc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c292:	3b01      	subs	r3, #1
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	4413      	add	r3, r2
 800c298:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	f023 0307 	bic.w	r3, r3, #7
 800c2a0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	f003 0307 	and.w	r3, r3, #7
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d00a      	beq.n	800c2c2 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b0:	f383 8811 	msr	BASEPRI, r3
 800c2b4:	f3bf 8f6f 	isb	sy
 800c2b8:	f3bf 8f4f 	dsb	sy
 800c2bc:	617b      	str	r3, [r7, #20]
}
 800c2be:	bf00      	nop
 800c2c0:	e7fe      	b.n	800c2c0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d01f      	beq.n	800c308 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	61fb      	str	r3, [r7, #28]
 800c2cc:	e012      	b.n	800c2f4 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c2ce:	68ba      	ldr	r2, [r7, #8]
 800c2d0:	69fb      	ldr	r3, [r7, #28]
 800c2d2:	4413      	add	r3, r2
 800c2d4:	7819      	ldrb	r1, [r3, #0]
 800c2d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2d8:	69fb      	ldr	r3, [r7, #28]
 800c2da:	4413      	add	r3, r2
 800c2dc:	3334      	adds	r3, #52	; 0x34
 800c2de:	460a      	mov	r2, r1
 800c2e0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c2e2:	68ba      	ldr	r2, [r7, #8]
 800c2e4:	69fb      	ldr	r3, [r7, #28]
 800c2e6:	4413      	add	r3, r2
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d006      	beq.n	800c2fc <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c2ee:	69fb      	ldr	r3, [r7, #28]
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	61fb      	str	r3, [r7, #28]
 800c2f4:	69fb      	ldr	r3, [r7, #28]
 800c2f6:	2b09      	cmp	r3, #9
 800c2f8:	d9e9      	bls.n	800c2ce <prvInitialiseNewTask+0x64>
 800c2fa:	e000      	b.n	800c2fe <prvInitialiseNewTask+0x94>
			{
				break;
 800c2fc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c300:	2200      	movs	r2, #0
 800c302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800c306:	e003      	b.n	800c310 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30a:	2200      	movs	r2, #0
 800c30c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c312:	2b0f      	cmp	r3, #15
 800c314:	d901      	bls.n	800c31a <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c316:	230f      	movs	r3, #15
 800c318:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c31e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c324:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 800c326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c328:	2200      	movs	r2, #0
 800c32a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32e:	3304      	adds	r3, #4
 800c330:	4618      	mov	r0, r3
 800c332:	f7ff fa19 	bl	800b768 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c338:	3318      	adds	r3, #24
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7ff fa14 	bl	800b768 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c342:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c344:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c348:	f1c3 0210 	rsb	r2, r3, #16
 800c34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c34e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c354:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c358:	2200      	movs	r2, #0
 800c35a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35e:	2200      	movs	r2, #0
 800c360:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c364:	683a      	ldr	r2, [r7, #0]
 800c366:	68f9      	ldr	r1, [r7, #12]
 800c368:	69b8      	ldr	r0, [r7, #24]
 800c36a:	f001 f8d3 	bl	800d514 <pxPortInitialiseStack>
 800c36e:	4602      	mov	r2, r0
 800c370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c372:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c376:	2b00      	cmp	r3, #0
 800c378:	d002      	beq.n	800c380 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c37c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c37e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c380:	bf00      	nop
 800c382:	3720      	adds	r7, #32
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b082      	sub	sp, #8
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c390:	f001 f9f0 	bl	800d774 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c394:	4b2c      	ldr	r3, [pc, #176]	; (800c448 <prvAddNewTaskToReadyList+0xc0>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	3301      	adds	r3, #1
 800c39a:	4a2b      	ldr	r2, [pc, #172]	; (800c448 <prvAddNewTaskToReadyList+0xc0>)
 800c39c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c39e:	4b2b      	ldr	r3, [pc, #172]	; (800c44c <prvAddNewTaskToReadyList+0xc4>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d109      	bne.n	800c3ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c3a6:	4a29      	ldr	r2, [pc, #164]	; (800c44c <prvAddNewTaskToReadyList+0xc4>)
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c3ac:	4b26      	ldr	r3, [pc, #152]	; (800c448 <prvAddNewTaskToReadyList+0xc0>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	d110      	bne.n	800c3d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c3b4:	f000 fbf4 	bl	800cba0 <prvInitialiseTaskLists>
 800c3b8:	e00d      	b.n	800c3d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c3ba:	4b25      	ldr	r3, [pc, #148]	; (800c450 <prvAddNewTaskToReadyList+0xc8>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d109      	bne.n	800c3d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c3c2:	4b22      	ldr	r3, [pc, #136]	; (800c44c <prvAddNewTaskToReadyList+0xc4>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d802      	bhi.n	800c3d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c3d0:	4a1e      	ldr	r2, [pc, #120]	; (800c44c <prvAddNewTaskToReadyList+0xc4>)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c3d6:	4b1f      	ldr	r3, [pc, #124]	; (800c454 <prvAddNewTaskToReadyList+0xcc>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	3301      	adds	r3, #1
 800c3dc:	4a1d      	ldr	r2, [pc, #116]	; (800c454 <prvAddNewTaskToReadyList+0xcc>)
 800c3de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c3e0:	4b1c      	ldr	r3, [pc, #112]	; (800c454 <prvAddNewTaskToReadyList+0xcc>)
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	409a      	lsls	r2, r3
 800c3f0:	4b19      	ldr	r3, [pc, #100]	; (800c458 <prvAddNewTaskToReadyList+0xd0>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	4a18      	ldr	r2, [pc, #96]	; (800c458 <prvAddNewTaskToReadyList+0xd0>)
 800c3f8:	6013      	str	r3, [r2, #0]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3fe:	4613      	mov	r3, r2
 800c400:	009b      	lsls	r3, r3, #2
 800c402:	4413      	add	r3, r2
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	4a15      	ldr	r2, [pc, #84]	; (800c45c <prvAddNewTaskToReadyList+0xd4>)
 800c408:	441a      	add	r2, r3
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	3304      	adds	r3, #4
 800c40e:	4619      	mov	r1, r3
 800c410:	4610      	mov	r0, r2
 800c412:	f7ff f9b6 	bl	800b782 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c416:	f001 f9dd 	bl	800d7d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c41a:	4b0d      	ldr	r3, [pc, #52]	; (800c450 <prvAddNewTaskToReadyList+0xc8>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d00e      	beq.n	800c440 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c422:	4b0a      	ldr	r3, [pc, #40]	; (800c44c <prvAddNewTaskToReadyList+0xc4>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d207      	bcs.n	800c440 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c430:	4b0b      	ldr	r3, [pc, #44]	; (800c460 <prvAddNewTaskToReadyList+0xd8>)
 800c432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c436:	601a      	str	r2, [r3, #0]
 800c438:	f3bf 8f4f 	dsb	sy
 800c43c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c440:	bf00      	nop
 800c442:	3708      	adds	r7, #8
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}
 800c448:	200020f4 	.word	0x200020f4
 800c44c:	20001f40 	.word	0x20001f40
 800c450:	20002100 	.word	0x20002100
 800c454:	20002110 	.word	0x20002110
 800c458:	200020fc 	.word	0x200020fc
 800c45c:	20001f44 	.word	0x20001f44
 800c460:	e000ed04 	.word	0xe000ed04

0800c464 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c46c:	2300      	movs	r3, #0
 800c46e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d017      	beq.n	800c4a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c476:	4b13      	ldr	r3, [pc, #76]	; (800c4c4 <vTaskDelay+0x60>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d00a      	beq.n	800c494 <vTaskDelay+0x30>
	__asm volatile
 800c47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c482:	f383 8811 	msr	BASEPRI, r3
 800c486:	f3bf 8f6f 	isb	sy
 800c48a:	f3bf 8f4f 	dsb	sy
 800c48e:	60bb      	str	r3, [r7, #8]
}
 800c490:	bf00      	nop
 800c492:	e7fe      	b.n	800c492 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c494:	f000 f868 	bl	800c568 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c498:	2100      	movs	r1, #0
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 fcc2 	bl	800ce24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c4a0:	f000 f870 	bl	800c584 <xTaskResumeAll>
 800c4a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d107      	bne.n	800c4bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c4ac:	4b06      	ldr	r3, [pc, #24]	; (800c4c8 <vTaskDelay+0x64>)
 800c4ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4b2:	601a      	str	r2, [r3, #0]
 800c4b4:	f3bf 8f4f 	dsb	sy
 800c4b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c4bc:	bf00      	nop
 800c4be:	3710      	adds	r7, #16
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}
 800c4c4:	2000211c 	.word	0x2000211c
 800c4c8:	e000ed04 	.word	0xe000ed04

0800c4cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b086      	sub	sp, #24
 800c4d0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800c4d2:	4b1f      	ldr	r3, [pc, #124]	; (800c550 <vTaskStartScheduler+0x84>)
 800c4d4:	9301      	str	r3, [sp, #4]
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	9300      	str	r3, [sp, #0]
 800c4da:	2300      	movs	r3, #0
 800c4dc:	2282      	movs	r2, #130	; 0x82
 800c4de:	491d      	ldr	r1, [pc, #116]	; (800c554 <vTaskStartScheduler+0x88>)
 800c4e0:	481d      	ldr	r0, [pc, #116]	; (800c558 <vTaskStartScheduler+0x8c>)
 800c4e2:	f7ff fe81 	bl	800c1e8 <xTaskCreate>
 800c4e6:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2b01      	cmp	r3, #1
 800c4ec:	d102      	bne.n	800c4f4 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800c4ee:	f000 fcff 	bl	800cef0 <xTimerCreateTimerTask>
 800c4f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	d116      	bne.n	800c528 <vTaskStartScheduler+0x5c>
	__asm volatile
 800c4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fe:	f383 8811 	msr	BASEPRI, r3
 800c502:	f3bf 8f6f 	isb	sy
 800c506:	f3bf 8f4f 	dsb	sy
 800c50a:	60bb      	str	r3, [r7, #8]
}
 800c50c:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c50e:	4b13      	ldr	r3, [pc, #76]	; (800c55c <vTaskStartScheduler+0x90>)
 800c510:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c514:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c516:	4b12      	ldr	r3, [pc, #72]	; (800c560 <vTaskStartScheduler+0x94>)
 800c518:	2201      	movs	r2, #1
 800c51a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c51c:	4b11      	ldr	r3, [pc, #68]	; (800c564 <vTaskStartScheduler+0x98>)
 800c51e:	2200      	movs	r2, #0
 800c520:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c522:	f001 f885 	bl	800d630 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c526:	e00e      	b.n	800c546 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c52e:	d10a      	bne.n	800c546 <vTaskStartScheduler+0x7a>
	__asm volatile
 800c530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c534:	f383 8811 	msr	BASEPRI, r3
 800c538:	f3bf 8f6f 	isb	sy
 800c53c:	f3bf 8f4f 	dsb	sy
 800c540:	607b      	str	r3, [r7, #4]
}
 800c542:	bf00      	nop
 800c544:	e7fe      	b.n	800c544 <vTaskStartScheduler+0x78>
}
 800c546:	bf00      	nop
 800c548:	3710      	adds	r7, #16
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	20002118 	.word	0x20002118
 800c554:	0800ea28 	.word	0x0800ea28
 800c558:	0800cb71 	.word	0x0800cb71
 800c55c:	20002114 	.word	0x20002114
 800c560:	20002100 	.word	0x20002100
 800c564:	200020f8 	.word	0x200020f8

0800c568 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c568:	b480      	push	{r7}
 800c56a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c56c:	4b04      	ldr	r3, [pc, #16]	; (800c580 <vTaskSuspendAll+0x18>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	3301      	adds	r3, #1
 800c572:	4a03      	ldr	r2, [pc, #12]	; (800c580 <vTaskSuspendAll+0x18>)
 800c574:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c576:	bf00      	nop
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr
 800c580:	2000211c 	.word	0x2000211c

0800c584 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c58a:	2300      	movs	r3, #0
 800c58c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c58e:	2300      	movs	r3, #0
 800c590:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c592:	4b41      	ldr	r3, [pc, #260]	; (800c698 <xTaskResumeAll+0x114>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d10a      	bne.n	800c5b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800c59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c59e:	f383 8811 	msr	BASEPRI, r3
 800c5a2:	f3bf 8f6f 	isb	sy
 800c5a6:	f3bf 8f4f 	dsb	sy
 800c5aa:	603b      	str	r3, [r7, #0]
}
 800c5ac:	bf00      	nop
 800c5ae:	e7fe      	b.n	800c5ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c5b0:	f001 f8e0 	bl	800d774 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c5b4:	4b38      	ldr	r3, [pc, #224]	; (800c698 <xTaskResumeAll+0x114>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	3b01      	subs	r3, #1
 800c5ba:	4a37      	ldr	r2, [pc, #220]	; (800c698 <xTaskResumeAll+0x114>)
 800c5bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5be:	4b36      	ldr	r3, [pc, #216]	; (800c698 <xTaskResumeAll+0x114>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d161      	bne.n	800c68a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c5c6:	4b35      	ldr	r3, [pc, #212]	; (800c69c <xTaskResumeAll+0x118>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d05d      	beq.n	800c68a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c5ce:	e02e      	b.n	800c62e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5d0:	4b33      	ldr	r3, [pc, #204]	; (800c6a0 <xTaskResumeAll+0x11c>)
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	68db      	ldr	r3, [r3, #12]
 800c5d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	3318      	adds	r3, #24
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7ff f92d 	bl	800b83c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	3304      	adds	r3, #4
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7ff f928 	bl	800b83c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	409a      	lsls	r2, r3
 800c5f4:	4b2b      	ldr	r3, [pc, #172]	; (800c6a4 <xTaskResumeAll+0x120>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	4a2a      	ldr	r2, [pc, #168]	; (800c6a4 <xTaskResumeAll+0x120>)
 800c5fc:	6013      	str	r3, [r2, #0]
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c602:	4613      	mov	r3, r2
 800c604:	009b      	lsls	r3, r3, #2
 800c606:	4413      	add	r3, r2
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	4a27      	ldr	r2, [pc, #156]	; (800c6a8 <xTaskResumeAll+0x124>)
 800c60c:	441a      	add	r2, r3
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	3304      	adds	r3, #4
 800c612:	4619      	mov	r1, r3
 800c614:	4610      	mov	r0, r2
 800c616:	f7ff f8b4 	bl	800b782 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c61e:	4b23      	ldr	r3, [pc, #140]	; (800c6ac <xTaskResumeAll+0x128>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c624:	429a      	cmp	r2, r3
 800c626:	d302      	bcc.n	800c62e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c628:	4b21      	ldr	r3, [pc, #132]	; (800c6b0 <xTaskResumeAll+0x12c>)
 800c62a:	2201      	movs	r2, #1
 800c62c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c62e:	4b1c      	ldr	r3, [pc, #112]	; (800c6a0 <xTaskResumeAll+0x11c>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d1cc      	bne.n	800c5d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d001      	beq.n	800c640 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c63c:	f000 fb2e 	bl	800cc9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c640:	4b1c      	ldr	r3, [pc, #112]	; (800c6b4 <xTaskResumeAll+0x130>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d010      	beq.n	800c66e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c64c:	f000 f846 	bl	800c6dc <xTaskIncrementTick>
 800c650:	4603      	mov	r3, r0
 800c652:	2b00      	cmp	r3, #0
 800c654:	d002      	beq.n	800c65c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c656:	4b16      	ldr	r3, [pc, #88]	; (800c6b0 <xTaskResumeAll+0x12c>)
 800c658:	2201      	movs	r2, #1
 800c65a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	3b01      	subs	r3, #1
 800c660:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d1f1      	bne.n	800c64c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800c668:	4b12      	ldr	r3, [pc, #72]	; (800c6b4 <xTaskResumeAll+0x130>)
 800c66a:	2200      	movs	r2, #0
 800c66c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c66e:	4b10      	ldr	r3, [pc, #64]	; (800c6b0 <xTaskResumeAll+0x12c>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d009      	beq.n	800c68a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c676:	2301      	movs	r3, #1
 800c678:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c67a:	4b0f      	ldr	r3, [pc, #60]	; (800c6b8 <xTaskResumeAll+0x134>)
 800c67c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c680:	601a      	str	r2, [r3, #0]
 800c682:	f3bf 8f4f 	dsb	sy
 800c686:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c68a:	f001 f8a3 	bl	800d7d4 <vPortExitCritical>

	return xAlreadyYielded;
 800c68e:	68bb      	ldr	r3, [r7, #8]
}
 800c690:	4618      	mov	r0, r3
 800c692:	3710      	adds	r7, #16
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	2000211c 	.word	0x2000211c
 800c69c:	200020f4 	.word	0x200020f4
 800c6a0:	200020b4 	.word	0x200020b4
 800c6a4:	200020fc 	.word	0x200020fc
 800c6a8:	20001f44 	.word	0x20001f44
 800c6ac:	20001f40 	.word	0x20001f40
 800c6b0:	20002108 	.word	0x20002108
 800c6b4:	20002104 	.word	0x20002104
 800c6b8:	e000ed04 	.word	0xe000ed04

0800c6bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b083      	sub	sp, #12
 800c6c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c6c2:	4b05      	ldr	r3, [pc, #20]	; (800c6d8 <xTaskGetTickCount+0x1c>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c6c8:	687b      	ldr	r3, [r7, #4]
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	370c      	adds	r7, #12
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr
 800c6d6:	bf00      	nop
 800c6d8:	200020f8 	.word	0x200020f8

0800c6dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b086      	sub	sp, #24
 800c6e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6e6:	4b4e      	ldr	r3, [pc, #312]	; (800c820 <xTaskIncrementTick+0x144>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	f040 8088 	bne.w	800c800 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c6f0:	4b4c      	ldr	r3, [pc, #304]	; (800c824 <xTaskIncrementTick+0x148>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c6f8:	4a4a      	ldr	r2, [pc, #296]	; (800c824 <xTaskIncrementTick+0x148>)
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d120      	bne.n	800c746 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c704:	4b48      	ldr	r3, [pc, #288]	; (800c828 <xTaskIncrementTick+0x14c>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d00a      	beq.n	800c724 <xTaskIncrementTick+0x48>
	__asm volatile
 800c70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c712:	f383 8811 	msr	BASEPRI, r3
 800c716:	f3bf 8f6f 	isb	sy
 800c71a:	f3bf 8f4f 	dsb	sy
 800c71e:	603b      	str	r3, [r7, #0]
}
 800c720:	bf00      	nop
 800c722:	e7fe      	b.n	800c722 <xTaskIncrementTick+0x46>
 800c724:	4b40      	ldr	r3, [pc, #256]	; (800c828 <xTaskIncrementTick+0x14c>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	60fb      	str	r3, [r7, #12]
 800c72a:	4b40      	ldr	r3, [pc, #256]	; (800c82c <xTaskIncrementTick+0x150>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4a3e      	ldr	r2, [pc, #248]	; (800c828 <xTaskIncrementTick+0x14c>)
 800c730:	6013      	str	r3, [r2, #0]
 800c732:	4a3e      	ldr	r2, [pc, #248]	; (800c82c <xTaskIncrementTick+0x150>)
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	6013      	str	r3, [r2, #0]
 800c738:	4b3d      	ldr	r3, [pc, #244]	; (800c830 <xTaskIncrementTick+0x154>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	3301      	adds	r3, #1
 800c73e:	4a3c      	ldr	r2, [pc, #240]	; (800c830 <xTaskIncrementTick+0x154>)
 800c740:	6013      	str	r3, [r2, #0]
 800c742:	f000 faab 	bl	800cc9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c746:	4b3b      	ldr	r3, [pc, #236]	; (800c834 <xTaskIncrementTick+0x158>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	693a      	ldr	r2, [r7, #16]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d348      	bcc.n	800c7e2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c750:	4b35      	ldr	r3, [pc, #212]	; (800c828 <xTaskIncrementTick+0x14c>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d104      	bne.n	800c764 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c75a:	4b36      	ldr	r3, [pc, #216]	; (800c834 <xTaskIncrementTick+0x158>)
 800c75c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c760:	601a      	str	r2, [r3, #0]
					break;
 800c762:	e03e      	b.n	800c7e2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c764:	4b30      	ldr	r3, [pc, #192]	; (800c828 <xTaskIncrementTick+0x14c>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	68db      	ldr	r3, [r3, #12]
 800c76a:	68db      	ldr	r3, [r3, #12]
 800c76c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c774:	693a      	ldr	r2, [r7, #16]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	429a      	cmp	r2, r3
 800c77a:	d203      	bcs.n	800c784 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c77c:	4a2d      	ldr	r2, [pc, #180]	; (800c834 <xTaskIncrementTick+0x158>)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c782:	e02e      	b.n	800c7e2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	3304      	adds	r3, #4
 800c788:	4618      	mov	r0, r3
 800c78a:	f7ff f857 	bl	800b83c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c792:	2b00      	cmp	r3, #0
 800c794:	d004      	beq.n	800c7a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	3318      	adds	r3, #24
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7ff f84e 	bl	800b83c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	409a      	lsls	r2, r3
 800c7a8:	4b23      	ldr	r3, [pc, #140]	; (800c838 <xTaskIncrementTick+0x15c>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	4a22      	ldr	r2, [pc, #136]	; (800c838 <xTaskIncrementTick+0x15c>)
 800c7b0:	6013      	str	r3, [r2, #0]
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7b6:	4613      	mov	r3, r2
 800c7b8:	009b      	lsls	r3, r3, #2
 800c7ba:	4413      	add	r3, r2
 800c7bc:	009b      	lsls	r3, r3, #2
 800c7be:	4a1f      	ldr	r2, [pc, #124]	; (800c83c <xTaskIncrementTick+0x160>)
 800c7c0:	441a      	add	r2, r3
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	3304      	adds	r3, #4
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	4610      	mov	r0, r2
 800c7ca:	f7fe ffda 	bl	800b782 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7d2:	4b1b      	ldr	r3, [pc, #108]	; (800c840 <xTaskIncrementTick+0x164>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d3b9      	bcc.n	800c750 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c7dc:	2301      	movs	r3, #1
 800c7de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7e0:	e7b6      	b.n	800c750 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c7e2:	4b17      	ldr	r3, [pc, #92]	; (800c840 <xTaskIncrementTick+0x164>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7e8:	4914      	ldr	r1, [pc, #80]	; (800c83c <xTaskIncrementTick+0x160>)
 800c7ea:	4613      	mov	r3, r2
 800c7ec:	009b      	lsls	r3, r3, #2
 800c7ee:	4413      	add	r3, r2
 800c7f0:	009b      	lsls	r3, r3, #2
 800c7f2:	440b      	add	r3, r1
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	2b01      	cmp	r3, #1
 800c7f8:	d907      	bls.n	800c80a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	617b      	str	r3, [r7, #20]
 800c7fe:	e004      	b.n	800c80a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c800:	4b10      	ldr	r3, [pc, #64]	; (800c844 <xTaskIncrementTick+0x168>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	3301      	adds	r3, #1
 800c806:	4a0f      	ldr	r2, [pc, #60]	; (800c844 <xTaskIncrementTick+0x168>)
 800c808:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c80a:	4b0f      	ldr	r3, [pc, #60]	; (800c848 <xTaskIncrementTick+0x16c>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d001      	beq.n	800c816 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800c812:	2301      	movs	r3, #1
 800c814:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c816:	697b      	ldr	r3, [r7, #20]
}
 800c818:	4618      	mov	r0, r3
 800c81a:	3718      	adds	r7, #24
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}
 800c820:	2000211c 	.word	0x2000211c
 800c824:	200020f8 	.word	0x200020f8
 800c828:	200020ac 	.word	0x200020ac
 800c82c:	200020b0 	.word	0x200020b0
 800c830:	2000210c 	.word	0x2000210c
 800c834:	20002114 	.word	0x20002114
 800c838:	200020fc 	.word	0x200020fc
 800c83c:	20001f44 	.word	0x20001f44
 800c840:	20001f40 	.word	0x20001f40
 800c844:	20002104 	.word	0x20002104
 800c848:	20002108 	.word	0x20002108

0800c84c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c84c:	b480      	push	{r7}
 800c84e:	b087      	sub	sp, #28
 800c850:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c852:	4b27      	ldr	r3, [pc, #156]	; (800c8f0 <vTaskSwitchContext+0xa4>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d003      	beq.n	800c862 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c85a:	4b26      	ldr	r3, [pc, #152]	; (800c8f4 <vTaskSwitchContext+0xa8>)
 800c85c:	2201      	movs	r2, #1
 800c85e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c860:	e03f      	b.n	800c8e2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800c862:	4b24      	ldr	r3, [pc, #144]	; (800c8f4 <vTaskSwitchContext+0xa8>)
 800c864:	2200      	movs	r2, #0
 800c866:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c868:	4b23      	ldr	r3, [pc, #140]	; (800c8f8 <vTaskSwitchContext+0xac>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	fab3 f383 	clz	r3, r3
 800c874:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c876:	7afb      	ldrb	r3, [r7, #11]
 800c878:	f1c3 031f 	rsb	r3, r3, #31
 800c87c:	617b      	str	r3, [r7, #20]
 800c87e:	491f      	ldr	r1, [pc, #124]	; (800c8fc <vTaskSwitchContext+0xb0>)
 800c880:	697a      	ldr	r2, [r7, #20]
 800c882:	4613      	mov	r3, r2
 800c884:	009b      	lsls	r3, r3, #2
 800c886:	4413      	add	r3, r2
 800c888:	009b      	lsls	r3, r3, #2
 800c88a:	440b      	add	r3, r1
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d10a      	bne.n	800c8a8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c896:	f383 8811 	msr	BASEPRI, r3
 800c89a:	f3bf 8f6f 	isb	sy
 800c89e:	f3bf 8f4f 	dsb	sy
 800c8a2:	607b      	str	r3, [r7, #4]
}
 800c8a4:	bf00      	nop
 800c8a6:	e7fe      	b.n	800c8a6 <vTaskSwitchContext+0x5a>
 800c8a8:	697a      	ldr	r2, [r7, #20]
 800c8aa:	4613      	mov	r3, r2
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	4413      	add	r3, r2
 800c8b0:	009b      	lsls	r3, r3, #2
 800c8b2:	4a12      	ldr	r2, [pc, #72]	; (800c8fc <vTaskSwitchContext+0xb0>)
 800c8b4:	4413      	add	r3, r2
 800c8b6:	613b      	str	r3, [r7, #16]
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	685a      	ldr	r2, [r3, #4]
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	605a      	str	r2, [r3, #4]
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	685a      	ldr	r2, [r3, #4]
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	3308      	adds	r3, #8
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d104      	bne.n	800c8d8 <vTaskSwitchContext+0x8c>
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	685a      	ldr	r2, [r3, #4]
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	605a      	str	r2, [r3, #4]
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	685b      	ldr	r3, [r3, #4]
 800c8dc:	68db      	ldr	r3, [r3, #12]
 800c8de:	4a08      	ldr	r2, [pc, #32]	; (800c900 <vTaskSwitchContext+0xb4>)
 800c8e0:	6013      	str	r3, [r2, #0]
}
 800c8e2:	bf00      	nop
 800c8e4:	371c      	adds	r7, #28
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ec:	4770      	bx	lr
 800c8ee:	bf00      	nop
 800c8f0:	2000211c 	.word	0x2000211c
 800c8f4:	20002108 	.word	0x20002108
 800c8f8:	200020fc 	.word	0x200020fc
 800c8fc:	20001f44 	.word	0x20001f44
 800c900:	20001f40 	.word	0x20001f40

0800c904 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b084      	sub	sp, #16
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d10a      	bne.n	800c92a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c918:	f383 8811 	msr	BASEPRI, r3
 800c91c:	f3bf 8f6f 	isb	sy
 800c920:	f3bf 8f4f 	dsb	sy
 800c924:	60fb      	str	r3, [r7, #12]
}
 800c926:	bf00      	nop
 800c928:	e7fe      	b.n	800c928 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c92a:	4b07      	ldr	r3, [pc, #28]	; (800c948 <vTaskPlaceOnEventList+0x44>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	3318      	adds	r3, #24
 800c930:	4619      	mov	r1, r3
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f7fe ff49 	bl	800b7ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c938:	2101      	movs	r1, #1
 800c93a:	6838      	ldr	r0, [r7, #0]
 800c93c:	f000 fa72 	bl	800ce24 <prvAddCurrentTaskToDelayedList>
}
 800c940:	bf00      	nop
 800c942:	3710      	adds	r7, #16
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}
 800c948:	20001f40 	.word	0x20001f40

0800c94c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b086      	sub	sp, #24
 800c950:	af00      	add	r7, sp, #0
 800c952:	60f8      	str	r0, [r7, #12]
 800c954:	60b9      	str	r1, [r7, #8]
 800c956:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d10a      	bne.n	800c974 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c962:	f383 8811 	msr	BASEPRI, r3
 800c966:	f3bf 8f6f 	isb	sy
 800c96a:	f3bf 8f4f 	dsb	sy
 800c96e:	617b      	str	r3, [r7, #20]
}
 800c970:	bf00      	nop
 800c972:	e7fe      	b.n	800c972 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c974:	4b0a      	ldr	r3, [pc, #40]	; (800c9a0 <vTaskPlaceOnEventListRestricted+0x54>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	3318      	adds	r3, #24
 800c97a:	4619      	mov	r1, r3
 800c97c:	68f8      	ldr	r0, [r7, #12]
 800c97e:	f7fe ff00 	bl	800b782 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d002      	beq.n	800c98e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c988:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c98c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c98e:	6879      	ldr	r1, [r7, #4]
 800c990:	68b8      	ldr	r0, [r7, #8]
 800c992:	f000 fa47 	bl	800ce24 <prvAddCurrentTaskToDelayedList>
	}
 800c996:	bf00      	nop
 800c998:	3718      	adds	r7, #24
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	20001f40 	.word	0x20001f40

0800c9a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b086      	sub	sp, #24
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	68db      	ldr	r3, [r3, #12]
 800c9b0:	68db      	ldr	r3, [r3, #12]
 800c9b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d10a      	bne.n	800c9d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9be:	f383 8811 	msr	BASEPRI, r3
 800c9c2:	f3bf 8f6f 	isb	sy
 800c9c6:	f3bf 8f4f 	dsb	sy
 800c9ca:	60fb      	str	r3, [r7, #12]
}
 800c9cc:	bf00      	nop
 800c9ce:	e7fe      	b.n	800c9ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	3318      	adds	r3, #24
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7fe ff31 	bl	800b83c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9da:	4b1d      	ldr	r3, [pc, #116]	; (800ca50 <xTaskRemoveFromEventList+0xac>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d11c      	bne.n	800ca1c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	3304      	adds	r3, #4
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7fe ff28 	bl	800b83c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	409a      	lsls	r2, r3
 800c9f4:	4b17      	ldr	r3, [pc, #92]	; (800ca54 <xTaskRemoveFromEventList+0xb0>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	4a16      	ldr	r2, [pc, #88]	; (800ca54 <xTaskRemoveFromEventList+0xb0>)
 800c9fc:	6013      	str	r3, [r2, #0]
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca02:	4613      	mov	r3, r2
 800ca04:	009b      	lsls	r3, r3, #2
 800ca06:	4413      	add	r3, r2
 800ca08:	009b      	lsls	r3, r3, #2
 800ca0a:	4a13      	ldr	r2, [pc, #76]	; (800ca58 <xTaskRemoveFromEventList+0xb4>)
 800ca0c:	441a      	add	r2, r3
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	3304      	adds	r3, #4
 800ca12:	4619      	mov	r1, r3
 800ca14:	4610      	mov	r0, r2
 800ca16:	f7fe feb4 	bl	800b782 <vListInsertEnd>
 800ca1a:	e005      	b.n	800ca28 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	3318      	adds	r3, #24
 800ca20:	4619      	mov	r1, r3
 800ca22:	480e      	ldr	r0, [pc, #56]	; (800ca5c <xTaskRemoveFromEventList+0xb8>)
 800ca24:	f7fe fead 	bl	800b782 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca2c:	4b0c      	ldr	r3, [pc, #48]	; (800ca60 <xTaskRemoveFromEventList+0xbc>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d905      	bls.n	800ca42 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ca36:	2301      	movs	r3, #1
 800ca38:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ca3a:	4b0a      	ldr	r3, [pc, #40]	; (800ca64 <xTaskRemoveFromEventList+0xc0>)
 800ca3c:	2201      	movs	r2, #1
 800ca3e:	601a      	str	r2, [r3, #0]
 800ca40:	e001      	b.n	800ca46 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ca42:	2300      	movs	r3, #0
 800ca44:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ca46:	697b      	ldr	r3, [r7, #20]
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3718      	adds	r7, #24
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	2000211c 	.word	0x2000211c
 800ca54:	200020fc 	.word	0x200020fc
 800ca58:	20001f44 	.word	0x20001f44
 800ca5c:	200020b4 	.word	0x200020b4
 800ca60:	20001f40 	.word	0x20001f40
 800ca64:	20002108 	.word	0x20002108

0800ca68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b083      	sub	sp, #12
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ca70:	4b06      	ldr	r3, [pc, #24]	; (800ca8c <vTaskInternalSetTimeOutState+0x24>)
 800ca72:	681a      	ldr	r2, [r3, #0]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ca78:	4b05      	ldr	r3, [pc, #20]	; (800ca90 <vTaskInternalSetTimeOutState+0x28>)
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	605a      	str	r2, [r3, #4]
}
 800ca80:	bf00      	nop
 800ca82:	370c      	adds	r7, #12
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr
 800ca8c:	2000210c 	.word	0x2000210c
 800ca90:	200020f8 	.word	0x200020f8

0800ca94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b088      	sub	sp, #32
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d10a      	bne.n	800caba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800caa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa8:	f383 8811 	msr	BASEPRI, r3
 800caac:	f3bf 8f6f 	isb	sy
 800cab0:	f3bf 8f4f 	dsb	sy
 800cab4:	613b      	str	r3, [r7, #16]
}
 800cab6:	bf00      	nop
 800cab8:	e7fe      	b.n	800cab8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d10a      	bne.n	800cad6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac4:	f383 8811 	msr	BASEPRI, r3
 800cac8:	f3bf 8f6f 	isb	sy
 800cacc:	f3bf 8f4f 	dsb	sy
 800cad0:	60fb      	str	r3, [r7, #12]
}
 800cad2:	bf00      	nop
 800cad4:	e7fe      	b.n	800cad4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cad6:	f000 fe4d 	bl	800d774 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cada:	4b1d      	ldr	r3, [pc, #116]	; (800cb50 <xTaskCheckForTimeOut+0xbc>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	69ba      	ldr	r2, [r7, #24]
 800cae6:	1ad3      	subs	r3, r2, r3
 800cae8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800caf2:	d102      	bne.n	800cafa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800caf4:	2300      	movs	r3, #0
 800caf6:	61fb      	str	r3, [r7, #28]
 800caf8:	e023      	b.n	800cb42 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681a      	ldr	r2, [r3, #0]
 800cafe:	4b15      	ldr	r3, [pc, #84]	; (800cb54 <xTaskCheckForTimeOut+0xc0>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d007      	beq.n	800cb16 <xTaskCheckForTimeOut+0x82>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	685b      	ldr	r3, [r3, #4]
 800cb0a:	69ba      	ldr	r2, [r7, #24]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d302      	bcc.n	800cb16 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cb10:	2301      	movs	r3, #1
 800cb12:	61fb      	str	r3, [r7, #28]
 800cb14:	e015      	b.n	800cb42 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	697a      	ldr	r2, [r7, #20]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d20b      	bcs.n	800cb38 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	1ad2      	subs	r2, r2, r3
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f7ff ff9b 	bl	800ca68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cb32:	2300      	movs	r3, #0
 800cb34:	61fb      	str	r3, [r7, #28]
 800cb36:	e004      	b.n	800cb42 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cb3e:	2301      	movs	r3, #1
 800cb40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cb42:	f000 fe47 	bl	800d7d4 <vPortExitCritical>

	return xReturn;
 800cb46:	69fb      	ldr	r3, [r7, #28]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3720      	adds	r7, #32
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}
 800cb50:	200020f8 	.word	0x200020f8
 800cb54:	2000210c 	.word	0x2000210c

0800cb58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cb58:	b480      	push	{r7}
 800cb5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cb5c:	4b03      	ldr	r3, [pc, #12]	; (800cb6c <vTaskMissedYield+0x14>)
 800cb5e:	2201      	movs	r2, #1
 800cb60:	601a      	str	r2, [r3, #0]
}
 800cb62:	bf00      	nop
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr
 800cb6c:	20002108 	.word	0x20002108

0800cb70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cb78:	f000 f852 	bl	800cc20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cb7c:	4b06      	ldr	r3, [pc, #24]	; (800cb98 <prvIdleTask+0x28>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	d9f9      	bls.n	800cb78 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cb84:	4b05      	ldr	r3, [pc, #20]	; (800cb9c <prvIdleTask+0x2c>)
 800cb86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb8a:	601a      	str	r2, [r3, #0]
 800cb8c:	f3bf 8f4f 	dsb	sy
 800cb90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cb94:	e7f0      	b.n	800cb78 <prvIdleTask+0x8>
 800cb96:	bf00      	nop
 800cb98:	20001f44 	.word	0x20001f44
 800cb9c:	e000ed04 	.word	0xe000ed04

0800cba0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b082      	sub	sp, #8
 800cba4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cba6:	2300      	movs	r3, #0
 800cba8:	607b      	str	r3, [r7, #4]
 800cbaa:	e00c      	b.n	800cbc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	4613      	mov	r3, r2
 800cbb0:	009b      	lsls	r3, r3, #2
 800cbb2:	4413      	add	r3, r2
 800cbb4:	009b      	lsls	r3, r3, #2
 800cbb6:	4a12      	ldr	r2, [pc, #72]	; (800cc00 <prvInitialiseTaskLists+0x60>)
 800cbb8:	4413      	add	r3, r2
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f7fe fdb4 	bl	800b728 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	3301      	adds	r3, #1
 800cbc4:	607b      	str	r3, [r7, #4]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2b0f      	cmp	r3, #15
 800cbca:	d9ef      	bls.n	800cbac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cbcc:	480d      	ldr	r0, [pc, #52]	; (800cc04 <prvInitialiseTaskLists+0x64>)
 800cbce:	f7fe fdab 	bl	800b728 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cbd2:	480d      	ldr	r0, [pc, #52]	; (800cc08 <prvInitialiseTaskLists+0x68>)
 800cbd4:	f7fe fda8 	bl	800b728 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cbd8:	480c      	ldr	r0, [pc, #48]	; (800cc0c <prvInitialiseTaskLists+0x6c>)
 800cbda:	f7fe fda5 	bl	800b728 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cbde:	480c      	ldr	r0, [pc, #48]	; (800cc10 <prvInitialiseTaskLists+0x70>)
 800cbe0:	f7fe fda2 	bl	800b728 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cbe4:	480b      	ldr	r0, [pc, #44]	; (800cc14 <prvInitialiseTaskLists+0x74>)
 800cbe6:	f7fe fd9f 	bl	800b728 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cbea:	4b0b      	ldr	r3, [pc, #44]	; (800cc18 <prvInitialiseTaskLists+0x78>)
 800cbec:	4a05      	ldr	r2, [pc, #20]	; (800cc04 <prvInitialiseTaskLists+0x64>)
 800cbee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cbf0:	4b0a      	ldr	r3, [pc, #40]	; (800cc1c <prvInitialiseTaskLists+0x7c>)
 800cbf2:	4a05      	ldr	r2, [pc, #20]	; (800cc08 <prvInitialiseTaskLists+0x68>)
 800cbf4:	601a      	str	r2, [r3, #0]
}
 800cbf6:	bf00      	nop
 800cbf8:	3708      	adds	r7, #8
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	20001f44 	.word	0x20001f44
 800cc04:	20002084 	.word	0x20002084
 800cc08:	20002098 	.word	0x20002098
 800cc0c:	200020b4 	.word	0x200020b4
 800cc10:	200020c8 	.word	0x200020c8
 800cc14:	200020e0 	.word	0x200020e0
 800cc18:	200020ac 	.word	0x200020ac
 800cc1c:	200020b0 	.word	0x200020b0

0800cc20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b082      	sub	sp, #8
 800cc24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cc26:	e019      	b.n	800cc5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cc28:	f000 fda4 	bl	800d774 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc2c:	4b10      	ldr	r3, [pc, #64]	; (800cc70 <prvCheckTasksWaitingTermination+0x50>)
 800cc2e:	68db      	ldr	r3, [r3, #12]
 800cc30:	68db      	ldr	r3, [r3, #12]
 800cc32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	3304      	adds	r3, #4
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f7fe fdff 	bl	800b83c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cc3e:	4b0d      	ldr	r3, [pc, #52]	; (800cc74 <prvCheckTasksWaitingTermination+0x54>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	3b01      	subs	r3, #1
 800cc44:	4a0b      	ldr	r2, [pc, #44]	; (800cc74 <prvCheckTasksWaitingTermination+0x54>)
 800cc46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cc48:	4b0b      	ldr	r3, [pc, #44]	; (800cc78 <prvCheckTasksWaitingTermination+0x58>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	3b01      	subs	r3, #1
 800cc4e:	4a0a      	ldr	r2, [pc, #40]	; (800cc78 <prvCheckTasksWaitingTermination+0x58>)
 800cc50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cc52:	f000 fdbf 	bl	800d7d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f000 f810 	bl	800cc7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cc5c:	4b06      	ldr	r3, [pc, #24]	; (800cc78 <prvCheckTasksWaitingTermination+0x58>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d1e1      	bne.n	800cc28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cc64:	bf00      	nop
 800cc66:	bf00      	nop
 800cc68:	3708      	adds	r7, #8
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	200020c8 	.word	0x200020c8
 800cc74:	200020f4 	.word	0x200020f4
 800cc78:	200020dc 	.word	0x200020dc

0800cc7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f000 ff59 	bl	800db40 <vPortFree>
			vPortFree( pxTCB );
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f000 ff56 	bl	800db40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cc94:	bf00      	nop
 800cc96:	3708      	adds	r7, #8
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b083      	sub	sp, #12
 800cca0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cca2:	4b0c      	ldr	r3, [pc, #48]	; (800ccd4 <prvResetNextTaskUnblockTime+0x38>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d104      	bne.n	800ccb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ccac:	4b0a      	ldr	r3, [pc, #40]	; (800ccd8 <prvResetNextTaskUnblockTime+0x3c>)
 800ccae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ccb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ccb4:	e008      	b.n	800ccc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccb6:	4b07      	ldr	r3, [pc, #28]	; (800ccd4 <prvResetNextTaskUnblockTime+0x38>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	68db      	ldr	r3, [r3, #12]
 800ccbc:	68db      	ldr	r3, [r3, #12]
 800ccbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	4a04      	ldr	r2, [pc, #16]	; (800ccd8 <prvResetNextTaskUnblockTime+0x3c>)
 800ccc6:	6013      	str	r3, [r2, #0]
}
 800ccc8:	bf00      	nop
 800ccca:	370c      	adds	r7, #12
 800cccc:	46bd      	mov	sp, r7
 800ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd2:	4770      	bx	lr
 800ccd4:	200020ac 	.word	0x200020ac
 800ccd8:	20002114 	.word	0x20002114

0800ccdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ccdc:	b480      	push	{r7}
 800ccde:	b083      	sub	sp, #12
 800cce0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cce2:	4b0b      	ldr	r3, [pc, #44]	; (800cd10 <xTaskGetSchedulerState+0x34>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d102      	bne.n	800ccf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ccea:	2301      	movs	r3, #1
 800ccec:	607b      	str	r3, [r7, #4]
 800ccee:	e008      	b.n	800cd02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ccf0:	4b08      	ldr	r3, [pc, #32]	; (800cd14 <xTaskGetSchedulerState+0x38>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d102      	bne.n	800ccfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ccf8:	2302      	movs	r3, #2
 800ccfa:	607b      	str	r3, [r7, #4]
 800ccfc:	e001      	b.n	800cd02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cd02:	687b      	ldr	r3, [r7, #4]
	}
 800cd04:	4618      	mov	r0, r3
 800cd06:	370c      	adds	r7, #12
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr
 800cd10:	20002100 	.word	0x20002100
 800cd14:	2000211c 	.word	0x2000211c

0800cd18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b086      	sub	sp, #24
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cd24:	2300      	movs	r3, #0
 800cd26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d06e      	beq.n	800ce0c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cd2e:	4b3a      	ldr	r3, [pc, #232]	; (800ce18 <xTaskPriorityDisinherit+0x100>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	693a      	ldr	r2, [r7, #16]
 800cd34:	429a      	cmp	r2, r3
 800cd36:	d00a      	beq.n	800cd4e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cd38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd3c:	f383 8811 	msr	BASEPRI, r3
 800cd40:	f3bf 8f6f 	isb	sy
 800cd44:	f3bf 8f4f 	dsb	sy
 800cd48:	60fb      	str	r3, [r7, #12]
}
 800cd4a:	bf00      	nop
 800cd4c:	e7fe      	b.n	800cd4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d10a      	bne.n	800cd6c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cd56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd5a:	f383 8811 	msr	BASEPRI, r3
 800cd5e:	f3bf 8f6f 	isb	sy
 800cd62:	f3bf 8f4f 	dsb	sy
 800cd66:	60bb      	str	r3, [r7, #8]
}
 800cd68:	bf00      	nop
 800cd6a:	e7fe      	b.n	800cd6a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd70:	1e5a      	subs	r2, r3, #1
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd7a:	693b      	ldr	r3, [r7, #16]
 800cd7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d044      	beq.n	800ce0c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d140      	bne.n	800ce0c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	3304      	adds	r3, #4
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7fe fd54 	bl	800b83c <uxListRemove>
 800cd94:	4603      	mov	r3, r0
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d115      	bne.n	800cdc6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cd9a:	693b      	ldr	r3, [r7, #16]
 800cd9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd9e:	491f      	ldr	r1, [pc, #124]	; (800ce1c <xTaskPriorityDisinherit+0x104>)
 800cda0:	4613      	mov	r3, r2
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	4413      	add	r3, r2
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	440b      	add	r3, r1
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d10a      	bne.n	800cdc6 <xTaskPriorityDisinherit+0xae>
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	fa02 f303 	lsl.w	r3, r2, r3
 800cdba:	43da      	mvns	r2, r3
 800cdbc:	4b18      	ldr	r3, [pc, #96]	; (800ce20 <xTaskPriorityDisinherit+0x108>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4013      	ands	r3, r2
 800cdc2:	4a17      	ldr	r2, [pc, #92]	; (800ce20 <xTaskPriorityDisinherit+0x108>)
 800cdc4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdd2:	f1c3 0210 	rsb	r2, r3, #16
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdde:	2201      	movs	r2, #1
 800cde0:	409a      	lsls	r2, r3
 800cde2:	4b0f      	ldr	r3, [pc, #60]	; (800ce20 <xTaskPriorityDisinherit+0x108>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	4313      	orrs	r3, r2
 800cde8:	4a0d      	ldr	r2, [pc, #52]	; (800ce20 <xTaskPriorityDisinherit+0x108>)
 800cdea:	6013      	str	r3, [r2, #0]
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdf0:	4613      	mov	r3, r2
 800cdf2:	009b      	lsls	r3, r3, #2
 800cdf4:	4413      	add	r3, r2
 800cdf6:	009b      	lsls	r3, r3, #2
 800cdf8:	4a08      	ldr	r2, [pc, #32]	; (800ce1c <xTaskPriorityDisinherit+0x104>)
 800cdfa:	441a      	add	r2, r3
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	3304      	adds	r3, #4
 800ce00:	4619      	mov	r1, r3
 800ce02:	4610      	mov	r0, r2
 800ce04:	f7fe fcbd 	bl	800b782 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ce08:	2301      	movs	r3, #1
 800ce0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ce0c:	697b      	ldr	r3, [r7, #20]
	}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3718      	adds	r7, #24
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
 800ce16:	bf00      	nop
 800ce18:	20001f40 	.word	0x20001f40
 800ce1c:	20001f44 	.word	0x20001f44
 800ce20:	200020fc 	.word	0x200020fc

0800ce24 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b084      	sub	sp, #16
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ce2e:	4b29      	ldr	r3, [pc, #164]	; (800ced4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce34:	4b28      	ldr	r3, [pc, #160]	; (800ced8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	3304      	adds	r3, #4
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f7fe fcfe 	bl	800b83c <uxListRemove>
 800ce40:	4603      	mov	r3, r0
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d10b      	bne.n	800ce5e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ce46:	4b24      	ldr	r3, [pc, #144]	; (800ced8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ce52:	43da      	mvns	r2, r3
 800ce54:	4b21      	ldr	r3, [pc, #132]	; (800cedc <prvAddCurrentTaskToDelayedList+0xb8>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4013      	ands	r3, r2
 800ce5a:	4a20      	ldr	r2, [pc, #128]	; (800cedc <prvAddCurrentTaskToDelayedList+0xb8>)
 800ce5c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce64:	d10a      	bne.n	800ce7c <prvAddCurrentTaskToDelayedList+0x58>
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d007      	beq.n	800ce7c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce6c:	4b1a      	ldr	r3, [pc, #104]	; (800ced8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	3304      	adds	r3, #4
 800ce72:	4619      	mov	r1, r3
 800ce74:	481a      	ldr	r0, [pc, #104]	; (800cee0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ce76:	f7fe fc84 	bl	800b782 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ce7a:	e026      	b.n	800ceca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ce7c:	68fa      	ldr	r2, [r7, #12]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	4413      	add	r3, r2
 800ce82:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ce84:	4b14      	ldr	r3, [pc, #80]	; (800ced8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	68ba      	ldr	r2, [r7, #8]
 800ce8a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ce8c:	68ba      	ldr	r2, [r7, #8]
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d209      	bcs.n	800cea8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce94:	4b13      	ldr	r3, [pc, #76]	; (800cee4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ce96:	681a      	ldr	r2, [r3, #0]
 800ce98:	4b0f      	ldr	r3, [pc, #60]	; (800ced8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	3304      	adds	r3, #4
 800ce9e:	4619      	mov	r1, r3
 800cea0:	4610      	mov	r0, r2
 800cea2:	f7fe fc92 	bl	800b7ca <vListInsert>
}
 800cea6:	e010      	b.n	800ceca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cea8:	4b0f      	ldr	r3, [pc, #60]	; (800cee8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ceaa:	681a      	ldr	r2, [r3, #0]
 800ceac:	4b0a      	ldr	r3, [pc, #40]	; (800ced8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	3304      	adds	r3, #4
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	4610      	mov	r0, r2
 800ceb6:	f7fe fc88 	bl	800b7ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ceba:	4b0c      	ldr	r3, [pc, #48]	; (800ceec <prvAddCurrentTaskToDelayedList+0xc8>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	68ba      	ldr	r2, [r7, #8]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d202      	bcs.n	800ceca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cec4:	4a09      	ldr	r2, [pc, #36]	; (800ceec <prvAddCurrentTaskToDelayedList+0xc8>)
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	6013      	str	r3, [r2, #0]
}
 800ceca:	bf00      	nop
 800cecc:	3710      	adds	r7, #16
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}
 800ced2:	bf00      	nop
 800ced4:	200020f8 	.word	0x200020f8
 800ced8:	20001f40 	.word	0x20001f40
 800cedc:	200020fc 	.word	0x200020fc
 800cee0:	200020e0 	.word	0x200020e0
 800cee4:	200020b0 	.word	0x200020b0
 800cee8:	200020ac 	.word	0x200020ac
 800ceec:	20002114 	.word	0x20002114

0800cef0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b084      	sub	sp, #16
 800cef4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800cef6:	2300      	movs	r3, #0
 800cef8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cefa:	f000 fad5 	bl	800d4a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cefe:	4b11      	ldr	r3, [pc, #68]	; (800cf44 <xTimerCreateTimerTask+0x54>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d00b      	beq.n	800cf1e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800cf06:	4b10      	ldr	r3, [pc, #64]	; (800cf48 <xTimerCreateTimerTask+0x58>)
 800cf08:	9301      	str	r3, [sp, #4]
 800cf0a:	2302      	movs	r3, #2
 800cf0c:	9300      	str	r3, [sp, #0]
 800cf0e:	2300      	movs	r3, #0
 800cf10:	f44f 7282 	mov.w	r2, #260	; 0x104
 800cf14:	490d      	ldr	r1, [pc, #52]	; (800cf4c <xTimerCreateTimerTask+0x5c>)
 800cf16:	480e      	ldr	r0, [pc, #56]	; (800cf50 <xTimerCreateTimerTask+0x60>)
 800cf18:	f7ff f966 	bl	800c1e8 <xTaskCreate>
 800cf1c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d10a      	bne.n	800cf3a <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800cf24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf28:	f383 8811 	msr	BASEPRI, r3
 800cf2c:	f3bf 8f6f 	isb	sy
 800cf30:	f3bf 8f4f 	dsb	sy
 800cf34:	603b      	str	r3, [r7, #0]
}
 800cf36:	bf00      	nop
 800cf38:	e7fe      	b.n	800cf38 <xTimerCreateTimerTask+0x48>
	return xReturn;
 800cf3a:	687b      	ldr	r3, [r7, #4]
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3708      	adds	r7, #8
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}
 800cf44:	20002150 	.word	0x20002150
 800cf48:	20002154 	.word	0x20002154
 800cf4c:	0800ea30 	.word	0x0800ea30
 800cf50:	0800d089 	.word	0x0800d089

0800cf54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b08a      	sub	sp, #40	; 0x28
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	60f8      	str	r0, [r7, #12]
 800cf5c:	60b9      	str	r1, [r7, #8]
 800cf5e:	607a      	str	r2, [r7, #4]
 800cf60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cf62:	2300      	movs	r3, #0
 800cf64:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d10a      	bne.n	800cf82 <xTimerGenericCommand+0x2e>
	__asm volatile
 800cf6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf70:	f383 8811 	msr	BASEPRI, r3
 800cf74:	f3bf 8f6f 	isb	sy
 800cf78:	f3bf 8f4f 	dsb	sy
 800cf7c:	623b      	str	r3, [r7, #32]
}
 800cf7e:	bf00      	nop
 800cf80:	e7fe      	b.n	800cf80 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cf82:	4b1a      	ldr	r3, [pc, #104]	; (800cfec <xTimerGenericCommand+0x98>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d02a      	beq.n	800cfe0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	2b05      	cmp	r3, #5
 800cf9a:	dc18      	bgt.n	800cfce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cf9c:	f7ff fe9e 	bl	800ccdc <xTaskGetSchedulerState>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	2b02      	cmp	r3, #2
 800cfa4:	d109      	bne.n	800cfba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cfa6:	4b11      	ldr	r3, [pc, #68]	; (800cfec <xTimerGenericCommand+0x98>)
 800cfa8:	6818      	ldr	r0, [r3, #0]
 800cfaa:	f107 0114 	add.w	r1, r7, #20
 800cfae:	2300      	movs	r3, #0
 800cfb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfb2:	f7fe fd35 	bl	800ba20 <xQueueGenericSend>
 800cfb6:	6278      	str	r0, [r7, #36]	; 0x24
 800cfb8:	e012      	b.n	800cfe0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cfba:	4b0c      	ldr	r3, [pc, #48]	; (800cfec <xTimerGenericCommand+0x98>)
 800cfbc:	6818      	ldr	r0, [r3, #0]
 800cfbe:	f107 0114 	add.w	r1, r7, #20
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	f7fe fd2b 	bl	800ba20 <xQueueGenericSend>
 800cfca:	6278      	str	r0, [r7, #36]	; 0x24
 800cfcc:	e008      	b.n	800cfe0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cfce:	4b07      	ldr	r3, [pc, #28]	; (800cfec <xTimerGenericCommand+0x98>)
 800cfd0:	6818      	ldr	r0, [r3, #0]
 800cfd2:	f107 0114 	add.w	r1, r7, #20
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	683a      	ldr	r2, [r7, #0]
 800cfda:	f7fe fe1f 	bl	800bc1c <xQueueGenericSendFromISR>
 800cfde:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3728      	adds	r7, #40	; 0x28
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	20002150 	.word	0x20002150

0800cff0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b088      	sub	sp, #32
 800cff4:	af02      	add	r7, sp, #8
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cffa:	4b22      	ldr	r3, [pc, #136]	; (800d084 <prvProcessExpiredTimer+0x94>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	68db      	ldr	r3, [r3, #12]
 800d000:	68db      	ldr	r3, [r3, #12]
 800d002:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	3304      	adds	r3, #4
 800d008:	4618      	mov	r0, r3
 800d00a:	f7fe fc17 	bl	800b83c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d014:	f003 0304 	and.w	r3, r3, #4
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d022      	beq.n	800d062 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	699a      	ldr	r2, [r3, #24]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	18d1      	adds	r1, r2, r3
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	683a      	ldr	r2, [r7, #0]
 800d028:	6978      	ldr	r0, [r7, #20]
 800d02a:	f000 f8d1 	bl	800d1d0 <prvInsertTimerInActiveList>
 800d02e:	4603      	mov	r3, r0
 800d030:	2b00      	cmp	r3, #0
 800d032:	d01f      	beq.n	800d074 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d034:	2300      	movs	r3, #0
 800d036:	9300      	str	r3, [sp, #0]
 800d038:	2300      	movs	r3, #0
 800d03a:	687a      	ldr	r2, [r7, #4]
 800d03c:	2100      	movs	r1, #0
 800d03e:	6978      	ldr	r0, [r7, #20]
 800d040:	f7ff ff88 	bl	800cf54 <xTimerGenericCommand>
 800d044:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d113      	bne.n	800d074 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d050:	f383 8811 	msr	BASEPRI, r3
 800d054:	f3bf 8f6f 	isb	sy
 800d058:	f3bf 8f4f 	dsb	sy
 800d05c:	60fb      	str	r3, [r7, #12]
}
 800d05e:	bf00      	nop
 800d060:	e7fe      	b.n	800d060 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d068:	f023 0301 	bic.w	r3, r3, #1
 800d06c:	b2da      	uxtb	r2, r3
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	6a1b      	ldr	r3, [r3, #32]
 800d078:	6978      	ldr	r0, [r7, #20]
 800d07a:	4798      	blx	r3
}
 800d07c:	bf00      	nop
 800d07e:	3718      	adds	r7, #24
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}
 800d084:	20002148 	.word	0x20002148

0800d088 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d090:	f107 0308 	add.w	r3, r7, #8
 800d094:	4618      	mov	r0, r3
 800d096:	f000 f857 	bl	800d148 <prvGetNextExpireTime>
 800d09a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	4619      	mov	r1, r3
 800d0a0:	68f8      	ldr	r0, [r7, #12]
 800d0a2:	f000 f803 	bl	800d0ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d0a6:	f000 f8d5 	bl	800d254 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d0aa:	e7f1      	b.n	800d090 <prvTimerTask+0x8>

0800d0ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b084      	sub	sp, #16
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d0b6:	f7ff fa57 	bl	800c568 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d0ba:	f107 0308 	add.w	r3, r7, #8
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f000 f866 	bl	800d190 <prvSampleTimeNow>
 800d0c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d130      	bne.n	800d12e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d10a      	bne.n	800d0e8 <prvProcessTimerOrBlockTask+0x3c>
 800d0d2:	687a      	ldr	r2, [r7, #4]
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	d806      	bhi.n	800d0e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d0da:	f7ff fa53 	bl	800c584 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d0de:	68f9      	ldr	r1, [r7, #12]
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f7ff ff85 	bl	800cff0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d0e6:	e024      	b.n	800d132 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d008      	beq.n	800d100 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d0ee:	4b13      	ldr	r3, [pc, #76]	; (800d13c <prvProcessTimerOrBlockTask+0x90>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d101      	bne.n	800d0fc <prvProcessTimerOrBlockTask+0x50>
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	e000      	b.n	800d0fe <prvProcessTimerOrBlockTask+0x52>
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d100:	4b0f      	ldr	r3, [pc, #60]	; (800d140 <prvProcessTimerOrBlockTask+0x94>)
 800d102:	6818      	ldr	r0, [r3, #0]
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	1ad3      	subs	r3, r2, r3
 800d10a:	683a      	ldr	r2, [r7, #0]
 800d10c:	4619      	mov	r1, r3
 800d10e:	f7ff f837 	bl	800c180 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d112:	f7ff fa37 	bl	800c584 <xTaskResumeAll>
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d10a      	bne.n	800d132 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d11c:	4b09      	ldr	r3, [pc, #36]	; (800d144 <prvProcessTimerOrBlockTask+0x98>)
 800d11e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d122:	601a      	str	r2, [r3, #0]
 800d124:	f3bf 8f4f 	dsb	sy
 800d128:	f3bf 8f6f 	isb	sy
}
 800d12c:	e001      	b.n	800d132 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d12e:	f7ff fa29 	bl	800c584 <xTaskResumeAll>
}
 800d132:	bf00      	nop
 800d134:	3710      	adds	r7, #16
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop
 800d13c:	2000214c 	.word	0x2000214c
 800d140:	20002150 	.word	0x20002150
 800d144:	e000ed04 	.word	0xe000ed04

0800d148 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d148:	b480      	push	{r7}
 800d14a:	b085      	sub	sp, #20
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d150:	4b0e      	ldr	r3, [pc, #56]	; (800d18c <prvGetNextExpireTime+0x44>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d101      	bne.n	800d15e <prvGetNextExpireTime+0x16>
 800d15a:	2201      	movs	r2, #1
 800d15c:	e000      	b.n	800d160 <prvGetNextExpireTime+0x18>
 800d15e:	2200      	movs	r2, #0
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d105      	bne.n	800d178 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d16c:	4b07      	ldr	r3, [pc, #28]	; (800d18c <prvGetNextExpireTime+0x44>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	60fb      	str	r3, [r7, #12]
 800d176:	e001      	b.n	800d17c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d178:	2300      	movs	r3, #0
 800d17a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d17c:	68fb      	ldr	r3, [r7, #12]
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3714      	adds	r7, #20
 800d182:	46bd      	mov	sp, r7
 800d184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d188:	4770      	bx	lr
 800d18a:	bf00      	nop
 800d18c:	20002148 	.word	0x20002148

0800d190 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b084      	sub	sp, #16
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d198:	f7ff fa90 	bl	800c6bc <xTaskGetTickCount>
 800d19c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d19e:	4b0b      	ldr	r3, [pc, #44]	; (800d1cc <prvSampleTimeNow+0x3c>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	68fa      	ldr	r2, [r7, #12]
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d205      	bcs.n	800d1b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d1a8:	f000 f91a 	bl	800d3e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	601a      	str	r2, [r3, #0]
 800d1b2:	e002      	b.n	800d1ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d1ba:	4a04      	ldr	r2, [pc, #16]	; (800d1cc <prvSampleTimeNow+0x3c>)
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3710      	adds	r7, #16
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
 800d1ca:	bf00      	nop
 800d1cc:	20002158 	.word	0x20002158

0800d1d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b086      	sub	sp, #24
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	60f8      	str	r0, [r7, #12]
 800d1d8:	60b9      	str	r1, [r7, #8]
 800d1da:	607a      	str	r2, [r7, #4]
 800d1dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	68ba      	ldr	r2, [r7, #8]
 800d1e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	68fa      	ldr	r2, [r7, #12]
 800d1ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d1ee:	68ba      	ldr	r2, [r7, #8]
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d812      	bhi.n	800d21c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1f6:	687a      	ldr	r2, [r7, #4]
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	1ad2      	subs	r2, r2, r3
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	699b      	ldr	r3, [r3, #24]
 800d200:	429a      	cmp	r2, r3
 800d202:	d302      	bcc.n	800d20a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d204:	2301      	movs	r3, #1
 800d206:	617b      	str	r3, [r7, #20]
 800d208:	e01b      	b.n	800d242 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d20a:	4b10      	ldr	r3, [pc, #64]	; (800d24c <prvInsertTimerInActiveList+0x7c>)
 800d20c:	681a      	ldr	r2, [r3, #0]
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	3304      	adds	r3, #4
 800d212:	4619      	mov	r1, r3
 800d214:	4610      	mov	r0, r2
 800d216:	f7fe fad8 	bl	800b7ca <vListInsert>
 800d21a:	e012      	b.n	800d242 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	429a      	cmp	r2, r3
 800d222:	d206      	bcs.n	800d232 <prvInsertTimerInActiveList+0x62>
 800d224:	68ba      	ldr	r2, [r7, #8]
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	429a      	cmp	r2, r3
 800d22a:	d302      	bcc.n	800d232 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d22c:	2301      	movs	r3, #1
 800d22e:	617b      	str	r3, [r7, #20]
 800d230:	e007      	b.n	800d242 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d232:	4b07      	ldr	r3, [pc, #28]	; (800d250 <prvInsertTimerInActiveList+0x80>)
 800d234:	681a      	ldr	r2, [r3, #0]
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	3304      	adds	r3, #4
 800d23a:	4619      	mov	r1, r3
 800d23c:	4610      	mov	r0, r2
 800d23e:	f7fe fac4 	bl	800b7ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d242:	697b      	ldr	r3, [r7, #20]
}
 800d244:	4618      	mov	r0, r3
 800d246:	3718      	adds	r7, #24
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}
 800d24c:	2000214c 	.word	0x2000214c
 800d250:	20002148 	.word	0x20002148

0800d254 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b08c      	sub	sp, #48	; 0x30
 800d258:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d25a:	e0ae      	b.n	800d3ba <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	f2c0 80aa 	blt.w	800d3b8 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d26a:	695b      	ldr	r3, [r3, #20]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d004      	beq.n	800d27a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d272:	3304      	adds	r3, #4
 800d274:	4618      	mov	r0, r3
 800d276:	f7fe fae1 	bl	800b83c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d27a:	1d3b      	adds	r3, r7, #4
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7ff ff87 	bl	800d190 <prvSampleTimeNow>
 800d282:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	2b09      	cmp	r3, #9
 800d288:	f200 8097 	bhi.w	800d3ba <prvProcessReceivedCommands+0x166>
 800d28c:	a201      	add	r2, pc, #4	; (adr r2, 800d294 <prvProcessReceivedCommands+0x40>)
 800d28e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d292:	bf00      	nop
 800d294:	0800d2bd 	.word	0x0800d2bd
 800d298:	0800d2bd 	.word	0x0800d2bd
 800d29c:	0800d2bd 	.word	0x0800d2bd
 800d2a0:	0800d331 	.word	0x0800d331
 800d2a4:	0800d345 	.word	0x0800d345
 800d2a8:	0800d38f 	.word	0x0800d38f
 800d2ac:	0800d2bd 	.word	0x0800d2bd
 800d2b0:	0800d2bd 	.word	0x0800d2bd
 800d2b4:	0800d331 	.word	0x0800d331
 800d2b8:	0800d345 	.word	0x0800d345
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2c2:	f043 0301 	orr.w	r3, r3, #1
 800d2c6:	b2da      	uxtb	r2, r3
 800d2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d2ce:	68fa      	ldr	r2, [r7, #12]
 800d2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d2:	699b      	ldr	r3, [r3, #24]
 800d2d4:	18d1      	adds	r1, r2, r3
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	6a3a      	ldr	r2, [r7, #32]
 800d2da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2dc:	f7ff ff78 	bl	800d1d0 <prvInsertTimerInActiveList>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d069      	beq.n	800d3ba <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e8:	6a1b      	ldr	r3, [r3, #32]
 800d2ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2f4:	f003 0304 	and.w	r3, r3, #4
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d05e      	beq.n	800d3ba <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d2fc:	68fa      	ldr	r2, [r7, #12]
 800d2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d300:	699b      	ldr	r3, [r3, #24]
 800d302:	441a      	add	r2, r3
 800d304:	2300      	movs	r3, #0
 800d306:	9300      	str	r3, [sp, #0]
 800d308:	2300      	movs	r3, #0
 800d30a:	2100      	movs	r1, #0
 800d30c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d30e:	f7ff fe21 	bl	800cf54 <xTimerGenericCommand>
 800d312:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800d314:	69fb      	ldr	r3, [r7, #28]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d14f      	bne.n	800d3ba <prvProcessReceivedCommands+0x166>
	__asm volatile
 800d31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31e:	f383 8811 	msr	BASEPRI, r3
 800d322:	f3bf 8f6f 	isb	sy
 800d326:	f3bf 8f4f 	dsb	sy
 800d32a:	61bb      	str	r3, [r7, #24]
}
 800d32c:	bf00      	nop
 800d32e:	e7fe      	b.n	800d32e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d332:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d336:	f023 0301 	bic.w	r3, r3, #1
 800d33a:	b2da      	uxtb	r2, r3
 800d33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d342:	e03a      	b.n	800d3ba <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d346:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d34a:	f043 0301 	orr.w	r3, r3, #1
 800d34e:	b2da      	uxtb	r2, r3
 800d350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d352:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d356:	68fa      	ldr	r2, [r7, #12]
 800d358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d35a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d35e:	699b      	ldr	r3, [r3, #24]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d10a      	bne.n	800d37a <prvProcessReceivedCommands+0x126>
	__asm volatile
 800d364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d368:	f383 8811 	msr	BASEPRI, r3
 800d36c:	f3bf 8f6f 	isb	sy
 800d370:	f3bf 8f4f 	dsb	sy
 800d374:	617b      	str	r3, [r7, #20]
}
 800d376:	bf00      	nop
 800d378:	e7fe      	b.n	800d378 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37c:	699a      	ldr	r2, [r3, #24]
 800d37e:	6a3b      	ldr	r3, [r7, #32]
 800d380:	18d1      	adds	r1, r2, r3
 800d382:	6a3b      	ldr	r3, [r7, #32]
 800d384:	6a3a      	ldr	r2, [r7, #32]
 800d386:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d388:	f7ff ff22 	bl	800d1d0 <prvInsertTimerInActiveList>
					break;
 800d38c:	e015      	b.n	800d3ba <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d390:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d394:	f003 0302 	and.w	r3, r3, #2
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d103      	bne.n	800d3a4 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800d39c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d39e:	f000 fbcf 	bl	800db40 <vPortFree>
 800d3a2:	e00a      	b.n	800d3ba <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3aa:	f023 0301 	bic.w	r3, r3, #1
 800d3ae:	b2da      	uxtb	r2, r3
 800d3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d3b6:	e000      	b.n	800d3ba <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d3b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d3ba:	4b08      	ldr	r3, [pc, #32]	; (800d3dc <prvProcessReceivedCommands+0x188>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	f107 0108 	add.w	r1, r7, #8
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7fe fcc1 	bl	800bd4c <xQueueReceive>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	f47f af45 	bne.w	800d25c <prvProcessReceivedCommands+0x8>
	}
}
 800d3d2:	bf00      	nop
 800d3d4:	bf00      	nop
 800d3d6:	3728      	adds	r7, #40	; 0x28
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}
 800d3dc:	20002150 	.word	0x20002150

0800d3e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b088      	sub	sp, #32
 800d3e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d3e6:	e048      	b.n	800d47a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d3e8:	4b2d      	ldr	r3, [pc, #180]	; (800d4a0 <prvSwitchTimerLists+0xc0>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	68db      	ldr	r3, [r3, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3f2:	4b2b      	ldr	r3, [pc, #172]	; (800d4a0 <prvSwitchTimerLists+0xc0>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	68db      	ldr	r3, [r3, #12]
 800d3f8:	68db      	ldr	r3, [r3, #12]
 800d3fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	3304      	adds	r3, #4
 800d400:	4618      	mov	r0, r3
 800d402:	f7fe fa1b 	bl	800b83c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	6a1b      	ldr	r3, [r3, #32]
 800d40a:	68f8      	ldr	r0, [r7, #12]
 800d40c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d414:	f003 0304 	and.w	r3, r3, #4
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d02e      	beq.n	800d47a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	699b      	ldr	r3, [r3, #24]
 800d420:	693a      	ldr	r2, [r7, #16]
 800d422:	4413      	add	r3, r2
 800d424:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d426:	68ba      	ldr	r2, [r7, #8]
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d90e      	bls.n	800d44c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	68ba      	ldr	r2, [r7, #8]
 800d432:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	68fa      	ldr	r2, [r7, #12]
 800d438:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d43a:	4b19      	ldr	r3, [pc, #100]	; (800d4a0 <prvSwitchTimerLists+0xc0>)
 800d43c:	681a      	ldr	r2, [r3, #0]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	3304      	adds	r3, #4
 800d442:	4619      	mov	r1, r3
 800d444:	4610      	mov	r0, r2
 800d446:	f7fe f9c0 	bl	800b7ca <vListInsert>
 800d44a:	e016      	b.n	800d47a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d44c:	2300      	movs	r3, #0
 800d44e:	9300      	str	r3, [sp, #0]
 800d450:	2300      	movs	r3, #0
 800d452:	693a      	ldr	r2, [r7, #16]
 800d454:	2100      	movs	r1, #0
 800d456:	68f8      	ldr	r0, [r7, #12]
 800d458:	f7ff fd7c 	bl	800cf54 <xTimerGenericCommand>
 800d45c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d10a      	bne.n	800d47a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d468:	f383 8811 	msr	BASEPRI, r3
 800d46c:	f3bf 8f6f 	isb	sy
 800d470:	f3bf 8f4f 	dsb	sy
 800d474:	603b      	str	r3, [r7, #0]
}
 800d476:	bf00      	nop
 800d478:	e7fe      	b.n	800d478 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d47a:	4b09      	ldr	r3, [pc, #36]	; (800d4a0 <prvSwitchTimerLists+0xc0>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d1b1      	bne.n	800d3e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d484:	4b06      	ldr	r3, [pc, #24]	; (800d4a0 <prvSwitchTimerLists+0xc0>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d48a:	4b06      	ldr	r3, [pc, #24]	; (800d4a4 <prvSwitchTimerLists+0xc4>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	4a04      	ldr	r2, [pc, #16]	; (800d4a0 <prvSwitchTimerLists+0xc0>)
 800d490:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d492:	4a04      	ldr	r2, [pc, #16]	; (800d4a4 <prvSwitchTimerLists+0xc4>)
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	6013      	str	r3, [r2, #0]
}
 800d498:	bf00      	nop
 800d49a:	3718      	adds	r7, #24
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}
 800d4a0:	20002148 	.word	0x20002148
 800d4a4:	2000214c 	.word	0x2000214c

0800d4a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d4ac:	f000 f962 	bl	800d774 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d4b0:	4b12      	ldr	r3, [pc, #72]	; (800d4fc <prvCheckForValidListAndQueue+0x54>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d11d      	bne.n	800d4f4 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800d4b8:	4811      	ldr	r0, [pc, #68]	; (800d500 <prvCheckForValidListAndQueue+0x58>)
 800d4ba:	f7fe f935 	bl	800b728 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d4be:	4811      	ldr	r0, [pc, #68]	; (800d504 <prvCheckForValidListAndQueue+0x5c>)
 800d4c0:	f7fe f932 	bl	800b728 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d4c4:	4b10      	ldr	r3, [pc, #64]	; (800d508 <prvCheckForValidListAndQueue+0x60>)
 800d4c6:	4a0e      	ldr	r2, [pc, #56]	; (800d500 <prvCheckForValidListAndQueue+0x58>)
 800d4c8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d4ca:	4b10      	ldr	r3, [pc, #64]	; (800d50c <prvCheckForValidListAndQueue+0x64>)
 800d4cc:	4a0d      	ldr	r2, [pc, #52]	; (800d504 <prvCheckForValidListAndQueue+0x5c>)
 800d4ce:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	210c      	movs	r1, #12
 800d4d4:	200a      	movs	r0, #10
 800d4d6:	f7fe fa43 	bl	800b960 <xQueueGenericCreate>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	4a07      	ldr	r2, [pc, #28]	; (800d4fc <prvCheckForValidListAndQueue+0x54>)
 800d4de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d4e0:	4b06      	ldr	r3, [pc, #24]	; (800d4fc <prvCheckForValidListAndQueue+0x54>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d005      	beq.n	800d4f4 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d4e8:	4b04      	ldr	r3, [pc, #16]	; (800d4fc <prvCheckForValidListAndQueue+0x54>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	4908      	ldr	r1, [pc, #32]	; (800d510 <prvCheckForValidListAndQueue+0x68>)
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7fe fe1c 	bl	800c12c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d4f4:	f000 f96e 	bl	800d7d4 <vPortExitCritical>
}
 800d4f8:	bf00      	nop
 800d4fa:	bd80      	pop	{r7, pc}
 800d4fc:	20002150 	.word	0x20002150
 800d500:	20002120 	.word	0x20002120
 800d504:	20002134 	.word	0x20002134
 800d508:	20002148 	.word	0x20002148
 800d50c:	2000214c 	.word	0x2000214c
 800d510:	0800ea38 	.word	0x0800ea38

0800d514 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d514:	b480      	push	{r7}
 800d516:	b085      	sub	sp, #20
 800d518:	af00      	add	r7, sp, #0
 800d51a:	60f8      	str	r0, [r7, #12]
 800d51c:	60b9      	str	r1, [r7, #8]
 800d51e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	3b04      	subs	r3, #4
 800d524:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d52c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	3b04      	subs	r3, #4
 800d532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	f023 0201 	bic.w	r2, r3, #1
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	3b04      	subs	r3, #4
 800d542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d544:	4a0c      	ldr	r2, [pc, #48]	; (800d578 <pxPortInitialiseStack+0x64>)
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	3b14      	subs	r3, #20
 800d54e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d550:	687a      	ldr	r2, [r7, #4]
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	3b04      	subs	r3, #4
 800d55a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	f06f 0202 	mvn.w	r2, #2
 800d562:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	3b20      	subs	r3, #32
 800d568:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d56a:	68fb      	ldr	r3, [r7, #12]
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3714      	adds	r7, #20
 800d570:	46bd      	mov	sp, r7
 800d572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d576:	4770      	bx	lr
 800d578:	0800d57d 	.word	0x0800d57d

0800d57c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d57c:	b480      	push	{r7}
 800d57e:	b085      	sub	sp, #20
 800d580:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d582:	2300      	movs	r3, #0
 800d584:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d586:	4b12      	ldr	r3, [pc, #72]	; (800d5d0 <prvTaskExitError+0x54>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d58e:	d00a      	beq.n	800d5a6 <prvTaskExitError+0x2a>
	__asm volatile
 800d590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d594:	f383 8811 	msr	BASEPRI, r3
 800d598:	f3bf 8f6f 	isb	sy
 800d59c:	f3bf 8f4f 	dsb	sy
 800d5a0:	60fb      	str	r3, [r7, #12]
}
 800d5a2:	bf00      	nop
 800d5a4:	e7fe      	b.n	800d5a4 <prvTaskExitError+0x28>
	__asm volatile
 800d5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5aa:	f383 8811 	msr	BASEPRI, r3
 800d5ae:	f3bf 8f6f 	isb	sy
 800d5b2:	f3bf 8f4f 	dsb	sy
 800d5b6:	60bb      	str	r3, [r7, #8]
}
 800d5b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d5ba:	bf00      	nop
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d0fc      	beq.n	800d5bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d5c2:	bf00      	nop
 800d5c4:	bf00      	nop
 800d5c6:	3714      	adds	r7, #20
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ce:	4770      	bx	lr
 800d5d0:	20000080 	.word	0x20000080
	...

0800d5e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d5e0:	4b07      	ldr	r3, [pc, #28]	; (800d600 <pxCurrentTCBConst2>)
 800d5e2:	6819      	ldr	r1, [r3, #0]
 800d5e4:	6808      	ldr	r0, [r1, #0]
 800d5e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ea:	f380 8809 	msr	PSP, r0
 800d5ee:	f3bf 8f6f 	isb	sy
 800d5f2:	f04f 0000 	mov.w	r0, #0
 800d5f6:	f380 8811 	msr	BASEPRI, r0
 800d5fa:	4770      	bx	lr
 800d5fc:	f3af 8000 	nop.w

0800d600 <pxCurrentTCBConst2>:
 800d600:	20001f40 	.word	0x20001f40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d604:	bf00      	nop
 800d606:	bf00      	nop

0800d608 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d608:	4808      	ldr	r0, [pc, #32]	; (800d62c <prvPortStartFirstTask+0x24>)
 800d60a:	6800      	ldr	r0, [r0, #0]
 800d60c:	6800      	ldr	r0, [r0, #0]
 800d60e:	f380 8808 	msr	MSP, r0
 800d612:	f04f 0000 	mov.w	r0, #0
 800d616:	f380 8814 	msr	CONTROL, r0
 800d61a:	b662      	cpsie	i
 800d61c:	b661      	cpsie	f
 800d61e:	f3bf 8f4f 	dsb	sy
 800d622:	f3bf 8f6f 	isb	sy
 800d626:	df00      	svc	0
 800d628:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d62a:	bf00      	nop
 800d62c:	e000ed08 	.word	0xe000ed08

0800d630 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b086      	sub	sp, #24
 800d634:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d636:	4b46      	ldr	r3, [pc, #280]	; (800d750 <xPortStartScheduler+0x120>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4a46      	ldr	r2, [pc, #280]	; (800d754 <xPortStartScheduler+0x124>)
 800d63c:	4293      	cmp	r3, r2
 800d63e:	d10a      	bne.n	800d656 <xPortStartScheduler+0x26>
	__asm volatile
 800d640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d644:	f383 8811 	msr	BASEPRI, r3
 800d648:	f3bf 8f6f 	isb	sy
 800d64c:	f3bf 8f4f 	dsb	sy
 800d650:	613b      	str	r3, [r7, #16]
}
 800d652:	bf00      	nop
 800d654:	e7fe      	b.n	800d654 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d656:	4b3e      	ldr	r3, [pc, #248]	; (800d750 <xPortStartScheduler+0x120>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	4a3f      	ldr	r2, [pc, #252]	; (800d758 <xPortStartScheduler+0x128>)
 800d65c:	4293      	cmp	r3, r2
 800d65e:	d10a      	bne.n	800d676 <xPortStartScheduler+0x46>
	__asm volatile
 800d660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d664:	f383 8811 	msr	BASEPRI, r3
 800d668:	f3bf 8f6f 	isb	sy
 800d66c:	f3bf 8f4f 	dsb	sy
 800d670:	60fb      	str	r3, [r7, #12]
}
 800d672:	bf00      	nop
 800d674:	e7fe      	b.n	800d674 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d676:	4b39      	ldr	r3, [pc, #228]	; (800d75c <xPortStartScheduler+0x12c>)
 800d678:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	781b      	ldrb	r3, [r3, #0]
 800d67e:	b2db      	uxtb	r3, r3
 800d680:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	22ff      	movs	r2, #255	; 0xff
 800d686:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	b2db      	uxtb	r3, r3
 800d68e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d690:	78fb      	ldrb	r3, [r7, #3]
 800d692:	b2db      	uxtb	r3, r3
 800d694:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d698:	b2da      	uxtb	r2, r3
 800d69a:	4b31      	ldr	r3, [pc, #196]	; (800d760 <xPortStartScheduler+0x130>)
 800d69c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d69e:	4b31      	ldr	r3, [pc, #196]	; (800d764 <xPortStartScheduler+0x134>)
 800d6a0:	2207      	movs	r2, #7
 800d6a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d6a4:	e009      	b.n	800d6ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d6a6:	4b2f      	ldr	r3, [pc, #188]	; (800d764 <xPortStartScheduler+0x134>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	3b01      	subs	r3, #1
 800d6ac:	4a2d      	ldr	r2, [pc, #180]	; (800d764 <xPortStartScheduler+0x134>)
 800d6ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d6b0:	78fb      	ldrb	r3, [r7, #3]
 800d6b2:	b2db      	uxtb	r3, r3
 800d6b4:	005b      	lsls	r3, r3, #1
 800d6b6:	b2db      	uxtb	r3, r3
 800d6b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d6ba:	78fb      	ldrb	r3, [r7, #3]
 800d6bc:	b2db      	uxtb	r3, r3
 800d6be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6c2:	2b80      	cmp	r3, #128	; 0x80
 800d6c4:	d0ef      	beq.n	800d6a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d6c6:	4b27      	ldr	r3, [pc, #156]	; (800d764 <xPortStartScheduler+0x134>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f1c3 0307 	rsb	r3, r3, #7
 800d6ce:	2b04      	cmp	r3, #4
 800d6d0:	d00a      	beq.n	800d6e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d6:	f383 8811 	msr	BASEPRI, r3
 800d6da:	f3bf 8f6f 	isb	sy
 800d6de:	f3bf 8f4f 	dsb	sy
 800d6e2:	60bb      	str	r3, [r7, #8]
}
 800d6e4:	bf00      	nop
 800d6e6:	e7fe      	b.n	800d6e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d6e8:	4b1e      	ldr	r3, [pc, #120]	; (800d764 <xPortStartScheduler+0x134>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	021b      	lsls	r3, r3, #8
 800d6ee:	4a1d      	ldr	r2, [pc, #116]	; (800d764 <xPortStartScheduler+0x134>)
 800d6f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d6f2:	4b1c      	ldr	r3, [pc, #112]	; (800d764 <xPortStartScheduler+0x134>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d6fa:	4a1a      	ldr	r2, [pc, #104]	; (800d764 <xPortStartScheduler+0x134>)
 800d6fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	b2da      	uxtb	r2, r3
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d706:	4b18      	ldr	r3, [pc, #96]	; (800d768 <xPortStartScheduler+0x138>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	4a17      	ldr	r2, [pc, #92]	; (800d768 <xPortStartScheduler+0x138>)
 800d70c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d710:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d712:	4b15      	ldr	r3, [pc, #84]	; (800d768 <xPortStartScheduler+0x138>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	4a14      	ldr	r2, [pc, #80]	; (800d768 <xPortStartScheduler+0x138>)
 800d718:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d71c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d71e:	f000 f8dd 	bl	800d8dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d722:	4b12      	ldr	r3, [pc, #72]	; (800d76c <xPortStartScheduler+0x13c>)
 800d724:	2200      	movs	r2, #0
 800d726:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d728:	f000 f8fc 	bl	800d924 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d72c:	4b10      	ldr	r3, [pc, #64]	; (800d770 <xPortStartScheduler+0x140>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4a0f      	ldr	r2, [pc, #60]	; (800d770 <xPortStartScheduler+0x140>)
 800d732:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d736:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d738:	f7ff ff66 	bl	800d608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d73c:	f7ff f886 	bl	800c84c <vTaskSwitchContext>
	prvTaskExitError();
 800d740:	f7ff ff1c 	bl	800d57c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d744:	2300      	movs	r3, #0
}
 800d746:	4618      	mov	r0, r3
 800d748:	3718      	adds	r7, #24
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
 800d74e:	bf00      	nop
 800d750:	e000ed00 	.word	0xe000ed00
 800d754:	410fc271 	.word	0x410fc271
 800d758:	410fc270 	.word	0x410fc270
 800d75c:	e000e400 	.word	0xe000e400
 800d760:	2000215c 	.word	0x2000215c
 800d764:	20002160 	.word	0x20002160
 800d768:	e000ed20 	.word	0xe000ed20
 800d76c:	20000080 	.word	0x20000080
 800d770:	e000ef34 	.word	0xe000ef34

0800d774 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d774:	b480      	push	{r7}
 800d776:	b083      	sub	sp, #12
 800d778:	af00      	add	r7, sp, #0
	__asm volatile
 800d77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d77e:	f383 8811 	msr	BASEPRI, r3
 800d782:	f3bf 8f6f 	isb	sy
 800d786:	f3bf 8f4f 	dsb	sy
 800d78a:	607b      	str	r3, [r7, #4]
}
 800d78c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d78e:	4b0f      	ldr	r3, [pc, #60]	; (800d7cc <vPortEnterCritical+0x58>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	3301      	adds	r3, #1
 800d794:	4a0d      	ldr	r2, [pc, #52]	; (800d7cc <vPortEnterCritical+0x58>)
 800d796:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d798:	4b0c      	ldr	r3, [pc, #48]	; (800d7cc <vPortEnterCritical+0x58>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	2b01      	cmp	r3, #1
 800d79e:	d10f      	bne.n	800d7c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d7a0:	4b0b      	ldr	r3, [pc, #44]	; (800d7d0 <vPortEnterCritical+0x5c>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	b2db      	uxtb	r3, r3
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d00a      	beq.n	800d7c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ae:	f383 8811 	msr	BASEPRI, r3
 800d7b2:	f3bf 8f6f 	isb	sy
 800d7b6:	f3bf 8f4f 	dsb	sy
 800d7ba:	603b      	str	r3, [r7, #0]
}
 800d7bc:	bf00      	nop
 800d7be:	e7fe      	b.n	800d7be <vPortEnterCritical+0x4a>
	}
}
 800d7c0:	bf00      	nop
 800d7c2:	370c      	adds	r7, #12
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr
 800d7cc:	20000080 	.word	0x20000080
 800d7d0:	e000ed04 	.word	0xe000ed04

0800d7d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d7da:	4b12      	ldr	r3, [pc, #72]	; (800d824 <vPortExitCritical+0x50>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d10a      	bne.n	800d7f8 <vPortExitCritical+0x24>
	__asm volatile
 800d7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e6:	f383 8811 	msr	BASEPRI, r3
 800d7ea:	f3bf 8f6f 	isb	sy
 800d7ee:	f3bf 8f4f 	dsb	sy
 800d7f2:	607b      	str	r3, [r7, #4]
}
 800d7f4:	bf00      	nop
 800d7f6:	e7fe      	b.n	800d7f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d7f8:	4b0a      	ldr	r3, [pc, #40]	; (800d824 <vPortExitCritical+0x50>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	3b01      	subs	r3, #1
 800d7fe:	4a09      	ldr	r2, [pc, #36]	; (800d824 <vPortExitCritical+0x50>)
 800d800:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d802:	4b08      	ldr	r3, [pc, #32]	; (800d824 <vPortExitCritical+0x50>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d105      	bne.n	800d816 <vPortExitCritical+0x42>
 800d80a:	2300      	movs	r3, #0
 800d80c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	f383 8811 	msr	BASEPRI, r3
}
 800d814:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d816:	bf00      	nop
 800d818:	370c      	adds	r7, #12
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr
 800d822:	bf00      	nop
 800d824:	20000080 	.word	0x20000080
	...

0800d830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d830:	f3ef 8009 	mrs	r0, PSP
 800d834:	f3bf 8f6f 	isb	sy
 800d838:	4b15      	ldr	r3, [pc, #84]	; (800d890 <pxCurrentTCBConst>)
 800d83a:	681a      	ldr	r2, [r3, #0]
 800d83c:	f01e 0f10 	tst.w	lr, #16
 800d840:	bf08      	it	eq
 800d842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d84a:	6010      	str	r0, [r2, #0]
 800d84c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d850:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d854:	f380 8811 	msr	BASEPRI, r0
 800d858:	f3bf 8f4f 	dsb	sy
 800d85c:	f3bf 8f6f 	isb	sy
 800d860:	f7fe fff4 	bl	800c84c <vTaskSwitchContext>
 800d864:	f04f 0000 	mov.w	r0, #0
 800d868:	f380 8811 	msr	BASEPRI, r0
 800d86c:	bc09      	pop	{r0, r3}
 800d86e:	6819      	ldr	r1, [r3, #0]
 800d870:	6808      	ldr	r0, [r1, #0]
 800d872:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d876:	f01e 0f10 	tst.w	lr, #16
 800d87a:	bf08      	it	eq
 800d87c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d880:	f380 8809 	msr	PSP, r0
 800d884:	f3bf 8f6f 	isb	sy
 800d888:	4770      	bx	lr
 800d88a:	bf00      	nop
 800d88c:	f3af 8000 	nop.w

0800d890 <pxCurrentTCBConst>:
 800d890:	20001f40 	.word	0x20001f40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d894:	bf00      	nop
 800d896:	bf00      	nop

0800d898 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
	__asm volatile
 800d89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a2:	f383 8811 	msr	BASEPRI, r3
 800d8a6:	f3bf 8f6f 	isb	sy
 800d8aa:	f3bf 8f4f 	dsb	sy
 800d8ae:	607b      	str	r3, [r7, #4]
}
 800d8b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d8b2:	f7fe ff13 	bl	800c6dc <xTaskIncrementTick>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d003      	beq.n	800d8c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d8bc:	4b06      	ldr	r3, [pc, #24]	; (800d8d8 <SysTick_Handler+0x40>)
 800d8be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8c2:	601a      	str	r2, [r3, #0]
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	f383 8811 	msr	BASEPRI, r3
}
 800d8ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d8d0:	bf00      	nop
 800d8d2:	3708      	adds	r7, #8
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}
 800d8d8:	e000ed04 	.word	0xe000ed04

0800d8dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d8dc:	b480      	push	{r7}
 800d8de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d8e0:	4b0b      	ldr	r3, [pc, #44]	; (800d910 <vPortSetupTimerInterrupt+0x34>)
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d8e6:	4b0b      	ldr	r3, [pc, #44]	; (800d914 <vPortSetupTimerInterrupt+0x38>)
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d8ec:	4b0a      	ldr	r3, [pc, #40]	; (800d918 <vPortSetupTimerInterrupt+0x3c>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	4a0a      	ldr	r2, [pc, #40]	; (800d91c <vPortSetupTimerInterrupt+0x40>)
 800d8f2:	fba2 2303 	umull	r2, r3, r2, r3
 800d8f6:	099b      	lsrs	r3, r3, #6
 800d8f8:	4a09      	ldr	r2, [pc, #36]	; (800d920 <vPortSetupTimerInterrupt+0x44>)
 800d8fa:	3b01      	subs	r3, #1
 800d8fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d8fe:	4b04      	ldr	r3, [pc, #16]	; (800d910 <vPortSetupTimerInterrupt+0x34>)
 800d900:	2207      	movs	r2, #7
 800d902:	601a      	str	r2, [r3, #0]
}
 800d904:	bf00      	nop
 800d906:	46bd      	mov	sp, r7
 800d908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90c:	4770      	bx	lr
 800d90e:	bf00      	nop
 800d910:	e000e010 	.word	0xe000e010
 800d914:	e000e018 	.word	0xe000e018
 800d918:	20000058 	.word	0x20000058
 800d91c:	10624dd3 	.word	0x10624dd3
 800d920:	e000e014 	.word	0xe000e014

0800d924 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d924:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d934 <vPortEnableVFP+0x10>
 800d928:	6801      	ldr	r1, [r0, #0]
 800d92a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d92e:	6001      	str	r1, [r0, #0]
 800d930:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d932:	bf00      	nop
 800d934:	e000ed88 	.word	0xe000ed88

0800d938 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d938:	b480      	push	{r7}
 800d93a:	b085      	sub	sp, #20
 800d93c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d93e:	f3ef 8305 	mrs	r3, IPSR
 800d942:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2b0f      	cmp	r3, #15
 800d948:	d914      	bls.n	800d974 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d94a:	4a17      	ldr	r2, [pc, #92]	; (800d9a8 <vPortValidateInterruptPriority+0x70>)
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	4413      	add	r3, r2
 800d950:	781b      	ldrb	r3, [r3, #0]
 800d952:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d954:	4b15      	ldr	r3, [pc, #84]	; (800d9ac <vPortValidateInterruptPriority+0x74>)
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	7afa      	ldrb	r2, [r7, #11]
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d20a      	bcs.n	800d974 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d962:	f383 8811 	msr	BASEPRI, r3
 800d966:	f3bf 8f6f 	isb	sy
 800d96a:	f3bf 8f4f 	dsb	sy
 800d96e:	607b      	str	r3, [r7, #4]
}
 800d970:	bf00      	nop
 800d972:	e7fe      	b.n	800d972 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d974:	4b0e      	ldr	r3, [pc, #56]	; (800d9b0 <vPortValidateInterruptPriority+0x78>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d97c:	4b0d      	ldr	r3, [pc, #52]	; (800d9b4 <vPortValidateInterruptPriority+0x7c>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	429a      	cmp	r2, r3
 800d982:	d90a      	bls.n	800d99a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d988:	f383 8811 	msr	BASEPRI, r3
 800d98c:	f3bf 8f6f 	isb	sy
 800d990:	f3bf 8f4f 	dsb	sy
 800d994:	603b      	str	r3, [r7, #0]
}
 800d996:	bf00      	nop
 800d998:	e7fe      	b.n	800d998 <vPortValidateInterruptPriority+0x60>
	}
 800d99a:	bf00      	nop
 800d99c:	3714      	adds	r7, #20
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a4:	4770      	bx	lr
 800d9a6:	bf00      	nop
 800d9a8:	e000e3f0 	.word	0xe000e3f0
 800d9ac:	2000215c 	.word	0x2000215c
 800d9b0:	e000ed0c 	.word	0xe000ed0c
 800d9b4:	20002160 	.word	0x20002160

0800d9b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b08a      	sub	sp, #40	; 0x28
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d9c4:	f7fe fdd0 	bl	800c568 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d9c8:	4b58      	ldr	r3, [pc, #352]	; (800db2c <pvPortMalloc+0x174>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d101      	bne.n	800d9d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d9d0:	f000 f910 	bl	800dbf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d9d4:	4b56      	ldr	r3, [pc, #344]	; (800db30 <pvPortMalloc+0x178>)
 800d9d6:	681a      	ldr	r2, [r3, #0]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	4013      	ands	r3, r2
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	f040 808e 	bne.w	800dafe <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d01d      	beq.n	800da24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d9e8:	2208      	movs	r2, #8
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f003 0307 	and.w	r3, r3, #7
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d014      	beq.n	800da24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f023 0307 	bic.w	r3, r3, #7
 800da00:	3308      	adds	r3, #8
 800da02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f003 0307 	and.w	r3, r3, #7
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d00a      	beq.n	800da24 <pvPortMalloc+0x6c>
	__asm volatile
 800da0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da12:	f383 8811 	msr	BASEPRI, r3
 800da16:	f3bf 8f6f 	isb	sy
 800da1a:	f3bf 8f4f 	dsb	sy
 800da1e:	617b      	str	r3, [r7, #20]
}
 800da20:	bf00      	nop
 800da22:	e7fe      	b.n	800da22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d069      	beq.n	800dafe <pvPortMalloc+0x146>
 800da2a:	4b42      	ldr	r3, [pc, #264]	; (800db34 <pvPortMalloc+0x17c>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	429a      	cmp	r2, r3
 800da32:	d864      	bhi.n	800dafe <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800da34:	4b40      	ldr	r3, [pc, #256]	; (800db38 <pvPortMalloc+0x180>)
 800da36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800da38:	4b3f      	ldr	r3, [pc, #252]	; (800db38 <pvPortMalloc+0x180>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da3e:	e004      	b.n	800da4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800da40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800da44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	687a      	ldr	r2, [r7, #4]
 800da50:	429a      	cmp	r2, r3
 800da52:	d903      	bls.n	800da5c <pvPortMalloc+0xa4>
 800da54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d1f1      	bne.n	800da40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800da5c:	4b33      	ldr	r3, [pc, #204]	; (800db2c <pvPortMalloc+0x174>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da62:	429a      	cmp	r2, r3
 800da64:	d04b      	beq.n	800dafe <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800da66:	6a3b      	ldr	r3, [r7, #32]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	2208      	movs	r2, #8
 800da6c:	4413      	add	r3, r2
 800da6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800da70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da72:	681a      	ldr	r2, [r3, #0]
 800da74:	6a3b      	ldr	r3, [r7, #32]
 800da76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800da78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7a:	685a      	ldr	r2, [r3, #4]
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	1ad2      	subs	r2, r2, r3
 800da80:	2308      	movs	r3, #8
 800da82:	005b      	lsls	r3, r3, #1
 800da84:	429a      	cmp	r2, r3
 800da86:	d91f      	bls.n	800dac8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800da88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	4413      	add	r3, r2
 800da8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800da90:	69bb      	ldr	r3, [r7, #24]
 800da92:	f003 0307 	and.w	r3, r3, #7
 800da96:	2b00      	cmp	r3, #0
 800da98:	d00a      	beq.n	800dab0 <pvPortMalloc+0xf8>
	__asm volatile
 800da9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da9e:	f383 8811 	msr	BASEPRI, r3
 800daa2:	f3bf 8f6f 	isb	sy
 800daa6:	f3bf 8f4f 	dsb	sy
 800daaa:	613b      	str	r3, [r7, #16]
}
 800daac:	bf00      	nop
 800daae:	e7fe      	b.n	800daae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab2:	685a      	ldr	r2, [r3, #4]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	1ad2      	subs	r2, r2, r3
 800dab8:	69bb      	ldr	r3, [r7, #24]
 800daba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dabe:	687a      	ldr	r2, [r7, #4]
 800dac0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dac2:	69b8      	ldr	r0, [r7, #24]
 800dac4:	f000 f8f8 	bl	800dcb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dac8:	4b1a      	ldr	r3, [pc, #104]	; (800db34 <pvPortMalloc+0x17c>)
 800daca:	681a      	ldr	r2, [r3, #0]
 800dacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	1ad3      	subs	r3, r2, r3
 800dad2:	4a18      	ldr	r2, [pc, #96]	; (800db34 <pvPortMalloc+0x17c>)
 800dad4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dad6:	4b17      	ldr	r3, [pc, #92]	; (800db34 <pvPortMalloc+0x17c>)
 800dad8:	681a      	ldr	r2, [r3, #0]
 800dada:	4b18      	ldr	r3, [pc, #96]	; (800db3c <pvPortMalloc+0x184>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	429a      	cmp	r2, r3
 800dae0:	d203      	bcs.n	800daea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dae2:	4b14      	ldr	r3, [pc, #80]	; (800db34 <pvPortMalloc+0x17c>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	4a15      	ldr	r2, [pc, #84]	; (800db3c <pvPortMalloc+0x184>)
 800dae8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800daea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daec:	685a      	ldr	r2, [r3, #4]
 800daee:	4b10      	ldr	r3, [pc, #64]	; (800db30 <pvPortMalloc+0x178>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	431a      	orrs	r2, r3
 800daf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800daf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafa:	2200      	movs	r2, #0
 800dafc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dafe:	f7fe fd41 	bl	800c584 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800db02:	69fb      	ldr	r3, [r7, #28]
 800db04:	f003 0307 	and.w	r3, r3, #7
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d00a      	beq.n	800db22 <pvPortMalloc+0x16a>
	__asm volatile
 800db0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db10:	f383 8811 	msr	BASEPRI, r3
 800db14:	f3bf 8f6f 	isb	sy
 800db18:	f3bf 8f4f 	dsb	sy
 800db1c:	60fb      	str	r3, [r7, #12]
}
 800db1e:	bf00      	nop
 800db20:	e7fe      	b.n	800db20 <pvPortMalloc+0x168>
	return pvReturn;
 800db22:	69fb      	ldr	r3, [r7, #28]
}
 800db24:	4618      	mov	r0, r3
 800db26:	3728      	adds	r7, #40	; 0x28
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}
 800db2c:	20014d6c 	.word	0x20014d6c
 800db30:	20014d78 	.word	0x20014d78
 800db34:	20014d70 	.word	0x20014d70
 800db38:	20014d64 	.word	0x20014d64
 800db3c:	20014d74 	.word	0x20014d74

0800db40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b086      	sub	sp, #24
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d048      	beq.n	800dbe4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800db52:	2308      	movs	r3, #8
 800db54:	425b      	negs	r3, r3
 800db56:	697a      	ldr	r2, [r7, #20]
 800db58:	4413      	add	r3, r2
 800db5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	685a      	ldr	r2, [r3, #4]
 800db64:	4b21      	ldr	r3, [pc, #132]	; (800dbec <vPortFree+0xac>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	4013      	ands	r3, r2
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d10a      	bne.n	800db84 <vPortFree+0x44>
	__asm volatile
 800db6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db72:	f383 8811 	msr	BASEPRI, r3
 800db76:	f3bf 8f6f 	isb	sy
 800db7a:	f3bf 8f4f 	dsb	sy
 800db7e:	60fb      	str	r3, [r7, #12]
}
 800db80:	bf00      	nop
 800db82:	e7fe      	b.n	800db82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d00a      	beq.n	800dba2 <vPortFree+0x62>
	__asm volatile
 800db8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db90:	f383 8811 	msr	BASEPRI, r3
 800db94:	f3bf 8f6f 	isb	sy
 800db98:	f3bf 8f4f 	dsb	sy
 800db9c:	60bb      	str	r3, [r7, #8]
}
 800db9e:	bf00      	nop
 800dba0:	e7fe      	b.n	800dba0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	685a      	ldr	r2, [r3, #4]
 800dba6:	4b11      	ldr	r3, [pc, #68]	; (800dbec <vPortFree+0xac>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4013      	ands	r3, r2
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d019      	beq.n	800dbe4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d115      	bne.n	800dbe4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	685a      	ldr	r2, [r3, #4]
 800dbbc:	4b0b      	ldr	r3, [pc, #44]	; (800dbec <vPortFree+0xac>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	43db      	mvns	r3, r3
 800dbc2:	401a      	ands	r2, r3
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dbc8:	f7fe fcce 	bl	800c568 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	685a      	ldr	r2, [r3, #4]
 800dbd0:	4b07      	ldr	r3, [pc, #28]	; (800dbf0 <vPortFree+0xb0>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	4413      	add	r3, r2
 800dbd6:	4a06      	ldr	r2, [pc, #24]	; (800dbf0 <vPortFree+0xb0>)
 800dbd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dbda:	6938      	ldr	r0, [r7, #16]
 800dbdc:	f000 f86c 	bl	800dcb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800dbe0:	f7fe fcd0 	bl	800c584 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dbe4:	bf00      	nop
 800dbe6:	3718      	adds	r7, #24
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}
 800dbec:	20014d78 	.word	0x20014d78
 800dbf0:	20014d70 	.word	0x20014d70

0800dbf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b085      	sub	sp, #20
 800dbf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dbfa:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800dbfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dc00:	4b27      	ldr	r3, [pc, #156]	; (800dca0 <prvHeapInit+0xac>)
 800dc02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	f003 0307 	and.w	r3, r3, #7
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d00c      	beq.n	800dc28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	3307      	adds	r3, #7
 800dc12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f023 0307 	bic.w	r3, r3, #7
 800dc1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dc1c:	68ba      	ldr	r2, [r7, #8]
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	1ad3      	subs	r3, r2, r3
 800dc22:	4a1f      	ldr	r2, [pc, #124]	; (800dca0 <prvHeapInit+0xac>)
 800dc24:	4413      	add	r3, r2
 800dc26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dc2c:	4a1d      	ldr	r2, [pc, #116]	; (800dca4 <prvHeapInit+0xb0>)
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dc32:	4b1c      	ldr	r3, [pc, #112]	; (800dca4 <prvHeapInit+0xb0>)
 800dc34:	2200      	movs	r2, #0
 800dc36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	68ba      	ldr	r2, [r7, #8]
 800dc3c:	4413      	add	r3, r2
 800dc3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dc40:	2208      	movs	r2, #8
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	1a9b      	subs	r3, r3, r2
 800dc46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f023 0307 	bic.w	r3, r3, #7
 800dc4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	4a15      	ldr	r2, [pc, #84]	; (800dca8 <prvHeapInit+0xb4>)
 800dc54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dc56:	4b14      	ldr	r3, [pc, #80]	; (800dca8 <prvHeapInit+0xb4>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dc5e:	4b12      	ldr	r3, [pc, #72]	; (800dca8 <prvHeapInit+0xb4>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	2200      	movs	r2, #0
 800dc64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	68fa      	ldr	r2, [r7, #12]
 800dc6e:	1ad2      	subs	r2, r2, r3
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dc74:	4b0c      	ldr	r3, [pc, #48]	; (800dca8 <prvHeapInit+0xb4>)
 800dc76:	681a      	ldr	r2, [r3, #0]
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	685b      	ldr	r3, [r3, #4]
 800dc80:	4a0a      	ldr	r2, [pc, #40]	; (800dcac <prvHeapInit+0xb8>)
 800dc82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	685b      	ldr	r3, [r3, #4]
 800dc88:	4a09      	ldr	r2, [pc, #36]	; (800dcb0 <prvHeapInit+0xbc>)
 800dc8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dc8c:	4b09      	ldr	r3, [pc, #36]	; (800dcb4 <prvHeapInit+0xc0>)
 800dc8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dc92:	601a      	str	r2, [r3, #0]
}
 800dc94:	bf00      	nop
 800dc96:	3714      	adds	r7, #20
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9e:	4770      	bx	lr
 800dca0:	20002164 	.word	0x20002164
 800dca4:	20014d64 	.word	0x20014d64
 800dca8:	20014d6c 	.word	0x20014d6c
 800dcac:	20014d74 	.word	0x20014d74
 800dcb0:	20014d70 	.word	0x20014d70
 800dcb4:	20014d78 	.word	0x20014d78

0800dcb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b085      	sub	sp, #20
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dcc0:	4b28      	ldr	r3, [pc, #160]	; (800dd64 <prvInsertBlockIntoFreeList+0xac>)
 800dcc2:	60fb      	str	r3, [r7, #12]
 800dcc4:	e002      	b.n	800dccc <prvInsertBlockIntoFreeList+0x14>
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	60fb      	str	r3, [r7, #12]
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	687a      	ldr	r2, [r7, #4]
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d8f7      	bhi.n	800dcc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	685b      	ldr	r3, [r3, #4]
 800dcde:	68ba      	ldr	r2, [r7, #8]
 800dce0:	4413      	add	r3, r2
 800dce2:	687a      	ldr	r2, [r7, #4]
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d108      	bne.n	800dcfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	685a      	ldr	r2, [r3, #4]
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	685b      	ldr	r3, [r3, #4]
 800dcf0:	441a      	add	r2, r3
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	685b      	ldr	r3, [r3, #4]
 800dd02:	68ba      	ldr	r2, [r7, #8]
 800dd04:	441a      	add	r2, r3
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	d118      	bne.n	800dd40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681a      	ldr	r2, [r3, #0]
 800dd12:	4b15      	ldr	r3, [pc, #84]	; (800dd68 <prvInsertBlockIntoFreeList+0xb0>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d00d      	beq.n	800dd36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	685a      	ldr	r2, [r3, #4]
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	441a      	add	r2, r3
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	681a      	ldr	r2, [r3, #0]
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	601a      	str	r2, [r3, #0]
 800dd34:	e008      	b.n	800dd48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dd36:	4b0c      	ldr	r3, [pc, #48]	; (800dd68 <prvInsertBlockIntoFreeList+0xb0>)
 800dd38:	681a      	ldr	r2, [r3, #0]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	601a      	str	r2, [r3, #0]
 800dd3e:	e003      	b.n	800dd48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	681a      	ldr	r2, [r3, #0]
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dd48:	68fa      	ldr	r2, [r7, #12]
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d002      	beq.n	800dd56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	687a      	ldr	r2, [r7, #4]
 800dd54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd56:	bf00      	nop
 800dd58:	3714      	adds	r7, #20
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd60:	4770      	bx	lr
 800dd62:	bf00      	nop
 800dd64:	20014d64 	.word	0x20014d64
 800dd68:	20014d6c 	.word	0x20014d6c

0800dd6c <__errno>:
 800dd6c:	4b01      	ldr	r3, [pc, #4]	; (800dd74 <__errno+0x8>)
 800dd6e:	6818      	ldr	r0, [r3, #0]
 800dd70:	4770      	bx	lr
 800dd72:	bf00      	nop
 800dd74:	20000084 	.word	0x20000084

0800dd78 <__libc_init_array>:
 800dd78:	b570      	push	{r4, r5, r6, lr}
 800dd7a:	4d0d      	ldr	r5, [pc, #52]	; (800ddb0 <__libc_init_array+0x38>)
 800dd7c:	4c0d      	ldr	r4, [pc, #52]	; (800ddb4 <__libc_init_array+0x3c>)
 800dd7e:	1b64      	subs	r4, r4, r5
 800dd80:	10a4      	asrs	r4, r4, #2
 800dd82:	2600      	movs	r6, #0
 800dd84:	42a6      	cmp	r6, r4
 800dd86:	d109      	bne.n	800dd9c <__libc_init_array+0x24>
 800dd88:	4d0b      	ldr	r5, [pc, #44]	; (800ddb8 <__libc_init_array+0x40>)
 800dd8a:	4c0c      	ldr	r4, [pc, #48]	; (800ddbc <__libc_init_array+0x44>)
 800dd8c:	f000 fcb6 	bl	800e6fc <_init>
 800dd90:	1b64      	subs	r4, r4, r5
 800dd92:	10a4      	asrs	r4, r4, #2
 800dd94:	2600      	movs	r6, #0
 800dd96:	42a6      	cmp	r6, r4
 800dd98:	d105      	bne.n	800dda6 <__libc_init_array+0x2e>
 800dd9a:	bd70      	pop	{r4, r5, r6, pc}
 800dd9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dda0:	4798      	blx	r3
 800dda2:	3601      	adds	r6, #1
 800dda4:	e7ee      	b.n	800dd84 <__libc_init_array+0xc>
 800dda6:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddaa:	4798      	blx	r3
 800ddac:	3601      	adds	r6, #1
 800ddae:	e7f2      	b.n	800dd96 <__libc_init_array+0x1e>
 800ddb0:	0800ed5c 	.word	0x0800ed5c
 800ddb4:	0800ed5c 	.word	0x0800ed5c
 800ddb8:	0800ed5c 	.word	0x0800ed5c
 800ddbc:	0800ed60 	.word	0x0800ed60

0800ddc0 <memcpy>:
 800ddc0:	440a      	add	r2, r1
 800ddc2:	4291      	cmp	r1, r2
 800ddc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ddc8:	d100      	bne.n	800ddcc <memcpy+0xc>
 800ddca:	4770      	bx	lr
 800ddcc:	b510      	push	{r4, lr}
 800ddce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ddd6:	4291      	cmp	r1, r2
 800ddd8:	d1f9      	bne.n	800ddce <memcpy+0xe>
 800ddda:	bd10      	pop	{r4, pc}

0800dddc <memset>:
 800dddc:	4402      	add	r2, r0
 800ddde:	4603      	mov	r3, r0
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d100      	bne.n	800dde6 <memset+0xa>
 800dde4:	4770      	bx	lr
 800dde6:	f803 1b01 	strb.w	r1, [r3], #1
 800ddea:	e7f9      	b.n	800dde0 <memset+0x4>

0800ddec <siprintf>:
 800ddec:	b40e      	push	{r1, r2, r3}
 800ddee:	b500      	push	{lr}
 800ddf0:	b09c      	sub	sp, #112	; 0x70
 800ddf2:	ab1d      	add	r3, sp, #116	; 0x74
 800ddf4:	9002      	str	r0, [sp, #8]
 800ddf6:	9006      	str	r0, [sp, #24]
 800ddf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ddfc:	4809      	ldr	r0, [pc, #36]	; (800de24 <siprintf+0x38>)
 800ddfe:	9107      	str	r1, [sp, #28]
 800de00:	9104      	str	r1, [sp, #16]
 800de02:	4909      	ldr	r1, [pc, #36]	; (800de28 <siprintf+0x3c>)
 800de04:	f853 2b04 	ldr.w	r2, [r3], #4
 800de08:	9105      	str	r1, [sp, #20]
 800de0a:	6800      	ldr	r0, [r0, #0]
 800de0c:	9301      	str	r3, [sp, #4]
 800de0e:	a902      	add	r1, sp, #8
 800de10:	f000 f890 	bl	800df34 <_svfiprintf_r>
 800de14:	9b02      	ldr	r3, [sp, #8]
 800de16:	2200      	movs	r2, #0
 800de18:	701a      	strb	r2, [r3, #0]
 800de1a:	b01c      	add	sp, #112	; 0x70
 800de1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800de20:	b003      	add	sp, #12
 800de22:	4770      	bx	lr
 800de24:	20000084 	.word	0x20000084
 800de28:	ffff0208 	.word	0xffff0208

0800de2c <strncpy>:
 800de2c:	b510      	push	{r4, lr}
 800de2e:	3901      	subs	r1, #1
 800de30:	4603      	mov	r3, r0
 800de32:	b132      	cbz	r2, 800de42 <strncpy+0x16>
 800de34:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800de38:	f803 4b01 	strb.w	r4, [r3], #1
 800de3c:	3a01      	subs	r2, #1
 800de3e:	2c00      	cmp	r4, #0
 800de40:	d1f7      	bne.n	800de32 <strncpy+0x6>
 800de42:	441a      	add	r2, r3
 800de44:	2100      	movs	r1, #0
 800de46:	4293      	cmp	r3, r2
 800de48:	d100      	bne.n	800de4c <strncpy+0x20>
 800de4a:	bd10      	pop	{r4, pc}
 800de4c:	f803 1b01 	strb.w	r1, [r3], #1
 800de50:	e7f9      	b.n	800de46 <strncpy+0x1a>

0800de52 <strstr>:
 800de52:	780a      	ldrb	r2, [r1, #0]
 800de54:	b570      	push	{r4, r5, r6, lr}
 800de56:	b96a      	cbnz	r2, 800de74 <strstr+0x22>
 800de58:	bd70      	pop	{r4, r5, r6, pc}
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d109      	bne.n	800de72 <strstr+0x20>
 800de5e:	460c      	mov	r4, r1
 800de60:	4605      	mov	r5, r0
 800de62:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800de66:	2b00      	cmp	r3, #0
 800de68:	d0f6      	beq.n	800de58 <strstr+0x6>
 800de6a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800de6e:	429e      	cmp	r6, r3
 800de70:	d0f7      	beq.n	800de62 <strstr+0x10>
 800de72:	3001      	adds	r0, #1
 800de74:	7803      	ldrb	r3, [r0, #0]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d1ef      	bne.n	800de5a <strstr+0x8>
 800de7a:	4618      	mov	r0, r3
 800de7c:	e7ec      	b.n	800de58 <strstr+0x6>

0800de7e <__ssputs_r>:
 800de7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de82:	688e      	ldr	r6, [r1, #8]
 800de84:	429e      	cmp	r6, r3
 800de86:	4682      	mov	sl, r0
 800de88:	460c      	mov	r4, r1
 800de8a:	4690      	mov	r8, r2
 800de8c:	461f      	mov	r7, r3
 800de8e:	d838      	bhi.n	800df02 <__ssputs_r+0x84>
 800de90:	898a      	ldrh	r2, [r1, #12]
 800de92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800de96:	d032      	beq.n	800defe <__ssputs_r+0x80>
 800de98:	6825      	ldr	r5, [r4, #0]
 800de9a:	6909      	ldr	r1, [r1, #16]
 800de9c:	eba5 0901 	sub.w	r9, r5, r1
 800dea0:	6965      	ldr	r5, [r4, #20]
 800dea2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dea6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800deaa:	3301      	adds	r3, #1
 800deac:	444b      	add	r3, r9
 800deae:	106d      	asrs	r5, r5, #1
 800deb0:	429d      	cmp	r5, r3
 800deb2:	bf38      	it	cc
 800deb4:	461d      	movcc	r5, r3
 800deb6:	0553      	lsls	r3, r2, #21
 800deb8:	d531      	bpl.n	800df1e <__ssputs_r+0xa0>
 800deba:	4629      	mov	r1, r5
 800debc:	f000 fb54 	bl	800e568 <_malloc_r>
 800dec0:	4606      	mov	r6, r0
 800dec2:	b950      	cbnz	r0, 800deda <__ssputs_r+0x5c>
 800dec4:	230c      	movs	r3, #12
 800dec6:	f8ca 3000 	str.w	r3, [sl]
 800deca:	89a3      	ldrh	r3, [r4, #12]
 800decc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ded0:	81a3      	strh	r3, [r4, #12]
 800ded2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ded6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800deda:	6921      	ldr	r1, [r4, #16]
 800dedc:	464a      	mov	r2, r9
 800dede:	f7ff ff6f 	bl	800ddc0 <memcpy>
 800dee2:	89a3      	ldrh	r3, [r4, #12]
 800dee4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800deec:	81a3      	strh	r3, [r4, #12]
 800deee:	6126      	str	r6, [r4, #16]
 800def0:	6165      	str	r5, [r4, #20]
 800def2:	444e      	add	r6, r9
 800def4:	eba5 0509 	sub.w	r5, r5, r9
 800def8:	6026      	str	r6, [r4, #0]
 800defa:	60a5      	str	r5, [r4, #8]
 800defc:	463e      	mov	r6, r7
 800defe:	42be      	cmp	r6, r7
 800df00:	d900      	bls.n	800df04 <__ssputs_r+0x86>
 800df02:	463e      	mov	r6, r7
 800df04:	6820      	ldr	r0, [r4, #0]
 800df06:	4632      	mov	r2, r6
 800df08:	4641      	mov	r1, r8
 800df0a:	f000 faa7 	bl	800e45c <memmove>
 800df0e:	68a3      	ldr	r3, [r4, #8]
 800df10:	1b9b      	subs	r3, r3, r6
 800df12:	60a3      	str	r3, [r4, #8]
 800df14:	6823      	ldr	r3, [r4, #0]
 800df16:	4433      	add	r3, r6
 800df18:	6023      	str	r3, [r4, #0]
 800df1a:	2000      	movs	r0, #0
 800df1c:	e7db      	b.n	800ded6 <__ssputs_r+0x58>
 800df1e:	462a      	mov	r2, r5
 800df20:	f000 fb96 	bl	800e650 <_realloc_r>
 800df24:	4606      	mov	r6, r0
 800df26:	2800      	cmp	r0, #0
 800df28:	d1e1      	bne.n	800deee <__ssputs_r+0x70>
 800df2a:	6921      	ldr	r1, [r4, #16]
 800df2c:	4650      	mov	r0, sl
 800df2e:	f000 faaf 	bl	800e490 <_free_r>
 800df32:	e7c7      	b.n	800dec4 <__ssputs_r+0x46>

0800df34 <_svfiprintf_r>:
 800df34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df38:	4698      	mov	r8, r3
 800df3a:	898b      	ldrh	r3, [r1, #12]
 800df3c:	061b      	lsls	r3, r3, #24
 800df3e:	b09d      	sub	sp, #116	; 0x74
 800df40:	4607      	mov	r7, r0
 800df42:	460d      	mov	r5, r1
 800df44:	4614      	mov	r4, r2
 800df46:	d50e      	bpl.n	800df66 <_svfiprintf_r+0x32>
 800df48:	690b      	ldr	r3, [r1, #16]
 800df4a:	b963      	cbnz	r3, 800df66 <_svfiprintf_r+0x32>
 800df4c:	2140      	movs	r1, #64	; 0x40
 800df4e:	f000 fb0b 	bl	800e568 <_malloc_r>
 800df52:	6028      	str	r0, [r5, #0]
 800df54:	6128      	str	r0, [r5, #16]
 800df56:	b920      	cbnz	r0, 800df62 <_svfiprintf_r+0x2e>
 800df58:	230c      	movs	r3, #12
 800df5a:	603b      	str	r3, [r7, #0]
 800df5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df60:	e0d1      	b.n	800e106 <_svfiprintf_r+0x1d2>
 800df62:	2340      	movs	r3, #64	; 0x40
 800df64:	616b      	str	r3, [r5, #20]
 800df66:	2300      	movs	r3, #0
 800df68:	9309      	str	r3, [sp, #36]	; 0x24
 800df6a:	2320      	movs	r3, #32
 800df6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df70:	f8cd 800c 	str.w	r8, [sp, #12]
 800df74:	2330      	movs	r3, #48	; 0x30
 800df76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e120 <_svfiprintf_r+0x1ec>
 800df7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df7e:	f04f 0901 	mov.w	r9, #1
 800df82:	4623      	mov	r3, r4
 800df84:	469a      	mov	sl, r3
 800df86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df8a:	b10a      	cbz	r2, 800df90 <_svfiprintf_r+0x5c>
 800df8c:	2a25      	cmp	r2, #37	; 0x25
 800df8e:	d1f9      	bne.n	800df84 <_svfiprintf_r+0x50>
 800df90:	ebba 0b04 	subs.w	fp, sl, r4
 800df94:	d00b      	beq.n	800dfae <_svfiprintf_r+0x7a>
 800df96:	465b      	mov	r3, fp
 800df98:	4622      	mov	r2, r4
 800df9a:	4629      	mov	r1, r5
 800df9c:	4638      	mov	r0, r7
 800df9e:	f7ff ff6e 	bl	800de7e <__ssputs_r>
 800dfa2:	3001      	adds	r0, #1
 800dfa4:	f000 80aa 	beq.w	800e0fc <_svfiprintf_r+0x1c8>
 800dfa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfaa:	445a      	add	r2, fp
 800dfac:	9209      	str	r2, [sp, #36]	; 0x24
 800dfae:	f89a 3000 	ldrb.w	r3, [sl]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	f000 80a2 	beq.w	800e0fc <_svfiprintf_r+0x1c8>
 800dfb8:	2300      	movs	r3, #0
 800dfba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfc2:	f10a 0a01 	add.w	sl, sl, #1
 800dfc6:	9304      	str	r3, [sp, #16]
 800dfc8:	9307      	str	r3, [sp, #28]
 800dfca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dfce:	931a      	str	r3, [sp, #104]	; 0x68
 800dfd0:	4654      	mov	r4, sl
 800dfd2:	2205      	movs	r2, #5
 800dfd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfd8:	4851      	ldr	r0, [pc, #324]	; (800e120 <_svfiprintf_r+0x1ec>)
 800dfda:	f7f2 f901 	bl	80001e0 <memchr>
 800dfde:	9a04      	ldr	r2, [sp, #16]
 800dfe0:	b9d8      	cbnz	r0, 800e01a <_svfiprintf_r+0xe6>
 800dfe2:	06d0      	lsls	r0, r2, #27
 800dfe4:	bf44      	itt	mi
 800dfe6:	2320      	movmi	r3, #32
 800dfe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dfec:	0711      	lsls	r1, r2, #28
 800dfee:	bf44      	itt	mi
 800dff0:	232b      	movmi	r3, #43	; 0x2b
 800dff2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dff6:	f89a 3000 	ldrb.w	r3, [sl]
 800dffa:	2b2a      	cmp	r3, #42	; 0x2a
 800dffc:	d015      	beq.n	800e02a <_svfiprintf_r+0xf6>
 800dffe:	9a07      	ldr	r2, [sp, #28]
 800e000:	4654      	mov	r4, sl
 800e002:	2000      	movs	r0, #0
 800e004:	f04f 0c0a 	mov.w	ip, #10
 800e008:	4621      	mov	r1, r4
 800e00a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e00e:	3b30      	subs	r3, #48	; 0x30
 800e010:	2b09      	cmp	r3, #9
 800e012:	d94e      	bls.n	800e0b2 <_svfiprintf_r+0x17e>
 800e014:	b1b0      	cbz	r0, 800e044 <_svfiprintf_r+0x110>
 800e016:	9207      	str	r2, [sp, #28]
 800e018:	e014      	b.n	800e044 <_svfiprintf_r+0x110>
 800e01a:	eba0 0308 	sub.w	r3, r0, r8
 800e01e:	fa09 f303 	lsl.w	r3, r9, r3
 800e022:	4313      	orrs	r3, r2
 800e024:	9304      	str	r3, [sp, #16]
 800e026:	46a2      	mov	sl, r4
 800e028:	e7d2      	b.n	800dfd0 <_svfiprintf_r+0x9c>
 800e02a:	9b03      	ldr	r3, [sp, #12]
 800e02c:	1d19      	adds	r1, r3, #4
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	9103      	str	r1, [sp, #12]
 800e032:	2b00      	cmp	r3, #0
 800e034:	bfbb      	ittet	lt
 800e036:	425b      	neglt	r3, r3
 800e038:	f042 0202 	orrlt.w	r2, r2, #2
 800e03c:	9307      	strge	r3, [sp, #28]
 800e03e:	9307      	strlt	r3, [sp, #28]
 800e040:	bfb8      	it	lt
 800e042:	9204      	strlt	r2, [sp, #16]
 800e044:	7823      	ldrb	r3, [r4, #0]
 800e046:	2b2e      	cmp	r3, #46	; 0x2e
 800e048:	d10c      	bne.n	800e064 <_svfiprintf_r+0x130>
 800e04a:	7863      	ldrb	r3, [r4, #1]
 800e04c:	2b2a      	cmp	r3, #42	; 0x2a
 800e04e:	d135      	bne.n	800e0bc <_svfiprintf_r+0x188>
 800e050:	9b03      	ldr	r3, [sp, #12]
 800e052:	1d1a      	adds	r2, r3, #4
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	9203      	str	r2, [sp, #12]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	bfb8      	it	lt
 800e05c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e060:	3402      	adds	r4, #2
 800e062:	9305      	str	r3, [sp, #20]
 800e064:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e130 <_svfiprintf_r+0x1fc>
 800e068:	7821      	ldrb	r1, [r4, #0]
 800e06a:	2203      	movs	r2, #3
 800e06c:	4650      	mov	r0, sl
 800e06e:	f7f2 f8b7 	bl	80001e0 <memchr>
 800e072:	b140      	cbz	r0, 800e086 <_svfiprintf_r+0x152>
 800e074:	2340      	movs	r3, #64	; 0x40
 800e076:	eba0 000a 	sub.w	r0, r0, sl
 800e07a:	fa03 f000 	lsl.w	r0, r3, r0
 800e07e:	9b04      	ldr	r3, [sp, #16]
 800e080:	4303      	orrs	r3, r0
 800e082:	3401      	adds	r4, #1
 800e084:	9304      	str	r3, [sp, #16]
 800e086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e08a:	4826      	ldr	r0, [pc, #152]	; (800e124 <_svfiprintf_r+0x1f0>)
 800e08c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e090:	2206      	movs	r2, #6
 800e092:	f7f2 f8a5 	bl	80001e0 <memchr>
 800e096:	2800      	cmp	r0, #0
 800e098:	d038      	beq.n	800e10c <_svfiprintf_r+0x1d8>
 800e09a:	4b23      	ldr	r3, [pc, #140]	; (800e128 <_svfiprintf_r+0x1f4>)
 800e09c:	bb1b      	cbnz	r3, 800e0e6 <_svfiprintf_r+0x1b2>
 800e09e:	9b03      	ldr	r3, [sp, #12]
 800e0a0:	3307      	adds	r3, #7
 800e0a2:	f023 0307 	bic.w	r3, r3, #7
 800e0a6:	3308      	adds	r3, #8
 800e0a8:	9303      	str	r3, [sp, #12]
 800e0aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0ac:	4433      	add	r3, r6
 800e0ae:	9309      	str	r3, [sp, #36]	; 0x24
 800e0b0:	e767      	b.n	800df82 <_svfiprintf_r+0x4e>
 800e0b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0b6:	460c      	mov	r4, r1
 800e0b8:	2001      	movs	r0, #1
 800e0ba:	e7a5      	b.n	800e008 <_svfiprintf_r+0xd4>
 800e0bc:	2300      	movs	r3, #0
 800e0be:	3401      	adds	r4, #1
 800e0c0:	9305      	str	r3, [sp, #20]
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	f04f 0c0a 	mov.w	ip, #10
 800e0c8:	4620      	mov	r0, r4
 800e0ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0ce:	3a30      	subs	r2, #48	; 0x30
 800e0d0:	2a09      	cmp	r2, #9
 800e0d2:	d903      	bls.n	800e0dc <_svfiprintf_r+0x1a8>
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d0c5      	beq.n	800e064 <_svfiprintf_r+0x130>
 800e0d8:	9105      	str	r1, [sp, #20]
 800e0da:	e7c3      	b.n	800e064 <_svfiprintf_r+0x130>
 800e0dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e0e0:	4604      	mov	r4, r0
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	e7f0      	b.n	800e0c8 <_svfiprintf_r+0x194>
 800e0e6:	ab03      	add	r3, sp, #12
 800e0e8:	9300      	str	r3, [sp, #0]
 800e0ea:	462a      	mov	r2, r5
 800e0ec:	4b0f      	ldr	r3, [pc, #60]	; (800e12c <_svfiprintf_r+0x1f8>)
 800e0ee:	a904      	add	r1, sp, #16
 800e0f0:	4638      	mov	r0, r7
 800e0f2:	f3af 8000 	nop.w
 800e0f6:	1c42      	adds	r2, r0, #1
 800e0f8:	4606      	mov	r6, r0
 800e0fa:	d1d6      	bne.n	800e0aa <_svfiprintf_r+0x176>
 800e0fc:	89ab      	ldrh	r3, [r5, #12]
 800e0fe:	065b      	lsls	r3, r3, #25
 800e100:	f53f af2c 	bmi.w	800df5c <_svfiprintf_r+0x28>
 800e104:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e106:	b01d      	add	sp, #116	; 0x74
 800e108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e10c:	ab03      	add	r3, sp, #12
 800e10e:	9300      	str	r3, [sp, #0]
 800e110:	462a      	mov	r2, r5
 800e112:	4b06      	ldr	r3, [pc, #24]	; (800e12c <_svfiprintf_r+0x1f8>)
 800e114:	a904      	add	r1, sp, #16
 800e116:	4638      	mov	r0, r7
 800e118:	f000 f87a 	bl	800e210 <_printf_i>
 800e11c:	e7eb      	b.n	800e0f6 <_svfiprintf_r+0x1c2>
 800e11e:	bf00      	nop
 800e120:	0800ed20 	.word	0x0800ed20
 800e124:	0800ed2a 	.word	0x0800ed2a
 800e128:	00000000 	.word	0x00000000
 800e12c:	0800de7f 	.word	0x0800de7f
 800e130:	0800ed26 	.word	0x0800ed26

0800e134 <_printf_common>:
 800e134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e138:	4616      	mov	r6, r2
 800e13a:	4699      	mov	r9, r3
 800e13c:	688a      	ldr	r2, [r1, #8]
 800e13e:	690b      	ldr	r3, [r1, #16]
 800e140:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e144:	4293      	cmp	r3, r2
 800e146:	bfb8      	it	lt
 800e148:	4613      	movlt	r3, r2
 800e14a:	6033      	str	r3, [r6, #0]
 800e14c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e150:	4607      	mov	r7, r0
 800e152:	460c      	mov	r4, r1
 800e154:	b10a      	cbz	r2, 800e15a <_printf_common+0x26>
 800e156:	3301      	adds	r3, #1
 800e158:	6033      	str	r3, [r6, #0]
 800e15a:	6823      	ldr	r3, [r4, #0]
 800e15c:	0699      	lsls	r1, r3, #26
 800e15e:	bf42      	ittt	mi
 800e160:	6833      	ldrmi	r3, [r6, #0]
 800e162:	3302      	addmi	r3, #2
 800e164:	6033      	strmi	r3, [r6, #0]
 800e166:	6825      	ldr	r5, [r4, #0]
 800e168:	f015 0506 	ands.w	r5, r5, #6
 800e16c:	d106      	bne.n	800e17c <_printf_common+0x48>
 800e16e:	f104 0a19 	add.w	sl, r4, #25
 800e172:	68e3      	ldr	r3, [r4, #12]
 800e174:	6832      	ldr	r2, [r6, #0]
 800e176:	1a9b      	subs	r3, r3, r2
 800e178:	42ab      	cmp	r3, r5
 800e17a:	dc26      	bgt.n	800e1ca <_printf_common+0x96>
 800e17c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e180:	1e13      	subs	r3, r2, #0
 800e182:	6822      	ldr	r2, [r4, #0]
 800e184:	bf18      	it	ne
 800e186:	2301      	movne	r3, #1
 800e188:	0692      	lsls	r2, r2, #26
 800e18a:	d42b      	bmi.n	800e1e4 <_printf_common+0xb0>
 800e18c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e190:	4649      	mov	r1, r9
 800e192:	4638      	mov	r0, r7
 800e194:	47c0      	blx	r8
 800e196:	3001      	adds	r0, #1
 800e198:	d01e      	beq.n	800e1d8 <_printf_common+0xa4>
 800e19a:	6823      	ldr	r3, [r4, #0]
 800e19c:	68e5      	ldr	r5, [r4, #12]
 800e19e:	6832      	ldr	r2, [r6, #0]
 800e1a0:	f003 0306 	and.w	r3, r3, #6
 800e1a4:	2b04      	cmp	r3, #4
 800e1a6:	bf08      	it	eq
 800e1a8:	1aad      	subeq	r5, r5, r2
 800e1aa:	68a3      	ldr	r3, [r4, #8]
 800e1ac:	6922      	ldr	r2, [r4, #16]
 800e1ae:	bf0c      	ite	eq
 800e1b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e1b4:	2500      	movne	r5, #0
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	bfc4      	itt	gt
 800e1ba:	1a9b      	subgt	r3, r3, r2
 800e1bc:	18ed      	addgt	r5, r5, r3
 800e1be:	2600      	movs	r6, #0
 800e1c0:	341a      	adds	r4, #26
 800e1c2:	42b5      	cmp	r5, r6
 800e1c4:	d11a      	bne.n	800e1fc <_printf_common+0xc8>
 800e1c6:	2000      	movs	r0, #0
 800e1c8:	e008      	b.n	800e1dc <_printf_common+0xa8>
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	4652      	mov	r2, sl
 800e1ce:	4649      	mov	r1, r9
 800e1d0:	4638      	mov	r0, r7
 800e1d2:	47c0      	blx	r8
 800e1d4:	3001      	adds	r0, #1
 800e1d6:	d103      	bne.n	800e1e0 <_printf_common+0xac>
 800e1d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1e0:	3501      	adds	r5, #1
 800e1e2:	e7c6      	b.n	800e172 <_printf_common+0x3e>
 800e1e4:	18e1      	adds	r1, r4, r3
 800e1e6:	1c5a      	adds	r2, r3, #1
 800e1e8:	2030      	movs	r0, #48	; 0x30
 800e1ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e1ee:	4422      	add	r2, r4
 800e1f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e1f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e1f8:	3302      	adds	r3, #2
 800e1fa:	e7c7      	b.n	800e18c <_printf_common+0x58>
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	4622      	mov	r2, r4
 800e200:	4649      	mov	r1, r9
 800e202:	4638      	mov	r0, r7
 800e204:	47c0      	blx	r8
 800e206:	3001      	adds	r0, #1
 800e208:	d0e6      	beq.n	800e1d8 <_printf_common+0xa4>
 800e20a:	3601      	adds	r6, #1
 800e20c:	e7d9      	b.n	800e1c2 <_printf_common+0x8e>
	...

0800e210 <_printf_i>:
 800e210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e214:	7e0f      	ldrb	r7, [r1, #24]
 800e216:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e218:	2f78      	cmp	r7, #120	; 0x78
 800e21a:	4691      	mov	r9, r2
 800e21c:	4680      	mov	r8, r0
 800e21e:	460c      	mov	r4, r1
 800e220:	469a      	mov	sl, r3
 800e222:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e226:	d807      	bhi.n	800e238 <_printf_i+0x28>
 800e228:	2f62      	cmp	r7, #98	; 0x62
 800e22a:	d80a      	bhi.n	800e242 <_printf_i+0x32>
 800e22c:	2f00      	cmp	r7, #0
 800e22e:	f000 80d8 	beq.w	800e3e2 <_printf_i+0x1d2>
 800e232:	2f58      	cmp	r7, #88	; 0x58
 800e234:	f000 80a3 	beq.w	800e37e <_printf_i+0x16e>
 800e238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e23c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e240:	e03a      	b.n	800e2b8 <_printf_i+0xa8>
 800e242:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e246:	2b15      	cmp	r3, #21
 800e248:	d8f6      	bhi.n	800e238 <_printf_i+0x28>
 800e24a:	a101      	add	r1, pc, #4	; (adr r1, 800e250 <_printf_i+0x40>)
 800e24c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e250:	0800e2a9 	.word	0x0800e2a9
 800e254:	0800e2bd 	.word	0x0800e2bd
 800e258:	0800e239 	.word	0x0800e239
 800e25c:	0800e239 	.word	0x0800e239
 800e260:	0800e239 	.word	0x0800e239
 800e264:	0800e239 	.word	0x0800e239
 800e268:	0800e2bd 	.word	0x0800e2bd
 800e26c:	0800e239 	.word	0x0800e239
 800e270:	0800e239 	.word	0x0800e239
 800e274:	0800e239 	.word	0x0800e239
 800e278:	0800e239 	.word	0x0800e239
 800e27c:	0800e3c9 	.word	0x0800e3c9
 800e280:	0800e2ed 	.word	0x0800e2ed
 800e284:	0800e3ab 	.word	0x0800e3ab
 800e288:	0800e239 	.word	0x0800e239
 800e28c:	0800e239 	.word	0x0800e239
 800e290:	0800e3eb 	.word	0x0800e3eb
 800e294:	0800e239 	.word	0x0800e239
 800e298:	0800e2ed 	.word	0x0800e2ed
 800e29c:	0800e239 	.word	0x0800e239
 800e2a0:	0800e239 	.word	0x0800e239
 800e2a4:	0800e3b3 	.word	0x0800e3b3
 800e2a8:	682b      	ldr	r3, [r5, #0]
 800e2aa:	1d1a      	adds	r2, r3, #4
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	602a      	str	r2, [r5, #0]
 800e2b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e2b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	e0a3      	b.n	800e404 <_printf_i+0x1f4>
 800e2bc:	6820      	ldr	r0, [r4, #0]
 800e2be:	6829      	ldr	r1, [r5, #0]
 800e2c0:	0606      	lsls	r6, r0, #24
 800e2c2:	f101 0304 	add.w	r3, r1, #4
 800e2c6:	d50a      	bpl.n	800e2de <_printf_i+0xce>
 800e2c8:	680e      	ldr	r6, [r1, #0]
 800e2ca:	602b      	str	r3, [r5, #0]
 800e2cc:	2e00      	cmp	r6, #0
 800e2ce:	da03      	bge.n	800e2d8 <_printf_i+0xc8>
 800e2d0:	232d      	movs	r3, #45	; 0x2d
 800e2d2:	4276      	negs	r6, r6
 800e2d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2d8:	485e      	ldr	r0, [pc, #376]	; (800e454 <_printf_i+0x244>)
 800e2da:	230a      	movs	r3, #10
 800e2dc:	e019      	b.n	800e312 <_printf_i+0x102>
 800e2de:	680e      	ldr	r6, [r1, #0]
 800e2e0:	602b      	str	r3, [r5, #0]
 800e2e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e2e6:	bf18      	it	ne
 800e2e8:	b236      	sxthne	r6, r6
 800e2ea:	e7ef      	b.n	800e2cc <_printf_i+0xbc>
 800e2ec:	682b      	ldr	r3, [r5, #0]
 800e2ee:	6820      	ldr	r0, [r4, #0]
 800e2f0:	1d19      	adds	r1, r3, #4
 800e2f2:	6029      	str	r1, [r5, #0]
 800e2f4:	0601      	lsls	r1, r0, #24
 800e2f6:	d501      	bpl.n	800e2fc <_printf_i+0xec>
 800e2f8:	681e      	ldr	r6, [r3, #0]
 800e2fa:	e002      	b.n	800e302 <_printf_i+0xf2>
 800e2fc:	0646      	lsls	r6, r0, #25
 800e2fe:	d5fb      	bpl.n	800e2f8 <_printf_i+0xe8>
 800e300:	881e      	ldrh	r6, [r3, #0]
 800e302:	4854      	ldr	r0, [pc, #336]	; (800e454 <_printf_i+0x244>)
 800e304:	2f6f      	cmp	r7, #111	; 0x6f
 800e306:	bf0c      	ite	eq
 800e308:	2308      	moveq	r3, #8
 800e30a:	230a      	movne	r3, #10
 800e30c:	2100      	movs	r1, #0
 800e30e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e312:	6865      	ldr	r5, [r4, #4]
 800e314:	60a5      	str	r5, [r4, #8]
 800e316:	2d00      	cmp	r5, #0
 800e318:	bfa2      	ittt	ge
 800e31a:	6821      	ldrge	r1, [r4, #0]
 800e31c:	f021 0104 	bicge.w	r1, r1, #4
 800e320:	6021      	strge	r1, [r4, #0]
 800e322:	b90e      	cbnz	r6, 800e328 <_printf_i+0x118>
 800e324:	2d00      	cmp	r5, #0
 800e326:	d04d      	beq.n	800e3c4 <_printf_i+0x1b4>
 800e328:	4615      	mov	r5, r2
 800e32a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e32e:	fb03 6711 	mls	r7, r3, r1, r6
 800e332:	5dc7      	ldrb	r7, [r0, r7]
 800e334:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e338:	4637      	mov	r7, r6
 800e33a:	42bb      	cmp	r3, r7
 800e33c:	460e      	mov	r6, r1
 800e33e:	d9f4      	bls.n	800e32a <_printf_i+0x11a>
 800e340:	2b08      	cmp	r3, #8
 800e342:	d10b      	bne.n	800e35c <_printf_i+0x14c>
 800e344:	6823      	ldr	r3, [r4, #0]
 800e346:	07de      	lsls	r6, r3, #31
 800e348:	d508      	bpl.n	800e35c <_printf_i+0x14c>
 800e34a:	6923      	ldr	r3, [r4, #16]
 800e34c:	6861      	ldr	r1, [r4, #4]
 800e34e:	4299      	cmp	r1, r3
 800e350:	bfde      	ittt	le
 800e352:	2330      	movle	r3, #48	; 0x30
 800e354:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e358:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e35c:	1b52      	subs	r2, r2, r5
 800e35e:	6122      	str	r2, [r4, #16]
 800e360:	f8cd a000 	str.w	sl, [sp]
 800e364:	464b      	mov	r3, r9
 800e366:	aa03      	add	r2, sp, #12
 800e368:	4621      	mov	r1, r4
 800e36a:	4640      	mov	r0, r8
 800e36c:	f7ff fee2 	bl	800e134 <_printf_common>
 800e370:	3001      	adds	r0, #1
 800e372:	d14c      	bne.n	800e40e <_printf_i+0x1fe>
 800e374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e378:	b004      	add	sp, #16
 800e37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e37e:	4835      	ldr	r0, [pc, #212]	; (800e454 <_printf_i+0x244>)
 800e380:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e384:	6829      	ldr	r1, [r5, #0]
 800e386:	6823      	ldr	r3, [r4, #0]
 800e388:	f851 6b04 	ldr.w	r6, [r1], #4
 800e38c:	6029      	str	r1, [r5, #0]
 800e38e:	061d      	lsls	r5, r3, #24
 800e390:	d514      	bpl.n	800e3bc <_printf_i+0x1ac>
 800e392:	07df      	lsls	r7, r3, #31
 800e394:	bf44      	itt	mi
 800e396:	f043 0320 	orrmi.w	r3, r3, #32
 800e39a:	6023      	strmi	r3, [r4, #0]
 800e39c:	b91e      	cbnz	r6, 800e3a6 <_printf_i+0x196>
 800e39e:	6823      	ldr	r3, [r4, #0]
 800e3a0:	f023 0320 	bic.w	r3, r3, #32
 800e3a4:	6023      	str	r3, [r4, #0]
 800e3a6:	2310      	movs	r3, #16
 800e3a8:	e7b0      	b.n	800e30c <_printf_i+0xfc>
 800e3aa:	6823      	ldr	r3, [r4, #0]
 800e3ac:	f043 0320 	orr.w	r3, r3, #32
 800e3b0:	6023      	str	r3, [r4, #0]
 800e3b2:	2378      	movs	r3, #120	; 0x78
 800e3b4:	4828      	ldr	r0, [pc, #160]	; (800e458 <_printf_i+0x248>)
 800e3b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e3ba:	e7e3      	b.n	800e384 <_printf_i+0x174>
 800e3bc:	0659      	lsls	r1, r3, #25
 800e3be:	bf48      	it	mi
 800e3c0:	b2b6      	uxthmi	r6, r6
 800e3c2:	e7e6      	b.n	800e392 <_printf_i+0x182>
 800e3c4:	4615      	mov	r5, r2
 800e3c6:	e7bb      	b.n	800e340 <_printf_i+0x130>
 800e3c8:	682b      	ldr	r3, [r5, #0]
 800e3ca:	6826      	ldr	r6, [r4, #0]
 800e3cc:	6961      	ldr	r1, [r4, #20]
 800e3ce:	1d18      	adds	r0, r3, #4
 800e3d0:	6028      	str	r0, [r5, #0]
 800e3d2:	0635      	lsls	r5, r6, #24
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	d501      	bpl.n	800e3dc <_printf_i+0x1cc>
 800e3d8:	6019      	str	r1, [r3, #0]
 800e3da:	e002      	b.n	800e3e2 <_printf_i+0x1d2>
 800e3dc:	0670      	lsls	r0, r6, #25
 800e3de:	d5fb      	bpl.n	800e3d8 <_printf_i+0x1c8>
 800e3e0:	8019      	strh	r1, [r3, #0]
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	6123      	str	r3, [r4, #16]
 800e3e6:	4615      	mov	r5, r2
 800e3e8:	e7ba      	b.n	800e360 <_printf_i+0x150>
 800e3ea:	682b      	ldr	r3, [r5, #0]
 800e3ec:	1d1a      	adds	r2, r3, #4
 800e3ee:	602a      	str	r2, [r5, #0]
 800e3f0:	681d      	ldr	r5, [r3, #0]
 800e3f2:	6862      	ldr	r2, [r4, #4]
 800e3f4:	2100      	movs	r1, #0
 800e3f6:	4628      	mov	r0, r5
 800e3f8:	f7f1 fef2 	bl	80001e0 <memchr>
 800e3fc:	b108      	cbz	r0, 800e402 <_printf_i+0x1f2>
 800e3fe:	1b40      	subs	r0, r0, r5
 800e400:	6060      	str	r0, [r4, #4]
 800e402:	6863      	ldr	r3, [r4, #4]
 800e404:	6123      	str	r3, [r4, #16]
 800e406:	2300      	movs	r3, #0
 800e408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e40c:	e7a8      	b.n	800e360 <_printf_i+0x150>
 800e40e:	6923      	ldr	r3, [r4, #16]
 800e410:	462a      	mov	r2, r5
 800e412:	4649      	mov	r1, r9
 800e414:	4640      	mov	r0, r8
 800e416:	47d0      	blx	sl
 800e418:	3001      	adds	r0, #1
 800e41a:	d0ab      	beq.n	800e374 <_printf_i+0x164>
 800e41c:	6823      	ldr	r3, [r4, #0]
 800e41e:	079b      	lsls	r3, r3, #30
 800e420:	d413      	bmi.n	800e44a <_printf_i+0x23a>
 800e422:	68e0      	ldr	r0, [r4, #12]
 800e424:	9b03      	ldr	r3, [sp, #12]
 800e426:	4298      	cmp	r0, r3
 800e428:	bfb8      	it	lt
 800e42a:	4618      	movlt	r0, r3
 800e42c:	e7a4      	b.n	800e378 <_printf_i+0x168>
 800e42e:	2301      	movs	r3, #1
 800e430:	4632      	mov	r2, r6
 800e432:	4649      	mov	r1, r9
 800e434:	4640      	mov	r0, r8
 800e436:	47d0      	blx	sl
 800e438:	3001      	adds	r0, #1
 800e43a:	d09b      	beq.n	800e374 <_printf_i+0x164>
 800e43c:	3501      	adds	r5, #1
 800e43e:	68e3      	ldr	r3, [r4, #12]
 800e440:	9903      	ldr	r1, [sp, #12]
 800e442:	1a5b      	subs	r3, r3, r1
 800e444:	42ab      	cmp	r3, r5
 800e446:	dcf2      	bgt.n	800e42e <_printf_i+0x21e>
 800e448:	e7eb      	b.n	800e422 <_printf_i+0x212>
 800e44a:	2500      	movs	r5, #0
 800e44c:	f104 0619 	add.w	r6, r4, #25
 800e450:	e7f5      	b.n	800e43e <_printf_i+0x22e>
 800e452:	bf00      	nop
 800e454:	0800ed31 	.word	0x0800ed31
 800e458:	0800ed42 	.word	0x0800ed42

0800e45c <memmove>:
 800e45c:	4288      	cmp	r0, r1
 800e45e:	b510      	push	{r4, lr}
 800e460:	eb01 0402 	add.w	r4, r1, r2
 800e464:	d902      	bls.n	800e46c <memmove+0x10>
 800e466:	4284      	cmp	r4, r0
 800e468:	4623      	mov	r3, r4
 800e46a:	d807      	bhi.n	800e47c <memmove+0x20>
 800e46c:	1e43      	subs	r3, r0, #1
 800e46e:	42a1      	cmp	r1, r4
 800e470:	d008      	beq.n	800e484 <memmove+0x28>
 800e472:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e476:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e47a:	e7f8      	b.n	800e46e <memmove+0x12>
 800e47c:	4402      	add	r2, r0
 800e47e:	4601      	mov	r1, r0
 800e480:	428a      	cmp	r2, r1
 800e482:	d100      	bne.n	800e486 <memmove+0x2a>
 800e484:	bd10      	pop	{r4, pc}
 800e486:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e48a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e48e:	e7f7      	b.n	800e480 <memmove+0x24>

0800e490 <_free_r>:
 800e490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e492:	2900      	cmp	r1, #0
 800e494:	d044      	beq.n	800e520 <_free_r+0x90>
 800e496:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e49a:	9001      	str	r0, [sp, #4]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	f1a1 0404 	sub.w	r4, r1, #4
 800e4a2:	bfb8      	it	lt
 800e4a4:	18e4      	addlt	r4, r4, r3
 800e4a6:	f000 f913 	bl	800e6d0 <__malloc_lock>
 800e4aa:	4a1e      	ldr	r2, [pc, #120]	; (800e524 <_free_r+0x94>)
 800e4ac:	9801      	ldr	r0, [sp, #4]
 800e4ae:	6813      	ldr	r3, [r2, #0]
 800e4b0:	b933      	cbnz	r3, 800e4c0 <_free_r+0x30>
 800e4b2:	6063      	str	r3, [r4, #4]
 800e4b4:	6014      	str	r4, [r2, #0]
 800e4b6:	b003      	add	sp, #12
 800e4b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4bc:	f000 b90e 	b.w	800e6dc <__malloc_unlock>
 800e4c0:	42a3      	cmp	r3, r4
 800e4c2:	d908      	bls.n	800e4d6 <_free_r+0x46>
 800e4c4:	6825      	ldr	r5, [r4, #0]
 800e4c6:	1961      	adds	r1, r4, r5
 800e4c8:	428b      	cmp	r3, r1
 800e4ca:	bf01      	itttt	eq
 800e4cc:	6819      	ldreq	r1, [r3, #0]
 800e4ce:	685b      	ldreq	r3, [r3, #4]
 800e4d0:	1949      	addeq	r1, r1, r5
 800e4d2:	6021      	streq	r1, [r4, #0]
 800e4d4:	e7ed      	b.n	800e4b2 <_free_r+0x22>
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	685b      	ldr	r3, [r3, #4]
 800e4da:	b10b      	cbz	r3, 800e4e0 <_free_r+0x50>
 800e4dc:	42a3      	cmp	r3, r4
 800e4de:	d9fa      	bls.n	800e4d6 <_free_r+0x46>
 800e4e0:	6811      	ldr	r1, [r2, #0]
 800e4e2:	1855      	adds	r5, r2, r1
 800e4e4:	42a5      	cmp	r5, r4
 800e4e6:	d10b      	bne.n	800e500 <_free_r+0x70>
 800e4e8:	6824      	ldr	r4, [r4, #0]
 800e4ea:	4421      	add	r1, r4
 800e4ec:	1854      	adds	r4, r2, r1
 800e4ee:	42a3      	cmp	r3, r4
 800e4f0:	6011      	str	r1, [r2, #0]
 800e4f2:	d1e0      	bne.n	800e4b6 <_free_r+0x26>
 800e4f4:	681c      	ldr	r4, [r3, #0]
 800e4f6:	685b      	ldr	r3, [r3, #4]
 800e4f8:	6053      	str	r3, [r2, #4]
 800e4fa:	4421      	add	r1, r4
 800e4fc:	6011      	str	r1, [r2, #0]
 800e4fe:	e7da      	b.n	800e4b6 <_free_r+0x26>
 800e500:	d902      	bls.n	800e508 <_free_r+0x78>
 800e502:	230c      	movs	r3, #12
 800e504:	6003      	str	r3, [r0, #0]
 800e506:	e7d6      	b.n	800e4b6 <_free_r+0x26>
 800e508:	6825      	ldr	r5, [r4, #0]
 800e50a:	1961      	adds	r1, r4, r5
 800e50c:	428b      	cmp	r3, r1
 800e50e:	bf04      	itt	eq
 800e510:	6819      	ldreq	r1, [r3, #0]
 800e512:	685b      	ldreq	r3, [r3, #4]
 800e514:	6063      	str	r3, [r4, #4]
 800e516:	bf04      	itt	eq
 800e518:	1949      	addeq	r1, r1, r5
 800e51a:	6021      	streq	r1, [r4, #0]
 800e51c:	6054      	str	r4, [r2, #4]
 800e51e:	e7ca      	b.n	800e4b6 <_free_r+0x26>
 800e520:	b003      	add	sp, #12
 800e522:	bd30      	pop	{r4, r5, pc}
 800e524:	20014d7c 	.word	0x20014d7c

0800e528 <sbrk_aligned>:
 800e528:	b570      	push	{r4, r5, r6, lr}
 800e52a:	4e0e      	ldr	r6, [pc, #56]	; (800e564 <sbrk_aligned+0x3c>)
 800e52c:	460c      	mov	r4, r1
 800e52e:	6831      	ldr	r1, [r6, #0]
 800e530:	4605      	mov	r5, r0
 800e532:	b911      	cbnz	r1, 800e53a <sbrk_aligned+0x12>
 800e534:	f000 f8bc 	bl	800e6b0 <_sbrk_r>
 800e538:	6030      	str	r0, [r6, #0]
 800e53a:	4621      	mov	r1, r4
 800e53c:	4628      	mov	r0, r5
 800e53e:	f000 f8b7 	bl	800e6b0 <_sbrk_r>
 800e542:	1c43      	adds	r3, r0, #1
 800e544:	d00a      	beq.n	800e55c <sbrk_aligned+0x34>
 800e546:	1cc4      	adds	r4, r0, #3
 800e548:	f024 0403 	bic.w	r4, r4, #3
 800e54c:	42a0      	cmp	r0, r4
 800e54e:	d007      	beq.n	800e560 <sbrk_aligned+0x38>
 800e550:	1a21      	subs	r1, r4, r0
 800e552:	4628      	mov	r0, r5
 800e554:	f000 f8ac 	bl	800e6b0 <_sbrk_r>
 800e558:	3001      	adds	r0, #1
 800e55a:	d101      	bne.n	800e560 <sbrk_aligned+0x38>
 800e55c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e560:	4620      	mov	r0, r4
 800e562:	bd70      	pop	{r4, r5, r6, pc}
 800e564:	20014d80 	.word	0x20014d80

0800e568 <_malloc_r>:
 800e568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e56c:	1ccd      	adds	r5, r1, #3
 800e56e:	f025 0503 	bic.w	r5, r5, #3
 800e572:	3508      	adds	r5, #8
 800e574:	2d0c      	cmp	r5, #12
 800e576:	bf38      	it	cc
 800e578:	250c      	movcc	r5, #12
 800e57a:	2d00      	cmp	r5, #0
 800e57c:	4607      	mov	r7, r0
 800e57e:	db01      	blt.n	800e584 <_malloc_r+0x1c>
 800e580:	42a9      	cmp	r1, r5
 800e582:	d905      	bls.n	800e590 <_malloc_r+0x28>
 800e584:	230c      	movs	r3, #12
 800e586:	603b      	str	r3, [r7, #0]
 800e588:	2600      	movs	r6, #0
 800e58a:	4630      	mov	r0, r6
 800e58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e590:	4e2e      	ldr	r6, [pc, #184]	; (800e64c <_malloc_r+0xe4>)
 800e592:	f000 f89d 	bl	800e6d0 <__malloc_lock>
 800e596:	6833      	ldr	r3, [r6, #0]
 800e598:	461c      	mov	r4, r3
 800e59a:	bb34      	cbnz	r4, 800e5ea <_malloc_r+0x82>
 800e59c:	4629      	mov	r1, r5
 800e59e:	4638      	mov	r0, r7
 800e5a0:	f7ff ffc2 	bl	800e528 <sbrk_aligned>
 800e5a4:	1c43      	adds	r3, r0, #1
 800e5a6:	4604      	mov	r4, r0
 800e5a8:	d14d      	bne.n	800e646 <_malloc_r+0xde>
 800e5aa:	6834      	ldr	r4, [r6, #0]
 800e5ac:	4626      	mov	r6, r4
 800e5ae:	2e00      	cmp	r6, #0
 800e5b0:	d140      	bne.n	800e634 <_malloc_r+0xcc>
 800e5b2:	6823      	ldr	r3, [r4, #0]
 800e5b4:	4631      	mov	r1, r6
 800e5b6:	4638      	mov	r0, r7
 800e5b8:	eb04 0803 	add.w	r8, r4, r3
 800e5bc:	f000 f878 	bl	800e6b0 <_sbrk_r>
 800e5c0:	4580      	cmp	r8, r0
 800e5c2:	d13a      	bne.n	800e63a <_malloc_r+0xd2>
 800e5c4:	6821      	ldr	r1, [r4, #0]
 800e5c6:	3503      	adds	r5, #3
 800e5c8:	1a6d      	subs	r5, r5, r1
 800e5ca:	f025 0503 	bic.w	r5, r5, #3
 800e5ce:	3508      	adds	r5, #8
 800e5d0:	2d0c      	cmp	r5, #12
 800e5d2:	bf38      	it	cc
 800e5d4:	250c      	movcc	r5, #12
 800e5d6:	4629      	mov	r1, r5
 800e5d8:	4638      	mov	r0, r7
 800e5da:	f7ff ffa5 	bl	800e528 <sbrk_aligned>
 800e5de:	3001      	adds	r0, #1
 800e5e0:	d02b      	beq.n	800e63a <_malloc_r+0xd2>
 800e5e2:	6823      	ldr	r3, [r4, #0]
 800e5e4:	442b      	add	r3, r5
 800e5e6:	6023      	str	r3, [r4, #0]
 800e5e8:	e00e      	b.n	800e608 <_malloc_r+0xa0>
 800e5ea:	6822      	ldr	r2, [r4, #0]
 800e5ec:	1b52      	subs	r2, r2, r5
 800e5ee:	d41e      	bmi.n	800e62e <_malloc_r+0xc6>
 800e5f0:	2a0b      	cmp	r2, #11
 800e5f2:	d916      	bls.n	800e622 <_malloc_r+0xba>
 800e5f4:	1961      	adds	r1, r4, r5
 800e5f6:	42a3      	cmp	r3, r4
 800e5f8:	6025      	str	r5, [r4, #0]
 800e5fa:	bf18      	it	ne
 800e5fc:	6059      	strne	r1, [r3, #4]
 800e5fe:	6863      	ldr	r3, [r4, #4]
 800e600:	bf08      	it	eq
 800e602:	6031      	streq	r1, [r6, #0]
 800e604:	5162      	str	r2, [r4, r5]
 800e606:	604b      	str	r3, [r1, #4]
 800e608:	4638      	mov	r0, r7
 800e60a:	f104 060b 	add.w	r6, r4, #11
 800e60e:	f000 f865 	bl	800e6dc <__malloc_unlock>
 800e612:	f026 0607 	bic.w	r6, r6, #7
 800e616:	1d23      	adds	r3, r4, #4
 800e618:	1af2      	subs	r2, r6, r3
 800e61a:	d0b6      	beq.n	800e58a <_malloc_r+0x22>
 800e61c:	1b9b      	subs	r3, r3, r6
 800e61e:	50a3      	str	r3, [r4, r2]
 800e620:	e7b3      	b.n	800e58a <_malloc_r+0x22>
 800e622:	6862      	ldr	r2, [r4, #4]
 800e624:	42a3      	cmp	r3, r4
 800e626:	bf0c      	ite	eq
 800e628:	6032      	streq	r2, [r6, #0]
 800e62a:	605a      	strne	r2, [r3, #4]
 800e62c:	e7ec      	b.n	800e608 <_malloc_r+0xa0>
 800e62e:	4623      	mov	r3, r4
 800e630:	6864      	ldr	r4, [r4, #4]
 800e632:	e7b2      	b.n	800e59a <_malloc_r+0x32>
 800e634:	4634      	mov	r4, r6
 800e636:	6876      	ldr	r6, [r6, #4]
 800e638:	e7b9      	b.n	800e5ae <_malloc_r+0x46>
 800e63a:	230c      	movs	r3, #12
 800e63c:	603b      	str	r3, [r7, #0]
 800e63e:	4638      	mov	r0, r7
 800e640:	f000 f84c 	bl	800e6dc <__malloc_unlock>
 800e644:	e7a1      	b.n	800e58a <_malloc_r+0x22>
 800e646:	6025      	str	r5, [r4, #0]
 800e648:	e7de      	b.n	800e608 <_malloc_r+0xa0>
 800e64a:	bf00      	nop
 800e64c:	20014d7c 	.word	0x20014d7c

0800e650 <_realloc_r>:
 800e650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e654:	4680      	mov	r8, r0
 800e656:	4614      	mov	r4, r2
 800e658:	460e      	mov	r6, r1
 800e65a:	b921      	cbnz	r1, 800e666 <_realloc_r+0x16>
 800e65c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e660:	4611      	mov	r1, r2
 800e662:	f7ff bf81 	b.w	800e568 <_malloc_r>
 800e666:	b92a      	cbnz	r2, 800e674 <_realloc_r+0x24>
 800e668:	f7ff ff12 	bl	800e490 <_free_r>
 800e66c:	4625      	mov	r5, r4
 800e66e:	4628      	mov	r0, r5
 800e670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e674:	f000 f838 	bl	800e6e8 <_malloc_usable_size_r>
 800e678:	4284      	cmp	r4, r0
 800e67a:	4607      	mov	r7, r0
 800e67c:	d802      	bhi.n	800e684 <_realloc_r+0x34>
 800e67e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e682:	d812      	bhi.n	800e6aa <_realloc_r+0x5a>
 800e684:	4621      	mov	r1, r4
 800e686:	4640      	mov	r0, r8
 800e688:	f7ff ff6e 	bl	800e568 <_malloc_r>
 800e68c:	4605      	mov	r5, r0
 800e68e:	2800      	cmp	r0, #0
 800e690:	d0ed      	beq.n	800e66e <_realloc_r+0x1e>
 800e692:	42bc      	cmp	r4, r7
 800e694:	4622      	mov	r2, r4
 800e696:	4631      	mov	r1, r6
 800e698:	bf28      	it	cs
 800e69a:	463a      	movcs	r2, r7
 800e69c:	f7ff fb90 	bl	800ddc0 <memcpy>
 800e6a0:	4631      	mov	r1, r6
 800e6a2:	4640      	mov	r0, r8
 800e6a4:	f7ff fef4 	bl	800e490 <_free_r>
 800e6a8:	e7e1      	b.n	800e66e <_realloc_r+0x1e>
 800e6aa:	4635      	mov	r5, r6
 800e6ac:	e7df      	b.n	800e66e <_realloc_r+0x1e>
	...

0800e6b0 <_sbrk_r>:
 800e6b0:	b538      	push	{r3, r4, r5, lr}
 800e6b2:	4d06      	ldr	r5, [pc, #24]	; (800e6cc <_sbrk_r+0x1c>)
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	4604      	mov	r4, r0
 800e6b8:	4608      	mov	r0, r1
 800e6ba:	602b      	str	r3, [r5, #0]
 800e6bc:	f7f7 fb30 	bl	8005d20 <_sbrk>
 800e6c0:	1c43      	adds	r3, r0, #1
 800e6c2:	d102      	bne.n	800e6ca <_sbrk_r+0x1a>
 800e6c4:	682b      	ldr	r3, [r5, #0]
 800e6c6:	b103      	cbz	r3, 800e6ca <_sbrk_r+0x1a>
 800e6c8:	6023      	str	r3, [r4, #0]
 800e6ca:	bd38      	pop	{r3, r4, r5, pc}
 800e6cc:	20014d84 	.word	0x20014d84

0800e6d0 <__malloc_lock>:
 800e6d0:	4801      	ldr	r0, [pc, #4]	; (800e6d8 <__malloc_lock+0x8>)
 800e6d2:	f000 b811 	b.w	800e6f8 <__retarget_lock_acquire_recursive>
 800e6d6:	bf00      	nop
 800e6d8:	20014d88 	.word	0x20014d88

0800e6dc <__malloc_unlock>:
 800e6dc:	4801      	ldr	r0, [pc, #4]	; (800e6e4 <__malloc_unlock+0x8>)
 800e6de:	f000 b80c 	b.w	800e6fa <__retarget_lock_release_recursive>
 800e6e2:	bf00      	nop
 800e6e4:	20014d88 	.word	0x20014d88

0800e6e8 <_malloc_usable_size_r>:
 800e6e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6ec:	1f18      	subs	r0, r3, #4
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	bfbc      	itt	lt
 800e6f2:	580b      	ldrlt	r3, [r1, r0]
 800e6f4:	18c0      	addlt	r0, r0, r3
 800e6f6:	4770      	bx	lr

0800e6f8 <__retarget_lock_acquire_recursive>:
 800e6f8:	4770      	bx	lr

0800e6fa <__retarget_lock_release_recursive>:
 800e6fa:	4770      	bx	lr

0800e6fc <_init>:
 800e6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6fe:	bf00      	nop
 800e700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e702:	bc08      	pop	{r3}
 800e704:	469e      	mov	lr, r3
 800e706:	4770      	bx	lr

0800e708 <_fini>:
 800e708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e70a:	bf00      	nop
 800e70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e70e:	bc08      	pop	{r3}
 800e710:	469e      	mov	lr, r3
 800e712:	4770      	bx	lr
