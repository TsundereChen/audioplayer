
audioplayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  0800e434  0800e434  0001e434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea5c  0800ea5c  000200e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea5c  0800ea5c  0001ea5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea64  0800ea64  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea64  0800ea64  0001ea64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea68  0800ea68  0001ea68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  0800ea6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200e4  2**0
                  CONTENTS
 10 .bss          00014ca0  200000e4  200000e4  000200e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20014d84  20014d84  000200e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023b71  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005424  00000000  00000000  00043c85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e88  00000000  00000000  000490b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c68  00000000  00000000  0004af38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027426  00000000  00000000  0004cba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028240  00000000  00000000  00073fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc445  00000000  00000000  0009c206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017864b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008300  00000000  00000000  0017869c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e4 	.word	0x200000e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e41c 	.word	0x0800e41c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e8 	.word	0x200000e8
 80001cc:	0800e41c 	.word	0x0800e41c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	603a      	str	r2, [r7, #0]
 800058e:	80fb      	strh	r3, [r7, #6]
 8000590:	460b      	mov	r3, r1
 8000592:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 8000594:	2300      	movs	r3, #0
 8000596:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8000598:	2200      	movs	r2, #0
 800059a:	6839      	ldr	r1, [r7, #0]
 800059c:	481c      	ldr	r0, [pc, #112]	; (8000610 <AUDIO_OUT_Init+0x8c>)
 800059e:	f000 f8f9 	bl	8000794 <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 80005a2:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <AUDIO_OUT_Init+0x8c>)
 80005a4:	4a1b      	ldr	r2, [pc, #108]	; (8000614 <AUDIO_OUT_Init+0x90>)
 80005a6:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80005a8:	4819      	ldr	r0, [pc, #100]	; (8000610 <AUDIO_OUT_Init+0x8c>)
 80005aa:	f008 fbe1 	bl	8008d70 <HAL_I2S_GetState>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d103      	bne.n	80005bc <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 80005b4:	2100      	movs	r1, #0
 80005b6:	4816      	ldr	r0, [pc, #88]	; (8000610 <AUDIO_OUT_Init+0x8c>)
 80005b8:	f000 f946 	bl	8000848 <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 80005bc:	6838      	ldr	r0, [r7, #0]
 80005be:	f000 fa0b 	bl	80009d8 <I2S3_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 80005c8:	2301      	movs	r3, #1
 80005ca:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d10e      	bne.n	80005f0 <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <AUDIO_OUT_Init+0x94>)
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	2094      	movs	r0, #148	; 0x94
 80005d8:	4798      	blx	r3
 80005da:	4603      	mov	r3, r0
 80005dc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80005e0:	2be0      	cmp	r3, #224	; 0xe0
 80005e2:	d103      	bne.n	80005ec <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 80005e4:	4b0d      	ldr	r3, [pc, #52]	; (800061c <AUDIO_OUT_Init+0x98>)
 80005e6:	4a0c      	ldr	r2, [pc, #48]	; (8000618 <AUDIO_OUT_Init+0x94>)
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	e001      	b.n	80005f0 <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 80005ec:	2301      	movs	r3, #1
 80005ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d107      	bne.n	8000606 <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <AUDIO_OUT_Init+0x98>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	681c      	ldr	r4, [r3, #0]
 80005fc:	797a      	ldrb	r2, [r7, #5]
 80005fe:	88f9      	ldrh	r1, [r7, #6]
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	2094      	movs	r0, #148	; 0x94
 8000604:	47a0      	blx	r4
  }
  
  return ret;
 8000606:	7bfb      	ldrb	r3, [r7, #15]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	bd90      	pop	{r4, r7, pc}
 8000610:	20000104 	.word	0x20000104
 8000614:	40003c00 	.word	0x40003c00
 8000618:	20000020 	.word	0x20000020
 800061c:	20000100 	.word	0x20000100

08000620 <AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <AUDIO_OUT_Play+0x4c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	b292      	uxth	r2, r2
 8000634:	6879      	ldr	r1, [r7, #4]
 8000636:	2094      	movs	r0, #148	; 0x94
 8000638:	4798      	blx	r3
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 8000640:	2301      	movs	r3, #1
 8000642:	e00f      	b.n	8000664 <AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800064a:	d203      	bcs.n	8000654 <AUDIO_OUT_Play+0x34>
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	085b      	lsrs	r3, r3, #1
 8000650:	b29b      	uxth	r3, r3
 8000652:	e001      	b.n	8000658 <AUDIO_OUT_Play+0x38>
 8000654:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000658:	461a      	mov	r2, r3
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <AUDIO_OUT_Play+0x50>)
 800065e:	f008 f805 	bl	800866c <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000662:	2300      	movs	r3, #0
  }
}
 8000664:	4618      	mov	r0, r3
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000100 	.word	0x20000100
 8000670:	20000104 	.word	0x20000104

08000674 <AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Pause(void)
{    
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <AUDIO_OUT_Pause+0x24>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	691b      	ldr	r3, [r3, #16]
 800067e:	2094      	movs	r0, #148	; 0x94
 8000680:	4798      	blx	r3
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <AUDIO_OUT_Pause+0x18>
  {
    return AUDIO_ERROR;
 8000688:	2301      	movs	r3, #1
 800068a:	e003      	b.n	8000694 <AUDIO_OUT_Pause+0x20>
  }
  else
  {
    /* Call the Media layer pause function */
    HAL_I2S_DMAPause(&hAudioOutI2s);
 800068c:	4803      	ldr	r0, [pc, #12]	; (800069c <AUDIO_OUT_Pause+0x28>)
 800068e:	f008 f895 	bl	80087bc <HAL_I2S_DMAPause>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000692:	2300      	movs	r3, #0
  }
}
 8000694:	4618      	mov	r0, r3
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000100 	.word	0x20000100
 800069c:	20000104 	.word	0x20000104

080006a0 <AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Resume(void)
{    
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <AUDIO_OUT_Resume+0x24>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	2094      	movs	r0, #148	; 0x94
 80006ac:	4798      	blx	r3
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <AUDIO_OUT_Resume+0x18>
  {
    return AUDIO_ERROR;
 80006b4:	2301      	movs	r3, #1
 80006b6:	e003      	b.n	80006c0 <AUDIO_OUT_Resume+0x20>
  }
  else
  {
    /* Call the Media layer resume function */
    HAL_I2S_DMAResume(&hAudioOutI2s);
 80006b8:	4803      	ldr	r0, [pc, #12]	; (80006c8 <AUDIO_OUT_Resume+0x28>)
 80006ba:	f008 f8e1 	bl	8008880 <HAL_I2S_DMAResume>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80006be:	2300      	movs	r3, #0
  }
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000100 	.word	0x20000100
 80006c8:	20000104 	.word	0x20000104

080006cc <AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Stop(uint32_t Option)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* Call DMA Stop to disable DMA stream before stopping codec */
  HAL_I2S_DMAStop(&hAudioOutI2s);
 80006d4:	480e      	ldr	r0, [pc, #56]	; (8000710 <AUDIO_OUT_Stop+0x44>)
 80006d6:	f008 f967 	bl	80089a8 <HAL_I2S_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <AUDIO_OUT_Stop+0x48>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	6879      	ldr	r1, [r7, #4]
 80006e2:	2094      	movs	r0, #148	; 0x94
 80006e4:	4798      	blx	r3
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 80006ec:	2301      	movs	r3, #1
 80006ee:	e00b      	b.n	8000708 <AUDIO_OUT_Stop+0x3c>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d107      	bne.n	8000706 <AUDIO_OUT_Stop+0x3a>
    { 
      /* Wait at least 1ms */
      HAL_Delay(1);
 80006f6:	2001      	movs	r0, #1
 80006f8:	f005 fcec 	bl	80060d4 <HAL_Delay>
      
      /* Reset the pin */
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2110      	movs	r1, #16
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <AUDIO_OUT_Stop+0x4c>)
 8000702:	f006 fcc3 	bl	800708c <HAL_GPIO_WritePin>
    }
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000706:	2300      	movs	r3, #0
  }
}
 8000708:	4618      	mov	r0, r3
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000104 	.word	0x20000104
 8000714:	20000100 	.word	0x20000100
 8000718:	40020c00 	.word	0x40020c00

0800071c <AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <AUDIO_OUT_SetVolume+0x2c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	6a1b      	ldr	r3, [r3, #32]
 800072c:	79fa      	ldrb	r2, [r7, #7]
 800072e:	4611      	mov	r1, r2
 8000730:	2094      	movs	r0, #148	; 0x94
 8000732:	4798      	blx	r3
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 800073a:	2301      	movs	r3, #1
 800073c:	e000      	b.n	8000740 <AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800073e:	2300      	movs	r3, #0
  }
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000100 	.word	0x20000100

0800074c <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a04      	ldr	r2, [pc, #16]	; (800076c <HAL_I2S_TxCpltCallback+0x20>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d101      	bne.n	8000762 <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 800075e:	f005 fc25 	bl	8005fac <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40003c00 	.word	0x40003c00

08000770 <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a04      	ldr	r2, [pc, #16]	; (8000790 <HAL_I2S_TxHalfCpltCallback+0x20>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d101      	bne.n	8000786 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 8000782:	f005 fc27 	bl	8005fd4 <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40003c00 	.word	0x40003c00

08000794 <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	; 0x28
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 80007a0:	2300      	movs	r3, #0
 80007a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80007a6:	23ff      	movs	r3, #255	; 0xff
 80007a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
  for(index = 0; index < 8; index++)
 80007ac:	2300      	movs	r3, #0
 80007ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80007b2:	e010      	b.n	80007d6 <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 80007b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007b8:	4a20      	ldr	r2, [pc, #128]	; (800083c <AUDIO_OUT_ClockConfig+0xa8>)
 80007ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d103      	bne.n	80007cc <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 80007c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(index = 0; index < 8; index++)
 80007cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007d0:	3301      	adds	r3, #1
 80007d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80007d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007da:	2b07      	cmp	r3, #7
 80007dc:	d9ea      	bls.n	80007b4 <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4618      	mov	r0, r3
 80007e4:	f009 fc4e 	bl	800a084 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 80007e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007ec:	f003 0307 	and.w	r3, r3, #7
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d113      	bne.n	800081c <AUDIO_OUT_ClockConfig+0x88>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80007f4:	2301      	movs	r3, #1
 80007f6:	617b      	str	r3, [r7, #20]
//    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80007f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007fc:	4a10      	ldr	r2, [pc, #64]	; (8000840 <AUDIO_OUT_ClockConfig+0xac>)
 80007fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000802:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000804:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000808:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <AUDIO_OUT_ClockConfig+0xb0>)
 800080a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800080e:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4618      	mov	r0, r3
 8000816:	f009 fb53 	bl	8009ec0 <HAL_RCCEx_PeriphCLKConfig>
//    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 800081a:	e00b      	b.n	8000834 <AUDIO_OUT_ClockConfig+0xa0>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800081c:	2301      	movs	r3, #1
 800081e:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8000820:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000824:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8000826:	2303      	movs	r3, #3
 8000828:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4618      	mov	r0, r3
 8000830:	f009 fb46 	bl	8009ec0 <HAL_RCCEx_PeriphCLKConfig>
}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	; 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	0800e748 	.word	0x0800e748
 8000840:	0800e768 	.word	0x0800e768
 8000844:	0800e788 	.word	0x0800e788

08000848 <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08c      	sub	sp, #48	; 0x30
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	61bb      	str	r3, [r7, #24]
 8000856:	4b56      	ldr	r3, [pc, #344]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	4a55      	ldr	r2, [pc, #340]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 800085c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000860:	6413      	str	r3, [r2, #64]	; 0x40
 8000862:	4b53      	ldr	r3, [pc, #332]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800086a:	61bb      	str	r3, [r7, #24]
 800086c:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
 8000872:	4b4f      	ldr	r3, [pc, #316]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a4e      	ldr	r2, [pc, #312]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b4c      	ldr	r3, [pc, #304]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	4b48      	ldr	r3, [pc, #288]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a47      	ldr	r2, [pc, #284]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b45      	ldr	r3, [pc, #276]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 80008a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 80008b4:	2302      	movs	r3, #2
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 80008b8:	2306      	movs	r3, #6
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	483c      	ldr	r0, [pc, #240]	; (80009b4 <AUDIO_OUT_MspInit+0x16c>)
 80008c4:	f006 f94a 	bl	8006b5c <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 80008c8:	2310      	movs	r3, #16
 80008ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4839      	ldr	r0, [pc, #228]	; (80009b8 <AUDIO_OUT_MspInit+0x170>)
 80008d4:	f006 f942 	bl	8006b5c <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	4b34      	ldr	r3, [pc, #208]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 80008de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e0:	4a33      	ldr	r2, [pc, #204]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 80008e2:	f043 0304 	orr.w	r3, r3, #4
 80008e6:	6313      	str	r3, [r2, #48]	; 0x30
 80008e8:	4b31      	ldr	r3, [pc, #196]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 80008ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ec:	f003 0304 	and.w	r3, r3, #4
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	482d      	ldr	r0, [pc, #180]	; (80009b4 <AUDIO_OUT_MspInit+0x16c>)
 8000900:	f006 f92c 	bl	8006b5c <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	4b29      	ldr	r3, [pc, #164]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 800090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090c:	4a28      	ldr	r2, [pc, #160]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 800090e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000912:	6313      	str	r3, [r2, #48]	; 0x30
 8000914:	4b26      	ldr	r3, [pc, #152]	; (80009b0 <AUDIO_OUT_MspInit+0x168>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a25      	ldr	r2, [pc, #148]	; (80009bc <AUDIO_OUT_MspInit+0x174>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d136      	bne.n	8000998 <AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 800092a:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 800092c:	2200      	movs	r2, #0
 800092e:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000930:	4b23      	ldr	r3, [pc, #140]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 8000932:	2240      	movs	r2, #64	; 0x40
 8000934:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000936:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 8000938:	2200      	movs	r2, #0
 800093a:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 800093c:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 800093e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000942:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8000944:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 8000946:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800094a:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 800094c:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 800094e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000952:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 8000954:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 800095a:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 800095c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000960:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8000962:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 8000964:	2204      	movs	r2, #4
 8000966:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000968:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 800096a:	2203      	movs	r2, #3
 800096c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800096e:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 8000970:	2200      	movs	r2, #0
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 8000976:	2200      	movs	r2, #0
 8000978:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 800097c:	4a11      	ldr	r2, [pc, #68]	; (80009c4 <AUDIO_OUT_MspInit+0x17c>)
 800097e:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a0f      	ldr	r2, [pc, #60]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 8000984:	639a      	str	r2, [r3, #56]	; 0x38
 8000986:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 800098e:	f005 fd55 	bl	800643c <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 8000992:	480b      	ldr	r0, [pc, #44]	; (80009c0 <AUDIO_OUT_MspInit+0x178>)
 8000994:	f005 fca4 	bl	80062e0 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	210e      	movs	r1, #14
 800099c:	202f      	movs	r0, #47	; 0x2f
 800099e:	f005 fc75 	bl	800628c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 80009a2:	202f      	movs	r0, #47	; 0x2f
 80009a4:	f005 fc8e 	bl	80062c4 <HAL_NVIC_EnableIRQ>
}
 80009a8:	bf00      	nop
 80009aa:	3730      	adds	r7, #48	; 0x30
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020800 	.word	0x40020800
 80009b8:	40020000 	.word	0x40020000
 80009bc:	40003c00 	.word	0x40003c00
 80009c0:	2000014c 	.word	0x2000014c
 80009c4:	400260b8 	.word	0x400260b8

080009c8 <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
	...

080009d8 <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 80009e0:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <I2S3_Init+0x68>)
 80009e2:	4a18      	ldr	r2, [pc, #96]	; (8000a44 <I2S3_Init+0x6c>)
 80009e4:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <I2S3_Init+0x68>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	69da      	ldr	r2, [r3, #28]
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <I2S3_Init+0x68>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80009f4:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <I2S3_Init+0x68>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 80009fc:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <I2S3_Init+0x68>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <I2S3_Init+0x68>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <I2S3_Init+0x68>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <I2S3_Init+0x68>)
 8000a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a14:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 8000a16:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <I2S3_Init+0x68>)
 8000a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a1c:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <I2S3_Init+0x68>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8000a24:	4806      	ldr	r0, [pc, #24]	; (8000a40 <I2S3_Init+0x68>)
 8000a26:	f007 fce1 	bl	80083ec <HAL_I2S_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	e000      	b.n	8000a36 <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 8000a34:	2300      	movs	r3, #0
  }
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000104 	.word	0x20000104
 8000a44:	40003c00 	.word	0x40003c00

08000a48 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <HAL_I2S_ErrorCallback+0x20>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d101      	bne.n	8000a5e <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 8000a5a:	f7ff ffb5 	bl	80009c8 <AUDIO_OUT_Error_CallBack>
  }
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40003c00 	.word	0x40003c00

08000a6c <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8000a70:	4814      	ldr	r0, [pc, #80]	; (8000ac4 <I2Cx_Init+0x58>)
 8000a72:	f007 f8cf 	bl	8007c14 <HAL_I2C_GetState>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d121      	bne.n	8000ac0 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <I2Cx_Init+0x58>)
 8000a7e:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <I2Cx_Init+0x5c>)
 8000a80:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <I2Cx_Init+0x58>)
 8000a84:	2243      	movs	r2, #67	; 0x43
 8000a86:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8000a88:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <I2Cx_Init+0x58>)
 8000a8a:	4a10      	ldr	r2, [pc, #64]	; (8000acc <I2Cx_Init+0x60>)
 8000a8c:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <I2Cx_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a94:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <I2Cx_Init+0x58>)
 8000a96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a9a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <I2Cx_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <I2Cx_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <I2Cx_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8000aae:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <I2Cx_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8000ab4:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <I2Cx_Init+0x58>)
 8000ab6:	f000 f86b 	bl	8000b90 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8000aba:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <I2Cx_Init+0x58>)
 8000abc:	f006 fb18 	bl	80070f0 <HAL_I2C_Init>
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200001ac 	.word	0x200001ac
 8000ac8:	40005400 	.word	0x40005400
 8000acc:	000186a0 	.word	0x000186a0

08000ad0 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af04      	add	r7, sp, #16
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	80fb      	strh	r3, [r7, #6]
 8000ada:	460b      	mov	r3, r1
 8000adc:	717b      	strb	r3, [r7, #5]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000ae6:	797b      	ldrb	r3, [r7, #5]
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <I2Cx_WriteData+0x48>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	88f9      	ldrh	r1, [r7, #6]
 8000af0:	9302      	str	r3, [sp, #8]
 8000af2:	2301      	movs	r3, #1
 8000af4:	9301      	str	r3, [sp, #4]
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	2301      	movs	r3, #1
 8000afc:	4807      	ldr	r0, [pc, #28]	; (8000b1c <I2Cx_WriteData+0x4c>)
 8000afe:	f006 fd69 	bl	80075d4 <HAL_I2C_Mem_Write>
 8000b02:	4603      	mov	r3, r0
 8000b04:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000b0c:	f000 f834 	bl	8000b78 <I2Cx_Error>
  }
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	200001ac 	.word	0x200001ac

08000b20 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b088      	sub	sp, #32
 8000b24:	af04      	add	r7, sp, #16
 8000b26:	4603      	mov	r3, r0
 8000b28:	460a      	mov	r2, r1
 8000b2a:	80fb      	strh	r3, [r7, #6]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000b30:	2300      	movs	r3, #0
 8000b32:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000b38:	797b      	ldrb	r3, [r7, #5]
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <I2Cx_ReadData+0x50>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	88f9      	ldrh	r1, [r7, #6]
 8000b42:	9302      	str	r3, [sp, #8]
 8000b44:	2301      	movs	r3, #1
 8000b46:	9301      	str	r3, [sp, #4]
 8000b48:	f107 030e 	add.w	r3, r7, #14
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	2301      	movs	r3, #1
 8000b50:	4808      	ldr	r0, [pc, #32]	; (8000b74 <I2Cx_ReadData+0x54>)
 8000b52:	f006 fe39 	bl	80077c8 <HAL_I2C_Mem_Read>
 8000b56:	4603      	mov	r3, r0
 8000b58:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000b60:	f000 f80a 	bl	8000b78 <I2Cx_Error>
  }
  return value;
 8000b64:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000000 	.word	0x20000000
 8000b74:	200001ac 	.word	0x200001ac

08000b78 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8000b7c:	4803      	ldr	r0, [pc, #12]	; (8000b8c <I2Cx_Error+0x14>)
 8000b7e:	f006 fbfb 	bl	8007378 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8000b82:	f7ff ff73 	bl	8000a6c <I2Cx_Init>
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200001ac 	.word	0x200001ac

08000b90 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	4b25      	ldr	r3, [pc, #148]	; (8000c34 <I2Cx_MspInit+0xa4>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba0:	4a24      	ldr	r2, [pc, #144]	; (8000c34 <I2Cx_MspInit+0xa4>)
 8000ba2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba8:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <I2Cx_MspInit+0xa4>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <I2Cx_MspInit+0xa4>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	4a1d      	ldr	r2, [pc, #116]	; (8000c34 <I2Cx_MspInit+0xa4>)
 8000bbe:	f043 0302 	orr.w	r3, r3, #2
 8000bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <I2Cx_MspInit+0xa4>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	f003 0302 	and.w	r3, r3, #2
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000bd0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000bd6:	2312      	movs	r3, #18
 8000bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000bde:	2302      	movs	r3, #2
 8000be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000be2:	2304      	movs	r3, #4
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	4812      	ldr	r0, [pc, #72]	; (8000c38 <I2Cx_MspInit+0xa8>)
 8000bee:	f005 ffb5 	bl	8006b5c <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <I2Cx_MspInit+0xa4>)
 8000bf4:	6a1b      	ldr	r3, [r3, #32]
 8000bf6:	4a0f      	ldr	r2, [pc, #60]	; (8000c34 <I2Cx_MspInit+0xa4>)
 8000bf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bfc:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <I2Cx_MspInit+0xa4>)
 8000c00:	6a1b      	ldr	r3, [r3, #32]
 8000c02:	4a0c      	ldr	r2, [pc, #48]	; (8000c34 <I2Cx_MspInit+0xa4>)
 8000c04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000c08:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	201f      	movs	r0, #31
 8000c10:	f005 fb3c 	bl	800628c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000c14:	201f      	movs	r0, #31
 8000c16:	f005 fb55 	bl	80062c4 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	210f      	movs	r1, #15
 8000c1e:	2020      	movs	r0, #32
 8000c20:	f005 fb34 	bl	800628c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000c24:	2020      	movs	r0, #32
 8000c26:	f005 fb4d 	bl	80062c4 <HAL_NVIC_EnableIRQ>
}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	; 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020400 	.word	0x40020400

08000c3c <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <AUDIO_IO_Init+0x68>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a16      	ldr	r2, [pc, #88]	; (8000ca4 <AUDIO_IO_Init+0x68>)
 8000c4c:	f043 0308 	orr.w	r3, r3, #8
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <AUDIO_IO_Init+0x68>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0308 	and.w	r3, r3, #8
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000c5e:	2310      	movs	r3, #16
 8000c60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000c66:	2302      	movs	r3, #2
 8000c68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <AUDIO_IO_Init+0x6c>)
 8000c74:	f005 ff72 	bl	8006b5c <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000c78:	f7ff fef8 	bl	8000a6c <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2110      	movs	r1, #16
 8000c80:	4809      	ldr	r0, [pc, #36]	; (8000ca8 <AUDIO_IO_Init+0x6c>)
 8000c82:	f006 fa03 	bl	800708c <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000c86:	2005      	movs	r0, #5
 8000c88:	f005 fa24 	bl	80060d4 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2110      	movs	r1, #16
 8000c90:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <AUDIO_IO_Init+0x6c>)
 8000c92:	f006 f9fb 	bl	800708c <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000c96:	2005      	movs	r0, #5
 8000c98:	f005 fa1c 	bl	80060d4 <HAL_Delay>
}
 8000c9c:	bf00      	nop
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020c00 	.word	0x40020c00

08000cac <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	71fb      	strb	r3, [r7, #7]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	71bb      	strb	r3, [r7, #6]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	797a      	ldrb	r2, [r7, #5]
 8000cd2:	79b9      	ldrb	r1, [r7, #6]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fefb 	bl	8000ad0 <I2Cx_WriteData>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	460a      	mov	r2, r1
 8000cec:	71fb      	strb	r3, [r7, #7]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	79ba      	ldrb	r2, [r7, #6]
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ff10 	bl	8000b20 <I2Cx_ReadData>
 8000d00:	4603      	mov	r3, r0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <AUDIO_StorageParse>:

//USBH_HandleTypeDef hUSBHost;
uint16_t NumObs = 0;

FRESULT AUDIO_StorageParse(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b094      	sub	sp, #80	; 0x50
 8000d10:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  DIR dir;
  char *fn;


//  res = f_opendir(&dir, USBHPath);
  res = f_opendir(&dir, USERPath);
 8000d18:	463b      	mov	r3, r7
 8000d1a:	493d      	ldr	r1, [pc, #244]	; (8000e10 <AUDIO_StorageParse+0x104>)
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f003 f912 	bl	8003f46 <f_opendir>
 8000d22:	4603      	mov	r3, r0
 8000d24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  FileList.ptr = 0;
 8000d28:	4b3a      	ldr	r3, [pc, #232]	; (8000e14 <AUDIO_StorageParse+0x108>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8

  if(res == FR_OK)
 8000d30:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d15b      	bne.n	8000df0 <AUDIO_StorageParse+0xe4>
  {
//    while(Appli_state == APPLICATION_READY)
	while(1)
    {
      res = f_readdir(&dir, &fno);
 8000d38:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f003 f999 	bl	8004078 <f_readdir>
 8000d46:	4603      	mov	r3, r0
 8000d48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      if(res != FR_OK || fno.fname[0] == 0)
 8000d4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14d      	bne.n	8000df0 <AUDIO_StorageParse+0xe4>
 8000d54:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d049      	beq.n	8000df0 <AUDIO_StorageParse+0xe4>
      {
        break;
      }
      if(fno.fname[0] == '.')
 8000d5c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000d60:	2b2e      	cmp	r3, #46	; 0x2e
 8000d62:	d043      	beq.n	8000dec <AUDIO_StorageParse+0xe0>
      {
        continue;
      }

      fn = fno.fname;
 8000d64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d68:	3309      	adds	r3, #9
 8000d6a:	64bb      	str	r3, [r7, #72]	; 0x48

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 8000d6c:	4b29      	ldr	r3, [pc, #164]	; (8000e14 <AUDIO_StorageParse+0x108>)
 8000d6e:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d72:	2b17      	cmp	r3, #23
 8000d74:	d8e0      	bhi.n	8000d38 <AUDIO_StorageParse+0x2c>
      {
        if((fno.fattrib & AM_DIR) == 0)
 8000d76:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000d7a:	f003 0310 	and.w	r3, r3, #16
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d1da      	bne.n	8000d38 <AUDIO_StorageParse+0x2c>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 8000d82:	4925      	ldr	r1, [pc, #148]	; (8000e18 <AUDIO_StorageParse+0x10c>)
 8000d84:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000d86:	f00c fef4 	bl	800db72 <strstr>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d106      	bne.n	8000d9e <AUDIO_StorageParse+0x92>
 8000d90:	4922      	ldr	r1, [pc, #136]	; (8000e1c <AUDIO_StorageParse+0x110>)
 8000d92:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000d94:	f00c feed 	bl	800db72 <strstr>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0cc      	beq.n	8000d38 <AUDIO_StorageParse+0x2c>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 8000d9e:	4b1d      	ldr	r3, [pc, #116]	; (8000e14 <AUDIO_StorageParse+0x108>)
 8000da0:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000da4:	461a      	mov	r2, r3
 8000da6:	4613      	mov	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	4413      	add	r3, r2
 8000db0:	4a18      	ldr	r2, [pc, #96]	; (8000e14 <AUDIO_StorageParse+0x108>)
 8000db2:	4413      	add	r3, r2
 8000db4:	3301      	adds	r3, #1
 8000db6:	2228      	movs	r2, #40	; 0x28
 8000db8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f00c fec6 	bl	800db4c <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8000dc0:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <AUDIO_StorageParse+0x108>)
 8000dc2:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4912      	ldr	r1, [pc, #72]	; (8000e14 <AUDIO_StorageParse+0x108>)
 8000dca:	4613      	mov	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	4413      	add	r3, r2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <AUDIO_StorageParse+0x108>)
 8000ddc:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000de0:	3301      	adds	r3, #1
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <AUDIO_StorageParse+0x108>)
 8000de6:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
 8000dea:	e7a5      	b.n	8000d38 <AUDIO_StorageParse+0x2c>
        continue;
 8000dec:	bf00      	nop
      res = f_readdir(&dir, &fno);
 8000dee:	e7a3      	b.n	8000d38 <AUDIO_StorageParse+0x2c>
          }
        }
      }
    }
  }
  NumObs = FileList.ptr;
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <AUDIO_StorageParse+0x108>)
 8000df2:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	; 0x3d8
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <AUDIO_StorageParse+0x114>)
 8000df8:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f003 f915 	bl	800402c <f_closedir>
  return res;
 8000e02:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3750      	adds	r7, #80	; 0x50
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	2000040c 	.word	0x2000040c
 8000e14:	200018bc 	.word	0x200018bc
 8000e18:	0800e434 	.word	0x0800e434
 8000e1c:	0800e438 	.word	0x0800e438
 8000e20:	20000200 	.word	0x20000200

08000e24 <AUDIO_GetWavObjectNumber>:

uint16_t AUDIO_GetWavObjectNumber(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	if (AUDIO_StorageParse() == FR_OK){
 8000e28:	f7ff ff70 	bl	8000d0c <AUDIO_StorageParse>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d102      	bne.n	8000e38 <AUDIO_GetWavObjectNumber+0x14>
		return NumObs;
 8000e32:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <AUDIO_GetWavObjectNumber+0x1c>)
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	e001      	b.n	8000e3c <AUDIO_GetWavObjectNumber+0x18>
	}
	return -1;
 8000e38:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000200 	.word	0x20000200

08000e44 <LCD_Init>:
   
   0xFF
};
//----------------------------------------------------------------------------------
void LCD_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af02      	add	r7, sp, #8
   HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDRESS, comm, sizeof(comm),10);
 8000e4a:	230a      	movs	r3, #10
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	231b      	movs	r3, #27
 8000e50:	4a03      	ldr	r2, [pc, #12]	; (8000e60 <LCD_Init+0x1c>)
 8000e52:	2178      	movs	r1, #120	; 0x78
 8000e54:	4803      	ldr	r0, [pc, #12]	; (8000e64 <LCD_Init+0x20>)
 8000e56:	f006 fabf 	bl	80073d8 <HAL_I2C_Master_Transmit>
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000004 	.word	0x20000004
 8000e64:	200006b8 	.word	0x200006b8

08000e68 <LCD_command>:
//----------------------------------------------------------------------------------
void  LCD_command(uint8_t cmd)
{   
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af02      	add	r7, sp, #8
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
   uint8_t cmd_arr[2] = {0,0};
 8000e72:	2300      	movs	r3, #0
 8000e74:	81bb      	strh	r3, [r7, #12]
   cmd_arr[0] = COMMAND_MODE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	733b      	strb	r3, [r7, #12]
   cmd_arr[1] = cmd;
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	737b      	strb	r3, [r7, #13]
   HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDRESS, cmd_arr, sizeof(cmd_arr),10);
 8000e7e:	f107 020c 	add.w	r2, r7, #12
 8000e82:	230a      	movs	r3, #10
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2302      	movs	r3, #2
 8000e88:	2178      	movs	r1, #120	; 0x78
 8000e8a:	4803      	ldr	r0, [pc, #12]	; (8000e98 <LCD_command+0x30>)
 8000e8c:	f006 faa4 	bl	80073d8 <HAL_I2C_Master_Transmit>
}
 8000e90:	bf00      	nop
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	200006b8 	.word	0x200006b8

08000e9c <LCD_Clear>:
{
   LCD_command(0xAE);
}
//----------------------------------------------------------------------------------
void LCD_Clear(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
   for(uint16_t ix = 1; ix < BUFF_SIZE; ix++)
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	80fb      	strh	r3, [r7, #6]
 8000ea6:	e006      	b.n	8000eb6 <LCD_Clear+0x1a>
   {
      lcd_buff[ix] = 0;
 8000ea8:	88fb      	ldrh	r3, [r7, #6]
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <LCD_Clear+0x3c>)
 8000eac:	2100      	movs	r1, #0
 8000eae:	54d1      	strb	r1, [r2, r3]
   for(uint16_t ix = 1; ix < BUFF_SIZE; ix++)
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	80fb      	strh	r3, [r7, #6]
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ebc:	d9f4      	bls.n	8000ea8 <LCD_Clear+0xc>
   }
   x_cur = 0;
 8000ebe:	4b07      	ldr	r3, [pc, #28]	; (8000edc <LCD_Clear+0x40>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
   y_cur = 0;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <LCD_Clear+0x44>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000204 	.word	0x20000204
 8000edc:	20000408 	.word	0x20000408
 8000ee0:	20000409 	.word	0x20000409

08000ee4 <LCD_Update>:
//----------------------------------------------------------------------------------
void LCD_Update(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af02      	add	r7, sp, #8
   LCD_command(0x21);		      // SSD1306_COLUMNADDR
 8000eea:	2021      	movs	r0, #33	; 0x21
 8000eec:	f7ff ffbc 	bl	8000e68 <LCD_command>
   LCD_command(column_start);     // column start
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f7ff ffb9 	bl	8000e68 <LCD_command>
   LCD_command(column_end);       // column end
 8000ef6:	207f      	movs	r0, #127	; 0x7f
 8000ef8:	f7ff ffb6 	bl	8000e68 <LCD_command>
   LCD_command(0x22);             // SSD1306_PAGEADDR
 8000efc:	2022      	movs	r0, #34	; 0x22
 8000efe:	f7ff ffb3 	bl	8000e68 <LCD_command>
   LCD_command(page_start);       // page start
 8000f02:	2000      	movs	r0, #0
 8000f04:	f7ff ffb0 	bl	8000e68 <LCD_command>
   LCD_command(page_end);         // page end (4 pages for 32 rows OLED)
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f7ff ffad 	bl	8000e68 <LCD_command>
   
   lcd_buff[0]= DATA_MODE;              
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <LCD_Update+0x48>)
 8000f10:	2240      	movs	r2, #64	; 0x40
 8000f12:	701a      	strb	r2, [r3, #0]
   
   HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDRESS, lcd_buff, BUFF_SIZE,50);
 8000f14:	2332      	movs	r3, #50	; 0x32
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	f240 2301 	movw	r3, #513	; 0x201
 8000f1c:	4a03      	ldr	r2, [pc, #12]	; (8000f2c <LCD_Update+0x48>)
 8000f1e:	2178      	movs	r1, #120	; 0x78
 8000f20:	4803      	ldr	r0, [pc, #12]	; (8000f30 <LCD_Update+0x4c>)
 8000f22:	f006 fa59 	bl	80073d8 <HAL_I2C_Master_Transmit>
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000204 	.word	0x20000204
 8000f30:	200006b8 	.word	0x200006b8

08000f34 <LCD_Chr>:
//----------------------------------------------------------------------------------
void LCD_Chr(char ch)
{
 8000f34:	b490      	push	{r4, r7}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
   uint8_t i;   
   lcd_buff_idx=(y_cur*128 + x_cur*6) + 1;    
 8000f3e:	4b32      	ldr	r3, [pc, #200]	; (8001008 <LCD_Chr+0xd4>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	01db      	lsls	r3, r3, #7
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	4b30      	ldr	r3, [pc, #192]	; (800100c <LCD_Chr+0xd8>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	4619      	mov	r1, r3
 8000f50:	0049      	lsls	r1, r1, #1
 8000f52:	440b      	add	r3, r1
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	4413      	add	r3, r2
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <LCD_Chr+0xdc>)
 8000f62:	801a      	strh	r2, [r3, #0]
   if ((ch >= 0x20)&&(ch <= 0x7F)) ch -= 32;
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	2b1f      	cmp	r3, #31
 8000f68:	d907      	bls.n	8000f7a <LCD_Chr+0x46>
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	db03      	blt.n	8000f7a <LCD_Chr+0x46>
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	3b20      	subs	r3, #32
 8000f76:	71fb      	strb	r3, [r7, #7]
 8000f78:	e001      	b.n	8000f7e <LCD_Chr+0x4a>
   else ch = 95;   
 8000f7a:	235f      	movs	r3, #95	; 0x5f
 8000f7c:	71fb      	strb	r3, [r7, #7]
   for (i = 0; i < 5; i++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	73fb      	strb	r3, [r7, #15]
 8000f82:	e014      	b.n	8000fae <LCD_Chr+0x7a>
   {
        lcd_buff[lcd_buff_idx++] = font[(int) ch][i];
 8000f84:	79fa      	ldrb	r2, [r7, #7]
 8000f86:	7bf9      	ldrb	r1, [r7, #15]
 8000f88:	4b21      	ldr	r3, [pc, #132]	; (8001010 <LCD_Chr+0xdc>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	1c58      	adds	r0, r3, #1
 8000f8e:	b284      	uxth	r4, r0
 8000f90:	481f      	ldr	r0, [pc, #124]	; (8001010 <LCD_Chr+0xdc>)
 8000f92:	8004      	strh	r4, [r0, #0]
 8000f94:	461c      	mov	r4, r3
 8000f96:	481f      	ldr	r0, [pc, #124]	; (8001014 <LCD_Chr+0xe0>)
 8000f98:	4613      	mov	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	4403      	add	r3, r0
 8000fa0:	440b      	add	r3, r1
 8000fa2:	781a      	ldrb	r2, [r3, #0]
 8000fa4:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <LCD_Chr+0xe4>)
 8000fa6:	551a      	strb	r2, [r3, r4]
   for (i = 0; i < 5; i++)
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	3301      	adds	r3, #1
 8000fac:	73fb      	strb	r3, [r7, #15]
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	2b04      	cmp	r3, #4
 8000fb2:	d9e7      	bls.n	8000f84 <LCD_Chr+0x50>
   }
   lcd_buff[lcd_buff_idx++] = 0x00;  
 8000fb4:	4b16      	ldr	r3, [pc, #88]	; (8001010 <LCD_Chr+0xdc>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	1c5a      	adds	r2, r3, #1
 8000fba:	b291      	uxth	r1, r2
 8000fbc:	4a14      	ldr	r2, [pc, #80]	; (8001010 <LCD_Chr+0xdc>)
 8000fbe:	8011      	strh	r1, [r2, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <LCD_Chr+0xe4>)
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	5499      	strb	r1, [r3, r2]
   x_cur++;
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <LCD_Chr+0xd8>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <LCD_Chr+0xd8>)
 8000fd2:	701a      	strb	r2, [r3, #0]
   if (x_cur > 20)
 8000fd4:	4b0d      	ldr	r3, [pc, #52]	; (800100c <LCD_Chr+0xd8>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b14      	cmp	r3, #20
 8000fda:	d90f      	bls.n	8000ffc <LCD_Chr+0xc8>
   {
      x_cur = 0;
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	; (800100c <LCD_Chr+0xd8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
      y_cur++;
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <LCD_Chr+0xd4>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b07      	ldr	r3, [pc, #28]	; (8001008 <LCD_Chr+0xd4>)
 8000fec:	701a      	strb	r2, [r3, #0]
      if (y_cur > 3)
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <LCD_Chr+0xd4>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d902      	bls.n	8000ffc <LCD_Chr+0xc8>
      {
         y_cur = 0;
 8000ff6:	4b04      	ldr	r3, [pc, #16]	; (8001008 <LCD_Chr+0xd4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
      }
   }
}
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bc90      	pop	{r4, r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000409 	.word	0x20000409
 800100c:	20000408 	.word	0x20000408
 8001010:	20000406 	.word	0x20000406
 8001014:	0800e7a8 	.word	0x0800e7a8
 8001018:	20000204 	.word	0x20000204

0800101c <LCD_FStr>:
      }
   }
}
//----------------------------------------------------------------------------------
void LCD_FStr(const char *dataPtr, uint8_t x, uint8_t y)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	70fb      	strb	r3, [r7, #3]
 8001028:	4613      	mov	r3, r2
 800102a:	70bb      	strb	r3, [r7, #2]
   LCD_GotoXY(x,y);
 800102c:	78ba      	ldrb	r2, [r7, #2]
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	4611      	mov	r1, r2
 8001032:	4618      	mov	r0, r3
 8001034:	f000 f812 	bl	800105c <LCD_GotoXY>
   while(*dataPtr != 0)
 8001038:	e007      	b.n	800104a <LCD_FStr+0x2e>
   {
      LCD_Chr(*dataPtr);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff78 	bl	8000f34 <LCD_Chr>
      dataPtr++;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3301      	adds	r3, #1
 8001048:	607b      	str	r3, [r7, #4]
   while(*dataPtr != 0)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f3      	bne.n	800103a <LCD_FStr+0x1e>
   }
}
 8001052:	bf00      	nop
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <LCD_GotoXY>:
      dataPtr++;
   }
}
////----------------------------------------------------
void LCD_GotoXY(uint8_t x,uint8_t y)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	460a      	mov	r2, r1
 8001066:	71fb      	strb	r3, [r7, #7]
 8001068:	4613      	mov	r3, r2
 800106a:	71bb      	strb	r3, [r7, #6]
   if((x < 21)&&(y < (page_end+1)))
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	2b14      	cmp	r3, #20
 8001070:	d808      	bhi.n	8001084 <LCD_GotoXY+0x28>
 8001072:	79bb      	ldrb	r3, [r7, #6]
 8001074:	2b03      	cmp	r3, #3
 8001076:	d805      	bhi.n	8001084 <LCD_GotoXY+0x28>
   {
      x_cur = x;
 8001078:	4a05      	ldr	r2, [pc, #20]	; (8001090 <LCD_GotoXY+0x34>)
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	7013      	strb	r3, [r2, #0]
      y_cur = y;
 800107e:	4a05      	ldr	r2, [pc, #20]	; (8001094 <LCD_GotoXY+0x38>)
 8001080:	79bb      	ldrb	r3, [r7, #6]
 8001082:	7013      	strb	r3, [r2, #0]
   }
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	20000408 	.word	0x20000408
 8001094:	20000409 	.word	0x20000409

08001098 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	4603      	mov	r3, r0
 80010a2:	81fb      	strh	r3, [r7, #14]
 80010a4:	460b      	mov	r3, r1
 80010a6:	81bb      	strh	r3, [r7, #12]
 80010a8:	4613      	mov	r3, r2
 80010aa:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 80010b0:	f7ff fdc4 	bl	8000c3c <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 80010b4:	89fb      	ldrh	r3, [r7, #14]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2201      	movs	r2, #1
 80010ba:	2102      	movs	r1, #2
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 fb01 	bl	80016c4 <CODEC_IO_Write>
 80010c2:	4603      	mov	r3, r0
 80010c4:	461a      	mov	r2, r3
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	4413      	add	r3, r2
 80010ca:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 80010cc:	89bb      	ldrh	r3, [r7, #12]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	d81b      	bhi.n	800110c <cs43l22_Init+0x74>
 80010d4:	a201      	add	r2, pc, #4	; (adr r2, 80010dc <cs43l22_Init+0x44>)
 80010d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010da:	bf00      	nop
 80010dc:	080010ed 	.word	0x080010ed
 80010e0:	080010f5 	.word	0x080010f5
 80010e4:	080010fd 	.word	0x080010fd
 80010e8:	08001105 	.word	0x08001105
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 80010ec:	4b5b      	ldr	r3, [pc, #364]	; (800125c <cs43l22_Init+0x1c4>)
 80010ee:	22fa      	movs	r2, #250	; 0xfa
 80010f0:	701a      	strb	r2, [r3, #0]
    break;
 80010f2:	e00f      	b.n	8001114 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 80010f4:	4b59      	ldr	r3, [pc, #356]	; (800125c <cs43l22_Init+0x1c4>)
 80010f6:	22af      	movs	r2, #175	; 0xaf
 80010f8:	701a      	strb	r2, [r3, #0]
    break;
 80010fa:	e00b      	b.n	8001114 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 80010fc:	4b57      	ldr	r3, [pc, #348]	; (800125c <cs43l22_Init+0x1c4>)
 80010fe:	22aa      	movs	r2, #170	; 0xaa
 8001100:	701a      	strb	r2, [r3, #0]
    break;
 8001102:	e007      	b.n	8001114 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8001104:	4b55      	ldr	r3, [pc, #340]	; (800125c <cs43l22_Init+0x1c4>)
 8001106:	2205      	movs	r2, #5
 8001108:	701a      	strb	r2, [r3, #0]
    break;    
 800110a:	e003      	b.n	8001114 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 800110c:	4b53      	ldr	r3, [pc, #332]	; (800125c <cs43l22_Init+0x1c4>)
 800110e:	2205      	movs	r2, #5
 8001110:	701a      	strb	r2, [r3, #0]
    break;    
 8001112:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001114:	89fb      	ldrh	r3, [r7, #14]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	4a50      	ldr	r2, [pc, #320]	; (800125c <cs43l22_Init+0x1c4>)
 800111a:	7812      	ldrb	r2, [r2, #0]
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	2104      	movs	r1, #4
 8001120:	4618      	mov	r0, r3
 8001122:	f000 facf 	bl	80016c4 <CODEC_IO_Write>
 8001126:	4603      	mov	r3, r0
 8001128:	461a      	mov	r2, r3
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	4413      	add	r3, r2
 800112e:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8001130:	89fb      	ldrh	r3, [r7, #14]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2281      	movs	r2, #129	; 0x81
 8001136:	2105      	movs	r1, #5
 8001138:	4618      	mov	r0, r3
 800113a:	f000 fac3 	bl	80016c4 <CODEC_IO_Write>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	4413      	add	r3, r2
 8001146:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8001148:	89fb      	ldrh	r3, [r7, #14]
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2204      	movs	r2, #4
 800114e:	2106      	movs	r1, #6
 8001150:	4618      	mov	r0, r3
 8001152:	f000 fab7 	bl	80016c4 <CODEC_IO_Write>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	4413      	add	r3, r2
 800115e:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8001160:	7afa      	ldrb	r2, [r7, #11]
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f964 	bl	8001434 <cs43l22_SetVolume>
 800116c:	4602      	mov	r2, r0
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	4413      	add	r3, r2
 8001172:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8001174:	89bb      	ldrh	r3, [r7, #12]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d023      	beq.n	80011c2 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 800117a:	89fb      	ldrh	r3, [r7, #14]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2206      	movs	r2, #6
 8001180:	210f      	movs	r1, #15
 8001182:	4618      	mov	r0, r3
 8001184:	f000 fa9e 	bl	80016c4 <CODEC_IO_Write>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	4413      	add	r3, r2
 8001190:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8001192:	89fb      	ldrh	r3, [r7, #14]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2200      	movs	r2, #0
 8001198:	2124      	movs	r1, #36	; 0x24
 800119a:	4618      	mov	r0, r3
 800119c:	f000 fa92 	bl	80016c4 <CODEC_IO_Write>
 80011a0:	4603      	mov	r3, r0
 80011a2:	461a      	mov	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	4413      	add	r3, r2
 80011a8:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 80011aa:	89fb      	ldrh	r3, [r7, #14]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2200      	movs	r2, #0
 80011b0:	2125      	movs	r1, #37	; 0x25
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 fa86 	bl	80016c4 <CODEC_IO_Write>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	4413      	add	r3, r2
 80011c0:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 80011c2:	89fb      	ldrh	r3, [r7, #14]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2200      	movs	r2, #0
 80011c8:	210a      	movs	r1, #10
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 fa7a 	bl	80016c4 <CODEC_IO_Write>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	4413      	add	r3, r2
 80011d8:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80011da:	89fb      	ldrh	r3, [r7, #14]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2204      	movs	r2, #4
 80011e0:	210e      	movs	r1, #14
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 fa6e 	bl	80016c4 <CODEC_IO_Write>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	4413      	add	r3, r2
 80011f0:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 80011f2:	89fb      	ldrh	r3, [r7, #14]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2200      	movs	r2, #0
 80011f8:	2127      	movs	r1, #39	; 0x27
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 fa62 	bl	80016c4 <CODEC_IO_Write>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	4413      	add	r3, r2
 8001208:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 800120a:	89fb      	ldrh	r3, [r7, #14]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	220f      	movs	r2, #15
 8001210:	211f      	movs	r1, #31
 8001212:	4618      	mov	r0, r3
 8001214:	f000 fa56 	bl	80016c4 <CODEC_IO_Write>
 8001218:	4603      	mov	r3, r0
 800121a:	461a      	mov	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	4413      	add	r3, r2
 8001220:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8001222:	89fb      	ldrh	r3, [r7, #14]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	220a      	movs	r2, #10
 8001228:	211a      	movs	r1, #26
 800122a:	4618      	mov	r0, r3
 800122c:	f000 fa4a 	bl	80016c4 <CODEC_IO_Write>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	4413      	add	r3, r2
 8001238:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 800123a:	89fb      	ldrh	r3, [r7, #14]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	220a      	movs	r2, #10
 8001240:	211b      	movs	r1, #27
 8001242:	4618      	mov	r0, r3
 8001244:	f000 fa3e 	bl	80016c4 <CODEC_IO_Write>
 8001248:	4603      	mov	r3, r0
 800124a:	461a      	mov	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	4413      	add	r3, r2
 8001250:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8001252:	697b      	ldr	r3, [r7, #20]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	2000040a 	.word	0x2000040a

08001260 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8001264:	f7ff fd22 	bl	8000cac <AUDIO_IO_DeInit>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}

0800126c <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8001276:	f7ff fce1 	bl	8000c3c <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2101      	movs	r1, #1
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fd2e 	bl	8000ce2 <AUDIO_IO_Read>
 8001286:	4603      	mov	r3, r0
 8001288:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	f023 0307 	bic.w	r3, r3, #7
 8001290:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8001292:	7bfb      	ldrb	r3, [r7, #15]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	80fb      	strh	r3, [r7, #6]
 80012a8:	4613      	mov	r3, r2
 80012aa:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <cs43l22_Play+0x70>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d123      	bne.n	8001300 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2206      	movs	r2, #6
 80012be:	210e      	movs	r1, #14
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f9ff 	bl	80016c4 <CODEC_IO_Write>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4413      	add	r3, r2
 80012ce:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 f919 	bl	800150c <cs43l22_SetMute>
 80012da:	4602      	mov	r2, r0
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4413      	add	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 80012e2:	88fb      	ldrh	r3, [r7, #6]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	229e      	movs	r2, #158	; 0x9e
 80012e8:	2102      	movs	r1, #2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f9ea 	bl	80016c4 <CODEC_IO_Write>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 80012fa:	4b04      	ldr	r3, [pc, #16]	; (800130c <cs43l22_Play+0x70>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8001300:	68fb      	ldr	r3, [r7, #12]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000050 	.word	0x20000050

08001310 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	2101      	movs	r1, #1
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f8f2 	bl	800150c <cs43l22_SetMute>
 8001328:	4602      	mov	r2, r0
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4413      	add	r3, r2
 800132e:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2201      	movs	r2, #1
 8001336:	2102      	movs	r1, #2
 8001338:	4618      	mov	r0, r3
 800133a:	f000 f9c3 	bl	80016c4 <CODEC_IO_Write>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4413      	add	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8001348:	68fb      	ldr	r3, [r7, #12]
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f8ce 	bl	800150c <cs43l22_SetMute>
 8001370:	4602      	mov	r2, r0
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4413      	add	r3, r2
 8001376:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	e002      	b.n	8001384 <cs43l22_Resume+0x30>
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	3301      	adds	r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2bfe      	cmp	r3, #254	; 0xfe
 8001388:	d9f9      	bls.n	800137e <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <cs43l22_Resume+0x74>)
 8001390:	7812      	ldrb	r2, [r2, #0]
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	2104      	movs	r1, #4
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f994 	bl	80016c4 <CODEC_IO_Write>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	229e      	movs	r2, #158	; 0x9e
 80013ac:	2102      	movs	r1, #2
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 f988 	bl	80016c4 <CODEC_IO_Write>
 80013b4:	4603      	mov	r3, r0
 80013b6:	461a      	mov	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	2000040a 	.word	0x2000040a

080013cc <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	2101      	movs	r1, #1
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 f893 	bl	800150c <cs43l22_SetMute>
 80013e6:	4602      	mov	r2, r0
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4413      	add	r3, r2
 80013ec:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2204      	movs	r2, #4
 80013f4:	210e      	movs	r1, #14
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 f964 	bl	80016c4 <CODEC_IO_Write>
 80013fc:	4603      	mov	r3, r0
 80013fe:	461a      	mov	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4413      	add	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	229f      	movs	r2, #159	; 0x9f
 800140c:	2102      	movs	r1, #2
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f958 	bl	80016c4 <CODEC_IO_Write>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4413      	add	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <cs43l22_Stop+0x64>)
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]
  return counter;    
 8001424:	68fb      	ldr	r3, [r7, #12]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000050 	.word	0x20000050

08001434 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	460a      	mov	r2, r1
 800143e:	80fb      	strh	r3, [r7, #6]
 8001440:	4613      	mov	r3, r2
 8001442:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001448:	797b      	ldrb	r3, [r7, #5]
 800144a:	2b64      	cmp	r3, #100	; 0x64
 800144c:	d80b      	bhi.n	8001466 <cs43l22_SetVolume+0x32>
 800144e:	797a      	ldrb	r2, [r7, #5]
 8001450:	4613      	mov	r3, r2
 8001452:	021b      	lsls	r3, r3, #8
 8001454:	1a9b      	subs	r3, r3, r2
 8001456:	4a25      	ldr	r2, [pc, #148]	; (80014ec <cs43l22_SetVolume+0xb8>)
 8001458:	fb82 1203 	smull	r1, r2, r2, r3
 800145c:	1152      	asrs	r2, r2, #5
 800145e:	17db      	asrs	r3, r3, #31
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	b2db      	uxtb	r3, r3
 8001464:	e000      	b.n	8001468 <cs43l22_SetVolume+0x34>
 8001466:	23ff      	movs	r3, #255	; 0xff
 8001468:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 800146a:	7afb      	ldrb	r3, [r7, #11]
 800146c:	2be6      	cmp	r3, #230	; 0xe6
 800146e:	d91c      	bls.n	80014aa <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 8001470:	88fb      	ldrh	r3, [r7, #6]
 8001472:	b2d8      	uxtb	r0, r3
 8001474:	7afb      	ldrb	r3, [r7, #11]
 8001476:	3319      	adds	r3, #25
 8001478:	b2db      	uxtb	r3, r3
 800147a:	461a      	mov	r2, r3
 800147c:	2120      	movs	r1, #32
 800147e:	f000 f921 	bl	80016c4 <CODEC_IO_Write>
 8001482:	4603      	mov	r3, r0
 8001484:	461a      	mov	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4413      	add	r3, r2
 800148a:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 800148c:	88fb      	ldrh	r3, [r7, #6]
 800148e:	b2d8      	uxtb	r0, r3
 8001490:	7afb      	ldrb	r3, [r7, #11]
 8001492:	3319      	adds	r3, #25
 8001494:	b2db      	uxtb	r3, r3
 8001496:	461a      	mov	r2, r3
 8001498:	2121      	movs	r1, #33	; 0x21
 800149a:	f000 f913 	bl	80016c4 <CODEC_IO_Write>
 800149e:	4603      	mov	r3, r0
 80014a0:	461a      	mov	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4413      	add	r3, r2
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	e01b      	b.n	80014e2 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	b2d8      	uxtb	r0, r3
 80014ae:	7afb      	ldrb	r3, [r7, #11]
 80014b0:	3319      	adds	r3, #25
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	461a      	mov	r2, r3
 80014b6:	2120      	movs	r1, #32
 80014b8:	f000 f904 	bl	80016c4 <CODEC_IO_Write>
 80014bc:	4603      	mov	r3, r0
 80014be:	461a      	mov	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4413      	add	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	b2d8      	uxtb	r0, r3
 80014ca:	7afb      	ldrb	r3, [r7, #11]
 80014cc:	3319      	adds	r3, #25
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	461a      	mov	r2, r3
 80014d2:	2121      	movs	r1, #33	; 0x21
 80014d4:	f000 f8f6 	bl	80016c4 <CODEC_IO_Write>
 80014d8:	4603      	mov	r3, r0
 80014da:	461a      	mov	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4413      	add	r3, r2
 80014e0:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 80014e2:	68fb      	ldr	r3, [r7, #12]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	51eb851f 	.word	0x51eb851f

080014f0 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	6039      	str	r1, [r7, #0]
 80014fa:	80fb      	strh	r3, [r7, #6]
  return 0;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	6039      	str	r1, [r7, #0]
 8001516:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d124      	bne.n	800156c <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	22ff      	movs	r2, #255	; 0xff
 8001528:	2104      	movs	r1, #4
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f8ca 	bl	80016c4 <CODEC_IO_Write>
 8001530:	4603      	mov	r3, r0
 8001532:	461a      	mov	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4413      	add	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 800153a:	88fb      	ldrh	r3, [r7, #6]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2201      	movs	r2, #1
 8001540:	2122      	movs	r1, #34	; 0x22
 8001542:	4618      	mov	r0, r3
 8001544:	f000 f8be 	bl	80016c4 <CODEC_IO_Write>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4413      	add	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2201      	movs	r2, #1
 8001558:	2123      	movs	r1, #35	; 0x23
 800155a:	4618      	mov	r0, r3
 800155c:	f000 f8b2 	bl	80016c4 <CODEC_IO_Write>
 8001560:	4603      	mov	r3, r0
 8001562:	461a      	mov	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4413      	add	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	e025      	b.n	80015b8 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2200      	movs	r2, #0
 8001572:	2122      	movs	r1, #34	; 0x22
 8001574:	4618      	mov	r0, r3
 8001576:	f000 f8a5 	bl	80016c4 <CODEC_IO_Write>
 800157a:	4603      	mov	r3, r0
 800157c:	461a      	mov	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4413      	add	r3, r2
 8001582:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2200      	movs	r2, #0
 800158a:	2123      	movs	r1, #35	; 0x23
 800158c:	4618      	mov	r0, r3
 800158e:	f000 f899 	bl	80016c4 <CODEC_IO_Write>
 8001592:	4603      	mov	r3, r0
 8001594:	461a      	mov	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4413      	add	r3, r2
 800159a:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <cs43l22_SetMute+0xb8>)
 80015a2:	7812      	ldrb	r2, [r2, #0]
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	2104      	movs	r1, #4
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 f88b 	bl	80016c4 <CODEC_IO_Write>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461a      	mov	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4413      	add	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80015b8:	68fb      	ldr	r3, [r7, #12]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	2000040a 	.word	0x2000040a

080015c8 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	460a      	mov	r2, r1
 80015d2:	80fb      	strh	r3, [r7, #6]
 80015d4:	4613      	mov	r3, r2
 80015d6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80015dc:	797b      	ldrb	r3, [r7, #5]
 80015de:	3b01      	subs	r3, #1
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	d84b      	bhi.n	800167c <cs43l22_SetOutputMode+0xb4>
 80015e4:	a201      	add	r2, pc, #4	; (adr r2, 80015ec <cs43l22_SetOutputMode+0x24>)
 80015e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ea:	bf00      	nop
 80015ec:	080015fd 	.word	0x080015fd
 80015f0:	0800161d 	.word	0x0800161d
 80015f4:	0800163d 	.word	0x0800163d
 80015f8:	0800165d 	.word	0x0800165d
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 80015fc:	88fb      	ldrh	r3, [r7, #6]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	22fa      	movs	r2, #250	; 0xfa
 8001602:	2104      	movs	r1, #4
 8001604:	4618      	mov	r0, r3
 8001606:	f000 f85d 	bl	80016c4 <CODEC_IO_Write>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4413      	add	r3, r2
 8001612:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001614:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <cs43l22_SetOutputMode+0xe0>)
 8001616:	22fa      	movs	r2, #250	; 0xfa
 8001618:	701a      	strb	r2, [r3, #0]
      break;
 800161a:	e03f      	b.n	800169c <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	22af      	movs	r2, #175	; 0xaf
 8001622:	2104      	movs	r1, #4
 8001624:	4618      	mov	r0, r3
 8001626:	f000 f84d 	bl	80016c4 <CODEC_IO_Write>
 800162a:	4603      	mov	r3, r0
 800162c:	461a      	mov	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4413      	add	r3, r2
 8001632:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001634:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <cs43l22_SetOutputMode+0xe0>)
 8001636:	22af      	movs	r2, #175	; 0xaf
 8001638:	701a      	strb	r2, [r3, #0]
      break;
 800163a:	e02f      	b.n	800169c <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	22aa      	movs	r2, #170	; 0xaa
 8001642:	2104      	movs	r1, #4
 8001644:	4618      	mov	r0, r3
 8001646:	f000 f83d 	bl	80016c4 <CODEC_IO_Write>
 800164a:	4603      	mov	r3, r0
 800164c:	461a      	mov	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4413      	add	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <cs43l22_SetOutputMode+0xe0>)
 8001656:	22aa      	movs	r2, #170	; 0xaa
 8001658:	701a      	strb	r2, [r3, #0]
      break;
 800165a:	e01f      	b.n	800169c <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2205      	movs	r2, #5
 8001662:	2104      	movs	r1, #4
 8001664:	4618      	mov	r0, r3
 8001666:	f000 f82d 	bl	80016c4 <CODEC_IO_Write>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4413      	add	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <cs43l22_SetOutputMode+0xe0>)
 8001676:	2205      	movs	r2, #5
 8001678:	701a      	strb	r2, [r3, #0]
      break;    
 800167a:	e00f      	b.n	800169c <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2205      	movs	r2, #5
 8001682:	2104      	movs	r1, #4
 8001684:	4618      	mov	r0, r3
 8001686:	f000 f81d 	bl	80016c4 <CODEC_IO_Write>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4413      	add	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001694:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <cs43l22_SetOutputMode+0xe0>)
 8001696:	2205      	movs	r2, #5
 8001698:	701a      	strb	r2, [r3, #0]
      break;
 800169a:	bf00      	nop
  }  
  return counter;
 800169c:	68fb      	ldr	r3, [r7, #12]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2000040a 	.word	0x2000040a

080016ac <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	80fb      	strh	r3, [r7, #6]
  return 0;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
 80016ce:	460b      	mov	r3, r1
 80016d0:	71bb      	strb	r3, [r7, #6]
 80016d2:	4613      	mov	r3, r2
 80016d4:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 80016da:	797a      	ldrb	r2, [r7, #5]
 80016dc:	79b9      	ldrb	r1, [r7, #6]
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff faea 	bl	8000cba <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	b2db      	uxtb	r3, r3
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	4a08      	ldr	r2, [pc, #32]	; (8001724 <disk_status+0x30>)
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	79fa      	ldrb	r2, [r7, #7]
 800170c:	4905      	ldr	r1, [pc, #20]	; (8001724 <disk_status+0x30>)
 800170e:	440a      	add	r2, r1
 8001710:	7a12      	ldrb	r2, [r2, #8]
 8001712:	4610      	mov	r0, r2
 8001714:	4798      	blx	r3
 8001716:	4603      	mov	r3, r0
 8001718:	73fb      	strb	r3, [r7, #15]
  return stat;
 800171a:	7bfb      	ldrb	r3, [r7, #15]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000658 	.word	0x20000658

08001728 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	4a0d      	ldr	r2, [pc, #52]	; (8001770 <disk_initialize+0x48>)
 800173a:	5cd3      	ldrb	r3, [r2, r3]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d111      	bne.n	8001764 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <disk_initialize+0x48>)
 8001744:	2101      	movs	r1, #1
 8001746:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	4a09      	ldr	r2, [pc, #36]	; (8001770 <disk_initialize+0x48>)
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	79fa      	ldrb	r2, [r7, #7]
 8001756:	4906      	ldr	r1, [pc, #24]	; (8001770 <disk_initialize+0x48>)
 8001758:	440a      	add	r2, r1
 800175a:	7a12      	ldrb	r2, [r2, #8]
 800175c:	4610      	mov	r0, r2
 800175e:	4798      	blx	r3
 8001760:	4603      	mov	r3, r0
 8001762:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8001764:	7bfb      	ldrb	r3, [r7, #15]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000658 	.word	0x20000658

08001774 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	4603      	mov	r3, r0
 8001782:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <disk_read+0x3c>)
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	689c      	ldr	r4, [r3, #8]
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <disk_read+0x3c>)
 8001794:	4413      	add	r3, r2
 8001796:	7a18      	ldrb	r0, [r3, #8]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	68b9      	ldr	r1, [r7, #8]
 800179e:	47a0      	blx	r4
 80017a0:	4603      	mov	r3, r0
 80017a2:	75fb      	strb	r3, [r7, #23]
  return res;
 80017a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	371c      	adds	r7, #28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd90      	pop	{r4, r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000658 	.word	0x20000658

080017b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	4603      	mov	r3, r0
 80017c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <disk_write+0x3c>)
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	68dc      	ldr	r4, [r3, #12]
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	4a07      	ldr	r2, [pc, #28]	; (80017f0 <disk_write+0x3c>)
 80017d4:	4413      	add	r3, r2
 80017d6:	7a18      	ldrb	r0, [r3, #8]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	68b9      	ldr	r1, [r7, #8]
 80017de:	47a0      	blx	r4
 80017e0:	4603      	mov	r3, r0
 80017e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80017e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	371c      	adds	r7, #28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd90      	pop	{r4, r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000658 	.word	0x20000658

080017f4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	603a      	str	r2, [r7, #0]
 80017fe:	71fb      	strb	r3, [r7, #7]
 8001800:	460b      	mov	r3, r1
 8001802:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	4a09      	ldr	r2, [pc, #36]	; (800182c <disk_ioctl+0x38>)
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	79fa      	ldrb	r2, [r7, #7]
 8001812:	4906      	ldr	r1, [pc, #24]	; (800182c <disk_ioctl+0x38>)
 8001814:	440a      	add	r2, r1
 8001816:	7a10      	ldrb	r0, [r2, #8]
 8001818:	79b9      	ldrb	r1, [r7, #6]
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	4798      	blx	r3
 800181e:	4603      	mov	r3, r0
 8001820:	73fb      	strb	r3, [r7, #15]
  return res;
 8001822:	7bfb      	ldrb	r3, [r7, #15]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000658 	.word	0x20000658

08001830 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b0c0      	sub	sp, #256	; 0x100
 8001834:	af00      	add	r7, sp, #0
    /*## FatFS: Link the USER driver ###########################*/
    retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8001836:	4912      	ldr	r1, [pc, #72]	; (8001880 <MX_FATFS_Init+0x50>)
 8001838:	4812      	ldr	r0, [pc, #72]	; (8001884 <MX_FATFS_Init+0x54>)
 800183a:	f002 fd5b 	bl	80042f4 <FATFS_LinkDriver>
 800183e:	4603      	mov	r3, r0
 8001840:	461a      	mov	r2, r3
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <MX_FATFS_Init+0x58>)
 8001844:	701a      	strb	r2, [r3, #0]

    /* USER CODE BEGIN Init */
    char buf[256];
    sprintf(buf, "# FatFs Init %s!\r\n", retUSER == 0 ? "Successfully" : "Failed");
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <MX_FATFS_Init+0x58>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <MX_FATFS_Init+0x22>
 800184e:	4a0f      	ldr	r2, [pc, #60]	; (800188c <MX_FATFS_Init+0x5c>)
 8001850:	e000      	b.n	8001854 <MX_FATFS_Init+0x24>
 8001852:	4a0f      	ldr	r2, [pc, #60]	; (8001890 <MX_FATFS_Init+0x60>)
 8001854:	463b      	mov	r3, r7
 8001856:	490f      	ldr	r1, [pc, #60]	; (8001894 <MX_FATFS_Init+0x64>)
 8001858:	4618      	mov	r0, r3
 800185a:	f00c f957 	bl	800db0c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 800185e:	463b      	mov	r3, r7
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fcb5 	bl	80001d0 <strlen>
 8001866:	4603      	mov	r3, r0
 8001868:	b29a      	uxth	r2, r3
 800186a:	4639      	mov	r1, r7
 800186c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001870:	4809      	ldr	r0, [pc, #36]	; (8001898 <MX_FATFS_Init+0x68>)
 8001872:	f009 faaa 	bl	800adca <HAL_UART_Transmit>
    /* USER CODE END Init */
}
 8001876:	bf00      	nop
 8001878:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	2000040c 	.word	0x2000040c
 8001884:	2000005c 	.word	0x2000005c
 8001888:	2000040b 	.word	0x2000040b
 800188c:	0800e43c 	.word	0x0800e43c
 8001890:	0800e44c 	.word	0x0800e44c
 8001894:	0800e454 	.word	0x0800e454
 8001898:	2000080c 	.word	0x2000080c

0800189c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3301      	adds	r3, #1
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80018ac:	89fb      	ldrh	r3, [r7, #14]
 80018ae:	021b      	lsls	r3, r3, #8
 80018b0:	b21a      	sxth	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	4313      	orrs	r3, r2
 80018ba:	b21b      	sxth	r3, r3
 80018bc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80018be:	89fb      	ldrh	r3, [r7, #14]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3303      	adds	r3, #3
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	3202      	adds	r2, #2
 80018e4:	7812      	ldrb	r2, [r2, #0]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	3201      	adds	r2, #1
 80018f2:	7812      	ldrb	r2, [r2, #0]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	7812      	ldrb	r2, [r2, #0]
 8001900:	4313      	orrs	r3, r2
 8001902:	60fb      	str	r3, [r7, #12]
	return rv;
 8001904:	68fb      	ldr	r3, [r7, #12]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	460b      	mov	r3, r1
 800191c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	1c5a      	adds	r2, r3, #1
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	887a      	ldrh	r2, [r7, #2]
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	887b      	ldrh	r3, [r7, #2]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	887a      	ldrh	r2, [r7, #2]
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	701a      	strb	r2, [r3, #0]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	701a      	strb	r2, [r3, #0]
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	701a      	strb	r2, [r3, #0]
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	0a1b      	lsrs	r3, r3, #8
 8001974:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	607a      	str	r2, [r7, #4]
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	701a      	strb	r2, [r3, #0]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	0a1b      	lsrs	r3, r3, #8
 8001986:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	701a      	strb	r2, [r3, #0]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80019a0:	b480      	push	{r7}
 80019a2:	b087      	sub	sp, #28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00d      	beq.n	80019d6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	1c53      	adds	r3, r2, #1
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	1c59      	adds	r1, r3, #1
 80019c4:	6179      	str	r1, [r7, #20]
 80019c6:	7812      	ldrb	r2, [r2, #0]
 80019c8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f1      	bne.n	80019ba <mem_cpy+0x1a>
	}
}
 80019d6:	bf00      	nop
 80019d8:	371c      	adds	r7, #28
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80019e2:	b480      	push	{r7}
 80019e4:	b087      	sub	sp, #28
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	60f8      	str	r0, [r7, #12]
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	1c5a      	adds	r2, r3, #1
 80019f6:	617a      	str	r2, [r7, #20]
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3b01      	subs	r3, #1
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f3      	bne.n	80019f2 <mem_set+0x10>
}
 8001a0a:	bf00      	nop
 8001a0c:	bf00      	nop
 8001a0e:	371c      	adds	r7, #28
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8001a18:	b480      	push	{r7}
 8001a1a:	b089      	sub	sp, #36	; 0x24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	61fb      	str	r3, [r7, #28]
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	61fa      	str	r2, [r7, #28]
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	61ba      	str	r2, [r7, #24]
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	1acb      	subs	r3, r1, r3
 8001a44:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d002      	beq.n	8001a58 <mem_cmp+0x40>
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0eb      	beq.n	8001a30 <mem_cmp+0x18>

	return r;
 8001a58:	697b      	ldr	r3, [r7, #20]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3724      	adds	r7, #36	; 0x24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8001a70:	e002      	b.n	8001a78 <chk_chr+0x12>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3301      	adds	r3, #1
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <chk_chr+0x26>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d1f2      	bne.n	8001a72 <chk_chr+0xc>
	return *str;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	e029      	b.n	8001b04 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8001ab0:	4a27      	ldr	r2, [pc, #156]	; (8001b50 <chk_lock+0xb4>)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	011b      	lsls	r3, r3, #4
 8001ab6:	4413      	add	r3, r2
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d01d      	beq.n	8001afa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8001abe:	4a24      	ldr	r2, [pc, #144]	; (8001b50 <chk_lock+0xb4>)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	4413      	add	r3, r2
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d116      	bne.n	8001afe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8001ad0:	4a1f      	ldr	r2, [pc, #124]	; (8001b50 <chk_lock+0xb4>)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	011b      	lsls	r3, r3, #4
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3304      	adds	r3, #4
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d10c      	bne.n	8001afe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8001ae4:	4a1a      	ldr	r2, [pc, #104]	; (8001b50 <chk_lock+0xb4>)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	4413      	add	r3, r2
 8001aec:	3308      	adds	r3, #8
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d102      	bne.n	8001afe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8001af8:	e007      	b.n	8001b0a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8001afa:	2301      	movs	r3, #1
 8001afc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	3301      	adds	r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0d2      	beq.n	8001ab0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d109      	bne.n	8001b24 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d102      	bne.n	8001b1c <chk_lock+0x80>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d101      	bne.n	8001b20 <chk_lock+0x84>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	e010      	b.n	8001b42 <chk_lock+0xa6>
 8001b20:	2312      	movs	r3, #18
 8001b22:	e00e      	b.n	8001b42 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d108      	bne.n	8001b3c <chk_lock+0xa0>
 8001b2a:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <chk_lock+0xb4>)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	4413      	add	r3, r2
 8001b32:	330c      	adds	r3, #12
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b3a:	d101      	bne.n	8001b40 <chk_lock+0xa4>
 8001b3c:	2310      	movs	r3, #16
 8001b3e:	e000      	b.n	8001b42 <chk_lock+0xa6>
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000648 	.word	0x20000648

08001b54 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	e002      	b.n	8001b66 <enq_lock+0x12>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3301      	adds	r3, #1
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d106      	bne.n	8001b7a <enq_lock+0x26>
 8001b6c:	4a09      	ldr	r2, [pc, #36]	; (8001b94 <enq_lock+0x40>)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	011b      	lsls	r3, r3, #4
 8001b72:	4413      	add	r3, r2
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f2      	bne.n	8001b60 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	bf14      	ite	ne
 8001b80:	2301      	movne	r3, #1
 8001b82:	2300      	moveq	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20000648 	.word	0x20000648

08001b98 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	e01f      	b.n	8001be8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8001ba8:	4a41      	ldr	r2, [pc, #260]	; (8001cb0 <inc_lock+0x118>)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	011b      	lsls	r3, r3, #4
 8001bae:	4413      	add	r3, r2
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d113      	bne.n	8001be2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8001bba:	4a3d      	ldr	r2, [pc, #244]	; (8001cb0 <inc_lock+0x118>)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d109      	bne.n	8001be2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8001bce:	4a38      	ldr	r2, [pc, #224]	; (8001cb0 <inc_lock+0x118>)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3308      	adds	r3, #8
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d006      	beq.n	8001bf0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	3301      	adds	r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0dc      	beq.n	8001ba8 <inc_lock+0x10>
 8001bee:	e000      	b.n	8001bf2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8001bf0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d132      	bne.n	8001c5e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	e002      	b.n	8001c04 <inc_lock+0x6c>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	3301      	adds	r3, #1
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d106      	bne.n	8001c18 <inc_lock+0x80>
 8001c0a:	4a29      	ldr	r2, [pc, #164]	; (8001cb0 <inc_lock+0x118>)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	011b      	lsls	r3, r3, #4
 8001c10:	4413      	add	r3, r2
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f2      	bne.n	8001bfe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d101      	bne.n	8001c22 <inc_lock+0x8a>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e040      	b.n	8001ca4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	4922      	ldr	r1, [pc, #136]	; (8001cb0 <inc_lock+0x118>)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	440b      	add	r3, r1
 8001c2e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	491e      	ldr	r1, [pc, #120]	; (8001cb0 <inc_lock+0x118>)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	011b      	lsls	r3, r3, #4
 8001c3a:	440b      	add	r3, r1
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	695a      	ldr	r2, [r3, #20]
 8001c44:	491a      	ldr	r1, [pc, #104]	; (8001cb0 <inc_lock+0x118>)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	011b      	lsls	r3, r3, #4
 8001c4a:	440b      	add	r3, r1
 8001c4c:	3308      	adds	r3, #8
 8001c4e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8001c50:	4a17      	ldr	r2, [pc, #92]	; (8001cb0 <inc_lock+0x118>)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	011b      	lsls	r3, r3, #4
 8001c56:	4413      	add	r3, r2
 8001c58:	330c      	adds	r3, #12
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d009      	beq.n	8001c78 <inc_lock+0xe0>
 8001c64:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <inc_lock+0x118>)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	011b      	lsls	r3, r3, #4
 8001c6a:	4413      	add	r3, r2
 8001c6c:	330c      	adds	r3, #12
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <inc_lock+0xe0>
 8001c74:	2300      	movs	r3, #0
 8001c76:	e015      	b.n	8001ca4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d108      	bne.n	8001c90 <inc_lock+0xf8>
 8001c7e:	4a0c      	ldr	r2, [pc, #48]	; (8001cb0 <inc_lock+0x118>)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	011b      	lsls	r3, r3, #4
 8001c84:	4413      	add	r3, r2
 8001c86:	330c      	adds	r3, #12
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	e001      	b.n	8001c94 <inc_lock+0xfc>
 8001c90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c94:	4906      	ldr	r1, [pc, #24]	; (8001cb0 <inc_lock+0x118>)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	011b      	lsls	r3, r3, #4
 8001c9a:	440b      	add	r3, r1
 8001c9c:	330c      	adds	r3, #12
 8001c9e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	3301      	adds	r3, #1
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	20000648 	.word	0x20000648

08001cb4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	607b      	str	r3, [r7, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d125      	bne.n	8001d14 <dec_lock+0x60>
		n = Files[i].ctr;
 8001cc8:	4a17      	ldr	r2, [pc, #92]	; (8001d28 <dec_lock+0x74>)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	4413      	add	r3, r2
 8001cd0:	330c      	adds	r3, #12
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8001cd6:	89fb      	ldrh	r3, [r7, #14]
 8001cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cdc:	d101      	bne.n	8001ce2 <dec_lock+0x2e>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8001ce2:	89fb      	ldrh	r3, [r7, #14]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <dec_lock+0x3a>
 8001ce8:	89fb      	ldrh	r3, [r7, #14]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8001cee:	4a0e      	ldr	r2, [pc, #56]	; (8001d28 <dec_lock+0x74>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	4413      	add	r3, r2
 8001cf6:	330c      	adds	r3, #12
 8001cf8:	89fa      	ldrh	r2, [r7, #14]
 8001cfa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8001cfc:	89fb      	ldrh	r3, [r7, #14]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d105      	bne.n	8001d0e <dec_lock+0x5a>
 8001d02:	4a09      	ldr	r2, [pc, #36]	; (8001d28 <dec_lock+0x74>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	011b      	lsls	r3, r3, #4
 8001d08:	4413      	add	r3, r2
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	737b      	strb	r3, [r7, #13]
 8001d12:	e001      	b.n	8001d18 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8001d14:	2302      	movs	r3, #2
 8001d16:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8001d18:	7b7b      	ldrb	r3, [r7, #13]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000648 	.word	0x20000648

08001d2c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	e010      	b.n	8001d5c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8001d3a:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <clear_lock+0x44>)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	011b      	lsls	r3, r3, #4
 8001d40:	4413      	add	r3, r2
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d105      	bne.n	8001d56 <clear_lock+0x2a>
 8001d4a:	4a09      	ldr	r2, [pc, #36]	; (8001d70 <clear_lock+0x44>)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	4413      	add	r3, r2
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0eb      	beq.n	8001d3a <clear_lock+0xe>
	}
}
 8001d62:	bf00      	nop
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	20000648 	.word	0x20000648

08001d74 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	78db      	ldrb	r3, [r3, #3]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d034      	beq.n	8001df2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	7858      	ldrb	r0, [r3, #1]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001d98:	2301      	movs	r3, #1
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	f7ff fd0a 	bl	80017b4 <disk_write>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <sync_window+0x38>
			res = FR_DISK_ERR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	73fb      	strb	r3, [r7, #15]
 8001daa:	e022      	b.n	8001df2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	1ad2      	subs	r2, r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d217      	bcs.n	8001df2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	789b      	ldrb	r3, [r3, #2]
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	e010      	b.n	8001dec <sync_window+0x78>
					wsect += fs->fsize;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7858      	ldrb	r0, [r3, #1]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001dde:	2301      	movs	r3, #1
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	f7ff fce7 	bl	80017b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d8eb      	bhi.n	8001dca <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d01b      	beq.n	8001e4c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff ffad 	bl	8001d74 <sync_window>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d113      	bne.n	8001e4c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	7858      	ldrb	r0, [r3, #1]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001e2e:	2301      	movs	r3, #1
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	f7ff fc9f 	bl	8001774 <disk_read>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d004      	beq.n	8001e46 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8001e3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e40:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ff87 	bl	8001d74 <sync_window>
 8001e66:	4603      	mov	r3, r0
 8001e68:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d158      	bne.n	8001f22 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	d148      	bne.n	8001f0a <sync_fs+0xb2>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	791b      	ldrb	r3, [r3, #4]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d144      	bne.n	8001f0a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3330      	adds	r3, #48	; 0x30
 8001e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fda9 	bl	80019e2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3330      	adds	r3, #48	; 0x30
 8001e94:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8001e98:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fd38 	bl	8001912 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3330      	adds	r3, #48	; 0x30
 8001ea6:	4921      	ldr	r1, [pc, #132]	; (8001f2c <sync_fs+0xd4>)
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fd4d 	bl	8001948 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3330      	adds	r3, #48	; 0x30
 8001eb2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001eb6:	491e      	ldr	r1, [pc, #120]	; (8001f30 <sync_fs+0xd8>)
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff fd45 	bl	8001948 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3330      	adds	r3, #48	; 0x30
 8001ec2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4610      	mov	r0, r2
 8001ece:	f7ff fd3b 	bl	8001948 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3330      	adds	r3, #48	; 0x30
 8001ed6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	f7ff fd31 	bl	8001948 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	7858      	ldrb	r0, [r3, #1]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001efe:	2301      	movs	r3, #1
 8001f00:	f7ff fc58 	bl	80017b4 <disk_write>
			fs->fsi_flag = 0;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	785b      	ldrb	r3, [r3, #1]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fc6e 	bl	80017f4 <disk_ioctl>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <sync_fs+0xca>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	41615252 	.word	0x41615252
 8001f30:	61417272 	.word	0x61417272

08001f34 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	3b02      	subs	r3, #2
 8001f42:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	3b02      	subs	r3, #2
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d301      	bcc.n	8001f54 <clust2sect+0x20>
 8001f50:	2300      	movs	r3, #0
 8001f52:	e008      	b.n	8001f66 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	895b      	ldrh	r3, [r3, #10]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	fb03 f202 	mul.w	r2, r3, r2
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f64:	4413      	add	r3, r2
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b086      	sub	sp, #24
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d904      	bls.n	8001f92 <get_fat+0x20>
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d302      	bcc.n	8001f98 <get_fat+0x26>
		val = 1;	/* Internal error */
 8001f92:	2301      	movs	r3, #1
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	e08f      	b.n	80020b8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8001f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f9c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d062      	beq.n	800206c <get_fat+0xfa>
 8001fa6:	2b03      	cmp	r3, #3
 8001fa8:	dc7c      	bgt.n	80020a4 <get_fat+0x132>
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d002      	beq.n	8001fb4 <get_fat+0x42>
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d042      	beq.n	8002038 <get_fat+0xc6>
 8001fb2:	e077      	b.n	80020a4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	085b      	lsrs	r3, r3, #1
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	6a1a      	ldr	r2, [r3, #32]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	0a5b      	lsrs	r3, r3, #9
 8001fca:	4413      	add	r3, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	6938      	ldr	r0, [r7, #16]
 8001fd0:	f7ff ff14 	bl	8001dfc <move_window>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d167      	bne.n	80020aa <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	60fa      	str	r2, [r7, #12]
 8001fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fec:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	6a1a      	ldr	r2, [r3, #32]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	0a5b      	lsrs	r3, r3, #9
 8001ff6:	4413      	add	r3, r2
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	6938      	ldr	r0, [r7, #16]
 8001ffc:	f7ff fefe 	bl	8001dfc <move_window>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d153      	bne.n	80020ae <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4413      	add	r3, r2
 8002010:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	461a      	mov	r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	4313      	orrs	r3, r2
 800201c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <get_fat+0xbc>
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	091b      	lsrs	r3, r3, #4
 800202c:	e002      	b.n	8002034 <get_fat+0xc2>
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002034:	617b      	str	r3, [r7, #20]
			break;
 8002036:	e03f      	b.n	80020b8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	6a1a      	ldr	r2, [r3, #32]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	0a1b      	lsrs	r3, r3, #8
 8002040:	4413      	add	r3, r2
 8002042:	4619      	mov	r1, r3
 8002044:	6938      	ldr	r0, [r7, #16]
 8002046:	f7ff fed9 	bl	8001dfc <move_window>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d130      	bne.n	80020b2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800205e:	4413      	add	r3, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fc1b 	bl	800189c <ld_word>
 8002066:	4603      	mov	r3, r0
 8002068:	617b      	str	r3, [r7, #20]
			break;
 800206a:	e025      	b.n	80020b8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	6a1a      	ldr	r2, [r3, #32]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	09db      	lsrs	r3, r3, #7
 8002074:	4413      	add	r3, r2
 8002076:	4619      	mov	r1, r3
 8002078:	6938      	ldr	r0, [r7, #16]
 800207a:	f7ff febf 	bl	8001dfc <move_window>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d118      	bne.n	80020b6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002092:	4413      	add	r3, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff fc19 	bl	80018cc <ld_dword>
 800209a:	4603      	mov	r3, r0
 800209c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80020a0:	617b      	str	r3, [r7, #20]
			break;
 80020a2:	e009      	b.n	80020b8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80020a4:	2301      	movs	r3, #1
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	e006      	b.n	80020b8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80020aa:	bf00      	nop
 80020ac:	e004      	b.n	80020b8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80020ae:	bf00      	nop
 80020b0:	e002      	b.n	80020b8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80020b2:	bf00      	nop
 80020b4:	e000      	b.n	80020b8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80020b6:	bf00      	nop
		}
	}

	return val;
 80020b8:	697b      	ldr	r3, [r7, #20]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80020c2:	b590      	push	{r4, r7, lr}
 80020c4:	b089      	sub	sp, #36	; 0x24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80020ce:	2302      	movs	r3, #2
 80020d0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	f240 80d2 	bls.w	800227e <put_fat+0x1bc>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	f080 80cc 	bcs.w	800227e <put_fat+0x1bc>
		switch (fs->fs_type) {
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	f000 8096 	beq.w	800221c <put_fat+0x15a>
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	f300 80cd 	bgt.w	8002290 <put_fat+0x1ce>
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d002      	beq.n	8002100 <put_fat+0x3e>
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d06e      	beq.n	80021dc <put_fat+0x11a>
 80020fe:	e0c7      	b.n	8002290 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	61bb      	str	r3, [r7, #24]
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	085b      	lsrs	r3, r3, #1
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4413      	add	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6a1a      	ldr	r2, [r3, #32]
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	0a5b      	lsrs	r3, r3, #9
 8002116:	4413      	add	r3, r2
 8002118:	4619      	mov	r1, r3
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f7ff fe6e 	bl	8001dfc <move_window>
 8002120:	4603      	mov	r3, r0
 8002122:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002124:	7ffb      	ldrb	r3, [r7, #31]
 8002126:	2b00      	cmp	r3, #0
 8002128:	f040 80ab 	bne.w	8002282 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	1c59      	adds	r1, r3, #1
 8002136:	61b9      	str	r1, [r7, #24]
 8002138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800213c:	4413      	add	r3, r2
 800213e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00d      	beq.n	8002166 <put_fat+0xa4>
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	b25b      	sxtb	r3, r3
 8002150:	f003 030f 	and.w	r3, r3, #15
 8002154:	b25a      	sxtb	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	b25b      	sxtb	r3, r3
 800215e:	4313      	orrs	r3, r2
 8002160:	b25b      	sxtb	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	e001      	b.n	800216a <put_fat+0xa8>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2201      	movs	r2, #1
 8002172:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a1a      	ldr	r2, [r3, #32]
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	0a5b      	lsrs	r3, r3, #9
 800217c:	4413      	add	r3, r2
 800217e:	4619      	mov	r1, r3
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f7ff fe3b 	bl	8001dfc <move_window>
 8002186:	4603      	mov	r3, r0
 8002188:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800218a:	7ffb      	ldrb	r3, [r7, #31]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d17a      	bne.n	8002286 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800219c:	4413      	add	r3, r2
 800219e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <put_fat+0xf0>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	e00e      	b.n	80021d0 <put_fat+0x10e>
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	b25b      	sxtb	r3, r3
 80021b8:	f023 030f 	bic.w	r3, r3, #15
 80021bc:	b25a      	sxtb	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	0a1b      	lsrs	r3, r3, #8
 80021c2:	b25b      	sxtb	r3, r3
 80021c4:	f003 030f 	and.w	r3, r3, #15
 80021c8:	b25b      	sxtb	r3, r3
 80021ca:	4313      	orrs	r3, r2
 80021cc:	b25b      	sxtb	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2201      	movs	r2, #1
 80021d8:	70da      	strb	r2, [r3, #3]
			break;
 80021da:	e059      	b.n	8002290 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6a1a      	ldr	r2, [r3, #32]
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	4413      	add	r3, r2
 80021e6:	4619      	mov	r1, r3
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f7ff fe07 	bl	8001dfc <move_window>
 80021ee:	4603      	mov	r3, r0
 80021f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80021f2:	7ffb      	ldrb	r3, [r7, #31]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d148      	bne.n	800228a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8002206:	4413      	add	r3, r2
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	b292      	uxth	r2, r2
 800220c:	4611      	mov	r1, r2
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff fb7f 	bl	8001912 <st_word>
			fs->wflag = 1;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2201      	movs	r2, #1
 8002218:	70da      	strb	r2, [r3, #3]
			break;
 800221a:	e039      	b.n	8002290 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a1a      	ldr	r2, [r3, #32]
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	09db      	lsrs	r3, r3, #7
 8002224:	4413      	add	r3, r2
 8002226:	4619      	mov	r1, r3
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f7ff fde7 	bl	8001dfc <move_window>
 800222e:	4603      	mov	r3, r0
 8002230:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002232:	7ffb      	ldrb	r3, [r7, #31]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d12a      	bne.n	800228e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800224c:	4413      	add	r3, r2
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fb3c 	bl	80018cc <ld_dword>
 8002254:	4603      	mov	r3, r0
 8002256:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800225a:	4323      	orrs	r3, r4
 800225c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800226c:	4413      	add	r3, r2
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fb69 	bl	8001948 <st_dword>
			fs->wflag = 1;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2201      	movs	r2, #1
 800227a:	70da      	strb	r2, [r3, #3]
			break;
 800227c:	e008      	b.n	8002290 <put_fat+0x1ce>
		}
	}
 800227e:	bf00      	nop
 8002280:	e006      	b.n	8002290 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8002282:	bf00      	nop
 8002284:	e004      	b.n	8002290 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8002286:	bf00      	nop
 8002288:	e002      	b.n	8002290 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800228a:	bf00      	nop
 800228c:	e000      	b.n	8002290 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800228e:	bf00      	nop
	return res;
 8002290:	7ffb      	ldrb	r3, [r7, #31]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3724      	adds	r7, #36	; 0x24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd90      	pop	{r4, r7, pc}

0800229a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b088      	sub	sp, #32
 800229e:	af00      	add	r7, sp, #0
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d904      	bls.n	80022c0 <remove_chain+0x26>
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d301      	bcc.n	80022c4 <remove_chain+0x2a>
 80022c0:	2302      	movs	r3, #2
 80022c2:	e04b      	b.n	800235c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00c      	beq.n	80022e4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80022ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	69b8      	ldr	r0, [r7, #24]
 80022d2:	f7ff fef6 	bl	80020c2 <put_fat>
 80022d6:	4603      	mov	r3, r0
 80022d8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80022da:	7ffb      	ldrb	r3, [r7, #31]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <remove_chain+0x4a>
 80022e0:	7ffb      	ldrb	r3, [r7, #31]
 80022e2:	e03b      	b.n	800235c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f7ff fe43 	bl	8001f72 <get_fat>
 80022ec:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d031      	beq.n	8002358 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <remove_chain+0x64>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e02e      	b.n	800235c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002304:	d101      	bne.n	800230a <remove_chain+0x70>
 8002306:	2301      	movs	r3, #1
 8002308:	e028      	b.n	800235c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800230a:	2200      	movs	r2, #0
 800230c:	68b9      	ldr	r1, [r7, #8]
 800230e:	69b8      	ldr	r0, [r7, #24]
 8002310:	f7ff fed7 	bl	80020c2 <put_fat>
 8002314:	4603      	mov	r3, r0
 8002316:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8002318:	7ffb      	ldrb	r3, [r7, #31]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <remove_chain+0x88>
 800231e:	7ffb      	ldrb	r3, [r7, #31]
 8002320:	e01c      	b.n	800235c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	691a      	ldr	r2, [r3, #16]
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	3b02      	subs	r3, #2
 800232c:	429a      	cmp	r2, r3
 800232e:	d20b      	bcs.n	8002348 <remove_chain+0xae>
			fs->free_clst++;
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	791b      	ldrb	r3, [r3, #4]
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	b2da      	uxtb	r2, r3
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	429a      	cmp	r2, r3
 8002354:	d3c6      	bcc.n	80022e4 <remove_chain+0x4a>
 8002356:	e000      	b.n	800235a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8002358:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3720      	adds	r7, #32
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10d      	bne.n	8002396 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d004      	beq.n	8002390 <create_chain+0x2c>
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	429a      	cmp	r2, r3
 800238e:	d31b      	bcc.n	80023c8 <create_chain+0x64>
 8002390:	2301      	movs	r3, #1
 8002392:	61bb      	str	r3, [r7, #24]
 8002394:	e018      	b.n	80023c8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002396:	6839      	ldr	r1, [r7, #0]
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff fdea 	bl	8001f72 <get_fat>
 800239e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d801      	bhi.n	80023aa <create_chain+0x46>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e070      	b.n	800248c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023b0:	d101      	bne.n	80023b6 <create_chain+0x52>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	e06a      	b.n	800248c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d201      	bcs.n	80023c4 <create_chain+0x60>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	e063      	b.n	800248c <create_chain+0x128>
		scl = clst;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	3301      	adds	r3, #1
 80023d0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d307      	bcc.n	80023ec <create_chain+0x88>
				ncl = 2;
 80023dc:	2302      	movs	r3, #2
 80023de:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80023e0:	69fa      	ldr	r2, [r7, #28]
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d901      	bls.n	80023ec <create_chain+0x88>
 80023e8:	2300      	movs	r3, #0
 80023ea:	e04f      	b.n	800248c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80023ec:	69f9      	ldr	r1, [r7, #28]
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff fdbf 	bl	8001f72 <get_fat>
 80023f4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00e      	beq.n	800241a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d003      	beq.n	800240a <create_chain+0xa6>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002408:	d101      	bne.n	800240e <create_chain+0xaa>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	e03e      	b.n	800248c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800240e:	69fa      	ldr	r2, [r7, #28]
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	429a      	cmp	r2, r3
 8002414:	d1da      	bne.n	80023cc <create_chain+0x68>
 8002416:	2300      	movs	r3, #0
 8002418:	e038      	b.n	800248c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800241a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800241c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002420:	69f9      	ldr	r1, [r7, #28]
 8002422:	6938      	ldr	r0, [r7, #16]
 8002424:	f7ff fe4d 	bl	80020c2 <put_fat>
 8002428:	4603      	mov	r3, r0
 800242a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800242c:	7dfb      	ldrb	r3, [r7, #23]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <create_chain+0xe2>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d006      	beq.n	8002446 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8002438:	69fa      	ldr	r2, [r7, #28]
 800243a:	6839      	ldr	r1, [r7, #0]
 800243c:	6938      	ldr	r0, [r7, #16]
 800243e:	f7ff fe40 	bl	80020c2 <put_fat>
 8002442:	4603      	mov	r3, r0
 8002444:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8002446:	7dfb      	ldrb	r3, [r7, #23]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d116      	bne.n	800247a <create_chain+0x116>
		fs->last_clst = ncl;
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	69fa      	ldr	r2, [r7, #28]
 8002450:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	691a      	ldr	r2, [r3, #16]
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	3b02      	subs	r3, #2
 800245c:	429a      	cmp	r2, r3
 800245e:	d804      	bhi.n	800246a <create_chain+0x106>
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	1e5a      	subs	r2, r3, #1
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	791b      	ldrb	r3, [r3, #4]
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	b2da      	uxtb	r2, r3
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	711a      	strb	r2, [r3, #4]
 8002478:	e007      	b.n	800248a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800247a:	7dfb      	ldrb	r3, [r7, #23]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d102      	bne.n	8002486 <create_chain+0x122>
 8002480:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002484:	e000      	b.n	8002488 <create_chain+0x124>
 8002486:	2301      	movs	r3, #1
 8002488:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800248a:	69fb      	ldr	r3, [r7, #28]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3720      	adds	r7, #32
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a8:	3304      	adds	r3, #4
 80024aa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	0a5b      	lsrs	r3, r3, #9
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	8952      	ldrh	r2, [r2, #10]
 80024b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80024b8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1d1a      	adds	r2, r3, #4
 80024be:	613a      	str	r2, [r7, #16]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <clmt_clust+0x3a>
 80024ca:	2300      	movs	r3, #0
 80024cc:	e010      	b.n	80024f0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d307      	bcc.n	80024e6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	3304      	adds	r3, #4
 80024e2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80024e4:	e7e9      	b.n	80024ba <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80024e6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	4413      	add	r3, r2
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	371c      	adds	r7, #28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002512:	d204      	bcs.n	800251e <dir_sdi+0x22>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	f003 031f 	and.w	r3, r3, #31
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <dir_sdi+0x26>
		return FR_INT_ERR;
 800251e:	2302      	movs	r3, #2
 8002520:	e063      	b.n	80025ea <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d106      	bne.n	8002542 <dir_sdi+0x46>
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d902      	bls.n	8002542 <dir_sdi+0x46>
		clst = fs->dirbase;
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10c      	bne.n	8002562 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	8912      	ldrh	r2, [r2, #8]
 8002550:	4293      	cmp	r3, r2
 8002552:	d301      	bcc.n	8002558 <dir_sdi+0x5c>
 8002554:	2302      	movs	r3, #2
 8002556:	e048      	b.n	80025ea <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	61da      	str	r2, [r3, #28]
 8002560:	e029      	b.n	80025b6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	895b      	ldrh	r3, [r3, #10]
 8002566:	025b      	lsls	r3, r3, #9
 8002568:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800256a:	e019      	b.n	80025a0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6979      	ldr	r1, [r7, #20]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fcfe 	bl	8001f72 <get_fat>
 8002576:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800257e:	d101      	bne.n	8002584 <dir_sdi+0x88>
 8002580:	2301      	movs	r3, #1
 8002582:	e032      	b.n	80025ea <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d904      	bls.n	8002594 <dir_sdi+0x98>
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	429a      	cmp	r2, r3
 8002592:	d301      	bcc.n	8002598 <dir_sdi+0x9c>
 8002594:	2302      	movs	r3, #2
 8002596:	e028      	b.n	80025ea <dir_sdi+0xee>
			ofs -= csz;
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d2e1      	bcs.n	800256c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80025a8:	6979      	ldr	r1, [r7, #20]
 80025aa:	6938      	ldr	r0, [r7, #16]
 80025ac:	f7ff fcc2 	bl	8001f34 <clust2sect>
 80025b0:	4602      	mov	r2, r0
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <dir_sdi+0xcc>
 80025c4:	2302      	movs	r3, #2
 80025c6:	e010      	b.n	80025ea <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69da      	ldr	r2, [r3, #28]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	0a5b      	lsrs	r3, r3, #9
 80025d0:	441a      	add	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e2:	441a      	add	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b086      	sub	sp, #24
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	3320      	adds	r3, #32
 8002608:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <dir_next+0x28>
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002618:	d301      	bcc.n	800261e <dir_next+0x2c>
 800261a:	2304      	movs	r3, #4
 800261c:	e0aa      	b.n	8002774 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002624:	2b00      	cmp	r3, #0
 8002626:	f040 8098 	bne.w	800275a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10b      	bne.n	8002654 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	8912      	ldrh	r2, [r2, #8]
 8002644:	4293      	cmp	r3, r2
 8002646:	f0c0 8088 	bcc.w	800275a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	61da      	str	r2, [r3, #28]
 8002650:	2304      	movs	r3, #4
 8002652:	e08f      	b.n	8002774 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	0a5b      	lsrs	r3, r3, #9
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	8952      	ldrh	r2, [r2, #10]
 800265c:	3a01      	subs	r2, #1
 800265e:	4013      	ands	r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d17a      	bne.n	800275a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	4619      	mov	r1, r3
 800266c:	4610      	mov	r0, r2
 800266e:	f7ff fc80 	bl	8001f72 <get_fat>
 8002672:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d801      	bhi.n	800267e <dir_next+0x8c>
 800267a:	2302      	movs	r3, #2
 800267c:	e07a      	b.n	8002774 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002684:	d101      	bne.n	800268a <dir_next+0x98>
 8002686:	2301      	movs	r3, #1
 8002688:	e074      	b.n	8002774 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	429a      	cmp	r2, r3
 8002692:	d358      	bcc.n	8002746 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d104      	bne.n	80026a4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	61da      	str	r2, [r3, #28]
 80026a0:	2304      	movs	r3, #4
 80026a2:	e067      	b.n	8002774 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	4619      	mov	r1, r3
 80026ac:	4610      	mov	r0, r2
 80026ae:	f7ff fe59 	bl	8002364 <create_chain>
 80026b2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <dir_next+0xcc>
 80026ba:	2307      	movs	r3, #7
 80026bc:	e05a      	b.n	8002774 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <dir_next+0xd6>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e055      	b.n	8002774 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ce:	d101      	bne.n	80026d4 <dir_next+0xe2>
 80026d0:	2301      	movs	r3, #1
 80026d2:	e04f      	b.n	8002774 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f7ff fb4d 	bl	8001d74 <sync_window>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <dir_next+0xf2>
 80026e0:	2301      	movs	r3, #1
 80026e2:	e047      	b.n	8002774 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	3330      	adds	r3, #48	; 0x30
 80026e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ec:	2100      	movs	r1, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff f977 	bl	80019e2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80026f4:	2300      	movs	r3, #0
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	6979      	ldr	r1, [r7, #20]
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f7ff fc1a 	bl	8001f34 <clust2sect>
 8002700:	4602      	mov	r2, r0
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	62da      	str	r2, [r3, #44]	; 0x2c
 8002706:	e012      	b.n	800272e <dir_next+0x13c>
						fs->wflag = 1;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2201      	movs	r2, #1
 800270c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f7ff fb30 	bl	8001d74 <sync_window>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <dir_next+0x12c>
 800271a:	2301      	movs	r3, #1
 800271c:	e02a      	b.n	8002774 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	3301      	adds	r3, #1
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	62da      	str	r2, [r3, #44]	; 0x2c
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	895b      	ldrh	r3, [r3, #10]
 8002732:	461a      	mov	r2, r3
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4293      	cmp	r3, r2
 8002738:	d3e6      	bcc.n	8002708 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad2      	subs	r2, r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800274c:	6979      	ldr	r1, [r7, #20]
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f7ff fbf0 	bl	8001f34 <clust2sect>
 8002754:	4602      	mov	r2, r0
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800276c:	441a      	add	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800278c:	2100      	movs	r1, #0
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff feb4 	bl	80024fc <dir_sdi>
 8002794:	4603      	mov	r3, r0
 8002796:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8002798:	7dfb      	ldrb	r3, [r7, #23]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d12b      	bne.n	80027f6 <dir_alloc+0x7a>
		n = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	4619      	mov	r1, r3
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f7ff fb27 	bl	8001dfc <move_window>
 80027ae:	4603      	mov	r3, r0
 80027b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80027b2:	7dfb      	ldrb	r3, [r7, #23]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d11d      	bne.n	80027f4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2be5      	cmp	r3, #229	; 0xe5
 80027c0:	d004      	beq.n	80027cc <dir_alloc+0x50>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d107      	bne.n	80027dc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	3301      	adds	r3, #1
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d102      	bne.n	80027e0 <dir_alloc+0x64>
 80027da:	e00c      	b.n	80027f6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80027dc:	2300      	movs	r3, #0
 80027de:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80027e0:	2101      	movs	r1, #1
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff ff05 	bl	80025f2 <dir_next>
 80027e8:	4603      	mov	r3, r0
 80027ea:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80027ec:	7dfb      	ldrb	r3, [r7, #23]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0d7      	beq.n	80027a2 <dir_alloc+0x26>
 80027f2:	e000      	b.n	80027f6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80027f4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80027f6:	7dfb      	ldrb	r3, [r7, #23]
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d101      	bne.n	8002800 <dir_alloc+0x84>
 80027fc:	2307      	movs	r3, #7
 80027fe:	75fb      	strb	r3, [r7, #23]
	return res;
 8002800:	7dfb      	ldrb	r3, [r7, #23]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b084      	sub	sp, #16
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	331a      	adds	r3, #26
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff f83f 	bl	800189c <ld_word>
 800281e:	4603      	mov	r3, r0
 8002820:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b03      	cmp	r3, #3
 8002828:	d109      	bne.n	800283e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	3314      	adds	r3, #20
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff f834 	bl	800189c <ld_word>
 8002834:	4603      	mov	r3, r0
 8002836:	041b      	lsls	r3, r3, #16
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800283e:	68fb      	ldr	r3, [r7, #12]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	331a      	adds	r3, #26
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	b292      	uxth	r2, r2
 800285c:	4611      	mov	r1, r2
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff f857 	bl	8001912 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b03      	cmp	r3, #3
 800286a:	d109      	bne.n	8002880 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f103 0214 	add.w	r2, r3, #20
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	0c1b      	lsrs	r3, r3, #16
 8002876:	b29b      	uxth	r3, r3
 8002878:	4619      	mov	r1, r3
 800287a:	4610      	mov	r0, r2
 800287c:	f7ff f849 	bl	8001912 <st_word>
	}
}
 8002880:	bf00      	nop
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8002892:	2304      	movs	r3, #4
 8002894:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800289c:	e03c      	b.n	8002918 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	4619      	mov	r1, r3
 80028a4:	6938      	ldr	r0, [r7, #16]
 80028a6:	f7ff faa9 	bl	8001dfc <move_window>
 80028aa:	4603      	mov	r3, r0
 80028ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80028ae:	7dfb      	ldrb	r3, [r7, #23]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d136      	bne.n	8002922 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d102      	bne.n	80028c8 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80028c2:	2304      	movs	r3, #4
 80028c4:	75fb      	strb	r3, [r7, #23]
 80028c6:	e031      	b.n	800292c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	330b      	adds	r3, #11
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028d4:	73bb      	strb	r3, [r7, #14]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7bba      	ldrb	r2, [r7, #14]
 80028da:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	2be5      	cmp	r3, #229	; 0xe5
 80028e0:	d011      	beq.n	8002906 <dir_read+0x7e>
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	2b2e      	cmp	r3, #46	; 0x2e
 80028e6:	d00e      	beq.n	8002906 <dir_read+0x7e>
 80028e8:	7bbb      	ldrb	r3, [r7, #14]
 80028ea:	2b0f      	cmp	r3, #15
 80028ec:	d00b      	beq.n	8002906 <dir_read+0x7e>
 80028ee:	7bbb      	ldrb	r3, [r7, #14]
 80028f0:	f023 0320 	bic.w	r3, r3, #32
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	bf0c      	ite	eq
 80028f8:	2301      	moveq	r3, #1
 80028fa:	2300      	movne	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	461a      	mov	r2, r3
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	4293      	cmp	r3, r2
 8002904:	d00f      	beq.n	8002926 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8002906:	2100      	movs	r1, #0
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff fe72 	bl	80025f2 <dir_next>
 800290e:	4603      	mov	r3, r0
 8002910:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8002912:	7dfb      	ldrb	r3, [r7, #23]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d108      	bne.n	800292a <dir_read+0xa2>
	while (dp->sect) {
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1be      	bne.n	800289e <dir_read+0x16>
 8002920:	e004      	b.n	800292c <dir_read+0xa4>
		if (res != FR_OK) break;
 8002922:	bf00      	nop
 8002924:	e002      	b.n	800292c <dir_read+0xa4>
				break;
 8002926:	bf00      	nop
 8002928:	e000      	b.n	800292c <dir_read+0xa4>
		if (res != FR_OK) break;
 800292a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800292c:	7dfb      	ldrb	r3, [r7, #23]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <dir_read+0xb0>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	61da      	str	r2, [r3, #28]
	return res;
 8002938:	7dfb      	ldrb	r3, [r7, #23]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002950:	2100      	movs	r1, #0
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff fdd2 	bl	80024fc <dir_sdi>
 8002958:	4603      	mov	r3, r0
 800295a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800295c:	7dfb      	ldrb	r3, [r7, #23]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <dir_find+0x24>
 8002962:	7dfb      	ldrb	r3, [r7, #23]
 8002964:	e03e      	b.n	80029e4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	4619      	mov	r1, r3
 800296c:	6938      	ldr	r0, [r7, #16]
 800296e:	f7ff fa45 	bl	8001dfc <move_window>
 8002972:	4603      	mov	r3, r0
 8002974:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8002976:	7dfb      	ldrb	r3, [r7, #23]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d12f      	bne.n	80029dc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d102      	bne.n	8002990 <dir_find+0x4e>
 800298a:	2304      	movs	r3, #4
 800298c:	75fb      	strb	r3, [r7, #23]
 800298e:	e028      	b.n	80029e2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	330b      	adds	r3, #11
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800299c:	b2da      	uxtb	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	330b      	adds	r3, #11
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10a      	bne.n	80029c8 <dir_find+0x86>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a18      	ldr	r0, [r3, #32]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3324      	adds	r3, #36	; 0x24
 80029ba:	220b      	movs	r2, #11
 80029bc:	4619      	mov	r1, r3
 80029be:	f7ff f82b 	bl	8001a18 <mem_cmp>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00b      	beq.n	80029e0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80029c8:	2100      	movs	r1, #0
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff fe11 	bl	80025f2 <dir_next>
 80029d0:	4603      	mov	r3, r0
 80029d2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0c5      	beq.n	8002966 <dir_find+0x24>
 80029da:	e002      	b.n	80029e2 <dir_find+0xa0>
		if (res != FR_OK) break;
 80029dc:	bf00      	nop
 80029de:	e000      	b.n	80029e2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80029e0:	bf00      	nop

	return res;
 80029e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80029fa:	2101      	movs	r1, #1
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff febd 	bl	800277c <dir_alloc>
 8002a02:	4603      	mov	r3, r0
 8002a04:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d11c      	bne.n	8002a46 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	4619      	mov	r1, r3
 8002a12:	68b8      	ldr	r0, [r7, #8]
 8002a14:	f7ff f9f2 	bl	8001dfc <move_window>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d111      	bne.n	8002a46 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	2220      	movs	r2, #32
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fe ffd9 	bl	80019e2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a18      	ldr	r0, [r3, #32]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3324      	adds	r3, #36	; 0x24
 8002a38:	220b      	movs	r2, #11
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	f7fe ffb0 	bl	80019a0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2201      	movs	r2, #1
 8002a44:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d04e      	beq.n	8002b06 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8002a70:	e021      	b.n	8002ab6 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1a      	ldr	r2, [r3, #32]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	1c59      	adds	r1, r3, #1
 8002a7a:	6179      	str	r1, [r7, #20]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
 8002a84:	2b20      	cmp	r3, #32
 8002a86:	d100      	bne.n	8002a8a <get_fileinfo+0x3a>
 8002a88:	e015      	b.n	8002ab6 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	2b05      	cmp	r3, #5
 8002a8e:	d101      	bne.n	8002a94 <get_fileinfo+0x44>
 8002a90:	23e5      	movs	r3, #229	; 0xe5
 8002a92:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	2b09      	cmp	r3, #9
 8002a98:	d106      	bne.n	8002aa8 <get_fileinfo+0x58>
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	613a      	str	r2, [r7, #16]
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	222e      	movs	r2, #46	; 0x2e
 8002aa6:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	613a      	str	r2, [r7, #16]
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	7bfa      	ldrb	r2, [r7, #15]
 8002ab4:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b0a      	cmp	r3, #10
 8002aba:	d9da      	bls.n	8002a72 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3309      	adds	r3, #9
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	7ada      	ldrb	r2, [r3, #11]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	331c      	adds	r3, #28
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fe fef7 	bl	80018cc <ld_dword>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	3316      	adds	r3, #22
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe feee 	bl	80018cc <ld_dword>
 8002af0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	80da      	strh	r2, [r3, #6]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	0c1b      	lsrs	r3, r3, #16
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	809a      	strh	r2, [r3, #4]
 8002b04:	e000      	b.n	8002b08 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8002b06:	bf00      	nop
}
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3324      	adds	r3, #36	; 0x24
 8002b24:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8002b26:	220b      	movs	r2, #11
 8002b28:	2120      	movs	r1, #32
 8002b2a:	68b8      	ldr	r0, [r7, #8]
 8002b2c:	f7fe ff59 	bl	80019e2 <mem_set>
	si = i = 0; ni = 8;
 8002b30:	2300      	movs	r3, #0
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	61fb      	str	r3, [r7, #28]
 8002b38:	2308      	movs	r3, #8
 8002b3a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	61fa      	str	r2, [r7, #28]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4413      	add	r3, r2
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8002b4a:	7efb      	ldrb	r3, [r7, #27]
 8002b4c:	2b20      	cmp	r3, #32
 8002b4e:	d94e      	bls.n	8002bee <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8002b50:	7efb      	ldrb	r3, [r7, #27]
 8002b52:	2b2f      	cmp	r3, #47	; 0x2f
 8002b54:	d006      	beq.n	8002b64 <create_name+0x54>
 8002b56:	7efb      	ldrb	r3, [r7, #27]
 8002b58:	2b5c      	cmp	r3, #92	; 0x5c
 8002b5a:	d110      	bne.n	8002b7e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8002b5c:	e002      	b.n	8002b64 <create_name+0x54>
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3301      	adds	r3, #1
 8002b62:	61fb      	str	r3, [r7, #28]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	4413      	add	r3, r2
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b2f      	cmp	r3, #47	; 0x2f
 8002b6e:	d0f6      	beq.n	8002b5e <create_name+0x4e>
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	4413      	add	r3, r2
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b5c      	cmp	r3, #92	; 0x5c
 8002b7a:	d0f0      	beq.n	8002b5e <create_name+0x4e>
			break;
 8002b7c:	e038      	b.n	8002bf0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8002b7e:	7efb      	ldrb	r3, [r7, #27]
 8002b80:	2b2e      	cmp	r3, #46	; 0x2e
 8002b82:	d003      	beq.n	8002b8c <create_name+0x7c>
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d30c      	bcc.n	8002ba6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	2b0b      	cmp	r3, #11
 8002b90:	d002      	beq.n	8002b98 <create_name+0x88>
 8002b92:	7efb      	ldrb	r3, [r7, #27]
 8002b94:	2b2e      	cmp	r3, #46	; 0x2e
 8002b96:	d001      	beq.n	8002b9c <create_name+0x8c>
 8002b98:	2306      	movs	r3, #6
 8002b9a:	e044      	b.n	8002c26 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8002b9c:	2308      	movs	r3, #8
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	230b      	movs	r3, #11
 8002ba2:	617b      	str	r3, [r7, #20]
			continue;
 8002ba4:	e022      	b.n	8002bec <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8002ba6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	da04      	bge.n	8002bb8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8002bae:	7efb      	ldrb	r3, [r7, #27]
 8002bb0:	3b80      	subs	r3, #128	; 0x80
 8002bb2:	4a1f      	ldr	r2, [pc, #124]	; (8002c30 <create_name+0x120>)
 8002bb4:	5cd3      	ldrb	r3, [r2, r3]
 8002bb6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8002bb8:	7efb      	ldrb	r3, [r7, #27]
 8002bba:	4619      	mov	r1, r3
 8002bbc:	481d      	ldr	r0, [pc, #116]	; (8002c34 <create_name+0x124>)
 8002bbe:	f7fe ff52 	bl	8001a66 <chk_chr>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <create_name+0xbc>
 8002bc8:	2306      	movs	r3, #6
 8002bca:	e02c      	b.n	8002c26 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8002bcc:	7efb      	ldrb	r3, [r7, #27]
 8002bce:	2b60      	cmp	r3, #96	; 0x60
 8002bd0:	d905      	bls.n	8002bde <create_name+0xce>
 8002bd2:	7efb      	ldrb	r3, [r7, #27]
 8002bd4:	2b7a      	cmp	r3, #122	; 0x7a
 8002bd6:	d802      	bhi.n	8002bde <create_name+0xce>
 8002bd8:	7efb      	ldrb	r3, [r7, #27]
 8002bda:	3b20      	subs	r3, #32
 8002bdc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	613a      	str	r2, [r7, #16]
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	4413      	add	r3, r2
 8002be8:	7efa      	ldrb	r2, [r7, #27]
 8002bea:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8002bec:	e7a6      	b.n	8002b3c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8002bee:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	441a      	add	r2, r3
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <create_name+0xf4>
 8002c00:	2306      	movs	r3, #6
 8002c02:	e010      	b.n	8002c26 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2be5      	cmp	r3, #229	; 0xe5
 8002c0a:	d102      	bne.n	8002c12 <create_name+0x102>
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2205      	movs	r2, #5
 8002c10:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8002c12:	7efb      	ldrb	r3, [r7, #27]
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d801      	bhi.n	8002c1c <create_name+0x10c>
 8002c18:	2204      	movs	r2, #4
 8002c1a:	e000      	b.n	8002c1e <create_name+0x10e>
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	330b      	adds	r3, #11
 8002c22:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8002c24:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3720      	adds	r7, #32
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	0800e988 	.word	0x0800e988
 8002c34:	0800e468 	.word	0x0800e468

08002c38 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002c4c:	e002      	b.n	8002c54 <follow_path+0x1c>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	3301      	adds	r3, #1
 8002c52:	603b      	str	r3, [r7, #0]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b2f      	cmp	r3, #47	; 0x2f
 8002c5a:	d0f8      	beq.n	8002c4e <follow_path+0x16>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b5c      	cmp	r3, #92	; 0x5c
 8002c62:	d0f4      	beq.n	8002c4e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	2200      	movs	r2, #0
 8002c68:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b1f      	cmp	r3, #31
 8002c70:	d80a      	bhi.n	8002c88 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2280      	movs	r2, #128	; 0x80
 8002c76:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff fc3d 	bl	80024fc <dir_sdi>
 8002c82:	4603      	mov	r3, r0
 8002c84:	75fb      	strb	r3, [r7, #23]
 8002c86:	e043      	b.n	8002d10 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8002c88:	463b      	mov	r3, r7
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7ff ff3f 	bl	8002b10 <create_name>
 8002c92:	4603      	mov	r3, r0
 8002c94:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8002c96:	7dfb      	ldrb	r3, [r7, #23]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d134      	bne.n	8002d06 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff fe50 	bl	8002942 <dir_find>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002cac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8002cae:	7dfb      	ldrb	r3, [r7, #23]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00a      	beq.n	8002cca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d127      	bne.n	8002d0a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8002cba:	7afb      	ldrb	r3, [r7, #11]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d122      	bne.n	8002d0a <follow_path+0xd2>
 8002cc4:	2305      	movs	r3, #5
 8002cc6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8002cc8:	e01f      	b.n	8002d0a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8002cca:	7afb      	ldrb	r3, [r7, #11]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d11c      	bne.n	8002d0e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	799b      	ldrb	r3, [r3, #6]
 8002cd8:	f003 0310 	and.w	r3, r3, #16
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d102      	bne.n	8002ce6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8002ce0:	2305      	movs	r3, #5
 8002ce2:	75fb      	strb	r3, [r7, #23]
 8002ce4:	e014      	b.n	8002d10 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf4:	4413      	add	r3, r2
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f7ff fd86 	bl	800280a <ld_clust>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8002d04:	e7c0      	b.n	8002c88 <follow_path+0x50>
			if (res != FR_OK) break;
 8002d06:	bf00      	nop
 8002d08:	e002      	b.n	8002d10 <follow_path+0xd8>
				break;
 8002d0a:	bf00      	nop
 8002d0c:	e000      	b.n	8002d10 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8002d0e:	bf00      	nop
			}
		}
	}

	return res;
 8002d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b087      	sub	sp, #28
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8002d22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d26:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d031      	beq.n	8002d94 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	e002      	b.n	8002d3e <get_ldnumber+0x24>
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	d903      	bls.n	8002d4e <get_ldnumber+0x34>
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b3a      	cmp	r3, #58	; 0x3a
 8002d4c:	d1f4      	bne.n	8002d38 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b3a      	cmp	r3, #58	; 0x3a
 8002d54:	d11c      	bne.n	8002d90 <get_ldnumber+0x76>
			tp = *path;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	60fa      	str	r2, [r7, #12]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	3b30      	subs	r3, #48	; 0x30
 8002d66:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2b09      	cmp	r3, #9
 8002d6c:	d80e      	bhi.n	8002d8c <get_ldnumber+0x72>
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d10a      	bne.n	8002d8c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d107      	bne.n	8002d8c <get_ldnumber+0x72>
					vol = (int)i;
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	3301      	adds	r3, #1
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	e002      	b.n	8002d96 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8002d90:	2300      	movs	r3, #0
 8002d92:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8002d94:	693b      	ldr	r3, [r7, #16]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
	...

08002da4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	70da      	strb	r2, [r3, #3]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dba:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002dbc:	6839      	ldr	r1, [r7, #0]
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff f81c 	bl	8001dfc <move_window>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <check_fs+0x2a>
 8002dca:	2304      	movs	r3, #4
 8002dcc:	e038      	b.n	8002e40 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3330      	adds	r3, #48	; 0x30
 8002dd2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe fd60 	bl	800189c <ld_word>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	461a      	mov	r2, r3
 8002de0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <check_fs+0x48>
 8002de8:	2303      	movs	r3, #3
 8002dea:	e029      	b.n	8002e40 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002df2:	2be9      	cmp	r3, #233	; 0xe9
 8002df4:	d009      	beq.n	8002e0a <check_fs+0x66>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dfc:	2beb      	cmp	r3, #235	; 0xeb
 8002dfe:	d11e      	bne.n	8002e3e <check_fs+0x9a>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002e06:	2b90      	cmp	r3, #144	; 0x90
 8002e08:	d119      	bne.n	8002e3e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3330      	adds	r3, #48	; 0x30
 8002e0e:	3336      	adds	r3, #54	; 0x36
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fe fd5b 	bl	80018cc <ld_dword>
 8002e16:	4603      	mov	r3, r0
 8002e18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e1c:	4a0a      	ldr	r2, [pc, #40]	; (8002e48 <check_fs+0xa4>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d101      	bne.n	8002e26 <check_fs+0x82>
 8002e22:	2300      	movs	r3, #0
 8002e24:	e00c      	b.n	8002e40 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3330      	adds	r3, #48	; 0x30
 8002e2a:	3352      	adds	r3, #82	; 0x52
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fe fd4d 	bl	80018cc <ld_dword>
 8002e32:	4603      	mov	r3, r0
 8002e34:	4a05      	ldr	r2, [pc, #20]	; (8002e4c <check_fs+0xa8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d101      	bne.n	8002e3e <check_fs+0x9a>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	e000      	b.n	8002e40 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8002e3e:	2302      	movs	r3, #2
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	00544146 	.word	0x00544146
 8002e4c:	33544146 	.word	0x33544146

08002e50 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b096      	sub	sp, #88	; 0x58
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f7ff ff58 	bl	8002d1a <get_ldnumber>
 8002e6a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8002e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	da01      	bge.n	8002e76 <find_volume+0x26>
 8002e72:	230b      	movs	r3, #11
 8002e74:	e22d      	b.n	80032d2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8002e76:	4aa1      	ldr	r2, [pc, #644]	; (80030fc <find_volume+0x2ac>)
 8002e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e7e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <find_volume+0x3a>
 8002e86:	230c      	movs	r3, #12
 8002e88:	e223      	b.n	80032d2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e8e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	f023 0301 	bic.w	r3, r3, #1
 8002e96:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8002e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01a      	beq.n	8002ed6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8002ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea2:	785b      	ldrb	r3, [r3, #1]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fe fc25 	bl	80016f4 <disk_status>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002eb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10c      	bne.n	8002ed6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d007      	beq.n	8002ed2 <find_volume+0x82>
 8002ec2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8002ece:	230a      	movs	r3, #10
 8002ed0:	e1ff      	b.n	80032d2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	e1fd      	b.n	80032d2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8002ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed8:	2200      	movs	r2, #0
 8002eda:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8002ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee6:	785b      	ldrb	r3, [r3, #1]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fe fc1d 	bl	8001728 <disk_initialize>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8002ef4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8002f00:	2303      	movs	r3, #3
 8002f02:	e1e6      	b.n	80032d2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8002f04:	79fb      	ldrb	r3, [r7, #7]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d007      	beq.n	8002f1a <find_volume+0xca>
 8002f0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8002f16:	230a      	movs	r3, #10
 8002f18:	e1db      	b.n	80032d2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8002f1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002f20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f22:	f7ff ff3f 	bl	8002da4 <check_fs>
 8002f26:	4603      	mov	r3, r0
 8002f28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8002f2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d149      	bne.n	8002fc8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002f34:	2300      	movs	r3, #0
 8002f36:	643b      	str	r3, [r7, #64]	; 0x40
 8002f38:	e01e      	b.n	8002f78 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8002f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8002f48:	4413      	add	r3, r2
 8002f4a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4e:	3304      	adds	r3, #4
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d006      	beq.n	8002f64 <find_volume+0x114>
 8002f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f58:	3308      	adds	r3, #8
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fe fcb6 	bl	80018cc <ld_dword>
 8002f60:	4602      	mov	r2, r0
 8002f62:	e000      	b.n	8002f66 <find_volume+0x116>
 8002f64:	2200      	movs	r2, #0
 8002f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	3358      	adds	r3, #88	; 0x58
 8002f6c:	443b      	add	r3, r7
 8002f6e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f74:	3301      	adds	r3, #1
 8002f76:	643b      	str	r3, [r7, #64]	; 0x40
 8002f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d9dd      	bls.n	8002f3a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8002f7e:	2300      	movs	r3, #0
 8002f80:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8002f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d002      	beq.n	8002f8e <find_volume+0x13e>
 8002f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8002f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	3358      	adds	r3, #88	; 0x58
 8002f94:	443b      	add	r3, r7
 8002f96:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002f9a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <find_volume+0x15e>
 8002fa2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002fa4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002fa6:	f7ff fefd 	bl	8002da4 <check_fs>
 8002faa:	4603      	mov	r3, r0
 8002fac:	e000      	b.n	8002fb0 <find_volume+0x160>
 8002fae:	2303      	movs	r3, #3
 8002fb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002fb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d905      	bls.n	8002fc8 <find_volume+0x178>
 8002fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	643b      	str	r3, [r7, #64]	; 0x40
 8002fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc4:	2b03      	cmp	r3, #3
 8002fc6:	d9e2      	bls.n	8002f8e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002fc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d101      	bne.n	8002fd4 <find_volume+0x184>
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e17e      	b.n	80032d2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8002fd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d901      	bls.n	8002fe0 <find_volume+0x190>
 8002fdc:	230d      	movs	r3, #13
 8002fde:	e178      	b.n	80032d2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe2:	3330      	adds	r3, #48	; 0x30
 8002fe4:	330b      	adds	r3, #11
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fe fc58 	bl	800189c <ld_word>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff2:	d001      	beq.n	8002ff8 <find_volume+0x1a8>
 8002ff4:	230d      	movs	r3, #13
 8002ff6:	e16c      	b.n	80032d2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8002ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffa:	3330      	adds	r3, #48	; 0x30
 8002ffc:	3316      	adds	r3, #22
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fe fc4c 	bl	800189c <ld_word>
 8003004:	4603      	mov	r3, r0
 8003006:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8003008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800300a:	2b00      	cmp	r3, #0
 800300c:	d106      	bne.n	800301c <find_volume+0x1cc>
 800300e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003010:	3330      	adds	r3, #48	; 0x30
 8003012:	3324      	adds	r3, #36	; 0x24
 8003014:	4618      	mov	r0, r3
 8003016:	f7fe fc59 	bl	80018cc <ld_dword>
 800301a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800301c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003020:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003024:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8003028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800302c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302e:	789b      	ldrb	r3, [r3, #2]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d005      	beq.n	8003040 <find_volume+0x1f0>
 8003034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003036:	789b      	ldrb	r3, [r3, #2]
 8003038:	2b02      	cmp	r3, #2
 800303a:	d001      	beq.n	8003040 <find_volume+0x1f0>
 800303c:	230d      	movs	r3, #13
 800303e:	e148      	b.n	80032d2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8003040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003042:	789b      	ldrb	r3, [r3, #2]
 8003044:	461a      	mov	r2, r3
 8003046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003048:	fb02 f303 	mul.w	r3, r2, r3
 800304c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800304e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003054:	b29a      	uxth	r2, r3
 8003056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003058:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800305a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305c:	895b      	ldrh	r3, [r3, #10]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d008      	beq.n	8003074 <find_volume+0x224>
 8003062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003064:	895b      	ldrh	r3, [r3, #10]
 8003066:	461a      	mov	r2, r3
 8003068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306a:	895b      	ldrh	r3, [r3, #10]
 800306c:	3b01      	subs	r3, #1
 800306e:	4013      	ands	r3, r2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <find_volume+0x228>
 8003074:	230d      	movs	r3, #13
 8003076:	e12c      	b.n	80032d2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8003078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307a:	3330      	adds	r3, #48	; 0x30
 800307c:	3311      	adds	r3, #17
 800307e:	4618      	mov	r0, r3
 8003080:	f7fe fc0c 	bl	800189c <ld_word>
 8003084:	4603      	mov	r3, r0
 8003086:	461a      	mov	r2, r3
 8003088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800308c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308e:	891b      	ldrh	r3, [r3, #8]
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	b29b      	uxth	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <find_volume+0x24e>
 800309a:	230d      	movs	r3, #13
 800309c:	e119      	b.n	80032d2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800309e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a0:	3330      	adds	r3, #48	; 0x30
 80030a2:	3313      	adds	r3, #19
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7fe fbf9 	bl	800189c <ld_word>
 80030aa:	4603      	mov	r3, r0
 80030ac:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80030ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d106      	bne.n	80030c2 <find_volume+0x272>
 80030b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b6:	3330      	adds	r3, #48	; 0x30
 80030b8:	3320      	adds	r3, #32
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fe fc06 	bl	80018cc <ld_dword>
 80030c0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80030c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c4:	3330      	adds	r3, #48	; 0x30
 80030c6:	330e      	adds	r3, #14
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fe fbe7 	bl	800189c <ld_word>
 80030ce:	4603      	mov	r3, r0
 80030d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80030d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <find_volume+0x28c>
 80030d8:	230d      	movs	r3, #13
 80030da:	e0fa      	b.n	80032d2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80030dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80030de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e0:	4413      	add	r3, r2
 80030e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030e4:	8912      	ldrh	r2, [r2, #8]
 80030e6:	0912      	lsrs	r2, r2, #4
 80030e8:	b292      	uxth	r2, r2
 80030ea:	4413      	add	r3, r2
 80030ec:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80030ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d204      	bcs.n	8003100 <find_volume+0x2b0>
 80030f6:	230d      	movs	r3, #13
 80030f8:	e0eb      	b.n	80032d2 <find_volume+0x482>
 80030fa:	bf00      	nop
 80030fc:	20000640 	.word	0x20000640
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8003100:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003108:	8952      	ldrh	r2, [r2, #10]
 800310a:	fbb3 f3f2 	udiv	r3, r3, r2
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <find_volume+0x2ca>
 8003116:	230d      	movs	r3, #13
 8003118:	e0db      	b.n	80032d2 <find_volume+0x482>
		fmt = FS_FAT32;
 800311a:	2303      	movs	r3, #3
 800311c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8003126:	4293      	cmp	r3, r2
 8003128:	d802      	bhi.n	8003130 <find_volume+0x2e0>
 800312a:	2302      	movs	r3, #2
 800312c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	f640 72f5 	movw	r2, #4085	; 0xff5
 8003136:	4293      	cmp	r3, r2
 8003138:	d802      	bhi.n	8003140 <find_volume+0x2f0>
 800313a:	2301      	movs	r3, #1
 800313c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	1c9a      	adds	r2, r3, #2
 8003144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003146:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8003148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800314c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800314e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003152:	441a      	add	r2, r3
 8003154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003156:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8003158:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800315a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315c:	441a      	add	r2, r3
 800315e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003160:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8003162:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003166:	2b03      	cmp	r3, #3
 8003168:	d11e      	bne.n	80031a8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800316a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316c:	3330      	adds	r3, #48	; 0x30
 800316e:	332a      	adds	r3, #42	; 0x2a
 8003170:	4618      	mov	r0, r3
 8003172:	f7fe fb93 	bl	800189c <ld_word>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <find_volume+0x330>
 800317c:	230d      	movs	r3, #13
 800317e:	e0a8      	b.n	80032d2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8003180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003182:	891b      	ldrh	r3, [r3, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <find_volume+0x33c>
 8003188:	230d      	movs	r3, #13
 800318a:	e0a2      	b.n	80032d2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800318c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318e:	3330      	adds	r3, #48	; 0x30
 8003190:	332c      	adds	r3, #44	; 0x2c
 8003192:	4618      	mov	r0, r3
 8003194:	f7fe fb9a 	bl	80018cc <ld_dword>
 8003198:	4602      	mov	r2, r0
 800319a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800319e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	647b      	str	r3, [r7, #68]	; 0x44
 80031a6:	e01f      	b.n	80031e8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80031a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031aa:	891b      	ldrh	r3, [r3, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <find_volume+0x364>
 80031b0:	230d      	movs	r3, #13
 80031b2:	e08e      	b.n	80032d2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80031b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b6:	6a1a      	ldr	r2, [r3, #32]
 80031b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ba:	441a      	add	r2, r3
 80031bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031be:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80031c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d103      	bne.n	80031d0 <find_volume+0x380>
 80031c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	e00a      	b.n	80031e6 <find_volume+0x396>
 80031d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d2:	695a      	ldr	r2, [r3, #20]
 80031d4:	4613      	mov	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4413      	add	r3, r2
 80031da:	085a      	lsrs	r2, r3, #1
 80031dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80031e6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80031e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ea:	699a      	ldr	r2, [r3, #24]
 80031ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ee:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80031f2:	0a5b      	lsrs	r3, r3, #9
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d201      	bcs.n	80031fc <find_volume+0x3ac>
 80031f8:	230d      	movs	r3, #13
 80031fa:	e06a      	b.n	80032d2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80031fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003202:	611a      	str	r2, [r3, #16]
 8003204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800320c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320e:	2280      	movs	r2, #128	; 0x80
 8003210:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8003212:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003216:	2b03      	cmp	r3, #3
 8003218:	d149      	bne.n	80032ae <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800321a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321c:	3330      	adds	r3, #48	; 0x30
 800321e:	3330      	adds	r3, #48	; 0x30
 8003220:	4618      	mov	r0, r3
 8003222:	f7fe fb3b 	bl	800189c <ld_word>
 8003226:	4603      	mov	r3, r0
 8003228:	2b01      	cmp	r3, #1
 800322a:	d140      	bne.n	80032ae <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800322c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800322e:	3301      	adds	r3, #1
 8003230:	4619      	mov	r1, r3
 8003232:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003234:	f7fe fde2 	bl	8001dfc <move_window>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d137      	bne.n	80032ae <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800323e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003240:	2200      	movs	r2, #0
 8003242:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8003244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003246:	3330      	adds	r3, #48	; 0x30
 8003248:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800324c:	4618      	mov	r0, r3
 800324e:	f7fe fb25 	bl	800189c <ld_word>
 8003252:	4603      	mov	r3, r0
 8003254:	461a      	mov	r2, r3
 8003256:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800325a:	429a      	cmp	r2, r3
 800325c:	d127      	bne.n	80032ae <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800325e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003260:	3330      	adds	r3, #48	; 0x30
 8003262:	4618      	mov	r0, r3
 8003264:	f7fe fb32 	bl	80018cc <ld_dword>
 8003268:	4603      	mov	r3, r0
 800326a:	4a1c      	ldr	r2, [pc, #112]	; (80032dc <find_volume+0x48c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d11e      	bne.n	80032ae <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8003270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003272:	3330      	adds	r3, #48	; 0x30
 8003274:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003278:	4618      	mov	r0, r3
 800327a:	f7fe fb27 	bl	80018cc <ld_dword>
 800327e:	4603      	mov	r3, r0
 8003280:	4a17      	ldr	r2, [pc, #92]	; (80032e0 <find_volume+0x490>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d113      	bne.n	80032ae <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8003286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003288:	3330      	adds	r3, #48	; 0x30
 800328a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800328e:	4618      	mov	r0, r3
 8003290:	f7fe fb1c 	bl	80018cc <ld_dword>
 8003294:	4602      	mov	r2, r0
 8003296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003298:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800329a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800329c:	3330      	adds	r3, #48	; 0x30
 800329e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe fb12 	bl	80018cc <ld_dword>
 80032a8:	4602      	mov	r2, r0
 80032aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ac:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80032ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80032b4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80032b6:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <find_volume+0x494>)
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	3301      	adds	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <find_volume+0x494>)
 80032c0:	801a      	strh	r2, [r3, #0]
 80032c2:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <find_volume+0x494>)
 80032c4:	881a      	ldrh	r2, [r3, #0]
 80032c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80032ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80032cc:	f7fe fd2e 	bl	8001d2c <clear_lock>
#endif
	return FR_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3758      	adds	r7, #88	; 0x58
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	41615252 	.word	0x41615252
 80032e0:	61417272 	.word	0x61417272
 80032e4:	20000644 	.word	0x20000644

080032e8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80032f2:	2309      	movs	r3, #9
 80032f4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d01c      	beq.n	8003336 <validate+0x4e>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d018      	beq.n	8003336 <validate+0x4e>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d013      	beq.n	8003336 <validate+0x4e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	889a      	ldrh	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	88db      	ldrh	r3, [r3, #6]
 8003318:	429a      	cmp	r2, r3
 800331a:	d10c      	bne.n	8003336 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	785b      	ldrb	r3, [r3, #1]
 8003322:	4618      	mov	r0, r3
 8003324:	f7fe f9e6 	bl	80016f4 <disk_status>
 8003328:	4603      	mov	r3, r0
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <validate+0x4e>
			res = FR_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8003336:	7bfb      	ldrb	r3, [r7, #15]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d102      	bne.n	8003342 <validate+0x5a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	e000      	b.n	8003344 <validate+0x5c>
 8003342:	2300      	movs	r3, #0
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	6013      	str	r3, [r2, #0]
	return res;
 8003348:	7bfb      	ldrb	r3, [r7, #15]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	4613      	mov	r3, r2
 8003360:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8003366:	f107 0310 	add.w	r3, r7, #16
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff fcd5 	bl	8002d1a <get_ldnumber>
 8003370:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	2b00      	cmp	r3, #0
 8003376:	da01      	bge.n	800337c <f_mount+0x28>
 8003378:	230b      	movs	r3, #11
 800337a:	e02b      	b.n	80033d4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800337c:	4a17      	ldr	r2, [pc, #92]	; (80033dc <f_mount+0x88>)
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003384:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800338c:	69b8      	ldr	r0, [r7, #24]
 800338e:	f7fe fccd 	bl	8001d2c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	2200      	movs	r2, #0
 8003396:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d002      	beq.n	80033a4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	490d      	ldr	r1, [pc, #52]	; (80033dc <f_mount+0x88>)
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d002      	beq.n	80033ba <f_mount+0x66>
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d001      	beq.n	80033be <f_mount+0x6a>
 80033ba:	2300      	movs	r3, #0
 80033bc:	e00a      	b.n	80033d4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80033be:	f107 010c 	add.w	r1, r7, #12
 80033c2:	f107 0308 	add.w	r3, r7, #8
 80033c6:	2200      	movs	r2, #0
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff fd41 	bl	8002e50 <find_volume>
 80033ce:	4603      	mov	r3, r0
 80033d0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80033d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3720      	adds	r7, #32
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	20000640 	.word	0x20000640

080033e0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b098      	sub	sp, #96	; 0x60
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	4613      	mov	r3, r2
 80033ec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <f_open+0x18>
 80033f4:	2309      	movs	r3, #9
 80033f6:	e1ac      	b.n	8003752 <f_open+0x372>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033fe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8003400:	79fa      	ldrb	r2, [r7, #7]
 8003402:	f107 0110 	add.w	r1, r7, #16
 8003406:	f107 0308 	add.w	r3, r7, #8
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff fd20 	bl	8002e50 <find_volume>
 8003410:	4603      	mov	r3, r0
 8003412:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8003416:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800341a:	2b00      	cmp	r3, #0
 800341c:	f040 8190 	bne.w	8003740 <f_open+0x360>
		dj.obj.fs = fs;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	f107 0314 	add.w	r3, r7, #20
 800342a:	4611      	mov	r1, r2
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff fc03 	bl	8002c38 <follow_path>
 8003432:	4603      	mov	r3, r0
 8003434:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8003438:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800343c:	2b00      	cmp	r3, #0
 800343e:	d11a      	bne.n	8003476 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8003440:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003444:	b25b      	sxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	da03      	bge.n	8003452 <f_open+0x72>
				res = FR_INVALID_NAME;
 800344a:	2306      	movs	r3, #6
 800344c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003450:	e011      	b.n	8003476 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	f023 0301 	bic.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	bf14      	ite	ne
 800345c:	2301      	movne	r3, #1
 800345e:	2300      	moveq	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	461a      	mov	r2, r3
 8003464:	f107 0314 	add.w	r3, r7, #20
 8003468:	4611      	mov	r1, r2
 800346a:	4618      	mov	r0, r3
 800346c:	f7fe fb16 	bl	8001a9c <chk_lock>
 8003470:	4603      	mov	r3, r0
 8003472:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003476:	79fb      	ldrb	r3, [r7, #7]
 8003478:	f003 031c 	and.w	r3, r3, #28
 800347c:	2b00      	cmp	r3, #0
 800347e:	d07e      	beq.n	800357e <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8003480:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003484:	2b00      	cmp	r3, #0
 8003486:	d017      	beq.n	80034b8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8003488:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800348c:	2b04      	cmp	r3, #4
 800348e:	d10e      	bne.n	80034ae <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003490:	f7fe fb60 	bl	8001b54 <enq_lock>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d006      	beq.n	80034a8 <f_open+0xc8>
 800349a:	f107 0314 	add.w	r3, r7, #20
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff faa4 	bl	80029ec <dir_register>
 80034a4:	4603      	mov	r3, r0
 80034a6:	e000      	b.n	80034aa <f_open+0xca>
 80034a8:	2312      	movs	r3, #18
 80034aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	f043 0308 	orr.w	r3, r3, #8
 80034b4:	71fb      	strb	r3, [r7, #7]
 80034b6:	e010      	b.n	80034da <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80034b8:	7ebb      	ldrb	r3, [r7, #26]
 80034ba:	f003 0311 	and.w	r3, r3, #17
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <f_open+0xea>
					res = FR_DENIED;
 80034c2:	2307      	movs	r3, #7
 80034c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80034c8:	e007      	b.n	80034da <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d002      	beq.n	80034da <f_open+0xfa>
 80034d4:	2308      	movs	r3, #8
 80034d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80034da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d167      	bne.n	80035b2 <f_open+0x1d2>
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d062      	beq.n	80035b2 <f_open+0x1d2>
				dw = GET_FATTIME();
 80034ec:	4b9b      	ldr	r3, [pc, #620]	; (800375c <f_open+0x37c>)
 80034ee:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80034f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f2:	330e      	adds	r3, #14
 80034f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fe fa26 	bl	8001948 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80034fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034fe:	3316      	adds	r3, #22
 8003500:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003502:	4618      	mov	r0, r3
 8003504:	f7fe fa20 	bl	8001948 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800350a:	330b      	adds	r3, #11
 800350c:	2220      	movs	r2, #32
 800350e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003514:	4611      	mov	r1, r2
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff f977 	bl	800280a <ld_clust>
 800351c:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003522:	2200      	movs	r2, #0
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff f98f 	bl	8002848 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800352a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800352c:	331c      	adds	r3, #28
 800352e:	2100      	movs	r1, #0
 8003530:	4618      	mov	r0, r3
 8003532:	f7fe fa09 	bl	8001948 <st_dword>
					fs->wflag = 1;
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	2201      	movs	r2, #1
 800353a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800353c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800353e:	2b00      	cmp	r3, #0
 8003540:	d037      	beq.n	80035b2 <f_open+0x1d2>
						dw = fs->winsect;
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003546:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	2200      	movs	r2, #0
 800354e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003550:	4618      	mov	r0, r3
 8003552:	f7fe fea2 	bl	800229a <remove_chain>
 8003556:	4603      	mov	r3, r0
 8003558:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800355c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003560:	2b00      	cmp	r3, #0
 8003562:	d126      	bne.n	80035b2 <f_open+0x1d2>
							res = move_window(fs, dw);
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003568:	4618      	mov	r0, r3
 800356a:	f7fe fc47 	bl	8001dfc <move_window>
 800356e:	4603      	mov	r3, r0
 8003570:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003578:	3a01      	subs	r2, #1
 800357a:	60da      	str	r2, [r3, #12]
 800357c:	e019      	b.n	80035b2 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800357e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003582:	2b00      	cmp	r3, #0
 8003584:	d115      	bne.n	80035b2 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8003586:	7ebb      	ldrb	r3, [r7, #26]
 8003588:	f003 0310 	and.w	r3, r3, #16
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <f_open+0x1b8>
					res = FR_NO_FILE;
 8003590:	2304      	movs	r3, #4
 8003592:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003596:	e00c      	b.n	80035b2 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8003598:	79fb      	ldrb	r3, [r7, #7]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d007      	beq.n	80035b2 <f_open+0x1d2>
 80035a2:	7ebb      	ldrb	r3, [r7, #26]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <f_open+0x1d2>
						res = FR_DENIED;
 80035ac:	2307      	movs	r3, #7
 80035ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80035b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d128      	bne.n	800360c <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <f_open+0x1ec>
				mode |= FA_MODIFIED;
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035ca:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80035d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	f023 0301 	bic.w	r3, r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	bf14      	ite	ne
 80035e4:	2301      	movne	r3, #1
 80035e6:	2300      	moveq	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	461a      	mov	r2, r3
 80035ec:	f107 0314 	add.w	r3, r7, #20
 80035f0:	4611      	mov	r1, r2
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fe fad0 	bl	8001b98 <inc_lock>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d102      	bne.n	800360c <f_open+0x22c>
 8003606:	2302      	movs	r3, #2
 8003608:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800360c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003610:	2b00      	cmp	r3, #0
 8003612:	f040 8095 	bne.w	8003740 <f_open+0x360>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff f8f4 	bl	800280a <ld_clust>
 8003622:	4602      	mov	r2, r0
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8003628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800362a:	331c      	adds	r3, #28
 800362c:	4618      	mov	r0, r3
 800362e:	f7fe f94d 	bl	80018cc <ld_dword>
 8003632:	4602      	mov	r2, r0
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	88da      	ldrh	r2, [r3, #6]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	79fa      	ldrb	r2, [r7, #7]
 8003650:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	3330      	adds	r3, #48	; 0x30
 8003668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800366c:	2100      	movs	r1, #0
 800366e:	4618      	mov	r0, r3
 8003670:	f7fe f9b7 	bl	80019e2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8003674:	79fb      	ldrb	r3, [r7, #7]
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b00      	cmp	r3, #0
 800367c:	d060      	beq.n	8003740 <f_open+0x360>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d05c      	beq.n	8003740 <f_open+0x360>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	895b      	ldrh	r3, [r3, #10]
 8003692:	025b      	lsls	r3, r3, #9
 8003694:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	657b      	str	r3, [r7, #84]	; 0x54
 80036a2:	e016      	b.n	80036d2 <f_open+0x2f2>
					clst = get_fat(&fp->obj, clst);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fe fc62 	bl	8001f72 <get_fat>
 80036ae:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80036b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d802      	bhi.n	80036bc <f_open+0x2dc>
 80036b6:	2302      	movs	r3, #2
 80036b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80036bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036c2:	d102      	bne.n	80036ca <f_open+0x2ea>
 80036c4:	2301      	movs	r3, #1
 80036c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80036ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	657b      	str	r3, [r7, #84]	; 0x54
 80036d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d103      	bne.n	80036e2 <f_open+0x302>
 80036da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036de:	429a      	cmp	r2, r3
 80036e0:	d8e0      	bhi.n	80036a4 <f_open+0x2c4>
				}
				fp->clust = clst;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036e6:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80036e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d127      	bne.n	8003740 <f_open+0x360>
 80036f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d022      	beq.n	8003740 <f_open+0x360>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fe fc18 	bl	8001f34 <clust2sect>
 8003704:	6478      	str	r0, [r7, #68]	; 0x44
 8003706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003708:	2b00      	cmp	r3, #0
 800370a:	d103      	bne.n	8003714 <f_open+0x334>
						res = FR_INT_ERR;
 800370c:	2302      	movs	r3, #2
 800370e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003712:	e015      	b.n	8003740 <f_open+0x360>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8003714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003716:	0a5a      	lsrs	r2, r3, #9
 8003718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800371a:	441a      	add	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	7858      	ldrb	r0, [r3, #1]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a1a      	ldr	r2, [r3, #32]
 800372e:	2301      	movs	r3, #1
 8003730:	f7fe f820 	bl	8001774 <disk_read>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <f_open+0x360>
 800373a:	2301      	movs	r3, #1
 800373c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8003740:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <f_open+0x36e>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800374e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8003752:	4618      	mov	r0, r3
 8003754:	3760      	adds	r7, #96	; 0x60
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	50640000 	.word	0x50640000

08003760 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08e      	sub	sp, #56	; 0x38
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f107 0214 	add.w	r2, r7, #20
 800377e:	4611      	mov	r1, r2
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff fdb1 	bl	80032e8 <validate>
 8003786:	4603      	mov	r3, r0
 8003788:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800378c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003790:	2b00      	cmp	r3, #0
 8003792:	d107      	bne.n	80037a4 <f_read+0x44>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	7d5b      	ldrb	r3, [r3, #21]
 8003798:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800379c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d002      	beq.n	80037aa <f_read+0x4a>
 80037a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80037a8:	e115      	b.n	80039d6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	7d1b      	ldrb	r3, [r3, #20]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <f_read+0x5a>
 80037b6:	2307      	movs	r3, #7
 80037b8:	e10d      	b.n	80039d6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	f240 80fe 	bls.w	80039cc <f_read+0x26c>
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80037d4:	e0fa      	b.n	80039cc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f040 80c6 	bne.w	8003970 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	0a5b      	lsrs	r3, r3, #9
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	8952      	ldrh	r2, [r2, #10]
 80037ee:	3a01      	subs	r2, #1
 80037f0:	4013      	ands	r3, r2
 80037f2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d12f      	bne.n	800385a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d103      	bne.n	800380a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	633b      	str	r3, [r7, #48]	; 0x30
 8003808:	e013      	b.n	8003832 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380e:	2b00      	cmp	r3, #0
 8003810:	d007      	beq.n	8003822 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	4619      	mov	r1, r3
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f7fe fe3b 	bl	8002494 <clmt_clust>
 800381e:	6338      	str	r0, [r7, #48]	; 0x30
 8003820:	e007      	b.n	8003832 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	4619      	mov	r1, r3
 800382a:	4610      	mov	r0, r2
 800382c:	f7fe fba1 	bl	8001f72 <get_fat>
 8003830:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8003832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003834:	2b01      	cmp	r3, #1
 8003836:	d804      	bhi.n	8003842 <f_read+0xe2>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2202      	movs	r2, #2
 800383c:	755a      	strb	r2, [r3, #21]
 800383e:	2302      	movs	r3, #2
 8003840:	e0c9      	b.n	80039d6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003848:	d104      	bne.n	8003854 <f_read+0xf4>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2201      	movs	r2, #1
 800384e:	755a      	strb	r2, [r3, #21]
 8003850:	2301      	movs	r3, #1
 8003852:	e0c0      	b.n	80039d6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003858:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	4619      	mov	r1, r3
 8003862:	4610      	mov	r0, r2
 8003864:	f7fe fb66 	bl	8001f34 <clust2sect>
 8003868:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d104      	bne.n	800387a <f_read+0x11a>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2202      	movs	r2, #2
 8003874:	755a      	strb	r2, [r3, #21]
 8003876:	2302      	movs	r3, #2
 8003878:	e0ad      	b.n	80039d6 <f_read+0x276>
			sect += csect;
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	4413      	add	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	0a5b      	lsrs	r3, r3, #9
 8003886:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8003888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388a:	2b00      	cmp	r3, #0
 800388c:	d039      	beq.n	8003902 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800388e:	69fa      	ldr	r2, [r7, #28]
 8003890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003892:	4413      	add	r3, r2
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	8952      	ldrh	r2, [r2, #10]
 8003898:	4293      	cmp	r3, r2
 800389a:	d905      	bls.n	80038a8 <f_read+0x148>
					cc = fs->csize - csect;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	895b      	ldrh	r3, [r3, #10]
 80038a0:	461a      	mov	r2, r3
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	7858      	ldrb	r0, [r3, #1]
 80038ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038b2:	f7fd ff5f 	bl	8001774 <disk_read>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d004      	beq.n	80038c6 <f_read+0x166>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2201      	movs	r2, #1
 80038c0:	755a      	strb	r2, [r3, #21]
 80038c2:	2301      	movs	r3, #1
 80038c4:	e087      	b.n	80039d6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	7d1b      	ldrb	r3, [r3, #20]
 80038ca:	b25b      	sxtb	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	da14      	bge.n	80038fa <f_read+0x19a>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a1a      	ldr	r2, [r3, #32]
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038da:	429a      	cmp	r2, r3
 80038dc:	d90d      	bls.n	80038fa <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a1a      	ldr	r2, [r3, #32]
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	025b      	lsls	r3, r3, #9
 80038e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ea:	18d0      	adds	r0, r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	3330      	adds	r3, #48	; 0x30
 80038f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038f4:	4619      	mov	r1, r3
 80038f6:	f7fe f853 	bl	80019a0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80038fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fc:	025b      	lsls	r3, r3, #9
 80038fe:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8003900:	e050      	b.n	80039a4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	429a      	cmp	r2, r3
 800390a:	d02e      	beq.n	800396a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	7d1b      	ldrb	r3, [r3, #20]
 8003910:	b25b      	sxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	da18      	bge.n	8003948 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	7858      	ldrb	r0, [r3, #1]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a1a      	ldr	r2, [r3, #32]
 8003924:	2301      	movs	r3, #1
 8003926:	f7fd ff45 	bl	80017b4 <disk_write>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d004      	beq.n	800393a <f_read+0x1da>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2201      	movs	r2, #1
 8003934:	755a      	strb	r2, [r3, #21]
 8003936:	2301      	movs	r3, #1
 8003938:	e04d      	b.n	80039d6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	7d1b      	ldrb	r3, [r3, #20]
 800393e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003942:	b2da      	uxtb	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	7858      	ldrb	r0, [r3, #1]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003952:	2301      	movs	r3, #1
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	f7fd ff0d 	bl	8001774 <disk_read>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d004      	beq.n	800396a <f_read+0x20a>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2201      	movs	r2, #1
 8003964:	755a      	strb	r2, [r3, #21]
 8003966:	2301      	movs	r3, #1
 8003968:	e035      	b.n	80039d6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003978:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800397c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800397e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	429a      	cmp	r2, r3
 8003984:	d901      	bls.n	800398a <f_read+0x22a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003998:	4413      	add	r3, r2
 800399a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800399c:	4619      	mov	r1, r3
 800399e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039a0:	f7fd fffe 	bl	80019a0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80039a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a8:	4413      	add	r3, r2
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	699a      	ldr	r2, [r3, #24]
 80039b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b2:	441a      	add	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	619a      	str	r2, [r3, #24]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039be:	441a      	add	r2, r3
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f47f af01 	bne.w	80037d6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3738      	adds	r7, #56	; 0x38
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f107 0208 	add.w	r2, r7, #8
 80039ee:	4611      	mov	r1, r2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff fc79 	bl	80032e8 <validate>
 80039f6:	4603      	mov	r3, r0
 80039f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80039fa:	7dfb      	ldrb	r3, [r7, #23]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d167      	bne.n	8003ad0 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	7d1b      	ldrb	r3, [r3, #20]
 8003a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d061      	beq.n	8003ad0 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	7d1b      	ldrb	r3, [r3, #20]
 8003a10:	b25b      	sxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	da15      	bge.n	8003a42 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	7858      	ldrb	r0, [r3, #1]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a1a      	ldr	r2, [r3, #32]
 8003a24:	2301      	movs	r3, #1
 8003a26:	f7fd fec5 	bl	80017b4 <disk_write>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <f_sync+0x54>
 8003a30:	2301      	movs	r3, #1
 8003a32:	e04e      	b.n	8003ad2 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	7d1b      	ldrb	r3, [r3, #20]
 8003a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8003a42:	4b26      	ldr	r3, [pc, #152]	; (8003adc <f_sync+0xfc>)
 8003a44:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4610      	mov	r0, r2
 8003a50:	f7fe f9d4 	bl	8001dfc <move_window>
 8003a54:	4603      	mov	r3, r0
 8003a56:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8003a58:	7dfb      	ldrb	r3, [r7, #23]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d138      	bne.n	8003ad0 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	330b      	adds	r3, #11
 8003a68:	781a      	ldrb	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	330b      	adds	r3, #11
 8003a6e:	f042 0220 	orr.w	r2, r2, #32
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6818      	ldr	r0, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	68f9      	ldr	r1, [r7, #12]
 8003a82:	f7fe fee1 	bl	8002848 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f103 021c 	add.w	r2, r3, #28
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	4619      	mov	r1, r3
 8003a92:	4610      	mov	r0, r2
 8003a94:	f7fd ff58 	bl	8001948 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	3316      	adds	r3, #22
 8003a9c:	6939      	ldr	r1, [r7, #16]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fd ff52 	bl	8001948 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3312      	adds	r3, #18
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fd ff31 	bl	8001912 <st_word>
					fs->wflag = 1;
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fe f9cd 	bl	8001e58 <sync_fs>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	7d1b      	ldrb	r3, [r3, #20]
 8003ac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8003ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3718      	adds	r7, #24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	50640000 	.word	0x50640000

08003ae0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7ff ff79 	bl	80039e0 <f_sync>
 8003aee:	4603      	mov	r3, r0
 8003af0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d118      	bne.n	8003b2a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f107 0208 	add.w	r2, r7, #8
 8003afe:	4611      	mov	r1, r2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff fbf1 	bl	80032e8 <validate>
 8003b06:	4603      	mov	r3, r0
 8003b08:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10c      	bne.n	8003b2a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fe f8cd 	bl	8001cb4 <dec_lock>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d102      	bne.n	8003b2a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8003b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b090      	sub	sp, #64	; 0x40
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f107 0208 	add.w	r2, r7, #8
 8003b44:	4611      	mov	r1, r2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff fbce 	bl	80032e8 <validate>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8003b52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d103      	bne.n	8003b62 <f_lseek+0x2e>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	7d5b      	ldrb	r3, [r3, #21]
 8003b5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8003b62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <f_lseek+0x3c>
 8003b6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b6e:	e1e6      	b.n	8003f3e <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 80d1 	beq.w	8003d1c <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b80:	d15a      	bne.n	8003c38 <f_lseek+0x104>
			tbl = fp->cltbl;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	1d1a      	adds	r2, r3, #4
 8003b8c:	627a      	str	r2, [r7, #36]	; 0x24
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	2302      	movs	r3, #2
 8003b94:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d03a      	beq.n	8003c18 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bac:	3302      	adds	r3, #2
 8003bae:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fe f9d7 	bl	8001f72 <get_fat>
 8003bc4:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d804      	bhi.n	8003bd6 <f_lseek+0xa2>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	755a      	strb	r2, [r3, #21]
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	e1b3      	b.n	8003f3e <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bdc:	d104      	bne.n	8003be8 <f_lseek+0xb4>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	755a      	strb	r2, [r3, #21]
 8003be4:	2301      	movs	r3, #1
 8003be6:	e1aa      	b.n	8003f3e <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	3301      	adds	r3, #1
 8003bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d0de      	beq.n	8003bb0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8003bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d809      	bhi.n	8003c0e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	1d1a      	adds	r2, r3, #4
 8003bfe:	627a      	str	r2, [r7, #36]	; 0x24
 8003c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	1d1a      	adds	r2, r3, #4
 8003c08:	627a      	str	r2, [r7, #36]	; 0x24
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d3c4      	bcc.n	8003ba2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c1e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8003c20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d803      	bhi.n	8003c30 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	e184      	b.n	8003f3a <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8003c30:	2311      	movs	r3, #17
 8003c32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003c36:	e180      	b.n	8003f3a <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d902      	bls.n	8003c48 <f_lseek+0x114>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 8172 	beq.w	8003f3a <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7fe fc19 	bl	8002494 <clmt_clust>
 8003c62:	4602      	mov	r2, r0
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4610      	mov	r0, r2
 8003c72:	f7fe f95f 	bl	8001f34 <clust2sect>
 8003c76:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d104      	bne.n	8003c88 <f_lseek+0x154>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2202      	movs	r2, #2
 8003c82:	755a      	strb	r2, [r3, #21]
 8003c84:	2302      	movs	r3, #2
 8003c86:	e15a      	b.n	8003f3e <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	0a5b      	lsrs	r3, r3, #9
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	8952      	ldrh	r2, [r2, #10]
 8003c92:	3a01      	subs	r2, #1
 8003c94:	4013      	ands	r3, r2
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4413      	add	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 8148 	beq.w	8003f3a <f_lseek+0x406>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	f000 8142 	beq.w	8003f3a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	7d1b      	ldrb	r3, [r3, #20]
 8003cba:	b25b      	sxtb	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	da18      	bge.n	8003cf2 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	7858      	ldrb	r0, [r3, #1]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1a      	ldr	r2, [r3, #32]
 8003cce:	2301      	movs	r3, #1
 8003cd0:	f7fd fd70 	bl	80017b4 <disk_write>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d004      	beq.n	8003ce4 <f_lseek+0x1b0>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	755a      	strb	r2, [r3, #21]
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e12c      	b.n	8003f3e <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	7d1b      	ldrb	r3, [r3, #20]
 8003ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	7858      	ldrb	r0, [r3, #1]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	f7fd fd38 	bl	8001774 <disk_read>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d004      	beq.n	8003d14 <f_lseek+0x1e0>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	755a      	strb	r2, [r3, #21]
 8003d10:	2301      	movs	r3, #1
 8003d12:	e114      	b.n	8003f3e <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	621a      	str	r2, [r3, #32]
 8003d1a:	e10e      	b.n	8003f3a <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d908      	bls.n	8003d38 <f_lseek+0x204>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	7d1b      	ldrb	r3, [r3, #20]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d102      	bne.n	8003d38 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	637b      	str	r3, [r7, #52]	; 0x34
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d46:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 80a7 	beq.w	8003e9e <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	895b      	ldrh	r3, [r3, #10]
 8003d54:	025b      	lsls	r3, r3, #9
 8003d56:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d01b      	beq.n	8003d96 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	1e5a      	subs	r2, r3, #1
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	1e59      	subs	r1, r3, #1
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d30f      	bcc.n	8003d96 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	1e5a      	subs	r2, r3, #1
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	425b      	negs	r3, r3
 8003d7e:	401a      	ands	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d94:	e022      	b.n	8003ddc <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8003d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d119      	bne.n	8003dd6 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2100      	movs	r1, #0
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fe fadc 	bl	8002364 <create_chain>
 8003dac:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8003dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d104      	bne.n	8003dbe <f_lseek+0x28a>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	755a      	strb	r2, [r3, #21]
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e0bf      	b.n	8003f3e <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dc4:	d104      	bne.n	8003dd0 <f_lseek+0x29c>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	755a      	strb	r2, [r3, #21]
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0b6      	b.n	8003f3e <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dd4:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dda:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8003ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d05d      	beq.n	8003e9e <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8003de2:	e03a      	b.n	8003e5a <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	603b      	str	r3, [r7, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699a      	ldr	r2, [r3, #24]
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	441a      	add	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	7d1b      	ldrb	r3, [r3, #20]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00b      	beq.n	8003e1c <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fe faab 	bl	8002364 <create_chain>
 8003e0e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8003e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d108      	bne.n	8003e28 <f_lseek+0x2f4>
							ofs = 0; break;
 8003e16:	2300      	movs	r3, #0
 8003e18:	603b      	str	r3, [r7, #0]
 8003e1a:	e022      	b.n	8003e62 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7fe f8a6 	bl	8001f72 <get_fat>
 8003e26:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e2e:	d104      	bne.n	8003e3a <f_lseek+0x306>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	755a      	strb	r2, [r3, #21]
 8003e36:	2301      	movs	r3, #1
 8003e38:	e081      	b.n	8003f3e <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8003e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d904      	bls.n	8003e4a <f_lseek+0x316>
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d304      	bcc.n	8003e54 <f_lseek+0x320>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	755a      	strb	r2, [r3, #21]
 8003e50:	2302      	movs	r3, #2
 8003e52:	e074      	b.n	8003f3e <f_lseek+0x40a>
					fp->clust = clst;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e58:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d8c0      	bhi.n	8003de4 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699a      	ldr	r2, [r3, #24]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	441a      	add	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d012      	beq.n	8003e9e <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fe f859 	bl	8001f34 <clust2sect>
 8003e82:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8003e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d104      	bne.n	8003e94 <f_lseek+0x360>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	755a      	strb	r2, [r3, #21]
 8003e90:	2302      	movs	r3, #2
 8003e92:	e054      	b.n	8003f3e <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	0a5b      	lsrs	r3, r3, #9
 8003e98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e9a:	4413      	add	r3, r2
 8003e9c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d90a      	bls.n	8003ec0 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699a      	ldr	r2, [r3, #24]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	7d1b      	ldrb	r3, [r3, #20]
 8003eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d036      	beq.n	8003f3a <f_lseek+0x406>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d031      	beq.n	8003f3a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	7d1b      	ldrb	r3, [r3, #20]
 8003eda:	b25b      	sxtb	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	da18      	bge.n	8003f12 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	7858      	ldrb	r0, [r3, #1]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1a      	ldr	r2, [r3, #32]
 8003eee:	2301      	movs	r3, #1
 8003ef0:	f7fd fc60 	bl	80017b4 <disk_write>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d004      	beq.n	8003f04 <f_lseek+0x3d0>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	755a      	strb	r2, [r3, #21]
 8003f00:	2301      	movs	r3, #1
 8003f02:	e01c      	b.n	8003f3e <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	7d1b      	ldrb	r3, [r3, #20]
 8003f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	7858      	ldrb	r0, [r3, #1]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f20:	f7fd fc28 	bl	8001774 <disk_read>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d004      	beq.n	8003f34 <f_lseek+0x400>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	755a      	strb	r2, [r3, #21]
 8003f30:	2301      	movs	r3, #1
 8003f32:	e004      	b.n	8003f3e <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f38:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8003f3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3740      	adds	r7, #64	; 0x40
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b086      	sub	sp, #24
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <f_opendir+0x14>
 8003f56:	2309      	movs	r3, #9
 8003f58:	e064      	b.n	8004024 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8003f5e:	f107 010c 	add.w	r1, r7, #12
 8003f62:	463b      	mov	r3, r7
 8003f64:	2200      	movs	r2, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fe ff72 	bl	8002e50 <find_volume>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003f70:	7dfb      	ldrb	r3, [r7, #23]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d14f      	bne.n	8004016 <f_opendir+0xd0>
		obj->fs = fs;
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7fe fe59 	bl	8002c38 <follow_path>
 8003f86:	4603      	mov	r3, r0
 8003f88:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8003f8a:	7dfb      	ldrb	r3, [r7, #23]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d13d      	bne.n	800400c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003f96:	b25b      	sxtb	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	db12      	blt.n	8003fc2 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	799b      	ldrb	r3, [r3, #6]
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	f7fe fc2a 	bl	800280a <ld_clust>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	609a      	str	r2, [r3, #8]
 8003fbc:	e001      	b.n	8003fc2 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8003fbe:	2305      	movs	r3, #5
 8003fc0:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8003fc2:	7dfb      	ldrb	r3, [r7, #23]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d121      	bne.n	800400c <f_opendir+0xc6>
				obj->id = fs->id;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	88da      	ldrh	r2, [r3, #6]
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fe fa92 	bl	80024fc <dir_sdi>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8003fdc:	7dfb      	ldrb	r3, [r7, #23]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d114      	bne.n	800400c <f_opendir+0xc6>
					if (obj->sclust) {
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00d      	beq.n	8004006 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8003fea:	2100      	movs	r1, #0
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7fd fdd3 	bl	8001b98 <inc_lock>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d105      	bne.n	800400c <f_opendir+0xc6>
 8004000:	2312      	movs	r3, #18
 8004002:	75fb      	strb	r3, [r7, #23]
 8004004:	e002      	b.n	800400c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	2200      	movs	r2, #0
 800400a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800400c:	7dfb      	ldrb	r3, [r7, #23]
 800400e:	2b04      	cmp	r3, #4
 8004010:	d101      	bne.n	8004016 <f_opendir+0xd0>
 8004012:	2305      	movs	r3, #5
 8004014:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8004016:	7dfb      	ldrb	r3, [r7, #23]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <f_opendir+0xdc>
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8004022:	7dfb      	ldrb	r3, [r7, #23]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3718      	adds	r7, #24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f107 0208 	add.w	r2, r7, #8
 800403a:	4611      	mov	r1, r2
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff f953 	bl	80032e8 <validate>
 8004042:	4603      	mov	r3, r0
 8004044:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004046:	7bfb      	ldrb	r3, [r7, #15]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d110      	bne.n	800406e <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d006      	beq.n	8004062 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	4618      	mov	r0, r3
 800405a:	f7fd fe2b 	bl	8001cb4 <dec_lock>
 800405e:	4603      	mov	r3, r0
 8004060:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8004062:	7bfb      	ldrb	r3, [r7, #15]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d102      	bne.n	800406e <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800406e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f107 0208 	add.w	r2, r7, #8
 8004088:	4611      	mov	r1, r2
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff f92c 	bl	80032e8 <validate>
 8004090:	4603      	mov	r3, r0
 8004092:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d126      	bne.n	80040e8 <f_readdir+0x70>
		if (!fno) {
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d106      	bne.n	80040ae <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80040a0:	2100      	movs	r1, #0
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fe fa2a 	bl	80024fc <dir_sdi>
 80040a8:	4603      	mov	r3, r0
 80040aa:	73fb      	strb	r3, [r7, #15]
 80040ac:	e01c      	b.n	80040e8 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80040ae:	2100      	movs	r1, #0
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7fe fbe9 	bl	8002888 <dir_read>
 80040b6:	4603      	mov	r3, r0
 80040b8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d101      	bne.n	80040c4 <f_readdir+0x4c>
 80040c0:	2300      	movs	r3, #0
 80040c2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10e      	bne.n	80040e8 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80040ca:	6839      	ldr	r1, [r7, #0]
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7fe fcbf 	bl	8002a50 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80040d2:	2100      	movs	r1, #0
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7fe fa8c 	bl	80025f2 <dir_next>
 80040da:	4603      	mov	r3, r0
 80040dc:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80040de:	7bfb      	ldrb	r3, [r7, #15]
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d101      	bne.n	80040e8 <f_readdir+0x70>
 80040e4:	2300      	movs	r3, #0
 80040e6:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b092      	sub	sp, #72	; 0x48
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80040fe:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004102:	f107 030c 	add.w	r3, r7, #12
 8004106:	2200      	movs	r2, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f7fe fea1 	bl	8002e50 <find_volume>
 800410e:	4603      	mov	r3, r0
 8004110:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8004114:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004118:	2b00      	cmp	r3, #0
 800411a:	f040 8099 	bne.w	8004250 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800411e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8004124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004126:	691a      	ldr	r2, [r3, #16]
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	3b02      	subs	r3, #2
 800412e:	429a      	cmp	r2, r3
 8004130:	d804      	bhi.n	800413c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8004132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004134:	691a      	ldr	r2, [r3, #16]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	e089      	b.n	8004250 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800413c:	2300      	movs	r3, #0
 800413e:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8004140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d128      	bne.n	800419a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8004148:	2302      	movs	r3, #2
 800414a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800414c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8004150:	f107 0314 	add.w	r3, r7, #20
 8004154:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004156:	4618      	mov	r0, r3
 8004158:	f7fd ff0b 	bl	8001f72 <get_fat>
 800415c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800415e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004164:	d103      	bne.n	800416e <f_getfree+0x7c>
 8004166:	2301      	movs	r3, #1
 8004168:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800416c:	e063      	b.n	8004236 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800416e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004170:	2b01      	cmp	r3, #1
 8004172:	d103      	bne.n	800417c <f_getfree+0x8a>
 8004174:	2302      	movs	r3, #2
 8004176:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800417a:	e05c      	b.n	8004236 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800417c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417e:	2b00      	cmp	r3, #0
 8004180:	d102      	bne.n	8004188 <f_getfree+0x96>
 8004182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004184:	3301      	adds	r3, #1
 8004186:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8004188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800418a:	3301      	adds	r3, #1
 800418c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800418e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004194:	429a      	cmp	r2, r3
 8004196:	d3db      	bcc.n	8004150 <f_getfree+0x5e>
 8004198:	e04d      	b.n	8004236 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800419a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80041a6:	2300      	movs	r3, #0
 80041a8:	637b      	str	r3, [r7, #52]	; 0x34
 80041aa:	2300      	movs	r3, #0
 80041ac:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80041ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d113      	bne.n	80041dc <f_getfree+0xea>
							res = move_window(fs, sect++);
 80041b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	63ba      	str	r2, [r7, #56]	; 0x38
 80041bc:	4619      	mov	r1, r3
 80041be:	f7fd fe1d 	bl	8001dfc <move_window>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80041c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d131      	bne.n	8004234 <f_getfree+0x142>
							p = fs->win;
 80041d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d2:	3330      	adds	r3, #48	; 0x30
 80041d4:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80041d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041da:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80041dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d10f      	bne.n	8004204 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80041e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041e6:	f7fd fb59 	bl	800189c <ld_word>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d102      	bne.n	80041f6 <f_getfree+0x104>
 80041f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041f2:	3301      	adds	r3, #1
 80041f4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	3302      	adds	r3, #2
 80041fa:	633b      	str	r3, [r7, #48]	; 0x30
 80041fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041fe:	3b02      	subs	r3, #2
 8004200:	637b      	str	r3, [r7, #52]	; 0x34
 8004202:	e010      	b.n	8004226 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8004204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004206:	f7fd fb61 	bl	80018cc <ld_dword>
 800420a:	4603      	mov	r3, r0
 800420c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d102      	bne.n	800421a <f_getfree+0x128>
 8004214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004216:	3301      	adds	r3, #1
 8004218:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800421a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421c:	3304      	adds	r3, #4
 800421e:	633b      	str	r3, [r7, #48]	; 0x30
 8004220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004222:	3b04      	subs	r3, #4
 8004224:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8004226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004228:	3b01      	subs	r3, #1
 800422a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800422c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1bd      	bne.n	80041ae <f_getfree+0xbc>
 8004232:	e000      	b.n	8004236 <f_getfree+0x144>
							if (res != FR_OK) break;
 8004234:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800423a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800423c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004240:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8004242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004244:	791a      	ldrb	r2, [r3, #4]
 8004246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004248:	f042 0201 	orr.w	r2, r2, #1
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8004250:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004254:	4618      	mov	r0, r3
 8004256:	3748      	adds	r7, #72	; 0x48
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800425c:	b480      	push	{r7}
 800425e:	b087      	sub	sp, #28
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	4613      	mov	r3, r2
 8004268:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800426a:	2301      	movs	r3, #1
 800426c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800426e:	2300      	movs	r3, #0
 8004270:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8004272:	4b1f      	ldr	r3, [pc, #124]	; (80042f0 <FATFS_LinkDriverEx+0x94>)
 8004274:	7a5b      	ldrb	r3, [r3, #9]
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b01      	cmp	r3, #1
 800427a:	d831      	bhi.n	80042e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800427c:	4b1c      	ldr	r3, [pc, #112]	; (80042f0 <FATFS_LinkDriverEx+0x94>)
 800427e:	7a5b      	ldrb	r3, [r3, #9]
 8004280:	b2db      	uxtb	r3, r3
 8004282:	461a      	mov	r2, r3
 8004284:	4b1a      	ldr	r3, [pc, #104]	; (80042f0 <FATFS_LinkDriverEx+0x94>)
 8004286:	2100      	movs	r1, #0
 8004288:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800428a:	4b19      	ldr	r3, [pc, #100]	; (80042f0 <FATFS_LinkDriverEx+0x94>)
 800428c:	7a5b      	ldrb	r3, [r3, #9]
 800428e:	b2db      	uxtb	r3, r3
 8004290:	4a17      	ldr	r2, [pc, #92]	; (80042f0 <FATFS_LinkDriverEx+0x94>)
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800429a:	4b15      	ldr	r3, [pc, #84]	; (80042f0 <FATFS_LinkDriverEx+0x94>)
 800429c:	7a5b      	ldrb	r3, [r3, #9]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	461a      	mov	r2, r3
 80042a2:	4b13      	ldr	r3, [pc, #76]	; (80042f0 <FATFS_LinkDriverEx+0x94>)
 80042a4:	4413      	add	r3, r2
 80042a6:	79fa      	ldrb	r2, [r7, #7]
 80042a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80042aa:	4b11      	ldr	r3, [pc, #68]	; (80042f0 <FATFS_LinkDriverEx+0x94>)
 80042ac:	7a5b      	ldrb	r3, [r3, #9]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	b2d1      	uxtb	r1, r2
 80042b4:	4a0e      	ldr	r2, [pc, #56]	; (80042f0 <FATFS_LinkDriverEx+0x94>)
 80042b6:	7251      	strb	r1, [r2, #9]
 80042b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80042ba:	7dbb      	ldrb	r3, [r7, #22]
 80042bc:	3330      	adds	r3, #48	; 0x30
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	3301      	adds	r3, #1
 80042c8:	223a      	movs	r2, #58	; 0x3a
 80042ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	3302      	adds	r3, #2
 80042d0:	222f      	movs	r2, #47	; 0x2f
 80042d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	3303      	adds	r3, #3
 80042d8:	2200      	movs	r2, #0
 80042da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80042dc:	2300      	movs	r3, #0
 80042de:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80042e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	371c      	adds	r7, #28
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	20000658 	.word	0x20000658

080042f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80042fe:	2200      	movs	r2, #0
 8004300:	6839      	ldr	r1, [r7, #0]
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff ffaa 	bl	800425c <FATFS_LinkDriverEx>
 8004308:	4603      	mov	r3, r0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <exf_getfree>:

#include "fops.h"
#include "main.h"
#include "string.h"
uint32_t exf_getfree(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b0c4      	sub	sp, #272	; 0x110
 8004318:	af00      	add	r7, sp, #0
    FATFS *fs;
    DWORD fre_clust, fre_sect, tot_sect;

    if(f_getfree(USERPath, &fre_clust, &fs) == FR_OK)
 800431a:	f507 7282 	add.w	r2, r7, #260	; 0x104
 800431e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004322:	4619      	mov	r1, r3
 8004324:	4829      	ldr	r0, [pc, #164]	; (80043cc <exf_getfree+0xb8>)
 8004326:	f7ff fee4 	bl	80040f2 <f_getfree>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d147      	bne.n	80043c0 <exf_getfree+0xac>
    {
        tot_sect = (fs->n_fatent - 2) * fs->csize;		// �õ���������
 8004330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	3b02      	subs	r3, #2
 8004338:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800433c:	8952      	ldrh	r2, [r2, #10]
 800433e:	fb02 f303 	mul.w	r3, r2, r3
 8004342:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        fre_sect = fre_clust * fs->csize;				// �õ�����������
 8004346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800434a:	895b      	ldrh	r3, [r3, #10]
 800434c:	461a      	mov	r2, r3
 800434e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004352:	fb02 f303 	mul.w	r3, r2, r3
 8004356:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

        tot_sect >>= 11;		// תΪMB
 800435a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800435e:	0adb      	lsrs	r3, r3, #11
 8004360:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        fre_sect >>= 11;		// תΪMB
 8004364:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004368:	0adb      	lsrs	r3, r3, #11
 800436a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

        char buf[256];
        sprintf(buf, "# SD Card Total Size:%ldMB\r\n", tot_sect);
 800436e:	463b      	mov	r3, r7
 8004370:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004374:	4916      	ldr	r1, [pc, #88]	; (80043d0 <exf_getfree+0xbc>)
 8004376:	4618      	mov	r0, r3
 8004378:	f009 fbc8 	bl	800db0c <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 800437c:	463b      	mov	r3, r7
 800437e:	4618      	mov	r0, r3
 8004380:	f7fb ff26 	bl	80001d0 <strlen>
 8004384:	4603      	mov	r3, r0
 8004386:	b29a      	uxth	r2, r3
 8004388:	4639      	mov	r1, r7
 800438a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800438e:	4811      	ldr	r0, [pc, #68]	; (80043d4 <exf_getfree+0xc0>)
 8004390:	f006 fd1b 	bl	800adca <HAL_UART_Transmit>
        sprintf(buf, "# SD Card Free  Size:%ldMB\r\n", fre_sect);
 8004394:	463b      	mov	r3, r7
 8004396:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800439a:	490f      	ldr	r1, [pc, #60]	; (80043d8 <exf_getfree+0xc4>)
 800439c:	4618      	mov	r0, r3
 800439e:	f009 fbb5 	bl	800db0c <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 80043a2:	463b      	mov	r3, r7
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fb ff13 	bl	80001d0 <strlen>
 80043aa:	4603      	mov	r3, r0
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	4639      	mov	r1, r7
 80043b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043b4:	4807      	ldr	r0, [pc, #28]	; (80043d4 <exf_getfree+0xc0>)
 80043b6:	f006 fd08 	bl	800adca <HAL_UART_Transmit>

        return fre_sect;
 80043ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80043be:	e7ff      	b.n	80043c0 <exf_getfree+0xac>
    }
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	2000040c 	.word	0x2000040c
 80043d0:	0800e4ac 	.word	0x0800e4ac
 80043d4:	2000080c 	.word	0x2000080c
 80043d8:	0800e4cc 	.word	0x0800e4cc

080043dc <exf_mount>:

int exf_mount(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b0c2      	sub	sp, #264	; 0x108
 80043e0:	af00      	add	r7, sp, #0
	int status_code = f_mount(&USERFatFS, USERPath, 1);
 80043e2:	2201      	movs	r2, #1
 80043e4:	4912      	ldr	r1, [pc, #72]	; (8004430 <exf_mount+0x54>)
 80043e6:	4813      	ldr	r0, [pc, #76]	; (8004434 <exf_mount+0x58>)
 80043e8:	f7fe ffb4 	bl	8003354 <f_mount>
 80043ec:	4603      	mov	r3, r0
 80043ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	char buf[256];
    sprintf(buf, "# SD Card Mount %s!\r\n",  status_code == FR_OK ? "Successfullly" : "Failed");
 80043f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <exf_mount+0x22>
 80043fa:	4a0f      	ldr	r2, [pc, #60]	; (8004438 <exf_mount+0x5c>)
 80043fc:	e000      	b.n	8004400 <exf_mount+0x24>
 80043fe:	4a0f      	ldr	r2, [pc, #60]	; (800443c <exf_mount+0x60>)
 8004400:	1d3b      	adds	r3, r7, #4
 8004402:	490f      	ldr	r1, [pc, #60]	; (8004440 <exf_mount+0x64>)
 8004404:	4618      	mov	r0, r3
 8004406:	f009 fb81 	bl	800db0c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 800440a:	1d3b      	adds	r3, r7, #4
 800440c:	4618      	mov	r0, r3
 800440e:	f7fb fedf 	bl	80001d0 <strlen>
 8004412:	4603      	mov	r3, r0
 8004414:	b29a      	uxth	r2, r3
 8004416:	1d39      	adds	r1, r7, #4
 8004418:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800441c:	4809      	ldr	r0, [pc, #36]	; (8004444 <exf_mount+0x68>)
 800441e:	f006 fcd4 	bl	800adca <HAL_UART_Transmit>
    return status_code;
 8004422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
}
 8004426:	4618      	mov	r0, r3
 8004428:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	2000040c 	.word	0x2000040c
 8004434:	20000410 	.word	0x20000410
 8004438:	0800e4ec 	.word	0x0800e4ec
 800443c:	0800e4fc 	.word	0x0800e4fc
 8004440:	0800e504 	.word	0x0800e504
 8004444:	2000080c 	.word	0x2000080c

08004448 <SD_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SD_init() {
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af00      	add	r7, sp, #0
	// One line of LCD contains 21 character
	char buf[22];
	sprintf(buf, "Loading SD card...");
 800444e:	463b      	mov	r3, r7
 8004450:	4954      	ldr	r1, [pc, #336]	; (80045a4 <SD_init+0x15c>)
 8004452:	4618      	mov	r0, r3
 8004454:	f009 fb5a 	bl	800db0c <siprintf>
	LCD_FStr(buf, 0, 0);
 8004458:	463b      	mov	r3, r7
 800445a:	2200      	movs	r2, #0
 800445c:	2100      	movs	r1, #0
 800445e:	4618      	mov	r0, r3
 8004460:	f7fc fddc 	bl	800101c <LCD_FStr>
	LCD_Update();
 8004464:	f7fc fd3e 	bl	8000ee4 <LCD_Update>

	// Wait 1 second before loading SD card
	HAL_Delay(1000);
 8004468:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800446c:	f001 fe32 	bl	80060d4 <HAL_Delay>

	// Clear LCD before showing anything
	LCD_Clear();
 8004470:	f7fc fd14 	bl	8000e9c <LCD_Clear>

	sprintf(buf, "SD sectorcount\n\r");
 8004474:	463b      	mov	r3, r7
 8004476:	494c      	ldr	r1, [pc, #304]	; (80045a8 <SD_init+0x160>)
 8004478:	4618      	mov	r0, r3
 800447a:	f009 fb47 	bl	800db0c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 800447e:	463b      	mov	r3, r7
 8004480:	4618      	mov	r0, r3
 8004482:	f7fb fea5 	bl	80001d0 <strlen>
 8004486:	4603      	mov	r3, r0
 8004488:	b29a      	uxth	r2, r3
 800448a:	4639      	mov	r1, r7
 800448c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004490:	4846      	ldr	r0, [pc, #280]	; (80045ac <SD_init+0x164>)
 8004492:	f006 fc9a 	bl	800adca <HAL_UART_Transmit>
 	sprintf(buf, "%u\n\r", SD_GetSectorCount());
 8004496:	f000 fe26 	bl	80050e6 <SD_GetSectorCount>
 800449a:	4602      	mov	r2, r0
 800449c:	463b      	mov	r3, r7
 800449e:	4944      	ldr	r1, [pc, #272]	; (80045b0 <SD_init+0x168>)
 80044a0:	4618      	mov	r0, r3
 80044a2:	f009 fb33 	bl	800db0c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 80044a6:	463b      	mov	r3, r7
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7fb fe91 	bl	80001d0 <strlen>
 80044ae:	4603      	mov	r3, r0
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	4639      	mov	r1, r7
 80044b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044b8:	483c      	ldr	r0, [pc, #240]	; (80045ac <SD_init+0x164>)
 80044ba:	f006 fc86 	bl	800adca <HAL_UART_Transmit>

	MX_FATFS_Init();
 80044be:	f7fd f9b7 	bl	8001830 <MX_FATFS_Init>

	LCD_Clear();
 80044c2:	f7fc fceb 	bl	8000e9c <LCD_Clear>
	int mount = exf_mount();
 80044c6:	f7ff ff89 	bl	80043dc <exf_mount>
 80044ca:	61f8      	str	r0, [r7, #28]
	sprintf(buf, "Mount (%i)\n\r", mount);
 80044cc:	463b      	mov	r3, r7
 80044ce:	69fa      	ldr	r2, [r7, #28]
 80044d0:	4938      	ldr	r1, [pc, #224]	; (80045b4 <SD_init+0x16c>)
 80044d2:	4618      	mov	r0, r3
 80044d4:	f009 fb1a 	bl	800db0c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 80044d8:	463b      	mov	r3, r7
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fb fe78 	bl	80001d0 <strlen>
 80044e0:	4603      	mov	r3, r0
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	4639      	mov	r1, r7
 80044e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044ea:	4830      	ldr	r0, [pc, #192]	; (80045ac <SD_init+0x164>)
 80044ec:	f006 fc6d 	bl	800adca <HAL_UART_Transmit>
	sprintf(buf, "SD card mount");
 80044f0:	463b      	mov	r3, r7
 80044f2:	4931      	ldr	r1, [pc, #196]	; (80045b8 <SD_init+0x170>)
 80044f4:	4618      	mov	r0, r3
 80044f6:	f009 fb09 	bl	800db0c <siprintf>
	LCD_FStr(buf, 0, 0);
 80044fa:	463b      	mov	r3, r7
 80044fc:	2200      	movs	r2, #0
 80044fe:	2100      	movs	r1, #0
 8004500:	4618      	mov	r0, r3
 8004502:	f7fc fd8b 	bl	800101c <LCD_FStr>
	sprintf(buf, "%s", mount == FR_OK ? "Success" : "Fail");
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <SD_init+0xc8>
 800450c:	4a2b      	ldr	r2, [pc, #172]	; (80045bc <SD_init+0x174>)
 800450e:	e000      	b.n	8004512 <SD_init+0xca>
 8004510:	4a2b      	ldr	r2, [pc, #172]	; (80045c0 <SD_init+0x178>)
 8004512:	463b      	mov	r3, r7
 8004514:	492b      	ldr	r1, [pc, #172]	; (80045c4 <SD_init+0x17c>)
 8004516:	4618      	mov	r0, r3
 8004518:	f009 faf8 	bl	800db0c <siprintf>
	LCD_FStr(buf, 0, 1);
 800451c:	463b      	mov	r3, r7
 800451e:	2201      	movs	r2, #1
 8004520:	2100      	movs	r1, #0
 8004522:	4618      	mov	r0, r3
 8004524:	f7fc fd7a 	bl	800101c <LCD_FStr>
	LCD_Update();
 8004528:	f7fc fcdc 	bl	8000ee4 <LCD_Update>
	HAL_Delay(1000);
 800452c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004530:	f001 fdd0 	bl	80060d4 <HAL_Delay>

	LCD_Clear();
 8004534:	f7fc fcb2 	bl	8000e9c <LCD_Clear>
	unsigned free = exf_getfree();
 8004538:	f7ff feec 	bl	8004314 <exf_getfree>
 800453c:	61b8      	str	r0, [r7, #24]
	sprintf(buf, "Free (%i)\n\r", free);
 800453e:	463b      	mov	r3, r7
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	4921      	ldr	r1, [pc, #132]	; (80045c8 <SD_init+0x180>)
 8004544:	4618      	mov	r0, r3
 8004546:	f009 fae1 	bl	800db0c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 800454a:	463b      	mov	r3, r7
 800454c:	4618      	mov	r0, r3
 800454e:	f7fb fe3f 	bl	80001d0 <strlen>
 8004552:	4603      	mov	r3, r0
 8004554:	b29a      	uxth	r2, r3
 8004556:	4639      	mov	r1, r7
 8004558:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800455c:	4813      	ldr	r0, [pc, #76]	; (80045ac <SD_init+0x164>)
 800455e:	f006 fc34 	bl	800adca <HAL_UART_Transmit>
	sprintf(buf, "SD card free space");
 8004562:	463b      	mov	r3, r7
 8004564:	4919      	ldr	r1, [pc, #100]	; (80045cc <SD_init+0x184>)
 8004566:	4618      	mov	r0, r3
 8004568:	f009 fad0 	bl	800db0c <siprintf>
	LCD_FStr(buf, 0, 0);
 800456c:	463b      	mov	r3, r7
 800456e:	2200      	movs	r2, #0
 8004570:	2100      	movs	r1, #0
 8004572:	4618      	mov	r0, r3
 8004574:	f7fc fd52 	bl	800101c <LCD_FStr>
	sprintf(buf, "%u MB", free);
 8004578:	463b      	mov	r3, r7
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	4914      	ldr	r1, [pc, #80]	; (80045d0 <SD_init+0x188>)
 800457e:	4618      	mov	r0, r3
 8004580:	f009 fac4 	bl	800db0c <siprintf>
	LCD_FStr(buf, 0, 1);
 8004584:	463b      	mov	r3, r7
 8004586:	2201      	movs	r2, #1
 8004588:	2100      	movs	r1, #0
 800458a:	4618      	mov	r0, r3
 800458c:	f7fc fd46 	bl	800101c <LCD_FStr>
	LCD_Update();
 8004590:	f7fc fca8 	bl	8000ee4 <LCD_Update>
	HAL_Delay(1000);
 8004594:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004598:	f001 fd9c 	bl	80060d4 <HAL_Delay>
	return;
 800459c:	bf00      	nop
}
 800459e:	3720      	adds	r7, #32
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	0800e5c4 	.word	0x0800e5c4
 80045a8:	0800e5d8 	.word	0x0800e5d8
 80045ac:	2000080c 	.word	0x2000080c
 80045b0:	0800e5ec 	.word	0x0800e5ec
 80045b4:	0800e5f4 	.word	0x0800e5f4
 80045b8:	0800e604 	.word	0x0800e604
 80045bc:	0800e614 	.word	0x0800e614
 80045c0:	0800e61c 	.word	0x0800e61c
 80045c4:	0800e624 	.word	0x0800e624
 80045c8:	0800e628 	.word	0x0800e628
 80045cc:	0800e634 	.word	0x0800e634
 80045d0:	0800e648 	.word	0x0800e648

080045d4 <audio_task>:
		vTaskDelay(1000);
	}
	return;
}

void audio_task(void * pvParameters){
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
	for(;;){
		int isFinished = 0;
 80045dc:	2300      	movs	r3, #0
 80045de:	60fb      	str	r3, [r7, #12]
		AUDIO_PLAYER_Start(0);
 80045e0:	2000      	movs	r0, #0
 80045e2:	f001 fb69 	bl	8005cb8 <AUDIO_PLAYER_Start>

		while(!isFinished){
 80045e6:	e008      	b.n	80045fa <audio_task+0x26>
			AUDIO_PLAYER_Process(pdTRUE);
 80045e8:	2001      	movs	r0, #1
 80045ea:	f001 fbc5 	bl	8005d78 <AUDIO_PLAYER_Process>

			if(AudioState == AUDIO_STATE_STOP){
 80045ee:	4b05      	ldr	r3, [pc, #20]	; (8004604 <audio_task+0x30>)
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b09      	cmp	r3, #9
 80045f4:	d101      	bne.n	80045fa <audio_task+0x26>
				isFinished = 1;
 80045f6:	2301      	movs	r3, #1
 80045f8:	60fb      	str	r3, [r7, #12]
		while(!isFinished){
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0f3      	beq.n	80045e8 <audio_task+0x14>
	for(;;){
 8004600:	e7ec      	b.n	80045dc <audio_task+0x8>
 8004602:	bf00      	nop
 8004604:	200018b8 	.word	0x200018b8

08004608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800460e:	f001 fd1f 	bl	8006050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004612:	f000 f825 	bl	8004660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004616:	f000 f997 	bl	8004948 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800461a:	f000 f94b 	bl	80048b4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800461e:	f000 f913 	bl	8004848 <MX_SPI1_Init>
  MX_DMA_Init();
 8004622:	f000 f971 	bl	8004908 <MX_DMA_Init>
  MX_I2S3_Init();
 8004626:	f000 f8e1 	bl	80047ec <MX_I2S3_Init>
  MX_I2C1_Init();
 800462a:	f000 f883 	bl	8004734 <MX_I2C1_Init>
  MX_I2C2_Init();
 800462e:	f000 f8af 	bl	8004790 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

	LCD_Init();
 8004632:	f7fc fc07 	bl	8000e44 <LCD_Init>

	// Init SD card here
	SD_init();
 8004636:	f7ff ff07 	bl	8004448 <SD_init>
//
//	while (1);
//	// Start task here
//	xTaskCreate(OLED_task, "OLED_task", STACK_SIZE, (void*) NULL, 10, NULL);
//	xTaskCreate(timer_task, "timer_task", STACK_SIZE, (void*) NULL, 1, NULL);
	xTaskCreate(audio_task, "audio_task", STACK_SIZE, (void*) NULL, 15, NULL);
 800463a:	2300      	movs	r3, #0
 800463c:	9301      	str	r3, [sp, #4]
 800463e:	230f      	movs	r3, #15
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	2300      	movs	r3, #0
 8004644:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004648:	4903      	ldr	r1, [pc, #12]	; (8004658 <main+0x50>)
 800464a:	4804      	ldr	r0, [pc, #16]	; (800465c <main+0x54>)
 800464c:	f007 fc92 	bl	800bf74 <xTaskCreate>

	// Start scheduler here
	vTaskStartScheduler();
 8004650:	f007 fdce 	bl	800c1f0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8004654:	e7fe      	b.n	8004654 <main+0x4c>
 8004656:	bf00      	nop
 8004658:	0800e6d0 	.word	0x0800e6d0
 800465c:	080045d5 	.word	0x080045d5

08004660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b094      	sub	sp, #80	; 0x50
 8004664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004666:	f107 0320 	add.w	r3, r7, #32
 800466a:	2230      	movs	r2, #48	; 0x30
 800466c:	2100      	movs	r1, #0
 800466e:	4618      	mov	r0, r3
 8004670:	f009 fa44 	bl	800dafc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004674:	f107 030c 	add.w	r3, r7, #12
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	605a      	str	r2, [r3, #4]
 800467e:	609a      	str	r2, [r3, #8]
 8004680:	60da      	str	r2, [r3, #12]
 8004682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004684:	2300      	movs	r3, #0
 8004686:	60bb      	str	r3, [r7, #8]
 8004688:	4b28      	ldr	r3, [pc, #160]	; (800472c <SystemClock_Config+0xcc>)
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	4a27      	ldr	r2, [pc, #156]	; (800472c <SystemClock_Config+0xcc>)
 800468e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004692:	6413      	str	r3, [r2, #64]	; 0x40
 8004694:	4b25      	ldr	r3, [pc, #148]	; (800472c <SystemClock_Config+0xcc>)
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80046a0:	2300      	movs	r3, #0
 80046a2:	607b      	str	r3, [r7, #4]
 80046a4:	4b22      	ldr	r3, [pc, #136]	; (8004730 <SystemClock_Config+0xd0>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a21      	ldr	r2, [pc, #132]	; (8004730 <SystemClock_Config+0xd0>)
 80046aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	4b1f      	ldr	r3, [pc, #124]	; (8004730 <SystemClock_Config+0xd0>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b8:	607b      	str	r3, [r7, #4]
 80046ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80046bc:	2301      	movs	r3, #1
 80046be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80046c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80046c6:	2302      	movs	r3, #2
 80046c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80046ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80046ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80046d0:	2308      	movs	r3, #8
 80046d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80046d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80046d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80046da:	2302      	movs	r3, #2
 80046dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80046de:	2304      	movs	r3, #4
 80046e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80046e2:	f107 0320 	add.w	r3, r7, #32
 80046e6:	4618      	mov	r0, r3
 80046e8:	f004 ff20 	bl	800952c <HAL_RCC_OscConfig>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80046f2:	f000 fb5d 	bl	8004db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80046f6:	230f      	movs	r3, #15
 80046f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80046fa:	2302      	movs	r3, #2
 80046fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80046fe:	2300      	movs	r3, #0
 8004700:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004702:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004706:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8004708:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800470c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800470e:	f107 030c 	add.w	r3, r7, #12
 8004712:	2105      	movs	r1, #5
 8004714:	4618      	mov	r0, r3
 8004716:	f005 f981 	bl	8009a1c <HAL_RCC_ClockConfig>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004720:	f000 fb46 	bl	8004db0 <Error_Handler>
  }
}
 8004724:	bf00      	nop
 8004726:	3750      	adds	r7, #80	; 0x50
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40023800 	.word	0x40023800
 8004730:	40007000 	.word	0x40007000

08004734 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004738:	4b12      	ldr	r3, [pc, #72]	; (8004784 <MX_I2C1_Init+0x50>)
 800473a:	4a13      	ldr	r2, [pc, #76]	; (8004788 <MX_I2C1_Init+0x54>)
 800473c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800473e:	4b11      	ldr	r3, [pc, #68]	; (8004784 <MX_I2C1_Init+0x50>)
 8004740:	4a12      	ldr	r2, [pc, #72]	; (800478c <MX_I2C1_Init+0x58>)
 8004742:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004744:	4b0f      	ldr	r3, [pc, #60]	; (8004784 <MX_I2C1_Init+0x50>)
 8004746:	2200      	movs	r2, #0
 8004748:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800474a:	4b0e      	ldr	r3, [pc, #56]	; (8004784 <MX_I2C1_Init+0x50>)
 800474c:	2200      	movs	r2, #0
 800474e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004750:	4b0c      	ldr	r3, [pc, #48]	; (8004784 <MX_I2C1_Init+0x50>)
 8004752:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004756:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004758:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <MX_I2C1_Init+0x50>)
 800475a:	2200      	movs	r2, #0
 800475c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800475e:	4b09      	ldr	r3, [pc, #36]	; (8004784 <MX_I2C1_Init+0x50>)
 8004760:	2200      	movs	r2, #0
 8004762:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004764:	4b07      	ldr	r3, [pc, #28]	; (8004784 <MX_I2C1_Init+0x50>)
 8004766:	2200      	movs	r2, #0
 8004768:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800476a:	4b06      	ldr	r3, [pc, #24]	; (8004784 <MX_I2C1_Init+0x50>)
 800476c:	2200      	movs	r2, #0
 800476e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004770:	4804      	ldr	r0, [pc, #16]	; (8004784 <MX_I2C1_Init+0x50>)
 8004772:	f002 fcbd 	bl	80070f0 <HAL_I2C_Init>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800477c:	f000 fb18 	bl	8004db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004780:	bf00      	nop
 8004782:	bd80      	pop	{r7, pc}
 8004784:	20000664 	.word	0x20000664
 8004788:	40005400 	.word	0x40005400
 800478c:	000186a0 	.word	0x000186a0

08004790 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004794:	4b12      	ldr	r3, [pc, #72]	; (80047e0 <MX_I2C2_Init+0x50>)
 8004796:	4a13      	ldr	r2, [pc, #76]	; (80047e4 <MX_I2C2_Init+0x54>)
 8004798:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800479a:	4b11      	ldr	r3, [pc, #68]	; (80047e0 <MX_I2C2_Init+0x50>)
 800479c:	4a12      	ldr	r2, [pc, #72]	; (80047e8 <MX_I2C2_Init+0x58>)
 800479e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80047a0:	4b0f      	ldr	r3, [pc, #60]	; (80047e0 <MX_I2C2_Init+0x50>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80047a6:	4b0e      	ldr	r3, [pc, #56]	; (80047e0 <MX_I2C2_Init+0x50>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047ac:	4b0c      	ldr	r3, [pc, #48]	; (80047e0 <MX_I2C2_Init+0x50>)
 80047ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80047b2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80047b4:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <MX_I2C2_Init+0x50>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80047ba:	4b09      	ldr	r3, [pc, #36]	; (80047e0 <MX_I2C2_Init+0x50>)
 80047bc:	2200      	movs	r2, #0
 80047be:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80047c0:	4b07      	ldr	r3, [pc, #28]	; (80047e0 <MX_I2C2_Init+0x50>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80047c6:	4b06      	ldr	r3, [pc, #24]	; (80047e0 <MX_I2C2_Init+0x50>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80047cc:	4804      	ldr	r0, [pc, #16]	; (80047e0 <MX_I2C2_Init+0x50>)
 80047ce:	f002 fc8f 	bl	80070f0 <HAL_I2C_Init>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80047d8:	f000 faea 	bl	8004db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80047dc:	bf00      	nop
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	200006b8 	.word	0x200006b8
 80047e4:	40005800 	.word	0x40005800
 80047e8:	000186a0 	.word	0x000186a0

080047ec <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80047f0:	4b13      	ldr	r3, [pc, #76]	; (8004840 <MX_I2S3_Init+0x54>)
 80047f2:	4a14      	ldr	r2, [pc, #80]	; (8004844 <MX_I2S3_Init+0x58>)
 80047f4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80047f6:	4b12      	ldr	r3, [pc, #72]	; (8004840 <MX_I2S3_Init+0x54>)
 80047f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047fc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80047fe:	4b10      	ldr	r3, [pc, #64]	; (8004840 <MX_I2S3_Init+0x54>)
 8004800:	2200      	movs	r2, #0
 8004802:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8004804:	4b0e      	ldr	r3, [pc, #56]	; (8004840 <MX_I2S3_Init+0x54>)
 8004806:	2200      	movs	r2, #0
 8004808:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800480a:	4b0d      	ldr	r3, [pc, #52]	; (8004840 <MX_I2S3_Init+0x54>)
 800480c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004810:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8004812:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <MX_I2S3_Init+0x54>)
 8004814:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004818:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800481a:	4b09      	ldr	r3, [pc, #36]	; (8004840 <MX_I2S3_Init+0x54>)
 800481c:	2200      	movs	r2, #0
 800481e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8004820:	4b07      	ldr	r3, [pc, #28]	; (8004840 <MX_I2S3_Init+0x54>)
 8004822:	2200      	movs	r2, #0
 8004824:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8004826:	4b06      	ldr	r3, [pc, #24]	; (8004840 <MX_I2S3_Init+0x54>)
 8004828:	2200      	movs	r2, #0
 800482a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800482c:	4804      	ldr	r0, [pc, #16]	; (8004840 <MX_I2S3_Init+0x54>)
 800482e:	f003 fddd 	bl	80083ec <HAL_I2S_Init>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8004838:	f000 faba 	bl	8004db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800483c:	bf00      	nop
 800483e:	bd80      	pop	{r7, pc}
 8004840:	2000070c 	.word	0x2000070c
 8004844:	40003c00 	.word	0x40003c00

08004848 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800484c:	4b17      	ldr	r3, [pc, #92]	; (80048ac <MX_SPI1_Init+0x64>)
 800484e:	4a18      	ldr	r2, [pc, #96]	; (80048b0 <MX_SPI1_Init+0x68>)
 8004850:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004852:	4b16      	ldr	r3, [pc, #88]	; (80048ac <MX_SPI1_Init+0x64>)
 8004854:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004858:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800485a:	4b14      	ldr	r3, [pc, #80]	; (80048ac <MX_SPI1_Init+0x64>)
 800485c:	2200      	movs	r2, #0
 800485e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004860:	4b12      	ldr	r3, [pc, #72]	; (80048ac <MX_SPI1_Init+0x64>)
 8004862:	2200      	movs	r2, #0
 8004864:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004866:	4b11      	ldr	r3, [pc, #68]	; (80048ac <MX_SPI1_Init+0x64>)
 8004868:	2200      	movs	r2, #0
 800486a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800486c:	4b0f      	ldr	r3, [pc, #60]	; (80048ac <MX_SPI1_Init+0x64>)
 800486e:	2200      	movs	r2, #0
 8004870:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004872:	4b0e      	ldr	r3, [pc, #56]	; (80048ac <MX_SPI1_Init+0x64>)
 8004874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004878:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800487a:	4b0c      	ldr	r3, [pc, #48]	; (80048ac <MX_SPI1_Init+0x64>)
 800487c:	2208      	movs	r2, #8
 800487e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004880:	4b0a      	ldr	r3, [pc, #40]	; (80048ac <MX_SPI1_Init+0x64>)
 8004882:	2200      	movs	r2, #0
 8004884:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004886:	4b09      	ldr	r3, [pc, #36]	; (80048ac <MX_SPI1_Init+0x64>)
 8004888:	2200      	movs	r2, #0
 800488a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800488c:	4b07      	ldr	r3, [pc, #28]	; (80048ac <MX_SPI1_Init+0x64>)
 800488e:	2200      	movs	r2, #0
 8004890:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004892:	4b06      	ldr	r3, [pc, #24]	; (80048ac <MX_SPI1_Init+0x64>)
 8004894:	220a      	movs	r2, #10
 8004896:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004898:	4804      	ldr	r0, [pc, #16]	; (80048ac <MX_SPI1_Init+0x64>)
 800489a:	f005 fc7d 	bl	800a198 <HAL_SPI_Init>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80048a4:	f000 fa84 	bl	8004db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80048a8:	bf00      	nop
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	200007b4 	.word	0x200007b4
 80048b0:	40013000 	.word	0x40013000

080048b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80048b8:	4b11      	ldr	r3, [pc, #68]	; (8004900 <MX_USART2_UART_Init+0x4c>)
 80048ba:	4a12      	ldr	r2, [pc, #72]	; (8004904 <MX_USART2_UART_Init+0x50>)
 80048bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80048be:	4b10      	ldr	r3, [pc, #64]	; (8004900 <MX_USART2_UART_Init+0x4c>)
 80048c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80048c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80048c6:	4b0e      	ldr	r3, [pc, #56]	; (8004900 <MX_USART2_UART_Init+0x4c>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80048cc:	4b0c      	ldr	r3, [pc, #48]	; (8004900 <MX_USART2_UART_Init+0x4c>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80048d2:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <MX_USART2_UART_Init+0x4c>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80048d8:	4b09      	ldr	r3, [pc, #36]	; (8004900 <MX_USART2_UART_Init+0x4c>)
 80048da:	220c      	movs	r2, #12
 80048dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048de:	4b08      	ldr	r3, [pc, #32]	; (8004900 <MX_USART2_UART_Init+0x4c>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80048e4:	4b06      	ldr	r3, [pc, #24]	; (8004900 <MX_USART2_UART_Init+0x4c>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80048ea:	4805      	ldr	r0, [pc, #20]	; (8004900 <MX_USART2_UART_Init+0x4c>)
 80048ec:	f006 fa20 	bl	800ad30 <HAL_UART_Init>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80048f6:	f000 fa5b 	bl	8004db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80048fa:	bf00      	nop
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	2000080c 	.word	0x2000080c
 8004904:	40004400 	.word	0x40004400

08004908 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800490e:	2300      	movs	r3, #0
 8004910:	607b      	str	r3, [r7, #4]
 8004912:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <MX_DMA_Init+0x3c>)
 8004914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004916:	4a0b      	ldr	r2, [pc, #44]	; (8004944 <MX_DMA_Init+0x3c>)
 8004918:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800491c:	6313      	str	r3, [r2, #48]	; 0x30
 800491e:	4b09      	ldr	r3, [pc, #36]	; (8004944 <MX_DMA_Init+0x3c>)
 8004920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004926:	607b      	str	r3, [r7, #4]
 8004928:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800492a:	2200      	movs	r2, #0
 800492c:	2100      	movs	r1, #0
 800492e:	2010      	movs	r0, #16
 8004930:	f001 fcac 	bl	800628c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004934:	2010      	movs	r0, #16
 8004936:	f001 fcc5 	bl	80062c4 <HAL_NVIC_EnableIRQ>

}
 800493a:	bf00      	nop
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40023800 	.word	0x40023800

08004948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08a      	sub	sp, #40	; 0x28
 800494c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800494e:	f107 0314 	add.w	r3, r7, #20
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	605a      	str	r2, [r3, #4]
 8004958:	609a      	str	r2, [r3, #8]
 800495a:	60da      	str	r2, [r3, #12]
 800495c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800495e:	2300      	movs	r3, #0
 8004960:	613b      	str	r3, [r7, #16]
 8004962:	4b48      	ldr	r3, [pc, #288]	; (8004a84 <MX_GPIO_Init+0x13c>)
 8004964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004966:	4a47      	ldr	r2, [pc, #284]	; (8004a84 <MX_GPIO_Init+0x13c>)
 8004968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800496c:	6313      	str	r3, [r2, #48]	; 0x30
 800496e:	4b45      	ldr	r3, [pc, #276]	; (8004a84 <MX_GPIO_Init+0x13c>)
 8004970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004976:	613b      	str	r3, [r7, #16]
 8004978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800497a:	2300      	movs	r3, #0
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	4b41      	ldr	r3, [pc, #260]	; (8004a84 <MX_GPIO_Init+0x13c>)
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	4a40      	ldr	r2, [pc, #256]	; (8004a84 <MX_GPIO_Init+0x13c>)
 8004984:	f043 0301 	orr.w	r3, r3, #1
 8004988:	6313      	str	r3, [r2, #48]	; 0x30
 800498a:	4b3e      	ldr	r3, [pc, #248]	; (8004a84 <MX_GPIO_Init+0x13c>)
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004996:	2300      	movs	r3, #0
 8004998:	60bb      	str	r3, [r7, #8]
 800499a:	4b3a      	ldr	r3, [pc, #232]	; (8004a84 <MX_GPIO_Init+0x13c>)
 800499c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499e:	4a39      	ldr	r2, [pc, #228]	; (8004a84 <MX_GPIO_Init+0x13c>)
 80049a0:	f043 0304 	orr.w	r3, r3, #4
 80049a4:	6313      	str	r3, [r2, #48]	; 0x30
 80049a6:	4b37      	ldr	r3, [pc, #220]	; (8004a84 <MX_GPIO_Init+0x13c>)
 80049a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	60bb      	str	r3, [r7, #8]
 80049b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80049b2:	2300      	movs	r3, #0
 80049b4:	607b      	str	r3, [r7, #4]
 80049b6:	4b33      	ldr	r3, [pc, #204]	; (8004a84 <MX_GPIO_Init+0x13c>)
 80049b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ba:	4a32      	ldr	r2, [pc, #200]	; (8004a84 <MX_GPIO_Init+0x13c>)
 80049bc:	f043 0302 	orr.w	r3, r3, #2
 80049c0:	6313      	str	r3, [r2, #48]	; 0x30
 80049c2:	4b30      	ldr	r3, [pc, #192]	; (8004a84 <MX_GPIO_Init+0x13c>)
 80049c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	607b      	str	r3, [r7, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80049ce:	2300      	movs	r3, #0
 80049d0:	603b      	str	r3, [r7, #0]
 80049d2:	4b2c      	ldr	r3, [pc, #176]	; (8004a84 <MX_GPIO_Init+0x13c>)
 80049d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d6:	4a2b      	ldr	r2, [pc, #172]	; (8004a84 <MX_GPIO_Init+0x13c>)
 80049d8:	f043 0308 	orr.w	r3, r3, #8
 80049dc:	6313      	str	r3, [r2, #48]	; 0x30
 80049de:	4b29      	ldr	r3, [pc, #164]	; (8004a84 <MX_GPIO_Init+0x13c>)
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	603b      	str	r3, [r7, #0]
 80049e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDcard_CS_GPIO_Port, SDcard_CS_Pin, GPIO_PIN_RESET);
 80049ea:	2200      	movs	r2, #0
 80049ec:	2110      	movs	r1, #16
 80049ee:	4826      	ldr	r0, [pc, #152]	; (8004a88 <MX_GPIO_Init+0x140>)
 80049f0:	f002 fb4c 	bl	800708c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SDcard_CS_Pin */
  GPIO_InitStruct.Pin = SDcard_CS_Pin;
 80049f4:	2310      	movs	r3, #16
 80049f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049f8:	2301      	movs	r3, #1
 80049fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fc:	2300      	movs	r3, #0
 80049fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a00:	2300      	movs	r3, #0
 8004a02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SDcard_CS_GPIO_Port, &GPIO_InitStruct);
 8004a04:	f107 0314 	add.w	r3, r7, #20
 8004a08:	4619      	mov	r1, r3
 8004a0a:	481f      	ldr	r0, [pc, #124]	; (8004a88 <MX_GPIO_Init+0x140>)
 8004a0c:	f002 f8a6 	bl	8006b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004a10:	231f      	movs	r3, #31
 8004a12:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a14:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a1e:	f107 0314 	add.w	r3, r7, #20
 8004a22:	4619      	mov	r1, r3
 8004a24:	4819      	ldr	r0, [pc, #100]	; (8004a8c <MX_GPIO_Init+0x144>)
 8004a26:	f002 f899 	bl	8006b5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	210f      	movs	r1, #15
 8004a2e:	2006      	movs	r0, #6
 8004a30:	f001 fc2c 	bl	800628c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004a34:	2006      	movs	r0, #6
 8004a36:	f001 fc45 	bl	80062c4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 15, 0);
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	210f      	movs	r1, #15
 8004a3e:	2007      	movs	r0, #7
 8004a40:	f001 fc24 	bl	800628c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8004a44:	2007      	movs	r0, #7
 8004a46:	f001 fc3d 	bl	80062c4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 15, 0);
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	210f      	movs	r1, #15
 8004a4e:	2008      	movs	r0, #8
 8004a50:	f001 fc1c 	bl	800628c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004a54:	2008      	movs	r0, #8
 8004a56:	f001 fc35 	bl	80062c4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 15, 0);
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	210f      	movs	r1, #15
 8004a5e:	2009      	movs	r0, #9
 8004a60:	f001 fc14 	bl	800628c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004a64:	2009      	movs	r0, #9
 8004a66:	f001 fc2d 	bl	80062c4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	210f      	movs	r1, #15
 8004a6e:	200a      	movs	r0, #10
 8004a70:	f001 fc0c 	bl	800628c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004a74:	200a      	movs	r0, #10
 8004a76:	f001 fc25 	bl	80062c4 <HAL_NVIC_EnableIRQ>

}
 8004a7a:	bf00      	nop
 8004a7c:	3728      	adds	r7, #40	; 0x28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	40023800 	.word	0x40023800
 8004a88:	40020800 	.word	0x40020800
 8004a8c:	40020c00 	.word	0x40020c00

08004a90 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b0c4      	sub	sp, #272	; 0x110
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4602      	mov	r2, r0
 8004a98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a9c:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8004aa0:	801a      	strh	r2, [r3, #0]
	if ((globalTime - lastEventTime) < 1)
 8004aa2:	4b97      	ldr	r3, [pc, #604]	; (8004d00 <HAL_GPIO_EXTI_Callback+0x270>)
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	4b97      	ldr	r3, [pc, #604]	; (8004d04 <HAL_GPIO_EXTI_Callback+0x274>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f340 815b 	ble.w	8004d68 <HAL_GPIO_EXTI_Callback+0x2d8>
		return;
	// Start interrupt event
	char buf[256];
	int button = -1;
 8004ab2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ab6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	switch (GPIO_Pin) {
 8004aba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004abe:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	2b0f      	cmp	r3, #15
 8004ac8:	f200 8150 	bhi.w	8004d6c <HAL_GPIO_EXTI_Callback+0x2dc>
 8004acc:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <HAL_GPIO_EXTI_Callback+0x44>)
 8004ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad2:	bf00      	nop
 8004ad4:	08004b15 	.word	0x08004b15
 8004ad8:	08004b67 	.word	0x08004b67
 8004adc:	08004d6d 	.word	0x08004d6d
 8004ae0:	08004bfb 	.word	0x08004bfb
 8004ae4:	08004d6d 	.word	0x08004d6d
 8004ae8:	08004d6d 	.word	0x08004d6d
 8004aec:	08004d6d 	.word	0x08004d6d
 8004af0:	08004c4b 	.word	0x08004c4b
 8004af4:	08004d6d 	.word	0x08004d6d
 8004af8:	08004d6d 	.word	0x08004d6d
 8004afc:	08004d6d 	.word	0x08004d6d
 8004b00:	08004d6d 	.word	0x08004d6d
 8004b04:	08004d6d 	.word	0x08004d6d
 8004b08:	08004d6d 	.word	0x08004d6d
 8004b0c:	08004d6d 	.word	0x08004d6d
 8004b10:	08004cad 	.word	0x08004cad
	case GPIO_PIN_0:
		button = 0;
 8004b14:	2300      	movs	r3, #0
 8004b16:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		if (OLED_display_status == OLED_MENU) {
 8004b1a:	4b7b      	ldr	r3, [pc, #492]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 80fe 	beq.w	8004d20 <HAL_GPIO_EXTI_Callback+0x290>
			// Do nothing when at menu
		} else if (OLED_display_status == OLED_FILE_BROWSER) {
 8004b24:	4b78      	ldr	r3, [pc, #480]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d103      	bne.n	8004b34 <HAL_GPIO_EXTI_Callback+0xa4>
			// When at file browser
			// Press first button to go back to menu
			OLED_display_status = OLED_MENU;
 8004b2c:	4b76      	ldr	r3, [pc, #472]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]
			OLED_display_status = OLED_MENU;
		} else if (OLED_display_status == OLED_ABOUT) {
			// Press any key to return to menu
			OLED_display_status = OLED_MENU;
		}
		break;
 8004b32:	e0f5      	b.n	8004d20 <HAL_GPIO_EXTI_Callback+0x290>
		} else if (OLED_display_status == OLED_PLAYER) {
 8004b34:	4b74      	ldr	r3, [pc, #464]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d103      	bne.n	8004b44 <HAL_GPIO_EXTI_Callback+0xb4>
			OLED_display_status = OLED_MENU;
 8004b3c:	4b72      	ldr	r3, [pc, #456]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]
		break;
 8004b42:	e0ed      	b.n	8004d20 <HAL_GPIO_EXTI_Callback+0x290>
		} else if (OLED_display_status == OLED_SETTING) {
 8004b44:	4b70      	ldr	r3, [pc, #448]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b03      	cmp	r3, #3
 8004b4a:	d103      	bne.n	8004b54 <HAL_GPIO_EXTI_Callback+0xc4>
			OLED_display_status = OLED_MENU;
 8004b4c:	4b6e      	ldr	r3, [pc, #440]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
		break;
 8004b52:	e0e5      	b.n	8004d20 <HAL_GPIO_EXTI_Callback+0x290>
		} else if (OLED_display_status == OLED_ABOUT) {
 8004b54:	4b6c      	ldr	r3, [pc, #432]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	f040 80e1 	bne.w	8004d20 <HAL_GPIO_EXTI_Callback+0x290>
			OLED_display_status = OLED_MENU;
 8004b5e:	4b6a      	ldr	r3, [pc, #424]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]
		break;
 8004b64:	e0dc      	b.n	8004d20 <HAL_GPIO_EXTI_Callback+0x290>
	case GPIO_PIN_1:
		button = 1;
 8004b66:	2301      	movs	r3, #1
 8004b68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		if (OLED_display_status == OLED_MENU) {
 8004b6c:	4b66      	ldr	r3, [pc, #408]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d11f      	bne.n	8004bb4 <HAL_GPIO_EXTI_Callback+0x124>
			switch (menu_select) {
 8004b74:	4b65      	ldr	r3, [pc, #404]	; (8004d0c <HAL_GPIO_EXTI_Callback+0x27c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b03      	cmp	r3, #3
 8004b7a:	d83c      	bhi.n	8004bf6 <HAL_GPIO_EXTI_Callback+0x166>
 8004b7c:	a201      	add	r2, pc, #4	; (adr r2, 8004b84 <HAL_GPIO_EXTI_Callback+0xf4>)
 8004b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b82:	bf00      	nop
 8004b84:	08004b95 	.word	0x08004b95
 8004b88:	08004b9d 	.word	0x08004b9d
 8004b8c:	08004ba5 	.word	0x08004ba5
 8004b90:	08004bad 	.word	0x08004bad
			case MENU_FILE_BROWSER:
				OLED_display_status = OLED_FILE_BROWSER;
 8004b94:	4b5c      	ldr	r3, [pc, #368]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004b96:	2201      	movs	r2, #1
 8004b98:	601a      	str	r2, [r3, #0]
				break;
 8004b9a:	e02d      	b.n	8004bf8 <HAL_GPIO_EXTI_Callback+0x168>
			case MENU_PLAYER:
				OLED_display_status = OLED_PLAYER;
 8004b9c:	4b5a      	ldr	r3, [pc, #360]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	601a      	str	r2, [r3, #0]
				break;
 8004ba2:	e029      	b.n	8004bf8 <HAL_GPIO_EXTI_Callback+0x168>
			case MENU_SETTING:
				OLED_display_status = OLED_SETTING;
 8004ba4:	4b58      	ldr	r3, [pc, #352]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004ba6:	2203      	movs	r2, #3
 8004ba8:	601a      	str	r2, [r3, #0]
				break;
 8004baa:	e025      	b.n	8004bf8 <HAL_GPIO_EXTI_Callback+0x168>
			case MENU_ABOUT:
				OLED_display_status = OLED_ABOUT;
 8004bac:	4b56      	ldr	r3, [pc, #344]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004bae:	2204      	movs	r2, #4
 8004bb0:	601a      	str	r2, [r3, #0]
				break;
 8004bb2:	e021      	b.n	8004bf8 <HAL_GPIO_EXTI_Callback+0x168>
			default:
				break;
			}
		} else if (OLED_display_status == OLED_FILE_BROWSER) {
 8004bb4:	4b54      	ldr	r3, [pc, #336]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d103      	bne.n	8004bc4 <HAL_GPIO_EXTI_Callback+0x134>
			// When at file browser
			// Press first button to go back to menu
			OLED_display_status = OLED_MENU;
 8004bbc:	4b52      	ldr	r3, [pc, #328]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]
			OLED_display_status = OLED_MENU;
		} else if (OLED_display_status == OLED_ABOUT) {
			// Press any key to return to menu
			OLED_display_status = OLED_MENU;
		}
		break;
 8004bc2:	e0af      	b.n	8004d24 <HAL_GPIO_EXTI_Callback+0x294>
		} else if (OLED_display_status == OLED_PLAYER) {
 8004bc4:	4b50      	ldr	r3, [pc, #320]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d103      	bne.n	8004bd4 <HAL_GPIO_EXTI_Callback+0x144>
			OLED_display_status = OLED_MENU;
 8004bcc:	4b4e      	ldr	r3, [pc, #312]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]
		break;
 8004bd2:	e0a7      	b.n	8004d24 <HAL_GPIO_EXTI_Callback+0x294>
		} else if (OLED_display_status == OLED_SETTING) {
 8004bd4:	4b4c      	ldr	r3, [pc, #304]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b03      	cmp	r3, #3
 8004bda:	d103      	bne.n	8004be4 <HAL_GPIO_EXTI_Callback+0x154>
			OLED_display_status = OLED_MENU;
 8004bdc:	4b4a      	ldr	r3, [pc, #296]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	601a      	str	r2, [r3, #0]
		break;
 8004be2:	e09f      	b.n	8004d24 <HAL_GPIO_EXTI_Callback+0x294>
		} else if (OLED_display_status == OLED_ABOUT) {
 8004be4:	4b48      	ldr	r3, [pc, #288]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	f040 809b 	bne.w	8004d24 <HAL_GPIO_EXTI_Callback+0x294>
			OLED_display_status = OLED_MENU;
 8004bee:	4b46      	ldr	r3, [pc, #280]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]
		break;
 8004bf4:	e096      	b.n	8004d24 <HAL_GPIO_EXTI_Callback+0x294>
				break;
 8004bf6:	bf00      	nop
		break;
 8004bf8:	e094      	b.n	8004d24 <HAL_GPIO_EXTI_Callback+0x294>
	case GPIO_PIN_2:
		button = 2;
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		if (OLED_display_status == OLED_MENU) {
 8004c00:	4b41      	ldr	r3, [pc, #260]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 808f 	beq.w	8004d28 <HAL_GPIO_EXTI_Callback+0x298>
			// Do nothing
		} else if (OLED_display_status == OLED_FILE_BROWSER) {
 8004c0a:	4b3f      	ldr	r3, [pc, #252]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d103      	bne.n	8004c1a <HAL_GPIO_EXTI_Callback+0x18a>
			// When at file browser
			// Press first button to go back to menu
			OLED_display_status = OLED_MENU;
 8004c12:	4b3d      	ldr	r3, [pc, #244]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]
			OLED_display_status = OLED_MENU;
		} else if (OLED_display_status == OLED_ABOUT) {
			// Press any key to return to menu
			OLED_display_status = OLED_MENU;
		}
		break;
 8004c18:	e086      	b.n	8004d28 <HAL_GPIO_EXTI_Callback+0x298>
		} else if (OLED_display_status == OLED_PLAYER) {
 8004c1a:	4b3b      	ldr	r3, [pc, #236]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d103      	bne.n	8004c2a <HAL_GPIO_EXTI_Callback+0x19a>
			OLED_display_status = OLED_MENU;
 8004c22:	4b39      	ldr	r3, [pc, #228]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]
		break;
 8004c28:	e07e      	b.n	8004d28 <HAL_GPIO_EXTI_Callback+0x298>
		} else if (OLED_display_status == OLED_SETTING) {
 8004c2a:	4b37      	ldr	r3, [pc, #220]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b03      	cmp	r3, #3
 8004c30:	d103      	bne.n	8004c3a <HAL_GPIO_EXTI_Callback+0x1aa>
			OLED_display_status = OLED_MENU;
 8004c32:	4b35      	ldr	r3, [pc, #212]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]
		break;
 8004c38:	e076      	b.n	8004d28 <HAL_GPIO_EXTI_Callback+0x298>
		} else if (OLED_display_status == OLED_ABOUT) {
 8004c3a:	4b33      	ldr	r3, [pc, #204]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d172      	bne.n	8004d28 <HAL_GPIO_EXTI_Callback+0x298>
			OLED_display_status = OLED_MENU;
 8004c42:	4b31      	ldr	r3, [pc, #196]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]
		break;
 8004c48:	e06e      	b.n	8004d28 <HAL_GPIO_EXTI_Callback+0x298>
	case GPIO_PIN_3:
		button = 3;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		if (OLED_display_status == OLED_MENU) {
 8004c50:	4b2d      	ldr	r3, [pc, #180]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d109      	bne.n	8004c6c <HAL_GPIO_EXTI_Callback+0x1dc>
			if (menu_select != MENU_FILE_BROWSER)
 8004c58:	4b2c      	ldr	r3, [pc, #176]	; (8004d0c <HAL_GPIO_EXTI_Callback+0x27c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d065      	beq.n	8004d2c <HAL_GPIO_EXTI_Callback+0x29c>
				menu_select--;
 8004c60:	4b2a      	ldr	r3, [pc, #168]	; (8004d0c <HAL_GPIO_EXTI_Callback+0x27c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3b01      	subs	r3, #1
 8004c66:	4a29      	ldr	r2, [pc, #164]	; (8004d0c <HAL_GPIO_EXTI_Callback+0x27c>)
 8004c68:	6013      	str	r3, [r2, #0]
			OLED_display_status = OLED_MENU;
		} else if (OLED_display_status == OLED_ABOUT) {
			// Press any key to return to menu
			OLED_display_status = OLED_MENU;
		}
		break;
 8004c6a:	e05f      	b.n	8004d2c <HAL_GPIO_EXTI_Callback+0x29c>
		} else if (OLED_display_status == OLED_FILE_BROWSER) {
 8004c6c:	4b26      	ldr	r3, [pc, #152]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d103      	bne.n	8004c7c <HAL_GPIO_EXTI_Callback+0x1ec>
			OLED_display_status = OLED_MENU;
 8004c74:	4b24      	ldr	r3, [pc, #144]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]
		break;
 8004c7a:	e057      	b.n	8004d2c <HAL_GPIO_EXTI_Callback+0x29c>
		} else if (OLED_display_status == OLED_PLAYER) {
 8004c7c:	4b22      	ldr	r3, [pc, #136]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d103      	bne.n	8004c8c <HAL_GPIO_EXTI_Callback+0x1fc>
			OLED_display_status = OLED_MENU;
 8004c84:	4b20      	ldr	r3, [pc, #128]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]
		break;
 8004c8a:	e04f      	b.n	8004d2c <HAL_GPIO_EXTI_Callback+0x29c>
		} else if (OLED_display_status == OLED_SETTING) {
 8004c8c:	4b1e      	ldr	r3, [pc, #120]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b03      	cmp	r3, #3
 8004c92:	d103      	bne.n	8004c9c <HAL_GPIO_EXTI_Callback+0x20c>
			OLED_display_status = OLED_MENU;
 8004c94:	4b1c      	ldr	r3, [pc, #112]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	601a      	str	r2, [r3, #0]
		break;
 8004c9a:	e047      	b.n	8004d2c <HAL_GPIO_EXTI_Callback+0x29c>
		} else if (OLED_display_status == OLED_ABOUT) {
 8004c9c:	4b1a      	ldr	r3, [pc, #104]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d143      	bne.n	8004d2c <HAL_GPIO_EXTI_Callback+0x29c>
			OLED_display_status = OLED_MENU;
 8004ca4:	4b18      	ldr	r3, [pc, #96]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	601a      	str	r2, [r3, #0]
		break;
 8004caa:	e03f      	b.n	8004d2c <HAL_GPIO_EXTI_Callback+0x29c>
	case GPIO_PIN_4:
		button = 4;
 8004cac:	2304      	movs	r3, #4
 8004cae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		if (OLED_display_status == OLED_MENU) {
 8004cb2:	4b15      	ldr	r3, [pc, #84]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d109      	bne.n	8004cce <HAL_GPIO_EXTI_Callback+0x23e>
			if (menu_select != MENU_ABOUT)
 8004cba:	4b14      	ldr	r3, [pc, #80]	; (8004d0c <HAL_GPIO_EXTI_Callback+0x27c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d036      	beq.n	8004d30 <HAL_GPIO_EXTI_Callback+0x2a0>
				menu_select++;
 8004cc2:	4b12      	ldr	r3, [pc, #72]	; (8004d0c <HAL_GPIO_EXTI_Callback+0x27c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	4a10      	ldr	r2, [pc, #64]	; (8004d0c <HAL_GPIO_EXTI_Callback+0x27c>)
 8004cca:	6013      	str	r3, [r2, #0]
			OLED_display_status = OLED_MENU;
		} else if (OLED_display_status == OLED_ABOUT) {
			// Press any key to return to menu
			OLED_display_status = OLED_MENU;
		}
		break;
 8004ccc:	e030      	b.n	8004d30 <HAL_GPIO_EXTI_Callback+0x2a0>
		} else if (OLED_display_status == OLED_FILE_BROWSER) {
 8004cce:	4b0e      	ldr	r3, [pc, #56]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d103      	bne.n	8004cde <HAL_GPIO_EXTI_Callback+0x24e>
			OLED_display_status = OLED_MENU;
 8004cd6:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]
		break;
 8004cdc:	e028      	b.n	8004d30 <HAL_GPIO_EXTI_Callback+0x2a0>
		} else if (OLED_display_status == OLED_PLAYER) {
 8004cde:	4b0a      	ldr	r3, [pc, #40]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d103      	bne.n	8004cee <HAL_GPIO_EXTI_Callback+0x25e>
			OLED_display_status = OLED_MENU;
 8004ce6:	4b08      	ldr	r3, [pc, #32]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]
		break;
 8004cec:	e020      	b.n	8004d30 <HAL_GPIO_EXTI_Callback+0x2a0>
		} else if (OLED_display_status == OLED_SETTING) {
 8004cee:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b03      	cmp	r3, #3
 8004cf4:	d10c      	bne.n	8004d10 <HAL_GPIO_EXTI_Callback+0x280>
			OLED_display_status = OLED_MENU;
 8004cf6:	4b04      	ldr	r3, [pc, #16]	; (8004d08 <HAL_GPIO_EXTI_Callback+0x278>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]
		break;
 8004cfc:	e018      	b.n	8004d30 <HAL_GPIO_EXTI_Callback+0x2a0>
 8004cfe:	bf00      	nop
 8004d00:	20000858 	.word	0x20000858
 8004d04:	2000085c 	.word	0x2000085c
 8004d08:	20000850 	.word	0x20000850
 8004d0c:	20000854 	.word	0x20000854
		} else if (OLED_display_status == OLED_ABOUT) {
 8004d10:	4b19      	ldr	r3, [pc, #100]	; (8004d78 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d10b      	bne.n	8004d30 <HAL_GPIO_EXTI_Callback+0x2a0>
			OLED_display_status = OLED_MENU;
 8004d18:	4b17      	ldr	r3, [pc, #92]	; (8004d78 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
		break;
 8004d1e:	e007      	b.n	8004d30 <HAL_GPIO_EXTI_Callback+0x2a0>
		break;
 8004d20:	bf00      	nop
 8004d22:	e006      	b.n	8004d32 <HAL_GPIO_EXTI_Callback+0x2a2>
		break;
 8004d24:	bf00      	nop
 8004d26:	e004      	b.n	8004d32 <HAL_GPIO_EXTI_Callback+0x2a2>
		break;
 8004d28:	bf00      	nop
 8004d2a:	e002      	b.n	8004d32 <HAL_GPIO_EXTI_Callback+0x2a2>
		break;
 8004d2c:	bf00      	nop
 8004d2e:	e000      	b.n	8004d32 <HAL_GPIO_EXTI_Callback+0x2a2>
		break;
 8004d30:	bf00      	nop
	default:
		return;
		break;
	}
	sprintf(buf, "External IO button %d pressed!\n\r", button);
 8004d32:	f107 030c 	add.w	r3, r7, #12
 8004d36:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004d3a:	4910      	ldr	r1, [pc, #64]	; (8004d7c <HAL_GPIO_EXTI_Callback+0x2ec>)
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f008 fee5 	bl	800db0c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 8004d42:	f107 030c 	add.w	r3, r7, #12
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fb fa42 	bl	80001d0 <strlen>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	f107 010c 	add.w	r1, r7, #12
 8004d54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d58:	4809      	ldr	r0, [pc, #36]	; (8004d80 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8004d5a:	f006 f836 	bl	800adca <HAL_UART_Transmit>

	// Update lastEventTime
	lastEventTime = globalTime;
 8004d5e:	4b09      	ldr	r3, [pc, #36]	; (8004d84 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a09      	ldr	r2, [pc, #36]	; (8004d88 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8004d64:	6013      	str	r3, [r2, #0]
	return;
 8004d66:	e002      	b.n	8004d6e <HAL_GPIO_EXTI_Callback+0x2de>
		return;
 8004d68:	bf00      	nop
 8004d6a:	e000      	b.n	8004d6e <HAL_GPIO_EXTI_Callback+0x2de>
		return;
 8004d6c:	bf00      	nop
}
 8004d6e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20000850 	.word	0x20000850
 8004d7c:	0800e6dc 	.word	0x0800e6dc
 8004d80:	2000080c 	.word	0x2000080c
 8004d84:	20000858 	.word	0x20000858
 8004d88:	2000085c 	.word	0x2000085c

08004d8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a04      	ldr	r2, [pc, #16]	; (8004dac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d101      	bne.n	8004da2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004d9e:	f001 f979 	bl	8006094 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004da2:	bf00      	nop
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	40001000 	.word	0x40001000

08004db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004db4:	b672      	cpsid	i
}
 8004db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004db8:	e7fe      	b.n	8004db8 <Error_Handler+0x8>
	...

08004dbc <SPI1_Error>:

/////////////////////////////////////////////////////// ��ֲ�޸������� //////////////////////////////////////////////////////////


void SPI1_Error(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
	__HAL_SPI_DISABLE(&hspi1);
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <SPI1_Error+0x34>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	4b0a      	ldr	r3, [pc, #40]	; (8004df0 <SPI1_Error+0x34>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dce:	601a      	str	r2, [r3, #0]
    HAL_SPI_DeInit(&hspi1);
 8004dd0:	4807      	ldr	r0, [pc, #28]	; (8004df0 <SPI1_Error+0x34>)
 8004dd2:	f005 fa6a 	bl	800a2aa <HAL_SPI_DeInit>
    MX_SPI1_Init();
 8004dd6:	f7ff fd37 	bl	8004848 <MX_SPI1_Init>
	__HAL_SPI_ENABLE(&hspi1);
 8004dda:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <SPI1_Error+0x34>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	4b03      	ldr	r3, [pc, #12]	; (8004df0 <SPI1_Error+0x34>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004de8:	601a      	str	r2, [r3, #0]
}
 8004dea:	bf00      	nop
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	200007b4 	.word	0x200007b4

08004df4 <SPI1_ReadWriteByte>:

uint8_t SPI1_ReadWriteByte(uint8_t TxDate)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af02      	add	r7, sp, #8
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	71fb      	strb	r3, [r7, #7]
    uint8_t RxData = 0;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	73fb      	strb	r3, [r7, #15]
    if(HAL_SPI_TransmitReceive(&hspi1, &TxDate, &RxData, 1, 1000) != HAL_OK)
 8004e02:	f107 020f 	add.w	r2, r7, #15
 8004e06:	1df9      	adds	r1, r7, #7
 8004e08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	2301      	movs	r3, #1
 8004e10:	4806      	ldr	r0, [pc, #24]	; (8004e2c <SPI1_ReadWriteByte+0x38>)
 8004e12:	f005 fa72 	bl	800a2fa <HAL_SPI_TransmitReceive>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <SPI1_ReadWriteByte+0x2c>
    {
        SPI1_Error();
 8004e1c:	f7ff ffce 	bl	8004dbc <SPI1_Error>
    }
    return RxData;
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	200007b4 	.word	0x200007b4

08004e30 <SD_SPI_ReadWriteByte>:
 * SD��SPI�ӿڶ�дһ���ֽ�
 * @param  TxData ��д����ֽ�
 * @return        ����SPI�Ľ���
 */
uint8_t SD_SPI_ReadWriteByte(uint8_t TxData)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	4603      	mov	r3, r0
 8004e38:	71fb      	strb	r3, [r7, #7]
    return SPI1_ReadWriteByte(TxData);
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff ffd9 	bl	8004df4 <SPI1_ReadWriteByte>
 8004e42:	4603      	mov	r3, r0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <SD_SPI_Init>:

/// SPIӲ�����ʼ��
void SD_SPI_Init(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
    MX_SPI1_Init();
 8004e50:	f7ff fcfa 	bl	8004848 <MX_SPI1_Init>
	__HAL_SPI_ENABLE(&hspi1);
 8004e54:	4b08      	ldr	r3, [pc, #32]	; (8004e78 <SD_SPI_Init+0x2c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	4b07      	ldr	r3, [pc, #28]	; (8004e78 <SD_SPI_Init+0x2c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e62:	601a      	str	r2, [r3, #0]
    SD_SPI_ReadWriteByte(0xFF);
 8004e64:	20ff      	movs	r0, #255	; 0xff
 8004e66:	f7ff ffe3 	bl	8004e30 <SD_SPI_ReadWriteByte>
    SD_CS_H();
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	2110      	movs	r1, #16
 8004e6e:	4803      	ldr	r0, [pc, #12]	; (8004e7c <SD_SPI_Init+0x30>)
 8004e70:	f002 f90c 	bl	800708c <HAL_GPIO_WritePin>
}
 8004e74:	bf00      	nop
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	200007b4 	.word	0x200007b4
 8004e7c:	40020800 	.word	0x40020800

08004e80 <SD_DisSelect>:

////////////////////////////////////////////////////////  SD SPI ��������  /////////////////////////////////////////////////////////////

//ȡ��ѡ��,�ͷ�SPI����
void SD_DisSelect(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
    SD_CS_H();
 8004e84:	2201      	movs	r2, #1
 8004e86:	2110      	movs	r1, #16
 8004e88:	4803      	ldr	r0, [pc, #12]	; (8004e98 <SD_DisSelect+0x18>)
 8004e8a:	f002 f8ff 	bl	800708c <HAL_GPIO_WritePin>
    SD_SPI_ReadWriteByte(0xff);//�ṩ�����8��ʱ��
 8004e8e:	20ff      	movs	r0, #255	; 0xff
 8004e90:	f7ff ffce 	bl	8004e30 <SD_SPI_ReadWriteByte>
}
 8004e94:	bf00      	nop
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40020800 	.word	0x40020800

08004e9c <SD_Select>:
/**
 * ѡ��SD�����ȴ���׼����
 * @return  0���ɹ�  1��ʧ��
 */
uint8_t SD_Select(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
    SD_CS_L();
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	2110      	movs	r1, #16
 8004ea4:	4807      	ldr	r0, [pc, #28]	; (8004ec4 <SD_Select+0x28>)
 8004ea6:	f002 f8f1 	bl	800708c <HAL_GPIO_WritePin>
    if (SD_WaitReady() == 0)return 0; //�ȴ��ɹ�
 8004eaa:	f000 f80d 	bl	8004ec8 <SD_WaitReady>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <SD_Select+0x1c>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	e002      	b.n	8004ebe <SD_Select+0x22>
    SD_DisSelect();
 8004eb8:	f7ff ffe2 	bl	8004e80 <SD_DisSelect>
    return 1;//�ȴ�ʧ��
 8004ebc:	2301      	movs	r3, #1
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40020800 	.word	0x40020800

08004ec8 <SD_WaitReady>:
/**
 * �ȴ�SD��׼����
 * @return  0���ɹ�  other��ʧ��
 */
uint8_t SD_WaitReady(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
    uint32_t t = 0;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	607b      	str	r3, [r7, #4]
    do
    {
        if (SD_SPI_ReadWriteByte(0XFF) == 0XFF)return 0; //OK
 8004ed2:	20ff      	movs	r0, #255	; 0xff
 8004ed4:	f7ff ffac 	bl	8004e30 <SD_SPI_ReadWriteByte>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2bff      	cmp	r3, #255	; 0xff
 8004edc:	d101      	bne.n	8004ee2 <SD_WaitReady+0x1a>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	e008      	b.n	8004ef4 <SD_WaitReady+0x2c>
        t++;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	607b      	str	r3, [r7, #4]
    }
    while (t < 0xFFFFFF); //�ȴ�
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d3ef      	bcc.n	8004ed2 <SD_WaitReady+0xa>
    return 1;
 8004ef2:	2301      	movs	r3, #1
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <SD_GetResponse>:
 * �ȴ�SD����Ӧ
 * @param  Response Ҫ�õ��Ļ�Ӧֵ
 * @return          0���ɹ�  other��ʧ��
 */
uint8_t SD_GetResponse(uint8_t Response)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	4603      	mov	r3, r0
 8004f04:	71fb      	strb	r3, [r7, #7]
    uint16_t Count = 0xFFF; //�ȴ�����
 8004f06:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004f0a:	81fb      	strh	r3, [r7, #14]
    while ((SD_SPI_ReadWriteByte(0XFF) != Response) && Count)Count--; //�ȴ��õ�׼ȷ�Ļ�Ӧ
 8004f0c:	e002      	b.n	8004f14 <SD_GetResponse+0x18>
 8004f0e:	89fb      	ldrh	r3, [r7, #14]
 8004f10:	3b01      	subs	r3, #1
 8004f12:	81fb      	strh	r3, [r7, #14]
 8004f14:	20ff      	movs	r0, #255	; 0xff
 8004f16:	f7ff ff8b 	bl	8004e30 <SD_SPI_ReadWriteByte>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	79fb      	ldrb	r3, [r7, #7]
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d002      	beq.n	8004f2a <SD_GetResponse+0x2e>
 8004f24:	89fb      	ldrh	r3, [r7, #14]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1f1      	bne.n	8004f0e <SD_GetResponse+0x12>
    if (Count == 0)return MSD_RESPONSE_FAILURE; //�õ���Ӧʧ��
 8004f2a:	89fb      	ldrh	r3, [r7, #14]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <SD_GetResponse+0x38>
 8004f30:	23ff      	movs	r3, #255	; 0xff
 8004f32:	e000      	b.n	8004f36 <SD_GetResponse+0x3a>
    else return MSD_RESPONSE_NO_ERROR;//��ȷ��Ӧ
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <SD_RecvData>:
 * @param  buf ��Ž��յ�����
 * @param  len ���յ����ݳ���
 * @return     0���ɹ�  other��ʧ��
 */
uint8_t SD_RecvData(uint8_t*buf, uint16_t len)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b082      	sub	sp, #8
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	460b      	mov	r3, r1
 8004f48:	807b      	strh	r3, [r7, #2]
    if (SD_GetResponse(0xFE))return 1; //�ȴ�SD������������ʼ����0xFE
 8004f4a:	20fe      	movs	r0, #254	; 0xfe
 8004f4c:	f7ff ffd6 	bl	8004efc <SD_GetResponse>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00b      	beq.n	8004f6e <SD_RecvData+0x30>
 8004f56:	2301      	movs	r3, #1
 8004f58:	e015      	b.n	8004f86 <SD_RecvData+0x48>
    while (len--) //��ʼ��������
    {
        *buf = SD_SPI_ReadWriteByte(0xFF);
 8004f5a:	20ff      	movs	r0, #255	; 0xff
 8004f5c:	f7ff ff68 	bl	8004e30 <SD_SPI_ReadWriteByte>
 8004f60:	4603      	mov	r3, r0
 8004f62:	461a      	mov	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	701a      	strb	r2, [r3, #0]
        buf++;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	607b      	str	r3, [r7, #4]
    while (len--) //��ʼ��������
 8004f6e:	887b      	ldrh	r3, [r7, #2]
 8004f70:	1e5a      	subs	r2, r3, #1
 8004f72:	807a      	strh	r2, [r7, #2]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1f0      	bne.n	8004f5a <SD_RecvData+0x1c>
    }
    //������2��αCRC��dummy CRC��
    SD_SPI_ReadWriteByte(0xFF);
 8004f78:	20ff      	movs	r0, #255	; 0xff
 8004f7a:	f7ff ff59 	bl	8004e30 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(0xFF);
 8004f7e:	20ff      	movs	r0, #255	; 0xff
 8004f80:	f7ff ff56 	bl	8004e30 <SD_SPI_ReadWriteByte>
    return 0;//��ȡ�ɹ�
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <SD_SendBlock>:
 * @param  buf ��д������ݣ�size=512
 * @param  cmd ָ��
 * @return     0���ɹ�  other��ʧ��
 */
uint8_t SD_SendBlock(uint8_t*buf, uint8_t cmd)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	460b      	mov	r3, r1
 8004f98:	70fb      	strb	r3, [r7, #3]
    uint16_t t;
    if (SD_WaitReady())return 1; //�ȴ�׼��ʧЧ
 8004f9a:	f7ff ff95 	bl	8004ec8 <SD_WaitReady>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <SD_SendBlock+0x1a>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e02a      	b.n	8004ffe <SD_SendBlock+0x70>
    SD_SPI_ReadWriteByte(cmd);
 8004fa8:	78fb      	ldrb	r3, [r7, #3]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7ff ff40 	bl	8004e30 <SD_SPI_ReadWriteByte>
    if (cmd != 0XFD) //���ǽ���ָ��
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	2bfd      	cmp	r3, #253	; 0xfd
 8004fb4:	d022      	beq.n	8004ffc <SD_SendBlock+0x6e>
    {
        for (t = 0; t < 512; t++)SD_SPI_ReadWriteByte(buf[t]); //����ٶ�,���ٺ�������ʱ��
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	81fb      	strh	r3, [r7, #14]
 8004fba:	e009      	b.n	8004fd0 <SD_SendBlock+0x42>
 8004fbc:	89fb      	ldrh	r3, [r7, #14]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff ff33 	bl	8004e30 <SD_SPI_ReadWriteByte>
 8004fca:	89fb      	ldrh	r3, [r7, #14]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	81fb      	strh	r3, [r7, #14]
 8004fd0:	89fb      	ldrh	r3, [r7, #14]
 8004fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fd6:	d3f1      	bcc.n	8004fbc <SD_SendBlock+0x2e>
        SD_SPI_ReadWriteByte(0xFF);//����crc
 8004fd8:	20ff      	movs	r0, #255	; 0xff
 8004fda:	f7ff ff29 	bl	8004e30 <SD_SPI_ReadWriteByte>
        SD_SPI_ReadWriteByte(0xFF);
 8004fde:	20ff      	movs	r0, #255	; 0xff
 8004fe0:	f7ff ff26 	bl	8004e30 <SD_SPI_ReadWriteByte>
        t = SD_SPI_ReadWriteByte(0xFF); //������Ӧ
 8004fe4:	20ff      	movs	r0, #255	; 0xff
 8004fe6:	f7ff ff23 	bl	8004e30 <SD_SPI_ReadWriteByte>
 8004fea:	4603      	mov	r3, r0
 8004fec:	81fb      	strh	r3, [r7, #14]
        if ((t & 0x1F) != 0x05)return 2; //��Ӧ����
 8004fee:	89fb      	ldrh	r3, [r7, #14]
 8004ff0:	f003 031f 	and.w	r3, r3, #31
 8004ff4:	2b05      	cmp	r3, #5
 8004ff6:	d001      	beq.n	8004ffc <SD_SendBlock+0x6e>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	e000      	b.n	8004ffe <SD_SendBlock+0x70>
    }
    return 0;//д��ɹ�
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <SD_SendCmd>:
 * @param  arg ����
 * @param  crc crcУ��ֵ
 * @return     SD�����ص���Ӧֵ
 */
uint8_t SD_SendCmd(uint8_t cmd, uint32_t arg, uint8_t crc)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	4603      	mov	r3, r0
 800500e:	6039      	str	r1, [r7, #0]
 8005010:	71fb      	strb	r3, [r7, #7]
 8005012:	4613      	mov	r3, r2
 8005014:	71bb      	strb	r3, [r7, #6]
    uint8_t r1;
    uint8_t Retry = 0;
 8005016:	2300      	movs	r3, #0
 8005018:	73fb      	strb	r3, [r7, #15]
    SD_DisSelect();//ȡ���ϴ�Ƭѡ
 800501a:	f7ff ff31 	bl	8004e80 <SD_DisSelect>
    if (SD_Select())return 0XFF; //ƬѡʧЧ
 800501e:	f7ff ff3d 	bl	8004e9c <SD_Select>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <SD_SendCmd+0x26>
 8005028:	23ff      	movs	r3, #255	; 0xff
 800502a:	e038      	b.n	800509e <SD_SendCmd+0x98>
    //����
    SD_SPI_ReadWriteByte(cmd | 0x40);//�ֱ�д������
 800502c:	79fb      	ldrb	r3, [r7, #7]
 800502e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005032:	b2db      	uxtb	r3, r3
 8005034:	4618      	mov	r0, r3
 8005036:	f7ff fefb 	bl	8004e30 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg >> 24);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	0e1b      	lsrs	r3, r3, #24
 800503e:	b2db      	uxtb	r3, r3
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff fef5 	bl	8004e30 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg >> 16);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	0c1b      	lsrs	r3, r3, #16
 800504a:	b2db      	uxtb	r3, r3
 800504c:	4618      	mov	r0, r3
 800504e:	f7ff feef 	bl	8004e30 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg >> 8);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	0a1b      	lsrs	r3, r3, #8
 8005056:	b2db      	uxtb	r3, r3
 8005058:	4618      	mov	r0, r3
 800505a:	f7ff fee9 	bl	8004e30 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	b2db      	uxtb	r3, r3
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff fee4 	bl	8004e30 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(crc);
 8005068:	79bb      	ldrb	r3, [r7, #6]
 800506a:	4618      	mov	r0, r3
 800506c:	f7ff fee0 	bl	8004e30 <SD_SPI_ReadWriteByte>
    if (cmd == CMD12)SD_SPI_ReadWriteByte(0xff); //Skip a stuff byte when stop reading
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	2b0c      	cmp	r3, #12
 8005074:	d102      	bne.n	800507c <SD_SendCmd+0x76>
 8005076:	20ff      	movs	r0, #255	; 0xff
 8005078:	f7ff feda 	bl	8004e30 <SD_SPI_ReadWriteByte>
    //�ȴ���Ӧ����ʱ�˳�
    Retry = 0X1F;
 800507c:	231f      	movs	r3, #31
 800507e:	73fb      	strb	r3, [r7, #15]
    do
    {
        r1 = SD_SPI_ReadWriteByte(0xFF);
 8005080:	20ff      	movs	r0, #255	; 0xff
 8005082:	f7ff fed5 	bl	8004e30 <SD_SPI_ReadWriteByte>
 8005086:	4603      	mov	r3, r0
 8005088:	73bb      	strb	r3, [r7, #14]
    }
    while ((r1 & 0X80) && Retry--);
 800508a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800508e:	2b00      	cmp	r3, #0
 8005090:	da04      	bge.n	800509c <SD_SendCmd+0x96>
 8005092:	7bfb      	ldrb	r3, [r7, #15]
 8005094:	1e5a      	subs	r2, r3, #1
 8005096:	73fa      	strb	r2, [r7, #15]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1f1      	bne.n	8005080 <SD_SendCmd+0x7a>
    //����״ֵ̬
    return r1;
 800509c:	7bbb      	ldrb	r3, [r7, #14]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <SD_GetCSD>:
 * ��ѯSD��CID��Ϣ��������������Ϣ
 * @param  csd_data ���CID��Ϣ������16�ֽ�
 * @return          0���ɹ�  1��ʧ��
 */
uint8_t SD_GetCSD(uint8_t *csd_data)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b084      	sub	sp, #16
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
    uint8_t r1;
    r1 = SD_SendCmd(CMD9, 0, 0x01); //��CMD9�����CSD
 80050ae:	2201      	movs	r2, #1
 80050b0:	2100      	movs	r1, #0
 80050b2:	2009      	movs	r0, #9
 80050b4:	f7ff ffa7 	bl	8005006 <SD_SendCmd>
 80050b8:	4603      	mov	r3, r0
 80050ba:	73fb      	strb	r3, [r7, #15]
    if (r1 == 0)
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d105      	bne.n	80050ce <SD_GetCSD+0x28>
    {
        r1 = SD_RecvData(csd_data, 16); //����16���ֽڵ�����
 80050c2:	2110      	movs	r1, #16
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7ff ff3a 	bl	8004f3e <SD_RecvData>
 80050ca:	4603      	mov	r3, r0
 80050cc:	73fb      	strb	r3, [r7, #15]
    }
    SD_DisSelect();//ȡ��Ƭѡ
 80050ce:	f7ff fed7 	bl	8004e80 <SD_DisSelect>
    if (r1)return 1;
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <SD_GetCSD+0x36>
 80050d8:	2301      	movs	r3, #1
 80050da:	e000      	b.n	80050de <SD_GetCSD+0x38>
    else return 0;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <SD_GetSectorCount>:
/**
 * ��ȡSD��������
 * @return  0����ȡ����  other��SD��������
 */
uint32_t SD_GetSectorCount(void)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b086      	sub	sp, #24
 80050ea:	af00      	add	r7, sp, #0
    uint8_t csd[16];
    uint32_t Capacity;
    uint8_t n;
    uint16_t csize;
    //ȡCSD��Ϣ������ڼ��������0
    if (SD_GetCSD(csd) != 0) return 0;
 80050ec:	463b      	mov	r3, r7
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7ff ffd9 	bl	80050a6 <SD_GetCSD>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <SD_GetSectorCount+0x18>
 80050fa:	2300      	movs	r3, #0
 80050fc:	e040      	b.n	8005180 <SD_GetSectorCount+0x9a>
    //���ΪSDHC�����������淽ʽ����
    if ((csd[0] & 0xC0) == 0x40)	 //V2.00�Ŀ�
 80050fe:	783b      	ldrb	r3, [r7, #0]
 8005100:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005104:	2b40      	cmp	r3, #64	; 0x40
 8005106:	d10d      	bne.n	8005124 <SD_GetSectorCount+0x3e>
    {
        csize = csd[9] + ((uint16_t)csd[8] << 8) + 1;
 8005108:	7a7b      	ldrb	r3, [r7, #9]
 800510a:	b29a      	uxth	r2, r3
 800510c:	7a3b      	ldrb	r3, [r7, #8]
 800510e:	b29b      	uxth	r3, r3
 8005110:	021b      	lsls	r3, r3, #8
 8005112:	b29b      	uxth	r3, r3
 8005114:	4413      	add	r3, r2
 8005116:	b29b      	uxth	r3, r3
 8005118:	3301      	adds	r3, #1
 800511a:	823b      	strh	r3, [r7, #16]
        Capacity = (uint32_t)csize << 10;//�õ�������
 800511c:	8a3b      	ldrh	r3, [r7, #16]
 800511e:	029b      	lsls	r3, r3, #10
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	e02c      	b.n	800517e <SD_GetSectorCount+0x98>
    }
    else //V1.XX�Ŀ�
    {
        n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005124:	797b      	ldrb	r3, [r7, #5]
 8005126:	f003 030f 	and.w	r3, r3, #15
 800512a:	b2da      	uxtb	r2, r3
 800512c:	7abb      	ldrb	r3, [r7, #10]
 800512e:	09db      	lsrs	r3, r3, #7
 8005130:	b2db      	uxtb	r3, r3
 8005132:	4413      	add	r3, r2
 8005134:	b2da      	uxtb	r2, r3
 8005136:	7a7b      	ldrb	r3, [r7, #9]
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	b2db      	uxtb	r3, r3
 800513c:	f003 0306 	and.w	r3, r3, #6
 8005140:	b2db      	uxtb	r3, r3
 8005142:	4413      	add	r3, r2
 8005144:	b2db      	uxtb	r3, r3
 8005146:	3302      	adds	r3, #2
 8005148:	74fb      	strb	r3, [r7, #19]
        csize = (csd[8] >> 6) + ((uint16_t)csd[7] << 2) + ((uint16_t)(csd[6] & 3) << 10) + 1;
 800514a:	7a3b      	ldrb	r3, [r7, #8]
 800514c:	099b      	lsrs	r3, r3, #6
 800514e:	b2db      	uxtb	r3, r3
 8005150:	b29a      	uxth	r2, r3
 8005152:	79fb      	ldrb	r3, [r7, #7]
 8005154:	b29b      	uxth	r3, r3
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	b29b      	uxth	r3, r3
 800515a:	4413      	add	r3, r2
 800515c:	b29a      	uxth	r2, r3
 800515e:	79bb      	ldrb	r3, [r7, #6]
 8005160:	029b      	lsls	r3, r3, #10
 8005162:	b29b      	uxth	r3, r3
 8005164:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005168:	b29b      	uxth	r3, r3
 800516a:	4413      	add	r3, r2
 800516c:	b29b      	uxth	r3, r3
 800516e:	3301      	adds	r3, #1
 8005170:	823b      	strh	r3, [r7, #16]
        Capacity = (uint32_t)csize << (n - 9); //�õ�������
 8005172:	8a3a      	ldrh	r2, [r7, #16]
 8005174:	7cfb      	ldrb	r3, [r7, #19]
 8005176:	3b09      	subs	r3, #9
 8005178:	fa02 f303 	lsl.w	r3, r2, r3
 800517c:	617b      	str	r3, [r7, #20]
    }
    return Capacity;
 800517e:	697b      	ldr	r3, [r7, #20]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3718      	adds	r7, #24
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <SD_Initialize>:
    if (retry == 200)return 1; //ʧ��
    return 0;//�ɹ�
}
/// ��ʼ��SD��
uint8_t SD_Initialize(void)
{
 8005188:	b590      	push	{r4, r7, lr}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
    uint8_t r1;      // ���SD���ķ���ֵ
    uint16_t retry;  // �������г�ʱ����
    uint8_t buf[4];
    uint16_t i;

    SD_SPI_Init();		//��ʼ��IO
 800518e:	f7ff fe5d 	bl	8004e4c <SD_SPI_Init>
	//for(i=0;i<0xf00;i++);//����ʱ���ȴ�SD���ϵ����
//    SD_Select();
    for (i = 0; i < 10; i++)SD_SPI_ReadWriteByte(0XFF); //��������74������
 8005192:	2300      	movs	r3, #0
 8005194:	817b      	strh	r3, [r7, #10]
 8005196:	e005      	b.n	80051a4 <SD_Initialize+0x1c>
 8005198:	20ff      	movs	r0, #255	; 0xff
 800519a:	f7ff fe49 	bl	8004e30 <SD_SPI_ReadWriteByte>
 800519e:	897b      	ldrh	r3, [r7, #10]
 80051a0:	3301      	adds	r3, #1
 80051a2:	817b      	strh	r3, [r7, #10]
 80051a4:	897b      	ldrh	r3, [r7, #10]
 80051a6:	2b09      	cmp	r3, #9
 80051a8:	d9f6      	bls.n	8005198 <SD_Initialize+0x10>
    retry = 20;
 80051aa:	2314      	movs	r3, #20
 80051ac:	81bb      	strh	r3, [r7, #12]
    do
    {
        r1 = SD_SendCmd(CMD0, 0, 0x95); //����IDLE״̬
 80051ae:	2295      	movs	r2, #149	; 0x95
 80051b0:	2100      	movs	r1, #0
 80051b2:	2000      	movs	r0, #0
 80051b4:	f7ff ff27 	bl	8005006 <SD_SendCmd>
 80051b8:	4603      	mov	r3, r0
 80051ba:	73fb      	strb	r3, [r7, #15]
    }
    while ((r1 != 0X01) && retry--);
 80051bc:	7bfb      	ldrb	r3, [r7, #15]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d004      	beq.n	80051cc <SD_Initialize+0x44>
 80051c2:	89bb      	ldrh	r3, [r7, #12]
 80051c4:	1e5a      	subs	r2, r3, #1
 80051c6:	81ba      	strh	r2, [r7, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1f0      	bne.n	80051ae <SD_Initialize+0x26>
    SD_Type = 0; //Ĭ���޿�
 80051cc:	4b67      	ldr	r3, [pc, #412]	; (800536c <SD_Initialize+0x1e4>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	701a      	strb	r2, [r3, #0]
    if (r1 == 0X01)
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	f040 80b7 	bne.w	8005348 <SD_Initialize+0x1c0>
    {
        if (SD_SendCmd(CMD8, 0x1AA, 0x87) == 1) //SD V2.0
 80051da:	2287      	movs	r2, #135	; 0x87
 80051dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80051e0:	2008      	movs	r0, #8
 80051e2:	f7ff ff10 	bl	8005006 <SD_SendCmd>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d15f      	bne.n	80052ac <SD_Initialize+0x124>
        {
            for (i = 0; i < 4; i++)buf[i] = SD_SPI_ReadWriteByte(0XFF);	//Get trailing return value of R7 resp
 80051ec:	2300      	movs	r3, #0
 80051ee:	817b      	strh	r3, [r7, #10]
 80051f0:	e00d      	b.n	800520e <SD_Initialize+0x86>
 80051f2:	897c      	ldrh	r4, [r7, #10]
 80051f4:	20ff      	movs	r0, #255	; 0xff
 80051f6:	f7ff fe1b 	bl	8004e30 <SD_SPI_ReadWriteByte>
 80051fa:	4603      	mov	r3, r0
 80051fc:	461a      	mov	r2, r3
 80051fe:	f104 0310 	add.w	r3, r4, #16
 8005202:	443b      	add	r3, r7
 8005204:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8005208:	897b      	ldrh	r3, [r7, #10]
 800520a:	3301      	adds	r3, #1
 800520c:	817b      	strh	r3, [r7, #10]
 800520e:	897b      	ldrh	r3, [r7, #10]
 8005210:	2b03      	cmp	r3, #3
 8005212:	d9ee      	bls.n	80051f2 <SD_Initialize+0x6a>
            if (buf[2] == 0X01 && buf[3] == 0XAA) //���Ƿ�֧��2.7~3.6V
 8005214:	79bb      	ldrb	r3, [r7, #6]
 8005216:	2b01      	cmp	r3, #1
 8005218:	f040 8096 	bne.w	8005348 <SD_Initialize+0x1c0>
 800521c:	79fb      	ldrb	r3, [r7, #7]
 800521e:	2baa      	cmp	r3, #170	; 0xaa
 8005220:	f040 8092 	bne.w	8005348 <SD_Initialize+0x1c0>
            {
                retry = 0XFFFE;
 8005224:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005228:	81bb      	strh	r3, [r7, #12]
                do
                {
                    SD_SendCmd(CMD55, 0, 0X01);	//����CMD55
 800522a:	2201      	movs	r2, #1
 800522c:	2100      	movs	r1, #0
 800522e:	2037      	movs	r0, #55	; 0x37
 8005230:	f7ff fee9 	bl	8005006 <SD_SendCmd>
                    r1 = SD_SendCmd(CMD41, 0x40000000, 0X01); //����CMD41
 8005234:	2201      	movs	r2, #1
 8005236:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800523a:	2029      	movs	r0, #41	; 0x29
 800523c:	f7ff fee3 	bl	8005006 <SD_SendCmd>
 8005240:	4603      	mov	r3, r0
 8005242:	73fb      	strb	r3, [r7, #15]
                }
                while (r1 && retry--);
 8005244:	7bfb      	ldrb	r3, [r7, #15]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d004      	beq.n	8005254 <SD_Initialize+0xcc>
 800524a:	89bb      	ldrh	r3, [r7, #12]
 800524c:	1e5a      	subs	r2, r3, #1
 800524e:	81ba      	strh	r2, [r7, #12]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1ea      	bne.n	800522a <SD_Initialize+0xa2>
                if (retry && SD_SendCmd(CMD58, 0, 0X01) == 0) //����SD2.0���汾��ʼ
 8005254:	89bb      	ldrh	r3, [r7, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d076      	beq.n	8005348 <SD_Initialize+0x1c0>
 800525a:	2201      	movs	r2, #1
 800525c:	2100      	movs	r1, #0
 800525e:	203a      	movs	r0, #58	; 0x3a
 8005260:	f7ff fed1 	bl	8005006 <SD_SendCmd>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d16e      	bne.n	8005348 <SD_Initialize+0x1c0>
                {
                    for (i = 0; i < 4; i++)buf[i] = SD_SPI_ReadWriteByte(0XFF); //�õ�OCRֵ
 800526a:	2300      	movs	r3, #0
 800526c:	817b      	strh	r3, [r7, #10]
 800526e:	e00d      	b.n	800528c <SD_Initialize+0x104>
 8005270:	897c      	ldrh	r4, [r7, #10]
 8005272:	20ff      	movs	r0, #255	; 0xff
 8005274:	f7ff fddc 	bl	8004e30 <SD_SPI_ReadWriteByte>
 8005278:	4603      	mov	r3, r0
 800527a:	461a      	mov	r2, r3
 800527c:	f104 0310 	add.w	r3, r4, #16
 8005280:	443b      	add	r3, r7
 8005282:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8005286:	897b      	ldrh	r3, [r7, #10]
 8005288:	3301      	adds	r3, #1
 800528a:	817b      	strh	r3, [r7, #10]
 800528c:	897b      	ldrh	r3, [r7, #10]
 800528e:	2b03      	cmp	r3, #3
 8005290:	d9ee      	bls.n	8005270 <SD_Initialize+0xe8>
                    if (buf[0] & 0x40)SD_Type = SD_TYPE_V2HC; //���CCS
 8005292:	793b      	ldrb	r3, [r7, #4]
 8005294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <SD_Initialize+0x11c>
 800529c:	4b33      	ldr	r3, [pc, #204]	; (800536c <SD_Initialize+0x1e4>)
 800529e:	2206      	movs	r2, #6
 80052a0:	701a      	strb	r2, [r3, #0]
 80052a2:	e051      	b.n	8005348 <SD_Initialize+0x1c0>
                    else SD_Type = SD_TYPE_V2;
 80052a4:	4b31      	ldr	r3, [pc, #196]	; (800536c <SD_Initialize+0x1e4>)
 80052a6:	2204      	movs	r2, #4
 80052a8:	701a      	strb	r2, [r3, #0]
 80052aa:	e04d      	b.n	8005348 <SD_Initialize+0x1c0>
                }
            }
        }
        else //SD V1.x/ MMC	V3
        {
            SD_SendCmd(CMD55, 0, 0X01);		//����CMD55
 80052ac:	2201      	movs	r2, #1
 80052ae:	2100      	movs	r1, #0
 80052b0:	2037      	movs	r0, #55	; 0x37
 80052b2:	f7ff fea8 	bl	8005006 <SD_SendCmd>
            r1 = SD_SendCmd(CMD41, 0, 0X01);	//����CMD41
 80052b6:	2201      	movs	r2, #1
 80052b8:	2100      	movs	r1, #0
 80052ba:	2029      	movs	r0, #41	; 0x29
 80052bc:	f7ff fea3 	bl	8005006 <SD_SendCmd>
 80052c0:	4603      	mov	r3, r0
 80052c2:	73fb      	strb	r3, [r7, #15]
            if (r1 <= 1)
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d81a      	bhi.n	8005300 <SD_Initialize+0x178>
            {
                SD_Type = SD_TYPE_V1;
 80052ca:	4b28      	ldr	r3, [pc, #160]	; (800536c <SD_Initialize+0x1e4>)
 80052cc:	2202      	movs	r2, #2
 80052ce:	701a      	strb	r2, [r3, #0]
                retry = 0XFFFE;
 80052d0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80052d4:	81bb      	strh	r3, [r7, #12]
                do //�ȴ��˳�IDLEģʽ
                {
                    SD_SendCmd(CMD55, 0, 0X01);	//����CMD55
 80052d6:	2201      	movs	r2, #1
 80052d8:	2100      	movs	r1, #0
 80052da:	2037      	movs	r0, #55	; 0x37
 80052dc:	f7ff fe93 	bl	8005006 <SD_SendCmd>
                    r1 = SD_SendCmd(CMD41, 0, 0X01); //����CMD41
 80052e0:	2201      	movs	r2, #1
 80052e2:	2100      	movs	r1, #0
 80052e4:	2029      	movs	r0, #41	; 0x29
 80052e6:	f7ff fe8e 	bl	8005006 <SD_SendCmd>
 80052ea:	4603      	mov	r3, r0
 80052ec:	73fb      	strb	r3, [r7, #15]
                }
                while (r1 && retry--);
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d01a      	beq.n	800532a <SD_Initialize+0x1a2>
 80052f4:	89bb      	ldrh	r3, [r7, #12]
 80052f6:	1e5a      	subs	r2, r3, #1
 80052f8:	81ba      	strh	r2, [r7, #12]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1eb      	bne.n	80052d6 <SD_Initialize+0x14e>
 80052fe:	e014      	b.n	800532a <SD_Initialize+0x1a2>
            }
            else
            {
                SD_Type = SD_TYPE_MMC; //MMC V3
 8005300:	4b1a      	ldr	r3, [pc, #104]	; (800536c <SD_Initialize+0x1e4>)
 8005302:	2201      	movs	r2, #1
 8005304:	701a      	strb	r2, [r3, #0]
                retry = 0XFFFE;
 8005306:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800530a:	81bb      	strh	r3, [r7, #12]
                do //�ȴ��˳�IDLEģʽ
                {
                    r1 = SD_SendCmd(CMD1, 0, 0X01); //����CMD1
 800530c:	2201      	movs	r2, #1
 800530e:	2100      	movs	r1, #0
 8005310:	2001      	movs	r0, #1
 8005312:	f7ff fe78 	bl	8005006 <SD_SendCmd>
 8005316:	4603      	mov	r3, r0
 8005318:	73fb      	strb	r3, [r7, #15]
                }
                while (r1 && retry--);
 800531a:	7bfb      	ldrb	r3, [r7, #15]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d004      	beq.n	800532a <SD_Initialize+0x1a2>
 8005320:	89bb      	ldrh	r3, [r7, #12]
 8005322:	1e5a      	subs	r2, r3, #1
 8005324:	81ba      	strh	r2, [r7, #12]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1f0      	bne.n	800530c <SD_Initialize+0x184>
            }
            if (retry == 0 || SD_SendCmd(CMD16, 512, 0X01) != 0)SD_Type = SD_TYPE_ERR; //����Ŀ�
 800532a:	89bb      	ldrh	r3, [r7, #12]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d008      	beq.n	8005342 <SD_Initialize+0x1ba>
 8005330:	2201      	movs	r2, #1
 8005332:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005336:	2010      	movs	r0, #16
 8005338:	f7ff fe65 	bl	8005006 <SD_SendCmd>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <SD_Initialize+0x1c0>
 8005342:	4b0a      	ldr	r3, [pc, #40]	; (800536c <SD_Initialize+0x1e4>)
 8005344:	2200      	movs	r2, #0
 8005346:	701a      	strb	r2, [r3, #0]
        }
    }
    SD_DisSelect();//ȡ��Ƭѡ
 8005348:	f7ff fd9a 	bl	8004e80 <SD_DisSelect>
    if (SD_Type)return 0;
 800534c:	4b07      	ldr	r3, [pc, #28]	; (800536c <SD_Initialize+0x1e4>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <SD_Initialize+0x1d0>
 8005354:	2300      	movs	r3, #0
 8005356:	e005      	b.n	8005364 <SD_Initialize+0x1dc>
    else if (r1)return r1;
 8005358:	7bfb      	ldrb	r3, [r7, #15]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <SD_Initialize+0x1da>
 800535e:	7bfb      	ldrb	r3, [r7, #15]
 8005360:	e000      	b.n	8005364 <SD_Initialize+0x1dc>
    return 0xaa;//��������
 8005362:	23aa      	movs	r3, #170	; 0xaa
}
 8005364:	4618      	mov	r0, r3
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	bd90      	pop	{r4, r7, pc}
 800536c:	20000860 	.word	0x20000860

08005370 <SD_ReadDisk>:
 * @param  sector �������
 * @param  cnt    Ҫ��ȡ����������
 * @return        0���ɹ�  other��ʧ��
 */
uint8_t SD_ReadDisk(uint8_t*buf, uint32_t sector, uint8_t cnt)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	4613      	mov	r3, r2
 800537c:	71fb      	strb	r3, [r7, #7]
    uint8_t r1;
    if (SD_Type != SD_TYPE_V2HC)sector <<= 9; //ת��Ϊ�ֽڵ�ַ
 800537e:	4b21      	ldr	r3, [pc, #132]	; (8005404 <SD_ReadDisk+0x94>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b06      	cmp	r3, #6
 8005384:	d002      	beq.n	800538c <SD_ReadDisk+0x1c>
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	025b      	lsls	r3, r3, #9
 800538a:	60bb      	str	r3, [r7, #8]
    if (cnt == 1)
 800538c:	79fb      	ldrb	r3, [r7, #7]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d111      	bne.n	80053b6 <SD_ReadDisk+0x46>
    {
        r1 = SD_SendCmd(CMD17, sector, 0X01); //������
 8005392:	2201      	movs	r2, #1
 8005394:	68b9      	ldr	r1, [r7, #8]
 8005396:	2011      	movs	r0, #17
 8005398:	f7ff fe35 	bl	8005006 <SD_SendCmd>
 800539c:	4603      	mov	r3, r0
 800539e:	75fb      	strb	r3, [r7, #23]
        if (r1 == 0) //ָ��ͳɹ�
 80053a0:	7dfb      	ldrb	r3, [r7, #23]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d127      	bne.n	80053f6 <SD_ReadDisk+0x86>
        {
            r1 = SD_RecvData(buf, 512); //����512���ֽ�
 80053a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f7ff fdc7 	bl	8004f3e <SD_RecvData>
 80053b0:	4603      	mov	r3, r0
 80053b2:	75fb      	strb	r3, [r7, #23]
 80053b4:	e01f      	b.n	80053f6 <SD_ReadDisk+0x86>
        }
    }
    else
    {
        r1 = SD_SendCmd(CMD18, sector, 0X01); //����������
 80053b6:	2201      	movs	r2, #1
 80053b8:	68b9      	ldr	r1, [r7, #8]
 80053ba:	2012      	movs	r0, #18
 80053bc:	f7ff fe23 	bl	8005006 <SD_SendCmd>
 80053c0:	4603      	mov	r3, r0
 80053c2:	75fb      	strb	r3, [r7, #23]
        do
        {
            r1 = SD_RecvData(buf, 512); //����512���ֽ�
 80053c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f7ff fdb8 	bl	8004f3e <SD_RecvData>
 80053ce:	4603      	mov	r3, r0
 80053d0:	75fb      	strb	r3, [r7, #23]
            buf += 512;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80053d8:	60fb      	str	r3, [r7, #12]
        }
        while (--cnt && r1 == 0);
 80053da:	79fb      	ldrb	r3, [r7, #7]
 80053dc:	3b01      	subs	r3, #1
 80053de:	71fb      	strb	r3, [r7, #7]
 80053e0:	79fb      	ldrb	r3, [r7, #7]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <SD_ReadDisk+0x7c>
 80053e6:	7dfb      	ldrb	r3, [r7, #23]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d0eb      	beq.n	80053c4 <SD_ReadDisk+0x54>
        SD_SendCmd(CMD12, 0, 0X01);	//����ֹͣ����
 80053ec:	2201      	movs	r2, #1
 80053ee:	2100      	movs	r1, #0
 80053f0:	200c      	movs	r0, #12
 80053f2:	f7ff fe08 	bl	8005006 <SD_SendCmd>
    }
    SD_DisSelect();//ȡ��Ƭѡ
 80053f6:	f7ff fd43 	bl	8004e80 <SD_DisSelect>
    return r1;//
 80053fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20000860 	.word	0x20000860

08005408 <SD_WriteDisk>:
 * @param  sector �������
 * @param  cnt    Ҫд�����������
 * @return        0���ɹ�  other��ʧ��
 */
uint8_t SD_WriteDisk(uint8_t*buf, uint32_t sector, uint8_t cnt)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	4613      	mov	r3, r2
 8005414:	71fb      	strb	r3, [r7, #7]
    uint8_t r1;
    if (SD_Type != SD_TYPE_V2HC)sector *= 512; //ת��Ϊ�ֽڵ�ַ
 8005416:	4b2a      	ldr	r3, [pc, #168]	; (80054c0 <SD_WriteDisk+0xb8>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b06      	cmp	r3, #6
 800541c:	d002      	beq.n	8005424 <SD_WriteDisk+0x1c>
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	025b      	lsls	r3, r3, #9
 8005422:	60bb      	str	r3, [r7, #8]
    if (cnt == 1)
 8005424:	79fb      	ldrb	r3, [r7, #7]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d110      	bne.n	800544c <SD_WriteDisk+0x44>
    {
        r1 = SD_SendCmd(CMD24, sector, 0X01); //������
 800542a:	2201      	movs	r2, #1
 800542c:	68b9      	ldr	r1, [r7, #8]
 800542e:	2018      	movs	r0, #24
 8005430:	f7ff fde9 	bl	8005006 <SD_SendCmd>
 8005434:	4603      	mov	r3, r0
 8005436:	75fb      	strb	r3, [r7, #23]
        if (r1 == 0) //ָ��ͳɹ�
 8005438:	7dfb      	ldrb	r3, [r7, #23]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d138      	bne.n	80054b0 <SD_WriteDisk+0xa8>
        {
            r1 = SD_SendBlock(buf, 0xFE); //д512���ֽ�
 800543e:	21fe      	movs	r1, #254	; 0xfe
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f7ff fda4 	bl	8004f8e <SD_SendBlock>
 8005446:	4603      	mov	r3, r0
 8005448:	75fb      	strb	r3, [r7, #23]
 800544a:	e031      	b.n	80054b0 <SD_WriteDisk+0xa8>
        }
    }
    else
    {
        if (SD_Type != SD_TYPE_MMC)
 800544c:	4b1c      	ldr	r3, [pc, #112]	; (80054c0 <SD_WriteDisk+0xb8>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d00a      	beq.n	800546a <SD_WriteDisk+0x62>
        {
            SD_SendCmd(CMD55, 0, 0X01);
 8005454:	2201      	movs	r2, #1
 8005456:	2100      	movs	r1, #0
 8005458:	2037      	movs	r0, #55	; 0x37
 800545a:	f7ff fdd4 	bl	8005006 <SD_SendCmd>
            SD_SendCmd(CMD23, cnt, 0X01); //����ָ��
 800545e:	79fb      	ldrb	r3, [r7, #7]
 8005460:	2201      	movs	r2, #1
 8005462:	4619      	mov	r1, r3
 8005464:	2017      	movs	r0, #23
 8005466:	f7ff fdce 	bl	8005006 <SD_SendCmd>
        }
        r1 = SD_SendCmd(CMD25, sector, 0X01); //����������
 800546a:	2201      	movs	r2, #1
 800546c:	68b9      	ldr	r1, [r7, #8]
 800546e:	2019      	movs	r0, #25
 8005470:	f7ff fdc9 	bl	8005006 <SD_SendCmd>
 8005474:	4603      	mov	r3, r0
 8005476:	75fb      	strb	r3, [r7, #23]
        if (r1 == 0)
 8005478:	7dfb      	ldrb	r3, [r7, #23]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d118      	bne.n	80054b0 <SD_WriteDisk+0xa8>
        {
            do
            {
                r1 = SD_SendBlock(buf, 0xFC); //����512���ֽ�
 800547e:	21fc      	movs	r1, #252	; 0xfc
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f7ff fd84 	bl	8004f8e <SD_SendBlock>
 8005486:	4603      	mov	r3, r0
 8005488:	75fb      	strb	r3, [r7, #23]
                buf += 512;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005490:	60fb      	str	r3, [r7, #12]
            }
            while (--cnt && r1 == 0);
 8005492:	79fb      	ldrb	r3, [r7, #7]
 8005494:	3b01      	subs	r3, #1
 8005496:	71fb      	strb	r3, [r7, #7]
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d002      	beq.n	80054a4 <SD_WriteDisk+0x9c>
 800549e:	7dfb      	ldrb	r3, [r7, #23]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0ec      	beq.n	800547e <SD_WriteDisk+0x76>
            r1 = SD_SendBlock(0, 0xFD); //����512���ֽ�
 80054a4:	21fd      	movs	r1, #253	; 0xfd
 80054a6:	2000      	movs	r0, #0
 80054a8:	f7ff fd71 	bl	8004f8e <SD_SendBlock>
 80054ac:	4603      	mov	r3, r0
 80054ae:	75fb      	strb	r3, [r7, #23]
        }
    }
    SD_DisSelect();//ȡ��Ƭѡ
 80054b0:	f7ff fce6 	bl	8004e80 <SD_DisSelect>
    return r1;//
 80054b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	20000860 	.word	0x20000860

080054c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054ca:	2300      	movs	r3, #0
 80054cc:	607b      	str	r3, [r7, #4]
 80054ce:	4b10      	ldr	r3, [pc, #64]	; (8005510 <HAL_MspInit+0x4c>)
 80054d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d2:	4a0f      	ldr	r2, [pc, #60]	; (8005510 <HAL_MspInit+0x4c>)
 80054d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054d8:	6453      	str	r3, [r2, #68]	; 0x44
 80054da:	4b0d      	ldr	r3, [pc, #52]	; (8005510 <HAL_MspInit+0x4c>)
 80054dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054e2:	607b      	str	r3, [r7, #4]
 80054e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054e6:	2300      	movs	r3, #0
 80054e8:	603b      	str	r3, [r7, #0]
 80054ea:	4b09      	ldr	r3, [pc, #36]	; (8005510 <HAL_MspInit+0x4c>)
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	4a08      	ldr	r2, [pc, #32]	; (8005510 <HAL_MspInit+0x4c>)
 80054f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054f4:	6413      	str	r3, [r2, #64]	; 0x40
 80054f6:	4b06      	ldr	r3, [pc, #24]	; (8005510 <HAL_MspInit+0x4c>)
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054fe:	603b      	str	r3, [r7, #0]
 8005500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005502:	bf00      	nop
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	40023800 	.word	0x40023800

08005514 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b08c      	sub	sp, #48	; 0x30
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800551c:	f107 031c 	add.w	r3, r7, #28
 8005520:	2200      	movs	r2, #0
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	605a      	str	r2, [r3, #4]
 8005526:	609a      	str	r2, [r3, #8]
 8005528:	60da      	str	r2, [r3, #12]
 800552a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a33      	ldr	r2, [pc, #204]	; (8005600 <HAL_I2C_MspInit+0xec>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d12d      	bne.n	8005592 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005536:	2300      	movs	r3, #0
 8005538:	61bb      	str	r3, [r7, #24]
 800553a:	4b32      	ldr	r3, [pc, #200]	; (8005604 <HAL_I2C_MspInit+0xf0>)
 800553c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553e:	4a31      	ldr	r2, [pc, #196]	; (8005604 <HAL_I2C_MspInit+0xf0>)
 8005540:	f043 0302 	orr.w	r3, r3, #2
 8005544:	6313      	str	r3, [r2, #48]	; 0x30
 8005546:	4b2f      	ldr	r3, [pc, #188]	; (8005604 <HAL_I2C_MspInit+0xf0>)
 8005548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	61bb      	str	r3, [r7, #24]
 8005550:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8005552:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005558:	2312      	movs	r3, #18
 800555a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800555c:	2300      	movs	r3, #0
 800555e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005560:	2303      	movs	r3, #3
 8005562:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005564:	2304      	movs	r3, #4
 8005566:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005568:	f107 031c 	add.w	r3, r7, #28
 800556c:	4619      	mov	r1, r3
 800556e:	4826      	ldr	r0, [pc, #152]	; (8005608 <HAL_I2C_MspInit+0xf4>)
 8005570:	f001 faf4 	bl	8006b5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005574:	2300      	movs	r3, #0
 8005576:	617b      	str	r3, [r7, #20]
 8005578:	4b22      	ldr	r3, [pc, #136]	; (8005604 <HAL_I2C_MspInit+0xf0>)
 800557a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557c:	4a21      	ldr	r2, [pc, #132]	; (8005604 <HAL_I2C_MspInit+0xf0>)
 800557e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005582:	6413      	str	r3, [r2, #64]	; 0x40
 8005584:	4b1f      	ldr	r3, [pc, #124]	; (8005604 <HAL_I2C_MspInit+0xf0>)
 8005586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800558c:	617b      	str	r3, [r7, #20]
 800558e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005590:	e031      	b.n	80055f6 <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a1d      	ldr	r2, [pc, #116]	; (800560c <HAL_I2C_MspInit+0xf8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d12c      	bne.n	80055f6 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800559c:	2300      	movs	r3, #0
 800559e:	613b      	str	r3, [r7, #16]
 80055a0:	4b18      	ldr	r3, [pc, #96]	; (8005604 <HAL_I2C_MspInit+0xf0>)
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	4a17      	ldr	r2, [pc, #92]	; (8005604 <HAL_I2C_MspInit+0xf0>)
 80055a6:	f043 0302 	orr.w	r3, r3, #2
 80055aa:	6313      	str	r3, [r2, #48]	; 0x30
 80055ac:	4b15      	ldr	r3, [pc, #84]	; (8005604 <HAL_I2C_MspInit+0xf0>)
 80055ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	613b      	str	r3, [r7, #16]
 80055b6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80055b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80055bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80055be:	2312      	movs	r3, #18
 80055c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055c2:	2300      	movs	r3, #0
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055c6:	2303      	movs	r3, #3
 80055c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80055ca:	2304      	movs	r3, #4
 80055cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055ce:	f107 031c 	add.w	r3, r7, #28
 80055d2:	4619      	mov	r1, r3
 80055d4:	480c      	ldr	r0, [pc, #48]	; (8005608 <HAL_I2C_MspInit+0xf4>)
 80055d6:	f001 fac1 	bl	8006b5c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80055da:	2300      	movs	r3, #0
 80055dc:	60fb      	str	r3, [r7, #12]
 80055de:	4b09      	ldr	r3, [pc, #36]	; (8005604 <HAL_I2C_MspInit+0xf0>)
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	4a08      	ldr	r2, [pc, #32]	; (8005604 <HAL_I2C_MspInit+0xf0>)
 80055e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80055e8:	6413      	str	r3, [r2, #64]	; 0x40
 80055ea:	4b06      	ldr	r3, [pc, #24]	; (8005604 <HAL_I2C_MspInit+0xf0>)
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	68fb      	ldr	r3, [r7, #12]
}
 80055f6:	bf00      	nop
 80055f8:	3730      	adds	r7, #48	; 0x30
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	40005400 	.word	0x40005400
 8005604:	40023800 	.word	0x40023800
 8005608:	40020400 	.word	0x40020400
 800560c:	40005800 	.word	0x40005800

08005610 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a15      	ldr	r2, [pc, #84]	; (8005674 <HAL_I2C_MspDeInit+0x64>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d10f      	bne.n	8005642 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8005622:	4b15      	ldr	r3, [pc, #84]	; (8005678 <HAL_I2C_MspDeInit+0x68>)
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	4a14      	ldr	r2, [pc, #80]	; (8005678 <HAL_I2C_MspDeInit+0x68>)
 8005628:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800562c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800562e:	2140      	movs	r1, #64	; 0x40
 8005630:	4812      	ldr	r0, [pc, #72]	; (800567c <HAL_I2C_MspDeInit+0x6c>)
 8005632:	f001 fc2f 	bl	8006e94 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8005636:	f44f 7100 	mov.w	r1, #512	; 0x200
 800563a:	4810      	ldr	r0, [pc, #64]	; (800567c <HAL_I2C_MspDeInit+0x6c>)
 800563c:	f001 fc2a 	bl	8006e94 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8005640:	e014      	b.n	800566c <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C2)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a0e      	ldr	r2, [pc, #56]	; (8005680 <HAL_I2C_MspDeInit+0x70>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d10f      	bne.n	800566c <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C2_CLK_DISABLE();
 800564c:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <HAL_I2C_MspDeInit+0x68>)
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	4a09      	ldr	r2, [pc, #36]	; (8005678 <HAL_I2C_MspDeInit+0x68>)
 8005652:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005656:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8005658:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800565c:	4807      	ldr	r0, [pc, #28]	; (800567c <HAL_I2C_MspDeInit+0x6c>)
 800565e:	f001 fc19 	bl	8006e94 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8005662:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005666:	4805      	ldr	r0, [pc, #20]	; (800567c <HAL_I2C_MspDeInit+0x6c>)
 8005668:	f001 fc14 	bl	8006e94 <HAL_GPIO_DeInit>
}
 800566c:	bf00      	nop
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40005400 	.word	0x40005400
 8005678:	40023800 	.word	0x40023800
 800567c:	40020400 	.word	0x40020400
 8005680:	40005800 	.word	0x40005800

08005684 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b08e      	sub	sp, #56	; 0x38
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800568c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005690:	2200      	movs	r2, #0
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	605a      	str	r2, [r3, #4]
 8005696:	609a      	str	r2, [r3, #8]
 8005698:	60da      	str	r2, [r3, #12]
 800569a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800569c:	f107 0314 	add.w	r3, r7, #20
 80056a0:	2200      	movs	r2, #0
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	605a      	str	r2, [r3, #4]
 80056a6:	609a      	str	r2, [r3, #8]
 80056a8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a4e      	ldr	r2, [pc, #312]	; (80057e8 <HAL_I2S_MspInit+0x164>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	f040 8095 	bne.w	80057e0 <HAL_I2S_MspInit+0x15c>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80056b6:	2301      	movs	r3, #1
 80056b8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 80056ba:	f240 130f 	movw	r3, #271	; 0x10f
 80056be:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 80056c0:	2306      	movs	r3, #6
 80056c2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80056c4:	f107 0314 	add.w	r3, r7, #20
 80056c8:	4618      	mov	r0, r3
 80056ca:	f004 fbf9 	bl	8009ec0 <HAL_RCCEx_PeriphCLKConfig>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 80056d4:	f7ff fb6c 	bl	8004db0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80056d8:	2300      	movs	r3, #0
 80056da:	613b      	str	r3, [r7, #16]
 80056dc:	4b43      	ldr	r3, [pc, #268]	; (80057ec <HAL_I2S_MspInit+0x168>)
 80056de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e0:	4a42      	ldr	r2, [pc, #264]	; (80057ec <HAL_I2S_MspInit+0x168>)
 80056e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e6:	6413      	str	r3, [r2, #64]	; 0x40
 80056e8:	4b40      	ldr	r3, [pc, #256]	; (80057ec <HAL_I2S_MspInit+0x168>)
 80056ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056f0:	613b      	str	r3, [r7, #16]
 80056f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056f4:	2300      	movs	r3, #0
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	4b3c      	ldr	r3, [pc, #240]	; (80057ec <HAL_I2S_MspInit+0x168>)
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	4a3b      	ldr	r2, [pc, #236]	; (80057ec <HAL_I2S_MspInit+0x168>)
 80056fe:	f043 0301 	orr.w	r3, r3, #1
 8005702:	6313      	str	r3, [r2, #48]	; 0x30
 8005704:	4b39      	ldr	r3, [pc, #228]	; (80057ec <HAL_I2S_MspInit+0x168>)
 8005706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005710:	2300      	movs	r3, #0
 8005712:	60bb      	str	r3, [r7, #8]
 8005714:	4b35      	ldr	r3, [pc, #212]	; (80057ec <HAL_I2S_MspInit+0x168>)
 8005716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005718:	4a34      	ldr	r2, [pc, #208]	; (80057ec <HAL_I2S_MspInit+0x168>)
 800571a:	f043 0304 	orr.w	r3, r3, #4
 800571e:	6313      	str	r3, [r2, #48]	; 0x30
 8005720:	4b32      	ldr	r3, [pc, #200]	; (80057ec <HAL_I2S_MspInit+0x168>)
 8005722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005724:	f003 0304 	and.w	r3, r3, #4
 8005728:	60bb      	str	r3, [r7, #8]
 800572a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800572c:	2310      	movs	r3, #16
 800572e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005730:	2302      	movs	r3, #2
 8005732:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005734:	2300      	movs	r3, #0
 8005736:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005738:	2300      	movs	r3, #0
 800573a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800573c:	2306      	movs	r3, #6
 800573e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005744:	4619      	mov	r1, r3
 8005746:	482a      	ldr	r0, [pc, #168]	; (80057f0 <HAL_I2S_MspInit+0x16c>)
 8005748:	f001 fa08 	bl	8006b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 800574c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8005750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005752:	2302      	movs	r3, #2
 8005754:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005756:	2300      	movs	r3, #0
 8005758:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800575a:	2300      	movs	r3, #0
 800575c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800575e:	2306      	movs	r3, #6
 8005760:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005766:	4619      	mov	r1, r3
 8005768:	4822      	ldr	r0, [pc, #136]	; (80057f4 <HAL_I2S_MspInit+0x170>)
 800576a:	f001 f9f7 	bl	8006b5c <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800576e:	4b22      	ldr	r3, [pc, #136]	; (80057f8 <HAL_I2S_MspInit+0x174>)
 8005770:	4a22      	ldr	r2, [pc, #136]	; (80057fc <HAL_I2S_MspInit+0x178>)
 8005772:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8005774:	4b20      	ldr	r3, [pc, #128]	; (80057f8 <HAL_I2S_MspInit+0x174>)
 8005776:	2200      	movs	r2, #0
 8005778:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800577a:	4b1f      	ldr	r3, [pc, #124]	; (80057f8 <HAL_I2S_MspInit+0x174>)
 800577c:	2240      	movs	r2, #64	; 0x40
 800577e:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005780:	4b1d      	ldr	r3, [pc, #116]	; (80057f8 <HAL_I2S_MspInit+0x174>)
 8005782:	2200      	movs	r2, #0
 8005784:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005786:	4b1c      	ldr	r3, [pc, #112]	; (80057f8 <HAL_I2S_MspInit+0x174>)
 8005788:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800578c:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800578e:	4b1a      	ldr	r3, [pc, #104]	; (80057f8 <HAL_I2S_MspInit+0x174>)
 8005790:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005794:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005796:	4b18      	ldr	r3, [pc, #96]	; (80057f8 <HAL_I2S_MspInit+0x174>)
 8005798:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800579c:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 800579e:	4b16      	ldr	r3, [pc, #88]	; (80057f8 <HAL_I2S_MspInit+0x174>)
 80057a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057a4:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80057a6:	4b14      	ldr	r3, [pc, #80]	; (80057f8 <HAL_I2S_MspInit+0x174>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80057ac:	4b12      	ldr	r3, [pc, #72]	; (80057f8 <HAL_I2S_MspInit+0x174>)
 80057ae:	2204      	movs	r2, #4
 80057b0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80057b2:	4b11      	ldr	r3, [pc, #68]	; (80057f8 <HAL_I2S_MspInit+0x174>)
 80057b4:	2203      	movs	r2, #3
 80057b6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80057b8:	4b0f      	ldr	r3, [pc, #60]	; (80057f8 <HAL_I2S_MspInit+0x174>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80057be:	4b0e      	ldr	r3, [pc, #56]	; (80057f8 <HAL_I2S_MspInit+0x174>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80057c4:	480c      	ldr	r0, [pc, #48]	; (80057f8 <HAL_I2S_MspInit+0x174>)
 80057c6:	f000 fd8b 	bl	80062e0 <HAL_DMA_Init>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <HAL_I2S_MspInit+0x150>
    {
      Error_Handler();
 80057d0:	f7ff faee 	bl	8004db0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a08      	ldr	r2, [pc, #32]	; (80057f8 <HAL_I2S_MspInit+0x174>)
 80057d8:	639a      	str	r2, [r3, #56]	; 0x38
 80057da:	4a07      	ldr	r2, [pc, #28]	; (80057f8 <HAL_I2S_MspInit+0x174>)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80057e0:	bf00      	nop
 80057e2:	3738      	adds	r7, #56	; 0x38
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40003c00 	.word	0x40003c00
 80057ec:	40023800 	.word	0x40023800
 80057f0:	40020000 	.word	0x40020000
 80057f4:	40020800 	.word	0x40020800
 80057f8:	20000754 	.word	0x20000754
 80057fc:	40026088 	.word	0x40026088

08005800 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b08a      	sub	sp, #40	; 0x28
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005808:	f107 0314 	add.w	r3, r7, #20
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	605a      	str	r2, [r3, #4]
 8005812:	609a      	str	r2, [r3, #8]
 8005814:	60da      	str	r2, [r3, #12]
 8005816:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a19      	ldr	r2, [pc, #100]	; (8005884 <HAL_SPI_MspInit+0x84>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d12b      	bne.n	800587a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005822:	2300      	movs	r3, #0
 8005824:	613b      	str	r3, [r7, #16]
 8005826:	4b18      	ldr	r3, [pc, #96]	; (8005888 <HAL_SPI_MspInit+0x88>)
 8005828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582a:	4a17      	ldr	r2, [pc, #92]	; (8005888 <HAL_SPI_MspInit+0x88>)
 800582c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005830:	6453      	str	r3, [r2, #68]	; 0x44
 8005832:	4b15      	ldr	r3, [pc, #84]	; (8005888 <HAL_SPI_MspInit+0x88>)
 8005834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005836:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800583a:	613b      	str	r3, [r7, #16]
 800583c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800583e:	2300      	movs	r3, #0
 8005840:	60fb      	str	r3, [r7, #12]
 8005842:	4b11      	ldr	r3, [pc, #68]	; (8005888 <HAL_SPI_MspInit+0x88>)
 8005844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005846:	4a10      	ldr	r2, [pc, #64]	; (8005888 <HAL_SPI_MspInit+0x88>)
 8005848:	f043 0301 	orr.w	r3, r3, #1
 800584c:	6313      	str	r3, [r2, #48]	; 0x30
 800584e:	4b0e      	ldr	r3, [pc, #56]	; (8005888 <HAL_SPI_MspInit+0x88>)
 8005850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800585a:	23e0      	movs	r3, #224	; 0xe0
 800585c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800585e:	2302      	movs	r3, #2
 8005860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005862:	2300      	movs	r3, #0
 8005864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005866:	2303      	movs	r3, #3
 8005868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800586a:	2305      	movs	r3, #5
 800586c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800586e:	f107 0314 	add.w	r3, r7, #20
 8005872:	4619      	mov	r1, r3
 8005874:	4805      	ldr	r0, [pc, #20]	; (800588c <HAL_SPI_MspInit+0x8c>)
 8005876:	f001 f971 	bl	8006b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800587a:	bf00      	nop
 800587c:	3728      	adds	r7, #40	; 0x28
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	40013000 	.word	0x40013000
 8005888:	40023800 	.word	0x40023800
 800588c:	40020000 	.word	0x40020000

08005890 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a08      	ldr	r2, [pc, #32]	; (80058c0 <HAL_SPI_MspDeInit+0x30>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d109      	bne.n	80058b6 <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80058a2:	4b08      	ldr	r3, [pc, #32]	; (80058c4 <HAL_SPI_MspDeInit+0x34>)
 80058a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a6:	4a07      	ldr	r2, [pc, #28]	; (80058c4 <HAL_SPI_MspDeInit+0x34>)
 80058a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058ac:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 80058ae:	21e0      	movs	r1, #224	; 0xe0
 80058b0:	4805      	ldr	r0, [pc, #20]	; (80058c8 <HAL_SPI_MspDeInit+0x38>)
 80058b2:	f001 faef 	bl	8006e94 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 80058b6:	bf00      	nop
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	40013000 	.word	0x40013000
 80058c4:	40023800 	.word	0x40023800
 80058c8:	40020000 	.word	0x40020000

080058cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b08a      	sub	sp, #40	; 0x28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058d4:	f107 0314 	add.w	r3, r7, #20
 80058d8:	2200      	movs	r2, #0
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	605a      	str	r2, [r3, #4]
 80058de:	609a      	str	r2, [r3, #8]
 80058e0:	60da      	str	r2, [r3, #12]
 80058e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a19      	ldr	r2, [pc, #100]	; (8005950 <HAL_UART_MspInit+0x84>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d12b      	bne.n	8005946 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80058ee:	2300      	movs	r3, #0
 80058f0:	613b      	str	r3, [r7, #16]
 80058f2:	4b18      	ldr	r3, [pc, #96]	; (8005954 <HAL_UART_MspInit+0x88>)
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	4a17      	ldr	r2, [pc, #92]	; (8005954 <HAL_UART_MspInit+0x88>)
 80058f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058fc:	6413      	str	r3, [r2, #64]	; 0x40
 80058fe:	4b15      	ldr	r3, [pc, #84]	; (8005954 <HAL_UART_MspInit+0x88>)
 8005900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005906:	613b      	str	r3, [r7, #16]
 8005908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800590a:	2300      	movs	r3, #0
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	4b11      	ldr	r3, [pc, #68]	; (8005954 <HAL_UART_MspInit+0x88>)
 8005910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005912:	4a10      	ldr	r2, [pc, #64]	; (8005954 <HAL_UART_MspInit+0x88>)
 8005914:	f043 0301 	orr.w	r3, r3, #1
 8005918:	6313      	str	r3, [r2, #48]	; 0x30
 800591a:	4b0e      	ldr	r3, [pc, #56]	; (8005954 <HAL_UART_MspInit+0x88>)
 800591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005926:	230c      	movs	r3, #12
 8005928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800592a:	2302      	movs	r3, #2
 800592c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800592e:	2300      	movs	r3, #0
 8005930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005932:	2303      	movs	r3, #3
 8005934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005936:	2307      	movs	r3, #7
 8005938:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800593a:	f107 0314 	add.w	r3, r7, #20
 800593e:	4619      	mov	r1, r3
 8005940:	4805      	ldr	r0, [pc, #20]	; (8005958 <HAL_UART_MspInit+0x8c>)
 8005942:	f001 f90b 	bl	8006b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005946:	bf00      	nop
 8005948:	3728      	adds	r7, #40	; 0x28
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	40004400 	.word	0x40004400
 8005954:	40023800 	.word	0x40023800
 8005958:	40020000 	.word	0x40020000

0800595c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b08c      	sub	sp, #48	; 0x30
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005964:	2300      	movs	r3, #0
 8005966:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005968:	2300      	movs	r3, #0
 800596a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800596c:	2200      	movs	r2, #0
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	2036      	movs	r0, #54	; 0x36
 8005972:	f000 fc8b 	bl	800628c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005976:	2036      	movs	r0, #54	; 0x36
 8005978:	f000 fca4 	bl	80062c4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800597c:	2300      	movs	r3, #0
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	4b1f      	ldr	r3, [pc, #124]	; (8005a00 <HAL_InitTick+0xa4>)
 8005982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005984:	4a1e      	ldr	r2, [pc, #120]	; (8005a00 <HAL_InitTick+0xa4>)
 8005986:	f043 0310 	orr.w	r3, r3, #16
 800598a:	6413      	str	r3, [r2, #64]	; 0x40
 800598c:	4b1c      	ldr	r3, [pc, #112]	; (8005a00 <HAL_InitTick+0xa4>)
 800598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005990:	f003 0310 	and.w	r3, r3, #16
 8005994:	60fb      	str	r3, [r7, #12]
 8005996:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005998:	f107 0210 	add.w	r2, r7, #16
 800599c:	f107 0314 	add.w	r3, r7, #20
 80059a0:	4611      	mov	r1, r2
 80059a2:	4618      	mov	r0, r3
 80059a4:	f004 fa5a 	bl	8009e5c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80059a8:	f004 fa30 	bl	8009e0c <HAL_RCC_GetPCLK1Freq>
 80059ac:	4603      	mov	r3, r0
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80059b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b4:	4a13      	ldr	r2, [pc, #76]	; (8005a04 <HAL_InitTick+0xa8>)
 80059b6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ba:	0c9b      	lsrs	r3, r3, #18
 80059bc:	3b01      	subs	r3, #1
 80059be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80059c0:	4b11      	ldr	r3, [pc, #68]	; (8005a08 <HAL_InitTick+0xac>)
 80059c2:	4a12      	ldr	r2, [pc, #72]	; (8005a0c <HAL_InitTick+0xb0>)
 80059c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80059c6:	4b10      	ldr	r3, [pc, #64]	; (8005a08 <HAL_InitTick+0xac>)
 80059c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80059cc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80059ce:	4a0e      	ldr	r2, [pc, #56]	; (8005a08 <HAL_InitTick+0xac>)
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80059d4:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <HAL_InitTick+0xac>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059da:	4b0b      	ldr	r3, [pc, #44]	; (8005a08 <HAL_InitTick+0xac>)
 80059dc:	2200      	movs	r2, #0
 80059de:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80059e0:	4809      	ldr	r0, [pc, #36]	; (8005a08 <HAL_InitTick+0xac>)
 80059e2:	f004 fef7 	bl	800a7d4 <HAL_TIM_Base_Init>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d104      	bne.n	80059f6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80059ec:	4806      	ldr	r0, [pc, #24]	; (8005a08 <HAL_InitTick+0xac>)
 80059ee:	f004 ff4b 	bl	800a888 <HAL_TIM_Base_Start_IT>
 80059f2:	4603      	mov	r3, r0
 80059f4:	e000      	b.n	80059f8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3730      	adds	r7, #48	; 0x30
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	40023800 	.word	0x40023800
 8005a04:	431bde83 	.word	0x431bde83
 8005a08:	20000864 	.word	0x20000864
 8005a0c:	40001000 	.word	0x40001000

08005a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005a14:	e7fe      	b.n	8005a14 <NMI_Handler+0x4>

08005a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a16:	b480      	push	{r7}
 8005a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a1a:	e7fe      	b.n	8005a1a <HardFault_Handler+0x4>

08005a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a20:	e7fe      	b.n	8005a20 <MemManage_Handler+0x4>

08005a22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a22:	b480      	push	{r7}
 8005a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a26:	e7fe      	b.n	8005a26 <BusFault_Handler+0x4>

08005a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a2c:	e7fe      	b.n	8005a2c <UsageFault_Handler+0x4>

08005a2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005a32:	bf00      	nop
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005a40:	2001      	movs	r0, #1
 8005a42:	f001 fb3d 	bl	80070c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005a46:	bf00      	nop
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005a4e:	2002      	movs	r0, #2
 8005a50:	f001 fb36 	bl	80070c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005a54:	bf00      	nop
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005a5c:	2004      	movs	r0, #4
 8005a5e:	f001 fb2f 	bl	80070c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005a62:	bf00      	nop
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005a6a:	2008      	movs	r0, #8
 8005a6c:	f001 fb28 	bl	80070c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005a70:	bf00      	nop
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005a78:	2010      	movs	r0, #16
 8005a7a:	f001 fb21 	bl	80070c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005a7e:	bf00      	nop
 8005a80:	bd80      	pop	{r7, pc}
	...

08005a84 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8005a88:	4802      	ldr	r0, [pc, #8]	; (8005a94 <DMA1_Stream5_IRQHandler+0x10>)
 8005a8a:	f000 fdfd 	bl	8006688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005a8e:	bf00      	nop
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	20000754 	.word	0x20000754

08005a98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005a9c:	4802      	ldr	r0, [pc, #8]	; (8005aa8 <TIM6_DAC_IRQHandler+0x10>)
 8005a9e:	f004 ff63 	bl	800a968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005aa2:	bf00      	nop
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20000864 	.word	0x20000864

08005aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ab4:	4a14      	ldr	r2, [pc, #80]	; (8005b08 <_sbrk+0x5c>)
 8005ab6:	4b15      	ldr	r3, [pc, #84]	; (8005b0c <_sbrk+0x60>)
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ac0:	4b13      	ldr	r3, [pc, #76]	; (8005b10 <_sbrk+0x64>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d102      	bne.n	8005ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ac8:	4b11      	ldr	r3, [pc, #68]	; (8005b10 <_sbrk+0x64>)
 8005aca:	4a12      	ldr	r2, [pc, #72]	; (8005b14 <_sbrk+0x68>)
 8005acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005ace:	4b10      	ldr	r3, [pc, #64]	; (8005b10 <_sbrk+0x64>)
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d207      	bcs.n	8005aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005adc:	f007 ffd6 	bl	800da8c <__errno>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	220c      	movs	r2, #12
 8005ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005ae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005aea:	e009      	b.n	8005b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005aec:	4b08      	ldr	r3, [pc, #32]	; (8005b10 <_sbrk+0x64>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005af2:	4b07      	ldr	r3, [pc, #28]	; (8005b10 <_sbrk+0x64>)
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4413      	add	r3, r2
 8005afa:	4a05      	ldr	r2, [pc, #20]	; (8005b10 <_sbrk+0x64>)
 8005afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005afe:	68fb      	ldr	r3, [r7, #12]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	20020000 	.word	0x20020000
 8005b0c:	00000400 	.word	0x00000400
 8005b10:	200008ac 	.word	0x200008ac
 8005b14:	20014d88 	.word	0x20014d88

08005b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b1c:	4b06      	ldr	r3, [pc, #24]	; (8005b38 <SystemInit+0x20>)
 8005b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b22:	4a05      	ldr	r2, [pc, #20]	; (8005b38 <SystemInit+0x20>)
 8005b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005b2c:	bf00      	nop
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	e000ed00 	.word	0xe000ed00

08005b3c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
    BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b0c2      	sub	sp, #264	; 0x108
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	4602      	mov	r2, r0
 8005b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b48:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8005b4c:	701a      	strb	r2, [r3, #0]
    /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8005b4e:	4b21      	ldr	r3, [pc, #132]	; (8005bd4 <USER_initialize+0x98>)
 8005b50:	2201      	movs	r2, #1
 8005b52:	701a      	strb	r2, [r3, #0]

    char buf[256];
    sprintf(buf, "# SD Card Init ");
 8005b54:	f107 0308 	add.w	r3, r7, #8
 8005b58:	491f      	ldr	r1, [pc, #124]	; (8005bd8 <USER_initialize+0x9c>)
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f007 ffd6 	bl	800db0c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 8005b60:	f107 0308 	add.w	r3, r7, #8
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fa fb33 	bl	80001d0 <strlen>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	f107 0108 	add.w	r1, r7, #8
 8005b72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b76:	4819      	ldr	r0, [pc, #100]	; (8005bdc <USER_initialize+0xa0>)
 8005b78:	f005 f927 	bl	800adca <HAL_UART_Transmit>
    if(SD_Initialize() == 0)
 8005b7c:	f7ff fb04 	bl	8005188 <SD_Initialize>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d102      	bne.n	8005b8c <USER_initialize+0x50>
    {
        Stat = RES_OK;
 8005b86:	4b13      	ldr	r3, [pc, #76]	; (8005bd4 <USER_initialize+0x98>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	701a      	strb	r2, [r3, #0]
    }
    sprintf(buf, "%s!\r\n", Stat == RES_OK ? "Successfully" : "Failed");
 8005b8c:	4b11      	ldr	r3, [pc, #68]	; (8005bd4 <USER_initialize+0x98>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <USER_initialize+0x5e>
 8005b96:	4a12      	ldr	r2, [pc, #72]	; (8005be0 <USER_initialize+0xa4>)
 8005b98:	e000      	b.n	8005b9c <USER_initialize+0x60>
 8005b9a:	4a12      	ldr	r2, [pc, #72]	; (8005be4 <USER_initialize+0xa8>)
 8005b9c:	f107 0308 	add.w	r3, r7, #8
 8005ba0:	4911      	ldr	r1, [pc, #68]	; (8005be8 <USER_initialize+0xac>)
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f007 ffb2 	bl	800db0c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 0xffff);
 8005ba8:	f107 0308 	add.w	r3, r7, #8
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fa fb0f 	bl	80001d0 <strlen>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	f107 0108 	add.w	r1, r7, #8
 8005bba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005bbe:	4807      	ldr	r0, [pc, #28]	; (8005bdc <USER_initialize+0xa0>)
 8005bc0:	f005 f903 	bl	800adca <HAL_UART_Transmit>

    return Stat;
 8005bc4:	4b03      	ldr	r3, [pc, #12]	; (8005bd4 <USER_initialize+0x98>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	b2db      	uxtb	r3, r3
    /* USER CODE END INIT */
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	20000058 	.word	0x20000058
 8005bd8:	0800e700 	.word	0x0800e700
 8005bdc:	2000080c 	.word	0x2000080c
 8005be0:	0800e710 	.word	0x0800e710
 8005be4:	0800e720 	.word	0x0800e720
 8005be8:	0800e728 	.word	0x0800e728

08005bec <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
    BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	71fb      	strb	r3, [r7, #7]
    /* USER CODE BEGIN STATUS */
    return RES_OK;
 8005bf6:	2300      	movs	r3, #0
    /* USER CODE END STATUS */
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <USER_read>:
    BYTE pdrv,      /* Physical drive nmuber to identify the drive */
    BYTE *buff,     /* Data buffer to store read data */
    DWORD sector,   /* Sector address in LBA */
    UINT count      /* Number of sectors to read */
)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60b9      	str	r1, [r7, #8]
 8005c0c:	607a      	str	r2, [r7, #4]
 8005c0e:	603b      	str	r3, [r7, #0]
 8005c10:	4603      	mov	r3, r0
 8005c12:	73fb      	strb	r3, [r7, #15]
    /* USER CODE BEGIN READ */
    return SD_ReadDisk(buff, sector, count) == 0 ? RES_OK : RES_ERROR;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	461a      	mov	r2, r3
 8005c1a:	6879      	ldr	r1, [r7, #4]
 8005c1c:	68b8      	ldr	r0, [r7, #8]
 8005c1e:	f7ff fba7 	bl	8005370 <SD_ReadDisk>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	bf14      	ite	ne
 8005c28:	2301      	movne	r3, #1
 8005c2a:	2300      	moveq	r3, #0
 8005c2c:	b2db      	uxtb	r3, r3
    /* USER CODE END READ */
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <USER_write>:
    BYTE pdrv,          /* Physical drive nmuber to identify the drive */
    const BYTE *buff,   /* Data to be written */
    DWORD sector,       /* Sector address in LBA */
    UINT count          /* Number of sectors to write */
)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b084      	sub	sp, #16
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	603b      	str	r3, [r7, #0]
 8005c42:	4603      	mov	r3, r0
 8005c44:	73fb      	strb	r3, [r7, #15]
    /* USER CODE BEGIN WRITE */
    /* USER CODE HERE */
    return SD_WriteDisk((uint8_t *)buff, sector, count) == 0 ? RES_OK : RES_ERROR;;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	6879      	ldr	r1, [r7, #4]
 8005c4e:	68b8      	ldr	r0, [r7, #8]
 8005c50:	f7ff fbda 	bl	8005408 <SD_WriteDisk>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	bf14      	ite	ne
 8005c5a:	2301      	movne	r3, #1
 8005c5c:	2300      	moveq	r3, #0
 8005c5e:	b2db      	uxtb	r3, r3
    /* USER CODE END WRITE */
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <USER_ioctl>:
DRESULT USER_ioctl (
    BYTE pdrv,      /* Physical drive nmuber (0..) */
    BYTE cmd,       /* Control code */
    void *buff      /* Buffer to send/receive control data */
)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	4603      	mov	r3, r0
 8005c70:	603a      	str	r2, [r7, #0]
 8005c72:	71fb      	strb	r3, [r7, #7]
 8005c74:	460b      	mov	r3, r1
 8005c76:	71bb      	strb	r3, [r7, #6]
    /* USER CODE BEGIN IOCTL */
    return RES_OK;
 8005c78:	2300      	movs	r3, #0
    /* USER CODE END IOCTL */
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
	...

08005c88 <PlayerInit>:

FIL WavFile;

/* Private function prototypes -----------------------------------------------*/
uint8_t PlayerInit(uint32_t AudioFreq)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
	/* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */
	if(AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 8005c90:	4b08      	ldr	r3, [pc, #32]	; (8005cb4 <PlayerInit+0x2c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	4619      	mov	r1, r3
 8005c9a:	2003      	movs	r0, #3
 8005c9c:	f7fa fc72 	bl	8000584 <AUDIO_OUT_Init>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <PlayerInit+0x22>
	{
		return 1;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e000      	b.n	8005cac <PlayerInit+0x24>
	}
	else
	{
		return 0;
 8005caa:	2300      	movs	r3, #0
	}
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	20000070 	.word	0x20000070

08005cb8 <AUDIO_PLAYER_Start>:
  * @brief  Starts Audio streaming.    
  * @param  idx: File index
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	71fb      	strb	r3, [r7, #7]
  uint bytesread;

  f_close(&WavFile);
 8005cc2:	4828      	ldr	r0, [pc, #160]	; (8005d64 <AUDIO_PLAYER_Start+0xac>)
 8005cc4:	f7fd ff0c 	bl	8003ae0 <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 8005cc8:	f7fb f8ac 	bl	8000e24 <AUDIO_GetWavObjectNumber>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	461a      	mov	r2, r3
 8005cd0:	79fb      	ldrb	r3, [r7, #7]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d93f      	bls.n	8005d58 <AUDIO_PLAYER_Start+0xa0>
  {

    //Open WAV file
    f_open(&WavFile, (char *)FileList.file[idx].name, FA_READ);
 8005cd8:	79fa      	ldrb	r2, [r7, #7]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	00db      	lsls	r3, r3, #3
 8005ce2:	4413      	add	r3, r2
 8005ce4:	4a20      	ldr	r2, [pc, #128]	; (8005d68 <AUDIO_PLAYER_Start+0xb0>)
 8005ce6:	4413      	add	r3, r2
 8005ce8:	3301      	adds	r3, #1
 8005cea:	2201      	movs	r2, #1
 8005cec:	4619      	mov	r1, r3
 8005cee:	481d      	ldr	r0, [pc, #116]	; (8005d64 <AUDIO_PLAYER_Start+0xac>)
 8005cf0:	f7fd fb76 	bl	80033e0 <f_open>
    //Read WAV file Header
    f_read(&WavFile, &WaveFormat, sizeof(WaveFormat), &bytesread);
 8005cf4:	f107 030c 	add.w	r3, r7, #12
 8005cf8:	222c      	movs	r2, #44	; 0x2c
 8005cfa:	491c      	ldr	r1, [pc, #112]	; (8005d6c <AUDIO_PLAYER_Start+0xb4>)
 8005cfc:	4819      	ldr	r0, [pc, #100]	; (8005d64 <AUDIO_PLAYER_Start+0xac>)
 8005cfe:	f7fd fd2f 	bl	8003760 <f_read>
    
    /*Adjust the Audio frequency */
    PlayerInit(WaveFormat.SampleRate);
 8005d02:	4b1a      	ldr	r3, [pc, #104]	; (8005d6c <AUDIO_PLAYER_Start+0xb4>)
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7ff ffbe 	bl	8005c88 <PlayerInit>
    
    BufferCtl.state = BUFFER_OFFSET_NONE;
 8005d0c:	4b18      	ldr	r3, [pc, #96]	; (8005d70 <AUDIO_PLAYER_Start+0xb8>)
 8005d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d12:	2200      	movs	r2, #0
 8005d14:	701a      	strb	r2, [r3, #0]
    
    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 0);
 8005d16:	2100      	movs	r1, #0
 8005d18:	4812      	ldr	r0, [pc, #72]	; (8005d64 <AUDIO_PLAYER_Start+0xac>)
 8005d1a:	f7fd ff0b 	bl	8003b34 <f_lseek>
    
    /* Fill whole buffer at first time */
    if(f_read(&WavFile,&BufferCtl.buff[0],AUDIO_OUT_BUFFER_SIZE,(void *)&bytesread) == FR_OK)
 8005d1e:	f107 030c 	add.w	r3, r7, #12
 8005d22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d26:	4912      	ldr	r1, [pc, #72]	; (8005d70 <AUDIO_PLAYER_Start+0xb8>)
 8005d28:	480e      	ldr	r0, [pc, #56]	; (8005d64 <AUDIO_PLAYER_Start+0xac>)
 8005d2a:	f7fd fd19 	bl	8003760 <f_read>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d111      	bne.n	8005d58 <AUDIO_PLAYER_Start+0xa0>
    {
      AudioState = AUDIO_STATE_PLAY;
 8005d34:	4b0f      	ldr	r3, [pc, #60]	; (8005d74 <AUDIO_PLAYER_Start+0xbc>)
 8005d36:	2203      	movs	r2, #3
 8005d38:	701a      	strb	r2, [r3, #0]
        if(bytesread != 0)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00b      	beq.n	8005d58 <AUDIO_PLAYER_Start+0xa0>
        {
          AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8005d40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005d44:	480a      	ldr	r0, [pc, #40]	; (8005d70 <AUDIO_PLAYER_Start+0xb8>)
 8005d46:	f7fa fc6b 	bl	8000620 <AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	4a08      	ldr	r2, [pc, #32]	; (8005d70 <AUDIO_PLAYER_Start+0xb8>)
 8005d4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d52:	6053      	str	r3, [r2, #4]
          return AUDIO_ERROR_NONE;
 8005d54:	2300      	movs	r3, #0
 8005d56:	e000      	b.n	8005d5a <AUDIO_PLAYER_Start+0xa2>
        }
      }
  }
  return AUDIO_ERROR_IO;
 8005d58:	2301      	movs	r3, #1
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	20001cc4 	.word	0x20001cc4
 8005d68:	200018bc 	.word	0x200018bc
 8005d6c:	20001c98 	.word	0x20001c98
 8005d70:	200008b0 	.word	0x200008b0
 8005d74:	200018b8 	.word	0x200018b8

08005d78 <AUDIO_PLAYER_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(bool isLoop)
{
 8005d78:	b590      	push	{r4, r7, lr}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	4603      	mov	r3, r0
 8005d80:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 8005d82:	2300      	movs	r3, #0
 8005d84:	73fb      	strb	r3, [r7, #15]
  
  switch(AudioState)
 8005d86:	4b82      	ldr	r3, [pc, #520]	; (8005f90 <AUDIO_PLAYER_Process+0x218>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	3b03      	subs	r3, #3
 8005d8c:	2b0a      	cmp	r3, #10
 8005d8e:	f200 80f6 	bhi.w	8005f7e <AUDIO_PLAYER_Process+0x206>
 8005d92:	a201      	add	r2, pc, #4	; (adr r2, 8005d98 <AUDIO_PLAYER_Process+0x20>)
 8005d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d98:	08005dc5 	.word	0x08005dc5
 8005d9c:	08005f7f 	.word	0x08005f7f
 8005da0:	08005e8b 	.word	0x08005e8b
 8005da4:	08005ed9 	.word	0x08005ed9
 8005da8:	08005f7f 	.word	0x08005f7f
 8005dac:	08005f7f 	.word	0x08005f7f
 8005db0:	08005e79 	.word	0x08005e79
 8005db4:	08005f1b 	.word	0x08005f1b
 8005db8:	08005f27 	.word	0x08005f27
 8005dbc:	08005f33 	.word	0x08005f33
 8005dc0:	08005f59 	.word	0x08005f59
  {
  case AUDIO_STATE_PLAY:
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 8005dc4:	4b73      	ldr	r3, [pc, #460]	; (8005f94 <AUDIO_PLAYER_Process+0x21c>)
 8005dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	4b72      	ldr	r3, [pc, #456]	; (8005f98 <AUDIO_PLAYER_Process+0x220>)
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d305      	bcc.n	8005de0 <AUDIO_PLAYER_Process+0x68>
    {
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8005dd4:	2002      	movs	r0, #2
 8005dd6:	f7fa fc79 	bl	80006cc <AUDIO_OUT_Stop>
      AudioState = AUDIO_STATE_NEXT;
 8005dda:	4b6d      	ldr	r3, [pc, #436]	; (8005f90 <AUDIO_PLAYER_Process+0x218>)
 8005ddc:	2205      	movs	r2, #5
 8005dde:	701a      	strb	r2, [r3, #0]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 8005de0:	4b6c      	ldr	r3, [pc, #432]	; (8005f94 <AUDIO_PLAYER_Process+0x21c>)
 8005de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d11e      	bne.n	8005e2a <AUDIO_PLAYER_Process+0xb2>
    {
      if(f_read(&WavFile, &BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8005dec:	f107 0308 	add.w	r3, r7, #8
 8005df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005df4:	4967      	ldr	r1, [pc, #412]	; (8005f94 <AUDIO_PLAYER_Process+0x21c>)
 8005df6:	4869      	ldr	r0, [pc, #420]	; (8005f9c <AUDIO_PLAYER_Process+0x224>)
 8005df8:	f7fd fcb2 	bl	8003760 <f_read>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d004      	beq.n	8005e0c <AUDIO_PLAYER_Process+0x94>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8005e02:	2002      	movs	r0, #2
 8005e04:	f7fa fc62 	bl	80006cc <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e0bc      	b.n	8005f86 <AUDIO_PLAYER_Process+0x20e>
      } 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8005e0c:	4b61      	ldr	r3, [pc, #388]	; (8005f94 <AUDIO_PLAYER_Process+0x21c>)
 8005e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e12:	2200      	movs	r2, #0
 8005e14:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8005e16:	4b5f      	ldr	r3, [pc, #380]	; (8005f94 <AUDIO_PLAYER_Process+0x21c>)
 8005e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	4413      	add	r3, r2
 8005e22:	4a5c      	ldr	r2, [pc, #368]	; (8005f94 <AUDIO_PLAYER_Process+0x21c>)
 8005e24:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e28:	6053      	str	r3, [r2, #4]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 8005e2a:	4b5a      	ldr	r3, [pc, #360]	; (8005f94 <AUDIO_PLAYER_Process+0x21c>)
 8005e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	f040 80a5 	bne.w	8005f82 <AUDIO_PLAYER_Process+0x20a>
    {
      if(f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8005e38:	f107 0308 	add.w	r3, r7, #8
 8005e3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e40:	4957      	ldr	r1, [pc, #348]	; (8005fa0 <AUDIO_PLAYER_Process+0x228>)
 8005e42:	4856      	ldr	r0, [pc, #344]	; (8005f9c <AUDIO_PLAYER_Process+0x224>)
 8005e44:	f7fd fc8c 	bl	8003760 <f_read>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d004      	beq.n	8005e58 <AUDIO_PLAYER_Process+0xe0>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8005e4e:	2002      	movs	r0, #2
 8005e50:	f7fa fc3c 	bl	80006cc <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8005e54:	2301      	movs	r3, #1
 8005e56:	e096      	b.n	8005f86 <AUDIO_PLAYER_Process+0x20e>
      } 
 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8005e58:	4b4e      	ldr	r3, [pc, #312]	; (8005f94 <AUDIO_PLAYER_Process+0x21c>)
 8005e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e5e:	2200      	movs	r2, #0
 8005e60:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8005e62:	4b4c      	ldr	r3, [pc, #304]	; (8005f94 <AUDIO_PLAYER_Process+0x21c>)
 8005e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	4a49      	ldr	r2, [pc, #292]	; (8005f94 <AUDIO_PLAYER_Process+0x21c>)
 8005e70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e74:	6053      	str	r3, [r2, #4]
    }
    break;
 8005e76:	e084      	b.n	8005f82 <AUDIO_PLAYER_Process+0x20a>
    
  case AUDIO_STATE_STOP:
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8005e78:	2002      	movs	r0, #2
 8005e7a:	f7fa fc27 	bl	80006cc <AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE; 
 8005e7e:	4b44      	ldr	r3, [pc, #272]	; (8005f90 <AUDIO_PLAYER_Process+0x218>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 8005e84:	2301      	movs	r3, #1
 8005e86:	73fb      	strb	r3, [r7, #15]
    break;
 8005e88:	e07c      	b.n	8005f84 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_NEXT:
    if(++FilePos >= AUDIO_GetWavObjectNumber())
 8005e8a:	4b46      	ldr	r3, [pc, #280]	; (8005fa4 <AUDIO_PLAYER_Process+0x22c>)
 8005e8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	3301      	adds	r3, #1
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	b21a      	sxth	r2, r3
 8005e98:	4b42      	ldr	r3, [pc, #264]	; (8005fa4 <AUDIO_PLAYER_Process+0x22c>)
 8005e9a:	801a      	strh	r2, [r3, #0]
 8005e9c:	4b41      	ldr	r3, [pc, #260]	; (8005fa4 <AUDIO_PLAYER_Process+0x22c>)
 8005e9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ea2:	461c      	mov	r4, r3
 8005ea4:	f7fa ffbe 	bl	8000e24 <AUDIO_GetWavObjectNumber>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	429c      	cmp	r4, r3
 8005eac:	db09      	blt.n	8005ec2 <AUDIO_PLAYER_Process+0x14a>
    {
    	if (isLoop)
 8005eae:	79fb      	ldrb	r3, [r7, #7]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d003      	beq.n	8005ebc <AUDIO_PLAYER_Process+0x144>
    	{
    		FilePos = 0;
 8005eb4:	4b3b      	ldr	r3, [pc, #236]	; (8005fa4 <AUDIO_PLAYER_Process+0x22c>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	801a      	strh	r2, [r3, #0]
 8005eba:	e002      	b.n	8005ec2 <AUDIO_PLAYER_Process+0x14a>
    	}
    	else
    	{
    		AudioState =AUDIO_STATE_STOP;
 8005ebc:	4b34      	ldr	r3, [pc, #208]	; (8005f90 <AUDIO_PLAYER_Process+0x218>)
 8005ebe:	2209      	movs	r2, #9
 8005ec0:	701a      	strb	r2, [r3, #0]
    	}
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8005ec2:	2002      	movs	r0, #2
 8005ec4:	f7fa fc02 	bl	80006cc <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8005ec8:	4b36      	ldr	r3, [pc, #216]	; (8005fa4 <AUDIO_PLAYER_Process+0x22c>)
 8005eca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff fef1 	bl	8005cb8 <AUDIO_PLAYER_Start>
    break;    
 8005ed6:	e055      	b.n	8005f84 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PREVIOUS:
    if(--FilePos < 0)
 8005ed8:	4b32      	ldr	r3, [pc, #200]	; (8005fa4 <AUDIO_PLAYER_Process+0x22c>)
 8005eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	b21a      	sxth	r2, r3
 8005ee6:	4b2f      	ldr	r3, [pc, #188]	; (8005fa4 <AUDIO_PLAYER_Process+0x22c>)
 8005ee8:	801a      	strh	r2, [r3, #0]
 8005eea:	4b2e      	ldr	r3, [pc, #184]	; (8005fa4 <AUDIO_PLAYER_Process+0x22c>)
 8005eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	da07      	bge.n	8005f04 <AUDIO_PLAYER_Process+0x18c>
    {
      FilePos = AUDIO_GetWavObjectNumber() - 1;
 8005ef4:	f7fa ff96 	bl	8000e24 <AUDIO_GetWavObjectNumber>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	3b01      	subs	r3, #1
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	b21a      	sxth	r2, r3
 8005f00:	4b28      	ldr	r3, [pc, #160]	; (8005fa4 <AUDIO_PLAYER_Process+0x22c>)
 8005f02:	801a      	strh	r2, [r3, #0]
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8005f04:	2002      	movs	r0, #2
 8005f06:	f7fa fbe1 	bl	80006cc <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8005f0a:	4b26      	ldr	r3, [pc, #152]	; (8005fa4 <AUDIO_PLAYER_Process+0x22c>)
 8005f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7ff fed0 	bl	8005cb8 <AUDIO_PLAYER_Start>
    break;   
 8005f18:	e034      	b.n	8005f84 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PAUSE:
    AUDIO_OUT_Pause();
 8005f1a:	f7fa fbab 	bl	8000674 <AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 8005f1e:	4b1c      	ldr	r3, [pc, #112]	; (8005f90 <AUDIO_PLAYER_Process+0x218>)
 8005f20:	2201      	movs	r2, #1
 8005f22:	701a      	strb	r2, [r3, #0]
    break;
 8005f24:	e02e      	b.n	8005f84 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_RESUME:
    AUDIO_OUT_Resume();
 8005f26:	f7fa fbbb 	bl	80006a0 <AUDIO_OUT_Resume>
    AudioState = AUDIO_STATE_PLAY;
 8005f2a:	4b19      	ldr	r3, [pc, #100]	; (8005f90 <AUDIO_PLAYER_Process+0x218>)
 8005f2c:	2203      	movs	r2, #3
 8005f2e:	701a      	strb	r2, [r3, #0]
    break;
 8005f30:	e028      	b.n	8005f84 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_UP: 
    if( uwVolume <= 90)
 8005f32:	4b1d      	ldr	r3, [pc, #116]	; (8005fa8 <AUDIO_PLAYER_Process+0x230>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b5a      	cmp	r3, #90	; 0x5a
 8005f38:	d804      	bhi.n	8005f44 <AUDIO_PLAYER_Process+0x1cc>
    {
      uwVolume += 10;
 8005f3a:	4b1b      	ldr	r3, [pc, #108]	; (8005fa8 <AUDIO_PLAYER_Process+0x230>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	330a      	adds	r3, #10
 8005f40:	4a19      	ldr	r2, [pc, #100]	; (8005fa8 <AUDIO_PLAYER_Process+0x230>)
 8005f42:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8005f44:	4b18      	ldr	r3, [pc, #96]	; (8005fa8 <AUDIO_PLAYER_Process+0x230>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7fa fbe6 	bl	800071c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8005f50:	4b0f      	ldr	r3, [pc, #60]	; (8005f90 <AUDIO_PLAYER_Process+0x218>)
 8005f52:	2203      	movs	r2, #3
 8005f54:	701a      	strb	r2, [r3, #0]
    break;
 8005f56:	e015      	b.n	8005f84 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_DOWN:    
    if( uwVolume >= 10)
 8005f58:	4b13      	ldr	r3, [pc, #76]	; (8005fa8 <AUDIO_PLAYER_Process+0x230>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b09      	cmp	r3, #9
 8005f5e:	d904      	bls.n	8005f6a <AUDIO_PLAYER_Process+0x1f2>
    {
      uwVolume -= 10;
 8005f60:	4b11      	ldr	r3, [pc, #68]	; (8005fa8 <AUDIO_PLAYER_Process+0x230>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	3b0a      	subs	r3, #10
 8005f66:	4a10      	ldr	r2, [pc, #64]	; (8005fa8 <AUDIO_PLAYER_Process+0x230>)
 8005f68:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8005f6a:	4b0f      	ldr	r3, [pc, #60]	; (8005fa8 <AUDIO_PLAYER_Process+0x230>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fa fbd3 	bl	800071c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8005f76:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <AUDIO_PLAYER_Process+0x218>)
 8005f78:	2203      	movs	r2, #3
 8005f7a:	701a      	strb	r2, [r3, #0]
    break;
 8005f7c:	e002      	b.n	8005f84 <AUDIO_PLAYER_Process+0x20c>
  case AUDIO_STATE_WAIT:
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT:    
  default:
    /* Do Nothing */
    break;
 8005f7e:	bf00      	nop
 8005f80:	e000      	b.n	8005f84 <AUDIO_PLAYER_Process+0x20c>
    break;
 8005f82:	bf00      	nop
  }
  return audio_error;
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd90      	pop	{r4, r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	200018b8 	.word	0x200018b8
 8005f94:	200008b0 	.word	0x200008b0
 8005f98:	20001c98 	.word	0x20001c98
 8005f9c:	20001cc4 	.word	0x20001cc4
 8005fa0:	200010b0 	.word	0x200010b0
 8005fa4:	200018ba 	.word	0x200018ba
 8005fa8:	20000070 	.word	0x20000070

08005fac <AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_TransferComplete_CallBack(void)
{
 8005fac:	b480      	push	{r7}
 8005fae:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8005fb0:	4b06      	ldr	r3, [pc, #24]	; (8005fcc <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	2b03      	cmp	r3, #3
 8005fb6:	d104      	bne.n	8005fc2 <AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 8005fb8:	4b05      	ldr	r3, [pc, #20]	; (8005fd0 <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 8005fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	701a      	strb	r2, [r3, #0]
  }
}
 8005fc2:	bf00      	nop
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	200018b8 	.word	0x200018b8
 8005fd0:	200008b0 	.word	0x200008b0

08005fd4 <AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8005fd4:	b480      	push	{r7}
 8005fd6:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8005fd8:	4b06      	ldr	r3, [pc, #24]	; (8005ff4 <AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2b03      	cmp	r3, #3
 8005fde:	d104      	bne.n	8005fea <AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 8005fe0:	4b05      	ldr	r3, [pc, #20]	; (8005ff8 <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 8005fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	701a      	strb	r2, [r3, #0]
  }
}
 8005fea:	bf00      	nop
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	200018b8 	.word	0x200018b8
 8005ff8:	200008b0 	.word	0x200008b0

08005ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006034 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006000:	480d      	ldr	r0, [pc, #52]	; (8006038 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006002:	490e      	ldr	r1, [pc, #56]	; (800603c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006004:	4a0e      	ldr	r2, [pc, #56]	; (8006040 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006008:	e002      	b.n	8006010 <LoopCopyDataInit>

0800600a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800600a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800600c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800600e:	3304      	adds	r3, #4

08006010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006014:	d3f9      	bcc.n	800600a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006016:	4a0b      	ldr	r2, [pc, #44]	; (8006044 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006018:	4c0b      	ldr	r4, [pc, #44]	; (8006048 <LoopFillZerobss+0x26>)
  movs r3, #0
 800601a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800601c:	e001      	b.n	8006022 <LoopFillZerobss>

0800601e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800601e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006020:	3204      	adds	r2, #4

08006022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006024:	d3fb      	bcc.n	800601e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006026:	f7ff fd77 	bl	8005b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800602a:	f007 fd35 	bl	800da98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800602e:	f7fe faeb 	bl	8004608 <main>
  bx  lr    
 8006032:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006034:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800603c:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8006040:	0800ea6c 	.word	0x0800ea6c
  ldr r2, =_sbss
 8006044:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8006048:	20014d84 	.word	0x20014d84

0800604c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800604c:	e7fe      	b.n	800604c <ADC_IRQHandler>
	...

08006050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006054:	4b0e      	ldr	r3, [pc, #56]	; (8006090 <HAL_Init+0x40>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a0d      	ldr	r2, [pc, #52]	; (8006090 <HAL_Init+0x40>)
 800605a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800605e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006060:	4b0b      	ldr	r3, [pc, #44]	; (8006090 <HAL_Init+0x40>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a0a      	ldr	r2, [pc, #40]	; (8006090 <HAL_Init+0x40>)
 8006066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800606a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800606c:	4b08      	ldr	r3, [pc, #32]	; (8006090 <HAL_Init+0x40>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a07      	ldr	r2, [pc, #28]	; (8006090 <HAL_Init+0x40>)
 8006072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006078:	2003      	movs	r0, #3
 800607a:	f000 f8fc 	bl	8006276 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800607e:	200f      	movs	r0, #15
 8006080:	f7ff fc6c 	bl	800595c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006084:	f7ff fa1e 	bl	80054c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	40023c00 	.word	0x40023c00

08006094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006098:	4b06      	ldr	r3, [pc, #24]	; (80060b4 <HAL_IncTick+0x20>)
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	461a      	mov	r2, r3
 800609e:	4b06      	ldr	r3, [pc, #24]	; (80060b8 <HAL_IncTick+0x24>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4413      	add	r3, r2
 80060a4:	4a04      	ldr	r2, [pc, #16]	; (80060b8 <HAL_IncTick+0x24>)
 80060a6:	6013      	str	r3, [r2, #0]
}
 80060a8:	bf00      	nop
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	20000078 	.word	0x20000078
 80060b8:	20001ef4 	.word	0x20001ef4

080060bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80060bc:	b480      	push	{r7}
 80060be:	af00      	add	r7, sp, #0
  return uwTick;
 80060c0:	4b03      	ldr	r3, [pc, #12]	; (80060d0 <HAL_GetTick+0x14>)
 80060c2:	681b      	ldr	r3, [r3, #0]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	20001ef4 	.word	0x20001ef4

080060d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80060dc:	f7ff ffee 	bl	80060bc <HAL_GetTick>
 80060e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060ec:	d005      	beq.n	80060fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80060ee:	4b0a      	ldr	r3, [pc, #40]	; (8006118 <HAL_Delay+0x44>)
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	461a      	mov	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4413      	add	r3, r2
 80060f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80060fa:	bf00      	nop
 80060fc:	f7ff ffde 	bl	80060bc <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	429a      	cmp	r2, r3
 800610a:	d8f7      	bhi.n	80060fc <HAL_Delay+0x28>
  {
  }
}
 800610c:	bf00      	nop
 800610e:	bf00      	nop
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20000078 	.word	0x20000078

0800611c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f003 0307 	and.w	r3, r3, #7
 800612a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800612c:	4b0c      	ldr	r3, [pc, #48]	; (8006160 <__NVIC_SetPriorityGrouping+0x44>)
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006138:	4013      	ands	r3, r2
 800613a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800614c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800614e:	4a04      	ldr	r2, [pc, #16]	; (8006160 <__NVIC_SetPriorityGrouping+0x44>)
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	60d3      	str	r3, [r2, #12]
}
 8006154:	bf00      	nop
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	e000ed00 	.word	0xe000ed00

08006164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006164:	b480      	push	{r7}
 8006166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006168:	4b04      	ldr	r3, [pc, #16]	; (800617c <__NVIC_GetPriorityGrouping+0x18>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	0a1b      	lsrs	r3, r3, #8
 800616e:	f003 0307 	and.w	r3, r3, #7
}
 8006172:	4618      	mov	r0, r3
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	e000ed00 	.word	0xe000ed00

08006180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	4603      	mov	r3, r0
 8006188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800618a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800618e:	2b00      	cmp	r3, #0
 8006190:	db0b      	blt.n	80061aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006192:	79fb      	ldrb	r3, [r7, #7]
 8006194:	f003 021f 	and.w	r2, r3, #31
 8006198:	4907      	ldr	r1, [pc, #28]	; (80061b8 <__NVIC_EnableIRQ+0x38>)
 800619a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800619e:	095b      	lsrs	r3, r3, #5
 80061a0:	2001      	movs	r0, #1
 80061a2:	fa00 f202 	lsl.w	r2, r0, r2
 80061a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80061aa:	bf00      	nop
 80061ac:	370c      	adds	r7, #12
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	e000e100 	.word	0xe000e100

080061bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	4603      	mov	r3, r0
 80061c4:	6039      	str	r1, [r7, #0]
 80061c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	db0a      	blt.n	80061e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	490c      	ldr	r1, [pc, #48]	; (8006208 <__NVIC_SetPriority+0x4c>)
 80061d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061da:	0112      	lsls	r2, r2, #4
 80061dc:	b2d2      	uxtb	r2, r2
 80061de:	440b      	add	r3, r1
 80061e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80061e4:	e00a      	b.n	80061fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	4908      	ldr	r1, [pc, #32]	; (800620c <__NVIC_SetPriority+0x50>)
 80061ec:	79fb      	ldrb	r3, [r7, #7]
 80061ee:	f003 030f 	and.w	r3, r3, #15
 80061f2:	3b04      	subs	r3, #4
 80061f4:	0112      	lsls	r2, r2, #4
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	440b      	add	r3, r1
 80061fa:	761a      	strb	r2, [r3, #24]
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	e000e100 	.word	0xe000e100
 800620c:	e000ed00 	.word	0xe000ed00

08006210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006210:	b480      	push	{r7}
 8006212:	b089      	sub	sp, #36	; 0x24
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f003 0307 	and.w	r3, r3, #7
 8006222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	f1c3 0307 	rsb	r3, r3, #7
 800622a:	2b04      	cmp	r3, #4
 800622c:	bf28      	it	cs
 800622e:	2304      	movcs	r3, #4
 8006230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	3304      	adds	r3, #4
 8006236:	2b06      	cmp	r3, #6
 8006238:	d902      	bls.n	8006240 <NVIC_EncodePriority+0x30>
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	3b03      	subs	r3, #3
 800623e:	e000      	b.n	8006242 <NVIC_EncodePriority+0x32>
 8006240:	2300      	movs	r3, #0
 8006242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	fa02 f303 	lsl.w	r3, r2, r3
 800624e:	43da      	mvns	r2, r3
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	401a      	ands	r2, r3
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006258:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	fa01 f303 	lsl.w	r3, r1, r3
 8006262:	43d9      	mvns	r1, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006268:	4313      	orrs	r3, r2
         );
}
 800626a:	4618      	mov	r0, r3
 800626c:	3724      	adds	r7, #36	; 0x24
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b082      	sub	sp, #8
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7ff ff4c 	bl	800611c <__NVIC_SetPriorityGrouping>
}
 8006284:	bf00      	nop
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	4603      	mov	r3, r0
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
 8006298:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800629a:	2300      	movs	r3, #0
 800629c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800629e:	f7ff ff61 	bl	8006164 <__NVIC_GetPriorityGrouping>
 80062a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	68b9      	ldr	r1, [r7, #8]
 80062a8:	6978      	ldr	r0, [r7, #20]
 80062aa:	f7ff ffb1 	bl	8006210 <NVIC_EncodePriority>
 80062ae:	4602      	mov	r2, r0
 80062b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062b4:	4611      	mov	r1, r2
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7ff ff80 	bl	80061bc <__NVIC_SetPriority>
}
 80062bc:	bf00      	nop
 80062be:	3718      	adds	r7, #24
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	4603      	mov	r3, r0
 80062cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80062ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7ff ff54 	bl	8006180 <__NVIC_EnableIRQ>
}
 80062d8:	bf00      	nop
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80062ec:	f7ff fee6 	bl	80060bc <HAL_GetTick>
 80062f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d101      	bne.n	80062fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e099      	b.n	8006430 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 0201 	bic.w	r2, r2, #1
 800631a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800631c:	e00f      	b.n	800633e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800631e:	f7ff fecd 	bl	80060bc <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b05      	cmp	r3, #5
 800632a:	d908      	bls.n	800633e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2220      	movs	r2, #32
 8006330:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2203      	movs	r2, #3
 8006336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e078      	b.n	8006430 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1e8      	bne.n	800631e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	4b38      	ldr	r3, [pc, #224]	; (8006438 <HAL_DMA_Init+0x158>)
 8006358:	4013      	ands	r3, r2
 800635a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800636a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006376:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006382:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	4313      	orrs	r3, r2
 800638e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	2b04      	cmp	r3, #4
 8006396:	d107      	bne.n	80063a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a0:	4313      	orrs	r3, r2
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f023 0307 	bic.w	r3, r3, #7
 80063be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ce:	2b04      	cmp	r3, #4
 80063d0:	d117      	bne.n	8006402 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	4313      	orrs	r3, r2
 80063da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00e      	beq.n	8006402 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fb3d 	bl	8006a64 <DMA_CheckFifoParam>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d008      	beq.n	8006402 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2240      	movs	r2, #64	; 0x40
 80063f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80063fe:	2301      	movs	r3, #1
 8006400:	e016      	b.n	8006430 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 faf4 	bl	80069f8 <DMA_CalcBaseAndBitshift>
 8006410:	4603      	mov	r3, r0
 8006412:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006418:	223f      	movs	r2, #63	; 0x3f
 800641a:	409a      	lsls	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	f010803f 	.word	0xf010803f

0800643c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e050      	b.n	80064f0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b02      	cmp	r3, #2
 8006458:	d101      	bne.n	800645e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800645a:	2302      	movs	r3, #2
 800645c:	e048      	b.n	80064f0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 0201 	bic.w	r2, r2, #1
 800646c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2200      	movs	r2, #0
 8006474:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2200      	movs	r2, #0
 800647c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2200      	movs	r2, #0
 8006484:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2200      	movs	r2, #0
 800648c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2200      	movs	r2, #0
 8006494:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2221      	movs	r2, #33	; 0x21
 800649c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 faaa 	bl	80069f8 <DMA_CalcBaseAndBitshift>
 80064a4:	4603      	mov	r3, r0
 80064a6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d0:	223f      	movs	r2, #63	; 0x3f
 80064d2:	409a      	lsls	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800650e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006516:	2b01      	cmp	r3, #1
 8006518:	d101      	bne.n	800651e <HAL_DMA_Start_IT+0x26>
 800651a:	2302      	movs	r3, #2
 800651c:	e040      	b.n	80065a0 <HAL_DMA_Start_IT+0xa8>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b01      	cmp	r3, #1
 8006530:	d12f      	bne.n	8006592 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2202      	movs	r2, #2
 8006536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	68b9      	ldr	r1, [r7, #8]
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 fa28 	bl	800699c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006550:	223f      	movs	r2, #63	; 0x3f
 8006552:	409a      	lsls	r2, r3
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f042 0216 	orr.w	r2, r2, #22
 8006566:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656c:	2b00      	cmp	r3, #0
 800656e:	d007      	beq.n	8006580 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0208 	orr.w	r2, r2, #8
 800657e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f042 0201 	orr.w	r2, r2, #1
 800658e:	601a      	str	r2, [r3, #0]
 8006590:	e005      	b.n	800659e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800659a:	2302      	movs	r3, #2
 800659c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800659e:	7dfb      	ldrb	r3, [r7, #23]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3718      	adds	r7, #24
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80065b6:	f7ff fd81 	bl	80060bc <HAL_GetTick>
 80065ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d008      	beq.n	80065da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2280      	movs	r2, #128	; 0x80
 80065cc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e052      	b.n	8006680 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0216 	bic.w	r2, r2, #22
 80065e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	695a      	ldr	r2, [r3, #20]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d103      	bne.n	800660a <HAL_DMA_Abort+0x62>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006606:	2b00      	cmp	r3, #0
 8006608:	d007      	beq.n	800661a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 0208 	bic.w	r2, r2, #8
 8006618:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 0201 	bic.w	r2, r2, #1
 8006628:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800662a:	e013      	b.n	8006654 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800662c:	f7ff fd46 	bl	80060bc <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b05      	cmp	r3, #5
 8006638:	d90c      	bls.n	8006654 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2220      	movs	r2, #32
 800663e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2203      	movs	r2, #3
 8006644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e015      	b.n	8006680 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1e4      	bne.n	800662c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006666:	223f      	movs	r2, #63	; 0x3f
 8006668:	409a      	lsls	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006690:	2300      	movs	r3, #0
 8006692:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006694:	4b8e      	ldr	r3, [pc, #568]	; (80068d0 <HAL_DMA_IRQHandler+0x248>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a8e      	ldr	r2, [pc, #568]	; (80068d4 <HAL_DMA_IRQHandler+0x24c>)
 800669a:	fba2 2303 	umull	r2, r3, r2, r3
 800669e:	0a9b      	lsrs	r3, r3, #10
 80066a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b2:	2208      	movs	r2, #8
 80066b4:	409a      	lsls	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	4013      	ands	r3, r2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d01a      	beq.n	80066f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0304 	and.w	r3, r3, #4
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d013      	beq.n	80066f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0204 	bic.w	r2, r2, #4
 80066da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e0:	2208      	movs	r2, #8
 80066e2:	409a      	lsls	r2, r3
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ec:	f043 0201 	orr.w	r2, r3, #1
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f8:	2201      	movs	r2, #1
 80066fa:	409a      	lsls	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	4013      	ands	r3, r2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d012      	beq.n	800672a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00b      	beq.n	800672a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006716:	2201      	movs	r2, #1
 8006718:	409a      	lsls	r2, r3
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006722:	f043 0202 	orr.w	r2, r3, #2
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800672e:	2204      	movs	r2, #4
 8006730:	409a      	lsls	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	4013      	ands	r3, r2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d012      	beq.n	8006760 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00b      	beq.n	8006760 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800674c:	2204      	movs	r2, #4
 800674e:	409a      	lsls	r2, r3
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006758:	f043 0204 	orr.w	r2, r3, #4
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006764:	2210      	movs	r2, #16
 8006766:	409a      	lsls	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4013      	ands	r3, r2
 800676c:	2b00      	cmp	r3, #0
 800676e:	d043      	beq.n	80067f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0308 	and.w	r3, r3, #8
 800677a:	2b00      	cmp	r3, #0
 800677c:	d03c      	beq.n	80067f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006782:	2210      	movs	r2, #16
 8006784:	409a      	lsls	r2, r3
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d018      	beq.n	80067ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d108      	bne.n	80067b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d024      	beq.n	80067f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	4798      	blx	r3
 80067b6:	e01f      	b.n	80067f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d01b      	beq.n	80067f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	4798      	blx	r3
 80067c8:	e016      	b.n	80067f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d107      	bne.n	80067e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f022 0208 	bic.w	r2, r2, #8
 80067e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d003      	beq.n	80067f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067fc:	2220      	movs	r2, #32
 80067fe:	409a      	lsls	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4013      	ands	r3, r2
 8006804:	2b00      	cmp	r3, #0
 8006806:	f000 808f 	beq.w	8006928 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0310 	and.w	r3, r3, #16
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 8087 	beq.w	8006928 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800681e:	2220      	movs	r2, #32
 8006820:	409a      	lsls	r2, r3
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b05      	cmp	r3, #5
 8006830:	d136      	bne.n	80068a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f022 0216 	bic.w	r2, r2, #22
 8006840:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	695a      	ldr	r2, [r3, #20]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006850:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	2b00      	cmp	r3, #0
 8006858:	d103      	bne.n	8006862 <HAL_DMA_IRQHandler+0x1da>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800685e:	2b00      	cmp	r3, #0
 8006860:	d007      	beq.n	8006872 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f022 0208 	bic.w	r2, r2, #8
 8006870:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006876:	223f      	movs	r2, #63	; 0x3f
 8006878:	409a      	lsls	r2, r3
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006892:	2b00      	cmp	r3, #0
 8006894:	d07e      	beq.n	8006994 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	4798      	blx	r3
        }
        return;
 800689e:	e079      	b.n	8006994 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d01d      	beq.n	80068ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10d      	bne.n	80068d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d031      	beq.n	8006928 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	4798      	blx	r3
 80068cc:	e02c      	b.n	8006928 <HAL_DMA_IRQHandler+0x2a0>
 80068ce:	bf00      	nop
 80068d0:	20000054 	.word	0x20000054
 80068d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d023      	beq.n	8006928 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	4798      	blx	r3
 80068e8:	e01e      	b.n	8006928 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10f      	bne.n	8006918 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f022 0210 	bic.w	r2, r2, #16
 8006906:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691c:	2b00      	cmp	r3, #0
 800691e:	d003      	beq.n	8006928 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800692c:	2b00      	cmp	r3, #0
 800692e:	d032      	beq.n	8006996 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	2b00      	cmp	r3, #0
 800693a:	d022      	beq.n	8006982 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2205      	movs	r2, #5
 8006940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f022 0201 	bic.w	r2, r2, #1
 8006952:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	3301      	adds	r3, #1
 8006958:	60bb      	str	r3, [r7, #8]
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	429a      	cmp	r2, r3
 800695e:	d307      	bcc.n	8006970 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1f2      	bne.n	8006954 <HAL_DMA_IRQHandler+0x2cc>
 800696e:	e000      	b.n	8006972 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006970:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006986:	2b00      	cmp	r3, #0
 8006988:	d005      	beq.n	8006996 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	4798      	blx	r3
 8006992:	e000      	b.n	8006996 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006994:	bf00      	nop
    }
  }
}
 8006996:	3718      	adds	r7, #24
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80069b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	2b40      	cmp	r3, #64	; 0x40
 80069c8:	d108      	bne.n	80069dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80069da:	e007      	b.n	80069ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	60da      	str	r2, [r3, #12]
}
 80069ec:	bf00      	nop
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	3b10      	subs	r3, #16
 8006a08:	4a14      	ldr	r2, [pc, #80]	; (8006a5c <DMA_CalcBaseAndBitshift+0x64>)
 8006a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0e:	091b      	lsrs	r3, r3, #4
 8006a10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006a12:	4a13      	ldr	r2, [pc, #76]	; (8006a60 <DMA_CalcBaseAndBitshift+0x68>)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4413      	add	r3, r2
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2b03      	cmp	r3, #3
 8006a24:	d909      	bls.n	8006a3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006a2e:	f023 0303 	bic.w	r3, r3, #3
 8006a32:	1d1a      	adds	r2, r3, #4
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	659a      	str	r2, [r3, #88]	; 0x58
 8006a38:	e007      	b.n	8006a4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006a42:	f023 0303 	bic.w	r3, r3, #3
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	aaaaaaab 	.word	0xaaaaaaab
 8006a60:	0800ea20 	.word	0x0800ea20

08006a64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d11f      	bne.n	8006abe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	2b03      	cmp	r3, #3
 8006a82:	d856      	bhi.n	8006b32 <DMA_CheckFifoParam+0xce>
 8006a84:	a201      	add	r2, pc, #4	; (adr r2, 8006a8c <DMA_CheckFifoParam+0x28>)
 8006a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8a:	bf00      	nop
 8006a8c:	08006a9d 	.word	0x08006a9d
 8006a90:	08006aaf 	.word	0x08006aaf
 8006a94:	08006a9d 	.word	0x08006a9d
 8006a98:	08006b33 	.word	0x08006b33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d046      	beq.n	8006b36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006aac:	e043      	b.n	8006b36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006ab6:	d140      	bne.n	8006b3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006abc:	e03d      	b.n	8006b3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ac6:	d121      	bne.n	8006b0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d837      	bhi.n	8006b3e <DMA_CheckFifoParam+0xda>
 8006ace:	a201      	add	r2, pc, #4	; (adr r2, 8006ad4 <DMA_CheckFifoParam+0x70>)
 8006ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad4:	08006ae5 	.word	0x08006ae5
 8006ad8:	08006aeb 	.word	0x08006aeb
 8006adc:	08006ae5 	.word	0x08006ae5
 8006ae0:	08006afd 	.word	0x08006afd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ae8:	e030      	b.n	8006b4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d025      	beq.n	8006b42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006afa:	e022      	b.n	8006b42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006b04:	d11f      	bne.n	8006b46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006b0a:	e01c      	b.n	8006b46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d903      	bls.n	8006b1a <DMA_CheckFifoParam+0xb6>
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2b03      	cmp	r3, #3
 8006b16:	d003      	beq.n	8006b20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006b18:	e018      	b.n	8006b4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8006b1e:	e015      	b.n	8006b4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00e      	beq.n	8006b4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b30:	e00b      	b.n	8006b4a <DMA_CheckFifoParam+0xe6>
      break;
 8006b32:	bf00      	nop
 8006b34:	e00a      	b.n	8006b4c <DMA_CheckFifoParam+0xe8>
      break;
 8006b36:	bf00      	nop
 8006b38:	e008      	b.n	8006b4c <DMA_CheckFifoParam+0xe8>
      break;
 8006b3a:	bf00      	nop
 8006b3c:	e006      	b.n	8006b4c <DMA_CheckFifoParam+0xe8>
      break;
 8006b3e:	bf00      	nop
 8006b40:	e004      	b.n	8006b4c <DMA_CheckFifoParam+0xe8>
      break;
 8006b42:	bf00      	nop
 8006b44:	e002      	b.n	8006b4c <DMA_CheckFifoParam+0xe8>
      break;   
 8006b46:	bf00      	nop
 8006b48:	e000      	b.n	8006b4c <DMA_CheckFifoParam+0xe8>
      break;
 8006b4a:	bf00      	nop
    }
  } 
  
  return status; 
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop

08006b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b089      	sub	sp, #36	; 0x24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006b66:	2300      	movs	r3, #0
 8006b68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b72:	2300      	movs	r3, #0
 8006b74:	61fb      	str	r3, [r7, #28]
 8006b76:	e16b      	b.n	8006e50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006b78:	2201      	movs	r2, #1
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	4013      	ands	r3, r2
 8006b8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	f040 815a 	bne.w	8006e4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f003 0303 	and.w	r3, r3, #3
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d005      	beq.n	8006bae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d130      	bne.n	8006c10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	005b      	lsls	r3, r3, #1
 8006bb8:	2203      	movs	r2, #3
 8006bba:	fa02 f303 	lsl.w	r3, r2, r3
 8006bbe:	43db      	mvns	r3, r3
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	68da      	ldr	r2, [r3, #12]
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	005b      	lsls	r3, r3, #1
 8006bce:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd2:	69ba      	ldr	r2, [r7, #24]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	69ba      	ldr	r2, [r7, #24]
 8006bdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006be4:	2201      	movs	r2, #1
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bec:	43db      	mvns	r3, r3
 8006bee:	69ba      	ldr	r2, [r7, #24]
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	091b      	lsrs	r3, r3, #4
 8006bfa:	f003 0201 	and.w	r2, r3, #1
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	fa02 f303 	lsl.w	r3, r2, r3
 8006c04:	69ba      	ldr	r2, [r7, #24]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f003 0303 	and.w	r3, r3, #3
 8006c18:	2b03      	cmp	r3, #3
 8006c1a:	d017      	beq.n	8006c4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	005b      	lsls	r3, r3, #1
 8006c26:	2203      	movs	r2, #3
 8006c28:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2c:	43db      	mvns	r3, r3
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	4013      	ands	r3, r2
 8006c32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	005b      	lsls	r3, r3, #1
 8006c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f003 0303 	and.w	r3, r3, #3
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d123      	bne.n	8006ca0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	08da      	lsrs	r2, r3, #3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	3208      	adds	r2, #8
 8006c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	f003 0307 	and.w	r3, r3, #7
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	220f      	movs	r2, #15
 8006c70:	fa02 f303 	lsl.w	r3, r2, r3
 8006c74:	43db      	mvns	r3, r3
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	4013      	ands	r3, r2
 8006c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	691a      	ldr	r2, [r3, #16]
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	f003 0307 	and.w	r3, r3, #7
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	fa02 f303 	lsl.w	r3, r2, r3
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	08da      	lsrs	r2, r3, #3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	3208      	adds	r2, #8
 8006c9a:	69b9      	ldr	r1, [r7, #24]
 8006c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	2203      	movs	r2, #3
 8006cac:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb0:	43db      	mvns	r3, r3
 8006cb2:	69ba      	ldr	r2, [r7, #24]
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f003 0203 	and.w	r2, r3, #3
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	005b      	lsls	r3, r3, #1
 8006cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc8:	69ba      	ldr	r2, [r7, #24]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	69ba      	ldr	r2, [r7, #24]
 8006cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 80b4 	beq.w	8006e4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60fb      	str	r3, [r7, #12]
 8006ce6:	4b60      	ldr	r3, [pc, #384]	; (8006e68 <HAL_GPIO_Init+0x30c>)
 8006ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cea:	4a5f      	ldr	r2, [pc, #380]	; (8006e68 <HAL_GPIO_Init+0x30c>)
 8006cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8006cf2:	4b5d      	ldr	r3, [pc, #372]	; (8006e68 <HAL_GPIO_Init+0x30c>)
 8006cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cfa:	60fb      	str	r3, [r7, #12]
 8006cfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006cfe:	4a5b      	ldr	r2, [pc, #364]	; (8006e6c <HAL_GPIO_Init+0x310>)
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	089b      	lsrs	r3, r3, #2
 8006d04:	3302      	adds	r3, #2
 8006d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	f003 0303 	and.w	r3, r3, #3
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	220f      	movs	r2, #15
 8006d16:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1a:	43db      	mvns	r3, r3
 8006d1c:	69ba      	ldr	r2, [r7, #24]
 8006d1e:	4013      	ands	r3, r2
 8006d20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a52      	ldr	r2, [pc, #328]	; (8006e70 <HAL_GPIO_Init+0x314>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d02b      	beq.n	8006d82 <HAL_GPIO_Init+0x226>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a51      	ldr	r2, [pc, #324]	; (8006e74 <HAL_GPIO_Init+0x318>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d025      	beq.n	8006d7e <HAL_GPIO_Init+0x222>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a50      	ldr	r2, [pc, #320]	; (8006e78 <HAL_GPIO_Init+0x31c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d01f      	beq.n	8006d7a <HAL_GPIO_Init+0x21e>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a4f      	ldr	r2, [pc, #316]	; (8006e7c <HAL_GPIO_Init+0x320>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d019      	beq.n	8006d76 <HAL_GPIO_Init+0x21a>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a4e      	ldr	r2, [pc, #312]	; (8006e80 <HAL_GPIO_Init+0x324>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d013      	beq.n	8006d72 <HAL_GPIO_Init+0x216>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a4d      	ldr	r2, [pc, #308]	; (8006e84 <HAL_GPIO_Init+0x328>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00d      	beq.n	8006d6e <HAL_GPIO_Init+0x212>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a4c      	ldr	r2, [pc, #304]	; (8006e88 <HAL_GPIO_Init+0x32c>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d007      	beq.n	8006d6a <HAL_GPIO_Init+0x20e>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a4b      	ldr	r2, [pc, #300]	; (8006e8c <HAL_GPIO_Init+0x330>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d101      	bne.n	8006d66 <HAL_GPIO_Init+0x20a>
 8006d62:	2307      	movs	r3, #7
 8006d64:	e00e      	b.n	8006d84 <HAL_GPIO_Init+0x228>
 8006d66:	2308      	movs	r3, #8
 8006d68:	e00c      	b.n	8006d84 <HAL_GPIO_Init+0x228>
 8006d6a:	2306      	movs	r3, #6
 8006d6c:	e00a      	b.n	8006d84 <HAL_GPIO_Init+0x228>
 8006d6e:	2305      	movs	r3, #5
 8006d70:	e008      	b.n	8006d84 <HAL_GPIO_Init+0x228>
 8006d72:	2304      	movs	r3, #4
 8006d74:	e006      	b.n	8006d84 <HAL_GPIO_Init+0x228>
 8006d76:	2303      	movs	r3, #3
 8006d78:	e004      	b.n	8006d84 <HAL_GPIO_Init+0x228>
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	e002      	b.n	8006d84 <HAL_GPIO_Init+0x228>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e000      	b.n	8006d84 <HAL_GPIO_Init+0x228>
 8006d82:	2300      	movs	r3, #0
 8006d84:	69fa      	ldr	r2, [r7, #28]
 8006d86:	f002 0203 	and.w	r2, r2, #3
 8006d8a:	0092      	lsls	r2, r2, #2
 8006d8c:	4093      	lsls	r3, r2
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d94:	4935      	ldr	r1, [pc, #212]	; (8006e6c <HAL_GPIO_Init+0x310>)
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	089b      	lsrs	r3, r3, #2
 8006d9a:	3302      	adds	r3, #2
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006da2:	4b3b      	ldr	r3, [pc, #236]	; (8006e90 <HAL_GPIO_Init+0x334>)
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	43db      	mvns	r3, r3
 8006dac:	69ba      	ldr	r2, [r7, #24]
 8006dae:	4013      	ands	r3, r2
 8006db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006dbe:	69ba      	ldr	r2, [r7, #24]
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006dc6:	4a32      	ldr	r2, [pc, #200]	; (8006e90 <HAL_GPIO_Init+0x334>)
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006dcc:	4b30      	ldr	r3, [pc, #192]	; (8006e90 <HAL_GPIO_Init+0x334>)
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	43db      	mvns	r3, r3
 8006dd6:	69ba      	ldr	r2, [r7, #24]
 8006dd8:	4013      	ands	r3, r2
 8006dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d003      	beq.n	8006df0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006de8:	69ba      	ldr	r2, [r7, #24]
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006df0:	4a27      	ldr	r2, [pc, #156]	; (8006e90 <HAL_GPIO_Init+0x334>)
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006df6:	4b26      	ldr	r3, [pc, #152]	; (8006e90 <HAL_GPIO_Init+0x334>)
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	43db      	mvns	r3, r3
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	4013      	ands	r3, r2
 8006e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d003      	beq.n	8006e1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006e1a:	4a1d      	ldr	r2, [pc, #116]	; (8006e90 <HAL_GPIO_Init+0x334>)
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006e20:	4b1b      	ldr	r3, [pc, #108]	; (8006e90 <HAL_GPIO_Init+0x334>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	43db      	mvns	r3, r3
 8006e2a:	69ba      	ldr	r2, [r7, #24]
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d003      	beq.n	8006e44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006e3c:	69ba      	ldr	r2, [r7, #24]
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006e44:	4a12      	ldr	r2, [pc, #72]	; (8006e90 <HAL_GPIO_Init+0x334>)
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	61fb      	str	r3, [r7, #28]
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	2b0f      	cmp	r3, #15
 8006e54:	f67f ae90 	bls.w	8006b78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006e58:	bf00      	nop
 8006e5a:	bf00      	nop
 8006e5c:	3724      	adds	r7, #36	; 0x24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	40023800 	.word	0x40023800
 8006e6c:	40013800 	.word	0x40013800
 8006e70:	40020000 	.word	0x40020000
 8006e74:	40020400 	.word	0x40020400
 8006e78:	40020800 	.word	0x40020800
 8006e7c:	40020c00 	.word	0x40020c00
 8006e80:	40021000 	.word	0x40021000
 8006e84:	40021400 	.word	0x40021400
 8006e88:	40021800 	.word	0x40021800
 8006e8c:	40021c00 	.word	0x40021c00
 8006e90:	40013c00 	.word	0x40013c00

08006e94 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006eaa:	2300      	movs	r3, #0
 8006eac:	617b      	str	r3, [r7, #20]
 8006eae:	e0cd      	b.n	800704c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	f040 80bd 	bne.w	8007046 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006ecc:	4a65      	ldr	r2, [pc, #404]	; (8007064 <HAL_GPIO_DeInit+0x1d0>)
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	089b      	lsrs	r3, r3, #2
 8006ed2:	3302      	adds	r3, #2
 8006ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ed8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f003 0303 	and.w	r3, r3, #3
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	220f      	movs	r2, #15
 8006ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	4013      	ands	r3, r2
 8006eec:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a5d      	ldr	r2, [pc, #372]	; (8007068 <HAL_GPIO_DeInit+0x1d4>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d02b      	beq.n	8006f4e <HAL_GPIO_DeInit+0xba>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a5c      	ldr	r2, [pc, #368]	; (800706c <HAL_GPIO_DeInit+0x1d8>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d025      	beq.n	8006f4a <HAL_GPIO_DeInit+0xb6>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a5b      	ldr	r2, [pc, #364]	; (8007070 <HAL_GPIO_DeInit+0x1dc>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d01f      	beq.n	8006f46 <HAL_GPIO_DeInit+0xb2>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a5a      	ldr	r2, [pc, #360]	; (8007074 <HAL_GPIO_DeInit+0x1e0>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d019      	beq.n	8006f42 <HAL_GPIO_DeInit+0xae>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a59      	ldr	r2, [pc, #356]	; (8007078 <HAL_GPIO_DeInit+0x1e4>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d013      	beq.n	8006f3e <HAL_GPIO_DeInit+0xaa>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a58      	ldr	r2, [pc, #352]	; (800707c <HAL_GPIO_DeInit+0x1e8>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d00d      	beq.n	8006f3a <HAL_GPIO_DeInit+0xa6>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a57      	ldr	r2, [pc, #348]	; (8007080 <HAL_GPIO_DeInit+0x1ec>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d007      	beq.n	8006f36 <HAL_GPIO_DeInit+0xa2>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a56      	ldr	r2, [pc, #344]	; (8007084 <HAL_GPIO_DeInit+0x1f0>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d101      	bne.n	8006f32 <HAL_GPIO_DeInit+0x9e>
 8006f2e:	2307      	movs	r3, #7
 8006f30:	e00e      	b.n	8006f50 <HAL_GPIO_DeInit+0xbc>
 8006f32:	2308      	movs	r3, #8
 8006f34:	e00c      	b.n	8006f50 <HAL_GPIO_DeInit+0xbc>
 8006f36:	2306      	movs	r3, #6
 8006f38:	e00a      	b.n	8006f50 <HAL_GPIO_DeInit+0xbc>
 8006f3a:	2305      	movs	r3, #5
 8006f3c:	e008      	b.n	8006f50 <HAL_GPIO_DeInit+0xbc>
 8006f3e:	2304      	movs	r3, #4
 8006f40:	e006      	b.n	8006f50 <HAL_GPIO_DeInit+0xbc>
 8006f42:	2303      	movs	r3, #3
 8006f44:	e004      	b.n	8006f50 <HAL_GPIO_DeInit+0xbc>
 8006f46:	2302      	movs	r3, #2
 8006f48:	e002      	b.n	8006f50 <HAL_GPIO_DeInit+0xbc>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e000      	b.n	8006f50 <HAL_GPIO_DeInit+0xbc>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	f002 0203 	and.w	r2, r2, #3
 8006f56:	0092      	lsls	r2, r2, #2
 8006f58:	4093      	lsls	r3, r2
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d132      	bne.n	8006fc6 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006f60:	4b49      	ldr	r3, [pc, #292]	; (8007088 <HAL_GPIO_DeInit+0x1f4>)
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	43db      	mvns	r3, r3
 8006f68:	4947      	ldr	r1, [pc, #284]	; (8007088 <HAL_GPIO_DeInit+0x1f4>)
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006f6e:	4b46      	ldr	r3, [pc, #280]	; (8007088 <HAL_GPIO_DeInit+0x1f4>)
 8006f70:	685a      	ldr	r2, [r3, #4]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	43db      	mvns	r3, r3
 8006f76:	4944      	ldr	r1, [pc, #272]	; (8007088 <HAL_GPIO_DeInit+0x1f4>)
 8006f78:	4013      	ands	r3, r2
 8006f7a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006f7c:	4b42      	ldr	r3, [pc, #264]	; (8007088 <HAL_GPIO_DeInit+0x1f4>)
 8006f7e:	68da      	ldr	r2, [r3, #12]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	43db      	mvns	r3, r3
 8006f84:	4940      	ldr	r1, [pc, #256]	; (8007088 <HAL_GPIO_DeInit+0x1f4>)
 8006f86:	4013      	ands	r3, r2
 8006f88:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006f8a:	4b3f      	ldr	r3, [pc, #252]	; (8007088 <HAL_GPIO_DeInit+0x1f4>)
 8006f8c:	689a      	ldr	r2, [r3, #8]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	43db      	mvns	r3, r3
 8006f92:	493d      	ldr	r1, [pc, #244]	; (8007088 <HAL_GPIO_DeInit+0x1f4>)
 8006f94:	4013      	ands	r3, r2
 8006f96:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f003 0303 	and.w	r3, r3, #3
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	220f      	movs	r2, #15
 8006fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006fa8:	4a2e      	ldr	r2, [pc, #184]	; (8007064 <HAL_GPIO_DeInit+0x1d0>)
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	089b      	lsrs	r3, r3, #2
 8006fae:	3302      	adds	r3, #2
 8006fb0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	43da      	mvns	r2, r3
 8006fb8:	482a      	ldr	r0, [pc, #168]	; (8007064 <HAL_GPIO_DeInit+0x1d0>)
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	089b      	lsrs	r3, r3, #2
 8006fbe:	400a      	ands	r2, r1
 8006fc0:	3302      	adds	r3, #2
 8006fc2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	005b      	lsls	r3, r3, #1
 8006fce:	2103      	movs	r1, #3
 8006fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd4:	43db      	mvns	r3, r3
 8006fd6:	401a      	ands	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	08da      	lsrs	r2, r3, #3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	3208      	adds	r2, #8
 8006fe4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f003 0307 	and.w	r3, r3, #7
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	220f      	movs	r2, #15
 8006ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff6:	43db      	mvns	r3, r3
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	08d2      	lsrs	r2, r2, #3
 8006ffc:	4019      	ands	r1, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	3208      	adds	r2, #8
 8007002:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68da      	ldr	r2, [r3, #12]
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	005b      	lsls	r3, r3, #1
 800700e:	2103      	movs	r1, #3
 8007010:	fa01 f303 	lsl.w	r3, r1, r3
 8007014:	43db      	mvns	r3, r3
 8007016:	401a      	ands	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	2101      	movs	r1, #1
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	fa01 f303 	lsl.w	r3, r1, r3
 8007028:	43db      	mvns	r3, r3
 800702a:	401a      	ands	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689a      	ldr	r2, [r3, #8]
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	005b      	lsls	r3, r3, #1
 8007038:	2103      	movs	r1, #3
 800703a:	fa01 f303 	lsl.w	r3, r1, r3
 800703e:	43db      	mvns	r3, r3
 8007040:	401a      	ands	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	3301      	adds	r3, #1
 800704a:	617b      	str	r3, [r7, #20]
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	2b0f      	cmp	r3, #15
 8007050:	f67f af2e 	bls.w	8006eb0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007054:	bf00      	nop
 8007056:	bf00      	nop
 8007058:	371c      	adds	r7, #28
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	40013800 	.word	0x40013800
 8007068:	40020000 	.word	0x40020000
 800706c:	40020400 	.word	0x40020400
 8007070:	40020800 	.word	0x40020800
 8007074:	40020c00 	.word	0x40020c00
 8007078:	40021000 	.word	0x40021000
 800707c:	40021400 	.word	0x40021400
 8007080:	40021800 	.word	0x40021800
 8007084:	40021c00 	.word	0x40021c00
 8007088:	40013c00 	.word	0x40013c00

0800708c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	460b      	mov	r3, r1
 8007096:	807b      	strh	r3, [r7, #2]
 8007098:	4613      	mov	r3, r2
 800709a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800709c:	787b      	ldrb	r3, [r7, #1]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80070a2:	887a      	ldrh	r2, [r7, #2]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80070a8:	e003      	b.n	80070b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80070aa:	887b      	ldrh	r3, [r7, #2]
 80070ac:	041a      	lsls	r2, r3, #16
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	619a      	str	r2, [r3, #24]
}
 80070b2:	bf00      	nop
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
	...

080070c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	4603      	mov	r3, r0
 80070c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80070ca:	4b08      	ldr	r3, [pc, #32]	; (80070ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80070cc:	695a      	ldr	r2, [r3, #20]
 80070ce:	88fb      	ldrh	r3, [r7, #6]
 80070d0:	4013      	ands	r3, r2
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d006      	beq.n	80070e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80070d6:	4a05      	ldr	r2, [pc, #20]	; (80070ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80070d8:	88fb      	ldrh	r3, [r7, #6]
 80070da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80070dc:	88fb      	ldrh	r3, [r7, #6]
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fd fcd6 	bl	8004a90 <HAL_GPIO_EXTI_Callback>
  }
}
 80070e4:	bf00      	nop
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	40013c00 	.word	0x40013c00

080070f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e12b      	b.n	800735a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d106      	bne.n	800711c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7fe f9fc 	bl	8005514 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2224      	movs	r2, #36	; 0x24
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f022 0201 	bic.w	r2, r2, #1
 8007132:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007142:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007152:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007154:	f002 fe5a 	bl	8009e0c <HAL_RCC_GetPCLK1Freq>
 8007158:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	4a81      	ldr	r2, [pc, #516]	; (8007364 <HAL_I2C_Init+0x274>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d807      	bhi.n	8007174 <HAL_I2C_Init+0x84>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	4a80      	ldr	r2, [pc, #512]	; (8007368 <HAL_I2C_Init+0x278>)
 8007168:	4293      	cmp	r3, r2
 800716a:	bf94      	ite	ls
 800716c:	2301      	movls	r3, #1
 800716e:	2300      	movhi	r3, #0
 8007170:	b2db      	uxtb	r3, r3
 8007172:	e006      	b.n	8007182 <HAL_I2C_Init+0x92>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4a7d      	ldr	r2, [pc, #500]	; (800736c <HAL_I2C_Init+0x27c>)
 8007178:	4293      	cmp	r3, r2
 800717a:	bf94      	ite	ls
 800717c:	2301      	movls	r3, #1
 800717e:	2300      	movhi	r3, #0
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d001      	beq.n	800718a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e0e7      	b.n	800735a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	4a78      	ldr	r2, [pc, #480]	; (8007370 <HAL_I2C_Init+0x280>)
 800718e:	fba2 2303 	umull	r2, r3, r2, r3
 8007192:	0c9b      	lsrs	r3, r3, #18
 8007194:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6a1b      	ldr	r3, [r3, #32]
 80071b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	4a6a      	ldr	r2, [pc, #424]	; (8007364 <HAL_I2C_Init+0x274>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d802      	bhi.n	80071c4 <HAL_I2C_Init+0xd4>
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	3301      	adds	r3, #1
 80071c2:	e009      	b.n	80071d8 <HAL_I2C_Init+0xe8>
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80071ca:	fb02 f303 	mul.w	r3, r2, r3
 80071ce:	4a69      	ldr	r2, [pc, #420]	; (8007374 <HAL_I2C_Init+0x284>)
 80071d0:	fba2 2303 	umull	r2, r3, r2, r3
 80071d4:	099b      	lsrs	r3, r3, #6
 80071d6:	3301      	adds	r3, #1
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	6812      	ldr	r2, [r2, #0]
 80071dc:	430b      	orrs	r3, r1
 80071de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80071ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	495c      	ldr	r1, [pc, #368]	; (8007364 <HAL_I2C_Init+0x274>)
 80071f4:	428b      	cmp	r3, r1
 80071f6:	d819      	bhi.n	800722c <HAL_I2C_Init+0x13c>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	1e59      	subs	r1, r3, #1
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	005b      	lsls	r3, r3, #1
 8007202:	fbb1 f3f3 	udiv	r3, r1, r3
 8007206:	1c59      	adds	r1, r3, #1
 8007208:	f640 73fc 	movw	r3, #4092	; 0xffc
 800720c:	400b      	ands	r3, r1
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00a      	beq.n	8007228 <HAL_I2C_Init+0x138>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	1e59      	subs	r1, r3, #1
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	005b      	lsls	r3, r3, #1
 800721c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007220:	3301      	adds	r3, #1
 8007222:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007226:	e051      	b.n	80072cc <HAL_I2C_Init+0x1dc>
 8007228:	2304      	movs	r3, #4
 800722a:	e04f      	b.n	80072cc <HAL_I2C_Init+0x1dc>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d111      	bne.n	8007258 <HAL_I2C_Init+0x168>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	1e58      	subs	r0, r3, #1
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6859      	ldr	r1, [r3, #4]
 800723c:	460b      	mov	r3, r1
 800723e:	005b      	lsls	r3, r3, #1
 8007240:	440b      	add	r3, r1
 8007242:	fbb0 f3f3 	udiv	r3, r0, r3
 8007246:	3301      	adds	r3, #1
 8007248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800724c:	2b00      	cmp	r3, #0
 800724e:	bf0c      	ite	eq
 8007250:	2301      	moveq	r3, #1
 8007252:	2300      	movne	r3, #0
 8007254:	b2db      	uxtb	r3, r3
 8007256:	e012      	b.n	800727e <HAL_I2C_Init+0x18e>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	1e58      	subs	r0, r3, #1
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6859      	ldr	r1, [r3, #4]
 8007260:	460b      	mov	r3, r1
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	440b      	add	r3, r1
 8007266:	0099      	lsls	r1, r3, #2
 8007268:	440b      	add	r3, r1
 800726a:	fbb0 f3f3 	udiv	r3, r0, r3
 800726e:	3301      	adds	r3, #1
 8007270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007274:	2b00      	cmp	r3, #0
 8007276:	bf0c      	ite	eq
 8007278:	2301      	moveq	r3, #1
 800727a:	2300      	movne	r3, #0
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	d001      	beq.n	8007286 <HAL_I2C_Init+0x196>
 8007282:	2301      	movs	r3, #1
 8007284:	e022      	b.n	80072cc <HAL_I2C_Init+0x1dc>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10e      	bne.n	80072ac <HAL_I2C_Init+0x1bc>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	1e58      	subs	r0, r3, #1
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6859      	ldr	r1, [r3, #4]
 8007296:	460b      	mov	r3, r1
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	440b      	add	r3, r1
 800729c:	fbb0 f3f3 	udiv	r3, r0, r3
 80072a0:	3301      	adds	r3, #1
 80072a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072aa:	e00f      	b.n	80072cc <HAL_I2C_Init+0x1dc>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	1e58      	subs	r0, r3, #1
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6859      	ldr	r1, [r3, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	440b      	add	r3, r1
 80072ba:	0099      	lsls	r1, r3, #2
 80072bc:	440b      	add	r3, r1
 80072be:	fbb0 f3f3 	udiv	r3, r0, r3
 80072c2:	3301      	adds	r3, #1
 80072c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072cc:	6879      	ldr	r1, [r7, #4]
 80072ce:	6809      	ldr	r1, [r1, #0]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	69da      	ldr	r2, [r3, #28]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	431a      	orrs	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	430a      	orrs	r2, r1
 80072ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80072fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	6911      	ldr	r1, [r2, #16]
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	68d2      	ldr	r2, [r2, #12]
 8007306:	4311      	orrs	r1, r2
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	6812      	ldr	r2, [r2, #0]
 800730c:	430b      	orrs	r3, r1
 800730e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	695a      	ldr	r2, [r3, #20]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	431a      	orrs	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	430a      	orrs	r2, r1
 800732a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f042 0201 	orr.w	r2, r2, #1
 800733a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2220      	movs	r2, #32
 8007346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	000186a0 	.word	0x000186a0
 8007368:	001e847f 	.word	0x001e847f
 800736c:	003d08ff 	.word	0x003d08ff
 8007370:	431bde83 	.word	0x431bde83
 8007374:	10624dd3 	.word	0x10624dd3

08007378 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e021      	b.n	80073ce <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2224      	movs	r2, #36	; 0x24
 800738e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f022 0201 	bic.w	r2, r2, #1
 80073a0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7fe f934 	bl	8005610 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
	...

080073d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b088      	sub	sp, #32
 80073dc:	af02      	add	r7, sp, #8
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	607a      	str	r2, [r7, #4]
 80073e2:	461a      	mov	r2, r3
 80073e4:	460b      	mov	r3, r1
 80073e6:	817b      	strh	r3, [r7, #10]
 80073e8:	4613      	mov	r3, r2
 80073ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80073ec:	f7fe fe66 	bl	80060bc <HAL_GetTick>
 80073f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	f040 80e0 	bne.w	80075c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	2319      	movs	r3, #25
 8007406:	2201      	movs	r2, #1
 8007408:	4970      	ldr	r1, [pc, #448]	; (80075cc <HAL_I2C_Master_Transmit+0x1f4>)
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f000 fe10 	bl	8008030 <I2C_WaitOnFlagUntilTimeout>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d001      	beq.n	800741a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007416:	2302      	movs	r3, #2
 8007418:	e0d3      	b.n	80075c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007420:	2b01      	cmp	r3, #1
 8007422:	d101      	bne.n	8007428 <HAL_I2C_Master_Transmit+0x50>
 8007424:	2302      	movs	r3, #2
 8007426:	e0cc      	b.n	80075c2 <HAL_I2C_Master_Transmit+0x1ea>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b01      	cmp	r3, #1
 800743c:	d007      	beq.n	800744e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f042 0201 	orr.w	r2, r2, #1
 800744c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800745c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2221      	movs	r2, #33	; 0x21
 8007462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2210      	movs	r2, #16
 800746a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	893a      	ldrh	r2, [r7, #8]
 800747e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007484:	b29a      	uxth	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	4a50      	ldr	r2, [pc, #320]	; (80075d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800748e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007490:	8979      	ldrh	r1, [r7, #10]
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	6a3a      	ldr	r2, [r7, #32]
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 fbca 	bl	8007c30 <I2C_MasterRequestWrite>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d001      	beq.n	80074a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e08d      	b.n	80075c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074a6:	2300      	movs	r3, #0
 80074a8:	613b      	str	r3, [r7, #16]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	695b      	ldr	r3, [r3, #20]
 80074b0:	613b      	str	r3, [r7, #16]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	699b      	ldr	r3, [r3, #24]
 80074b8:	613b      	str	r3, [r7, #16]
 80074ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80074bc:	e066      	b.n	800758c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	6a39      	ldr	r1, [r7, #32]
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 fe8a 	bl	80081dc <I2C_WaitOnTXEFlagUntilTimeout>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00d      	beq.n	80074ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	2b04      	cmp	r3, #4
 80074d4:	d107      	bne.n	80074e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e06b      	b.n	80075c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ee:	781a      	ldrb	r2, [r3, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007504:	b29b      	uxth	r3, r3
 8007506:	3b01      	subs	r3, #1
 8007508:	b29a      	uxth	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007512:	3b01      	subs	r3, #1
 8007514:	b29a      	uxth	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	f003 0304 	and.w	r3, r3, #4
 8007524:	2b04      	cmp	r3, #4
 8007526:	d11b      	bne.n	8007560 <HAL_I2C_Master_Transmit+0x188>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800752c:	2b00      	cmp	r3, #0
 800752e:	d017      	beq.n	8007560 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007534:	781a      	ldrb	r2, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007540:	1c5a      	adds	r2, r3, #1
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800754a:	b29b      	uxth	r3, r3
 800754c:	3b01      	subs	r3, #1
 800754e:	b29a      	uxth	r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007558:	3b01      	subs	r3, #1
 800755a:	b29a      	uxth	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	6a39      	ldr	r1, [r7, #32]
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f000 fe7a 	bl	800825e <I2C_WaitOnBTFFlagUntilTimeout>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00d      	beq.n	800758c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007574:	2b04      	cmp	r3, #4
 8007576:	d107      	bne.n	8007588 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007586:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e01a      	b.n	80075c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007590:	2b00      	cmp	r3, #0
 8007592:	d194      	bne.n	80074be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2220      	movs	r2, #32
 80075a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80075bc:	2300      	movs	r3, #0
 80075be:	e000      	b.n	80075c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80075c0:	2302      	movs	r3, #2
  }
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3718      	adds	r7, #24
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	00100002 	.word	0x00100002
 80075d0:	ffff0000 	.word	0xffff0000

080075d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b088      	sub	sp, #32
 80075d8:	af02      	add	r7, sp, #8
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	4608      	mov	r0, r1
 80075de:	4611      	mov	r1, r2
 80075e0:	461a      	mov	r2, r3
 80075e2:	4603      	mov	r3, r0
 80075e4:	817b      	strh	r3, [r7, #10]
 80075e6:	460b      	mov	r3, r1
 80075e8:	813b      	strh	r3, [r7, #8]
 80075ea:	4613      	mov	r3, r2
 80075ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80075ee:	f7fe fd65 	bl	80060bc <HAL_GetTick>
 80075f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b20      	cmp	r3, #32
 80075fe:	f040 80d9 	bne.w	80077b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	2319      	movs	r3, #25
 8007608:	2201      	movs	r2, #1
 800760a:	496d      	ldr	r1, [pc, #436]	; (80077c0 <HAL_I2C_Mem_Write+0x1ec>)
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f000 fd0f 	bl	8008030 <I2C_WaitOnFlagUntilTimeout>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d001      	beq.n	800761c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007618:	2302      	movs	r3, #2
 800761a:	e0cc      	b.n	80077b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007622:	2b01      	cmp	r3, #1
 8007624:	d101      	bne.n	800762a <HAL_I2C_Mem_Write+0x56>
 8007626:	2302      	movs	r3, #2
 8007628:	e0c5      	b.n	80077b6 <HAL_I2C_Mem_Write+0x1e2>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	2b01      	cmp	r3, #1
 800763e:	d007      	beq.n	8007650 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f042 0201 	orr.w	r2, r2, #1
 800764e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800765e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2221      	movs	r2, #33	; 0x21
 8007664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2240      	movs	r2, #64	; 0x40
 800766c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6a3a      	ldr	r2, [r7, #32]
 800767a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007680:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007686:	b29a      	uxth	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4a4d      	ldr	r2, [pc, #308]	; (80077c4 <HAL_I2C_Mem_Write+0x1f0>)
 8007690:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007692:	88f8      	ldrh	r0, [r7, #6]
 8007694:	893a      	ldrh	r2, [r7, #8]
 8007696:	8979      	ldrh	r1, [r7, #10]
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	9301      	str	r3, [sp, #4]
 800769c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	4603      	mov	r3, r0
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f000 fb46 	bl	8007d34 <I2C_RequestMemoryWrite>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d052      	beq.n	8007754 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e081      	b.n	80077b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 fd90 	bl	80081dc <I2C_WaitOnTXEFlagUntilTimeout>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00d      	beq.n	80076de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c6:	2b04      	cmp	r3, #4
 80076c8:	d107      	bne.n	80076da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e06b      	b.n	80077b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e2:	781a      	ldrb	r2, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ee:	1c5a      	adds	r2, r3, #1
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076f8:	3b01      	subs	r3, #1
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007704:	b29b      	uxth	r3, r3
 8007706:	3b01      	subs	r3, #1
 8007708:	b29a      	uxth	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	695b      	ldr	r3, [r3, #20]
 8007714:	f003 0304 	and.w	r3, r3, #4
 8007718:	2b04      	cmp	r3, #4
 800771a:	d11b      	bne.n	8007754 <HAL_I2C_Mem_Write+0x180>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007720:	2b00      	cmp	r3, #0
 8007722:	d017      	beq.n	8007754 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	781a      	ldrb	r2, [r3, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007734:	1c5a      	adds	r2, r3, #1
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800773e:	3b01      	subs	r3, #1
 8007740:	b29a      	uxth	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800774a:	b29b      	uxth	r3, r3
 800774c:	3b01      	subs	r3, #1
 800774e:	b29a      	uxth	r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1aa      	bne.n	80076b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f000 fd7c 	bl	800825e <I2C_WaitOnBTFFlagUntilTimeout>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00d      	beq.n	8007788 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007770:	2b04      	cmp	r3, #4
 8007772:	d107      	bne.n	8007784 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007782:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e016      	b.n	80077b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007796:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2220      	movs	r2, #32
 800779c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80077b0:	2300      	movs	r3, #0
 80077b2:	e000      	b.n	80077b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80077b4:	2302      	movs	r3, #2
  }
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3718      	adds	r7, #24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	00100002 	.word	0x00100002
 80077c4:	ffff0000 	.word	0xffff0000

080077c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b08c      	sub	sp, #48	; 0x30
 80077cc:	af02      	add	r7, sp, #8
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	4608      	mov	r0, r1
 80077d2:	4611      	mov	r1, r2
 80077d4:	461a      	mov	r2, r3
 80077d6:	4603      	mov	r3, r0
 80077d8:	817b      	strh	r3, [r7, #10]
 80077da:	460b      	mov	r3, r1
 80077dc:	813b      	strh	r3, [r7, #8]
 80077de:	4613      	mov	r3, r2
 80077e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80077e2:	f7fe fc6b 	bl	80060bc <HAL_GetTick>
 80077e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b20      	cmp	r3, #32
 80077f2:	f040 8208 	bne.w	8007c06 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	2319      	movs	r3, #25
 80077fc:	2201      	movs	r2, #1
 80077fe:	497b      	ldr	r1, [pc, #492]	; (80079ec <HAL_I2C_Mem_Read+0x224>)
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 fc15 	bl	8008030 <I2C_WaitOnFlagUntilTimeout>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d001      	beq.n	8007810 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800780c:	2302      	movs	r3, #2
 800780e:	e1fb      	b.n	8007c08 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007816:	2b01      	cmp	r3, #1
 8007818:	d101      	bne.n	800781e <HAL_I2C_Mem_Read+0x56>
 800781a:	2302      	movs	r3, #2
 800781c:	e1f4      	b.n	8007c08 <HAL_I2C_Mem_Read+0x440>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 0301 	and.w	r3, r3, #1
 8007830:	2b01      	cmp	r3, #1
 8007832:	d007      	beq.n	8007844 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f042 0201 	orr.w	r2, r2, #1
 8007842:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007852:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2222      	movs	r2, #34	; 0x22
 8007858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2240      	movs	r2, #64	; 0x40
 8007860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800786e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007874:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800787a:	b29a      	uxth	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	4a5b      	ldr	r2, [pc, #364]	; (80079f0 <HAL_I2C_Mem_Read+0x228>)
 8007884:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007886:	88f8      	ldrh	r0, [r7, #6]
 8007888:	893a      	ldrh	r2, [r7, #8]
 800788a:	8979      	ldrh	r1, [r7, #10]
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788e:	9301      	str	r3, [sp, #4]
 8007890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007892:	9300      	str	r3, [sp, #0]
 8007894:	4603      	mov	r3, r0
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f000 fae2 	bl	8007e60 <I2C_RequestMemoryRead>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e1b0      	b.n	8007c08 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d113      	bne.n	80078d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078ae:	2300      	movs	r3, #0
 80078b0:	623b      	str	r3, [r7, #32]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	695b      	ldr	r3, [r3, #20]
 80078b8:	623b      	str	r3, [r7, #32]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	623b      	str	r3, [r7, #32]
 80078c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	e184      	b.n	8007be0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d11b      	bne.n	8007916 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078ee:	2300      	movs	r3, #0
 80078f0:	61fb      	str	r3, [r7, #28]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	695b      	ldr	r3, [r3, #20]
 80078f8:	61fb      	str	r3, [r7, #28]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	61fb      	str	r3, [r7, #28]
 8007902:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007912:	601a      	str	r2, [r3, #0]
 8007914:	e164      	b.n	8007be0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800791a:	2b02      	cmp	r3, #2
 800791c:	d11b      	bne.n	8007956 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800792c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800793c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800793e:	2300      	movs	r3, #0
 8007940:	61bb      	str	r3, [r7, #24]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	695b      	ldr	r3, [r3, #20]
 8007948:	61bb      	str	r3, [r7, #24]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	699b      	ldr	r3, [r3, #24]
 8007950:	61bb      	str	r3, [r7, #24]
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	e144      	b.n	8007be0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007956:	2300      	movs	r3, #0
 8007958:	617b      	str	r3, [r7, #20]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	695b      	ldr	r3, [r3, #20]
 8007960:	617b      	str	r3, [r7, #20]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	617b      	str	r3, [r7, #20]
 800796a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800796c:	e138      	b.n	8007be0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007972:	2b03      	cmp	r3, #3
 8007974:	f200 80f1 	bhi.w	8007b5a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800797c:	2b01      	cmp	r3, #1
 800797e:	d123      	bne.n	80079c8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007982:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 fcab 	bl	80082e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e139      	b.n	8007c08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	691a      	ldr	r2, [r3, #16]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799e:	b2d2      	uxtb	r2, r2
 80079a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a6:	1c5a      	adds	r2, r3, #1
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079b0:	3b01      	subs	r3, #1
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079bc:	b29b      	uxth	r3, r3
 80079be:	3b01      	subs	r3, #1
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80079c6:	e10b      	b.n	8007be0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d14e      	bne.n	8007a6e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80079d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d2:	9300      	str	r3, [sp, #0]
 80079d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d6:	2200      	movs	r2, #0
 80079d8:	4906      	ldr	r1, [pc, #24]	; (80079f4 <HAL_I2C_Mem_Read+0x22c>)
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f000 fb28 	bl	8008030 <I2C_WaitOnFlagUntilTimeout>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d008      	beq.n	80079f8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e10e      	b.n	8007c08 <HAL_I2C_Mem_Read+0x440>
 80079ea:	bf00      	nop
 80079ec:	00100002 	.word	0x00100002
 80079f0:	ffff0000 	.word	0xffff0000
 80079f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	691a      	ldr	r2, [r3, #16]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a12:	b2d2      	uxtb	r2, r2
 8007a14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1a:	1c5a      	adds	r2, r3, #1
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a24:	3b01      	subs	r3, #1
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	3b01      	subs	r3, #1
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	691a      	ldr	r2, [r3, #16]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a44:	b2d2      	uxtb	r2, r2
 8007a46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4c:	1c5a      	adds	r2, r3, #1
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a56:	3b01      	subs	r3, #1
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	3b01      	subs	r3, #1
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a6c:	e0b8      	b.n	8007be0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a70:	9300      	str	r3, [sp, #0]
 8007a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a74:	2200      	movs	r2, #0
 8007a76:	4966      	ldr	r1, [pc, #408]	; (8007c10 <HAL_I2C_Mem_Read+0x448>)
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 fad9 	bl	8008030 <I2C_WaitOnFlagUntilTimeout>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d001      	beq.n	8007a88 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e0bf      	b.n	8007c08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	691a      	ldr	r2, [r3, #16]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa2:	b2d2      	uxtb	r2, r2
 8007aa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aaa:	1c5a      	adds	r2, r3, #1
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	494f      	ldr	r1, [pc, #316]	; (8007c10 <HAL_I2C_Mem_Read+0x448>)
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f000 faab 	bl	8008030 <I2C_WaitOnFlagUntilTimeout>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d001      	beq.n	8007ae4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e091      	b.n	8007c08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007af2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	691a      	ldr	r2, [r3, #16]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afe:	b2d2      	uxtb	r2, r2
 8007b00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b06:	1c5a      	adds	r2, r3, #1
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b10:	3b01      	subs	r3, #1
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	691a      	ldr	r2, [r3, #16]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b30:	b2d2      	uxtb	r2, r2
 8007b32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b38:	1c5a      	adds	r2, r3, #1
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b42:	3b01      	subs	r3, #1
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	3b01      	subs	r3, #1
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b58:	e042      	b.n	8007be0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f000 fbbe 	bl	80082e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d001      	beq.n	8007b6e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e04c      	b.n	8007c08 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	691a      	ldr	r2, [r3, #16]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b78:	b2d2      	uxtb	r2, r2
 8007b7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b80:	1c5a      	adds	r2, r3, #1
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	f003 0304 	and.w	r3, r3, #4
 8007baa:	2b04      	cmp	r3, #4
 8007bac:	d118      	bne.n	8007be0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	691a      	ldr	r2, [r3, #16]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb8:	b2d2      	uxtb	r2, r2
 8007bba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc0:	1c5a      	adds	r2, r3, #1
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f47f aec2 	bne.w	800796e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2220      	movs	r2, #32
 8007bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	e000      	b.n	8007c08 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007c06:	2302      	movs	r3, #2
  }
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3728      	adds	r7, #40	; 0x28
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	00010004 	.word	0x00010004

08007c14 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c22:	b2db      	uxtb	r3, r3
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b088      	sub	sp, #32
 8007c34:	af02      	add	r7, sp, #8
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	607a      	str	r2, [r7, #4]
 8007c3a:	603b      	str	r3, [r7, #0]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	2b08      	cmp	r3, #8
 8007c4a:	d006      	beq.n	8007c5a <I2C_MasterRequestWrite+0x2a>
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d003      	beq.n	8007c5a <I2C_MasterRequestWrite+0x2a>
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007c58:	d108      	bne.n	8007c6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c68:	601a      	str	r2, [r3, #0]
 8007c6a:	e00b      	b.n	8007c84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c70:	2b12      	cmp	r3, #18
 8007c72:	d107      	bne.n	8007c84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f000 f9cd 	bl	8008030 <I2C_WaitOnFlagUntilTimeout>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00d      	beq.n	8007cb8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007caa:	d103      	bne.n	8007cb4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e035      	b.n	8007d24 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cc0:	d108      	bne.n	8007cd4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007cc2:	897b      	ldrh	r3, [r7, #10]
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007cd0:	611a      	str	r2, [r3, #16]
 8007cd2:	e01b      	b.n	8007d0c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007cd4:	897b      	ldrh	r3, [r7, #10]
 8007cd6:	11db      	asrs	r3, r3, #7
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	f003 0306 	and.w	r3, r3, #6
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	f063 030f 	orn	r3, r3, #15
 8007ce4:	b2da      	uxtb	r2, r3
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	490e      	ldr	r1, [pc, #56]	; (8007d2c <I2C_MasterRequestWrite+0xfc>)
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f000 f9f3 	bl	80080de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e010      	b.n	8007d24 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007d02:	897b      	ldrh	r3, [r7, #10]
 8007d04:	b2da      	uxtb	r2, r3
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	4907      	ldr	r1, [pc, #28]	; (8007d30 <I2C_MasterRequestWrite+0x100>)
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f000 f9e3 	bl	80080de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e000      	b.n	8007d24 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3718      	adds	r7, #24
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	00010008 	.word	0x00010008
 8007d30:	00010002 	.word	0x00010002

08007d34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b088      	sub	sp, #32
 8007d38:	af02      	add	r7, sp, #8
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	4608      	mov	r0, r1
 8007d3e:	4611      	mov	r1, r2
 8007d40:	461a      	mov	r2, r3
 8007d42:	4603      	mov	r3, r0
 8007d44:	817b      	strh	r3, [r7, #10]
 8007d46:	460b      	mov	r3, r1
 8007d48:	813b      	strh	r3, [r7, #8]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f000 f960 	bl	8008030 <I2C_WaitOnFlagUntilTimeout>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00d      	beq.n	8007d92 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d84:	d103      	bne.n	8007d8e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	e05f      	b.n	8007e52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d92:	897b      	ldrh	r3, [r7, #10]
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	461a      	mov	r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007da0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da4:	6a3a      	ldr	r2, [r7, #32]
 8007da6:	492d      	ldr	r1, [pc, #180]	; (8007e5c <I2C_RequestMemoryWrite+0x128>)
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f000 f998 	bl	80080de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d001      	beq.n	8007db8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e04c      	b.n	8007e52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007db8:	2300      	movs	r3, #0
 8007dba:	617b      	str	r3, [r7, #20]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	617b      	str	r3, [r7, #20]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	617b      	str	r3, [r7, #20]
 8007dcc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dd0:	6a39      	ldr	r1, [r7, #32]
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f000 fa02 	bl	80081dc <I2C_WaitOnTXEFlagUntilTimeout>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00d      	beq.n	8007dfa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de2:	2b04      	cmp	r3, #4
 8007de4:	d107      	bne.n	8007df6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007df4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e02b      	b.n	8007e52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007dfa:	88fb      	ldrh	r3, [r7, #6]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d105      	bne.n	8007e0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e00:	893b      	ldrh	r3, [r7, #8]
 8007e02:	b2da      	uxtb	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	611a      	str	r2, [r3, #16]
 8007e0a:	e021      	b.n	8007e50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007e0c:	893b      	ldrh	r3, [r7, #8]
 8007e0e:	0a1b      	lsrs	r3, r3, #8
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	b2da      	uxtb	r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e1c:	6a39      	ldr	r1, [r7, #32]
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f000 f9dc 	bl	80081dc <I2C_WaitOnTXEFlagUntilTimeout>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00d      	beq.n	8007e46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2e:	2b04      	cmp	r3, #4
 8007e30:	d107      	bne.n	8007e42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e005      	b.n	8007e52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e46:	893b      	ldrh	r3, [r7, #8]
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3718      	adds	r7, #24
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	00010002 	.word	0x00010002

08007e60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b088      	sub	sp, #32
 8007e64:	af02      	add	r7, sp, #8
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	4608      	mov	r0, r1
 8007e6a:	4611      	mov	r1, r2
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	4603      	mov	r3, r0
 8007e70:	817b      	strh	r3, [r7, #10]
 8007e72:	460b      	mov	r3, r1
 8007e74:	813b      	strh	r3, [r7, #8]
 8007e76:	4613      	mov	r3, r2
 8007e78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f000 f8c2 	bl	8008030 <I2C_WaitOnFlagUntilTimeout>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00d      	beq.n	8007ece <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ec0:	d103      	bne.n	8007eca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ec8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e0aa      	b.n	8008024 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ece:	897b      	ldrh	r3, [r7, #10]
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007edc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	6a3a      	ldr	r2, [r7, #32]
 8007ee2:	4952      	ldr	r1, [pc, #328]	; (800802c <I2C_RequestMemoryRead+0x1cc>)
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f000 f8fa 	bl	80080de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e097      	b.n	8008024 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	617b      	str	r3, [r7, #20]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	617b      	str	r3, [r7, #20]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	617b      	str	r3, [r7, #20]
 8007f08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f0c:	6a39      	ldr	r1, [r7, #32]
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f000 f964 	bl	80081dc <I2C_WaitOnTXEFlagUntilTimeout>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00d      	beq.n	8007f36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1e:	2b04      	cmp	r3, #4
 8007f20:	d107      	bne.n	8007f32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e076      	b.n	8008024 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f36:	88fb      	ldrh	r3, [r7, #6]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d105      	bne.n	8007f48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f3c:	893b      	ldrh	r3, [r7, #8]
 8007f3e:	b2da      	uxtb	r2, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	611a      	str	r2, [r3, #16]
 8007f46:	e021      	b.n	8007f8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007f48:	893b      	ldrh	r3, [r7, #8]
 8007f4a:	0a1b      	lsrs	r3, r3, #8
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f58:	6a39      	ldr	r1, [r7, #32]
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f000 f93e 	bl	80081dc <I2C_WaitOnTXEFlagUntilTimeout>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00d      	beq.n	8007f82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6a:	2b04      	cmp	r3, #4
 8007f6c:	d107      	bne.n	8007f7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e050      	b.n	8008024 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f82:	893b      	ldrh	r3, [r7, #8]
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f8e:	6a39      	ldr	r1, [r7, #32]
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 f923 	bl	80081dc <I2C_WaitOnTXEFlagUntilTimeout>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00d      	beq.n	8007fb8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa0:	2b04      	cmp	r3, #4
 8007fa2:	d107      	bne.n	8007fb4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fb2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e035      	b.n	8008024 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fc6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fca:	9300      	str	r3, [sp, #0]
 8007fcc:	6a3b      	ldr	r3, [r7, #32]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	f000 f82b 	bl	8008030 <I2C_WaitOnFlagUntilTimeout>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00d      	beq.n	8007ffc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fee:	d103      	bne.n	8007ff8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ff6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	e013      	b.n	8008024 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007ffc:	897b      	ldrh	r3, [r7, #10]
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	f043 0301 	orr.w	r3, r3, #1
 8008004:	b2da      	uxtb	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800e:	6a3a      	ldr	r2, [r7, #32]
 8008010:	4906      	ldr	r1, [pc, #24]	; (800802c <I2C_RequestMemoryRead+0x1cc>)
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f000 f863 	bl	80080de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e000      	b.n	8008024 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3718      	adds	r7, #24
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	00010002 	.word	0x00010002

08008030 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	603b      	str	r3, [r7, #0]
 800803c:	4613      	mov	r3, r2
 800803e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008040:	e025      	b.n	800808e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008048:	d021      	beq.n	800808e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800804a:	f7fe f837 	bl	80060bc <HAL_GetTick>
 800804e:	4602      	mov	r2, r0
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	683a      	ldr	r2, [r7, #0]
 8008056:	429a      	cmp	r2, r3
 8008058:	d302      	bcc.n	8008060 <I2C_WaitOnFlagUntilTimeout+0x30>
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d116      	bne.n	800808e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2220      	movs	r2, #32
 800806a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807a:	f043 0220 	orr.w	r2, r3, #32
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e023      	b.n	80080d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	0c1b      	lsrs	r3, r3, #16
 8008092:	b2db      	uxtb	r3, r3
 8008094:	2b01      	cmp	r3, #1
 8008096:	d10d      	bne.n	80080b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	695b      	ldr	r3, [r3, #20]
 800809e:	43da      	mvns	r2, r3
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	4013      	ands	r3, r2
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	bf0c      	ite	eq
 80080aa:	2301      	moveq	r3, #1
 80080ac:	2300      	movne	r3, #0
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	461a      	mov	r2, r3
 80080b2:	e00c      	b.n	80080ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	43da      	mvns	r2, r3
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	4013      	ands	r3, r2
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	bf0c      	ite	eq
 80080c6:	2301      	moveq	r3, #1
 80080c8:	2300      	movne	r3, #0
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	461a      	mov	r2, r3
 80080ce:	79fb      	ldrb	r3, [r7, #7]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d0b6      	beq.n	8008042 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b084      	sub	sp, #16
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	60f8      	str	r0, [r7, #12]
 80080e6:	60b9      	str	r1, [r7, #8]
 80080e8:	607a      	str	r2, [r7, #4]
 80080ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80080ec:	e051      	b.n	8008192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	695b      	ldr	r3, [r3, #20]
 80080f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080fc:	d123      	bne.n	8008146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800810c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008116:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2220      	movs	r2, #32
 8008122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008132:	f043 0204 	orr.w	r2, r3, #4
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e046      	b.n	80081d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800814c:	d021      	beq.n	8008192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800814e:	f7fd ffb5 	bl	80060bc <HAL_GetTick>
 8008152:	4602      	mov	r2, r0
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	429a      	cmp	r2, r3
 800815c:	d302      	bcc.n	8008164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d116      	bne.n	8008192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2220      	movs	r2, #32
 800816e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817e:	f043 0220 	orr.w	r2, r3, #32
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e020      	b.n	80081d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	0c1b      	lsrs	r3, r3, #16
 8008196:	b2db      	uxtb	r3, r3
 8008198:	2b01      	cmp	r3, #1
 800819a:	d10c      	bne.n	80081b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	695b      	ldr	r3, [r3, #20]
 80081a2:	43da      	mvns	r2, r3
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	4013      	ands	r3, r2
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	bf14      	ite	ne
 80081ae:	2301      	movne	r3, #1
 80081b0:	2300      	moveq	r3, #0
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	e00b      	b.n	80081ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	43da      	mvns	r2, r3
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	4013      	ands	r3, r2
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	bf14      	ite	ne
 80081c8:	2301      	movne	r3, #1
 80081ca:	2300      	moveq	r3, #0
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d18d      	bne.n	80080ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80081e8:	e02d      	b.n	8008246 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f000 f8ce 	bl	800838c <I2C_IsAcknowledgeFailed>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e02d      	b.n	8008256 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008200:	d021      	beq.n	8008246 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008202:	f7fd ff5b 	bl	80060bc <HAL_GetTick>
 8008206:	4602      	mov	r2, r0
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	1ad3      	subs	r3, r2, r3
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	429a      	cmp	r2, r3
 8008210:	d302      	bcc.n	8008218 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d116      	bne.n	8008246 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2220      	movs	r2, #32
 8008222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2200      	movs	r2, #0
 800822a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008232:	f043 0220 	orr.w	r2, r3, #32
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e007      	b.n	8008256 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	695b      	ldr	r3, [r3, #20]
 800824c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008250:	2b80      	cmp	r3, #128	; 0x80
 8008252:	d1ca      	bne.n	80081ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800826a:	e02d      	b.n	80082c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f000 f88d 	bl	800838c <I2C_IsAcknowledgeFailed>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	e02d      	b.n	80082d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008282:	d021      	beq.n	80082c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008284:	f7fd ff1a 	bl	80060bc <HAL_GetTick>
 8008288:	4602      	mov	r2, r0
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	429a      	cmp	r2, r3
 8008292:	d302      	bcc.n	800829a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d116      	bne.n	80082c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2220      	movs	r2, #32
 80082a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b4:	f043 0220 	orr.w	r2, r3, #32
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	e007      	b.n	80082d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	f003 0304 	and.w	r3, r3, #4
 80082d2:	2b04      	cmp	r3, #4
 80082d4:	d1ca      	bne.n	800826c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80082ec:	e042      	b.n	8008374 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	695b      	ldr	r3, [r3, #20]
 80082f4:	f003 0310 	and.w	r3, r3, #16
 80082f8:	2b10      	cmp	r3, #16
 80082fa:	d119      	bne.n	8008330 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f06f 0210 	mvn.w	r2, #16
 8008304:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2220      	movs	r2, #32
 8008310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e029      	b.n	8008384 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008330:	f7fd fec4 	bl	80060bc <HAL_GetTick>
 8008334:	4602      	mov	r2, r0
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	1ad3      	subs	r3, r2, r3
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	429a      	cmp	r2, r3
 800833e:	d302      	bcc.n	8008346 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d116      	bne.n	8008374 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2220      	movs	r2, #32
 8008350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008360:	f043 0220 	orr.w	r2, r3, #32
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2200      	movs	r2, #0
 800836c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e007      	b.n	8008384 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837e:	2b40      	cmp	r3, #64	; 0x40
 8008380:	d1b5      	bne.n	80082ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	695b      	ldr	r3, [r3, #20]
 800839a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800839e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083a2:	d11b      	bne.n	80083dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80083ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2220      	movs	r2, #32
 80083b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c8:	f043 0204 	orr.w	r2, r3, #4
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e000      	b.n	80083de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
	...

080083ec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b088      	sub	sp, #32
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d101      	bne.n	80083fe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e128      	b.n	8008650 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008404:	b2db      	uxtb	r3, r3
 8008406:	2b00      	cmp	r3, #0
 8008408:	d109      	bne.n	800841e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a90      	ldr	r2, [pc, #576]	; (8008658 <HAL_I2S_Init+0x26c>)
 8008416:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7fd f933 	bl	8005684 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2202      	movs	r2, #2
 8008422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	69db      	ldr	r3, [r3, #28]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	6812      	ldr	r2, [r2, #0]
 8008430:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008434:	f023 030f 	bic.w	r3, r3, #15
 8008438:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2202      	movs	r2, #2
 8008440:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	695b      	ldr	r3, [r3, #20]
 8008446:	2b02      	cmp	r3, #2
 8008448:	d060      	beq.n	800850c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d102      	bne.n	8008458 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8008452:	2310      	movs	r3, #16
 8008454:	617b      	str	r3, [r7, #20]
 8008456:	e001      	b.n	800845c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8008458:	2320      	movs	r3, #32
 800845a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	2b20      	cmp	r3, #32
 8008462:	d802      	bhi.n	800846a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	005b      	lsls	r3, r3, #1
 8008468:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800846a:	2001      	movs	r0, #1
 800846c:	f001 fe36 	bl	800a0dc <HAL_RCCEx_GetPeriphCLKFreq>
 8008470:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800847a:	d125      	bne.n	80084c8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d010      	beq.n	80084a6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	fbb2 f2f3 	udiv	r2, r2, r3
 800848e:	4613      	mov	r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	4413      	add	r3, r2
 8008494:	005b      	lsls	r3, r3, #1
 8008496:	461a      	mov	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	695b      	ldr	r3, [r3, #20]
 800849c:	fbb2 f3f3 	udiv	r3, r2, r3
 80084a0:	3305      	adds	r3, #5
 80084a2:	613b      	str	r3, [r7, #16]
 80084a4:	e01f      	b.n	80084e6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	00db      	lsls	r3, r3, #3
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80084b0:	4613      	mov	r3, r2
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	4413      	add	r3, r2
 80084b6:	005b      	lsls	r3, r3, #1
 80084b8:	461a      	mov	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	695b      	ldr	r3, [r3, #20]
 80084be:	fbb2 f3f3 	udiv	r3, r2, r3
 80084c2:	3305      	adds	r3, #5
 80084c4:	613b      	str	r3, [r7, #16]
 80084c6:	e00e      	b.n	80084e6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80084d0:	4613      	mov	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	005b      	lsls	r3, r3, #1
 80084d8:	461a      	mov	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	fbb2 f3f3 	udiv	r3, r2, r3
 80084e2:	3305      	adds	r3, #5
 80084e4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	4a5c      	ldr	r2, [pc, #368]	; (800865c <HAL_I2S_Init+0x270>)
 80084ea:	fba2 2303 	umull	r2, r3, r2, r3
 80084ee:	08db      	lsrs	r3, r3, #3
 80084f0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	f003 0301 	and.w	r3, r3, #1
 80084f8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80084fa:	693a      	ldr	r2, [r7, #16]
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	085b      	lsrs	r3, r3, #1
 8008502:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	021b      	lsls	r3, r3, #8
 8008508:	61bb      	str	r3, [r7, #24]
 800850a:	e003      	b.n	8008514 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800850c:	2302      	movs	r3, #2
 800850e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8008510:	2300      	movs	r3, #0
 8008512:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	2b01      	cmp	r3, #1
 8008518:	d902      	bls.n	8008520 <HAL_I2S_Init+0x134>
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	2bff      	cmp	r3, #255	; 0xff
 800851e:	d907      	bls.n	8008530 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008524:	f043 0210 	orr.w	r2, r3, #16
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	e08f      	b.n	8008650 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	691a      	ldr	r2, [r3, #16]
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	ea42 0103 	orr.w	r1, r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	69fa      	ldr	r2, [r7, #28]
 8008540:	430a      	orrs	r2, r1
 8008542:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	69db      	ldr	r3, [r3, #28]
 800854a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800854e:	f023 030f 	bic.w	r3, r3, #15
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	6851      	ldr	r1, [r2, #4]
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	6892      	ldr	r2, [r2, #8]
 800855a:	4311      	orrs	r1, r2
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	68d2      	ldr	r2, [r2, #12]
 8008560:	4311      	orrs	r1, r2
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	6992      	ldr	r2, [r2, #24]
 8008566:	430a      	orrs	r2, r1
 8008568:	431a      	orrs	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008572:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a1b      	ldr	r3, [r3, #32]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d161      	bne.n	8008640 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a38      	ldr	r2, [pc, #224]	; (8008660 <HAL_I2S_Init+0x274>)
 8008580:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a37      	ldr	r2, [pc, #220]	; (8008664 <HAL_I2S_Init+0x278>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d101      	bne.n	8008590 <HAL_I2S_Init+0x1a4>
 800858c:	4b36      	ldr	r3, [pc, #216]	; (8008668 <HAL_I2S_Init+0x27c>)
 800858e:	e001      	b.n	8008594 <HAL_I2S_Init+0x1a8>
 8008590:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008594:	69db      	ldr	r3, [r3, #28]
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	6812      	ldr	r2, [r2, #0]
 800859a:	4932      	ldr	r1, [pc, #200]	; (8008664 <HAL_I2S_Init+0x278>)
 800859c:	428a      	cmp	r2, r1
 800859e:	d101      	bne.n	80085a4 <HAL_I2S_Init+0x1b8>
 80085a0:	4a31      	ldr	r2, [pc, #196]	; (8008668 <HAL_I2S_Init+0x27c>)
 80085a2:	e001      	b.n	80085a8 <HAL_I2S_Init+0x1bc>
 80085a4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80085a8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80085ac:	f023 030f 	bic.w	r3, r3, #15
 80085b0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a2b      	ldr	r2, [pc, #172]	; (8008664 <HAL_I2S_Init+0x278>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d101      	bne.n	80085c0 <HAL_I2S_Init+0x1d4>
 80085bc:	4b2a      	ldr	r3, [pc, #168]	; (8008668 <HAL_I2S_Init+0x27c>)
 80085be:	e001      	b.n	80085c4 <HAL_I2S_Init+0x1d8>
 80085c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80085c4:	2202      	movs	r2, #2
 80085c6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a25      	ldr	r2, [pc, #148]	; (8008664 <HAL_I2S_Init+0x278>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d101      	bne.n	80085d6 <HAL_I2S_Init+0x1ea>
 80085d2:	4b25      	ldr	r3, [pc, #148]	; (8008668 <HAL_I2S_Init+0x27c>)
 80085d4:	e001      	b.n	80085da <HAL_I2S_Init+0x1ee>
 80085d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80085da:	69db      	ldr	r3, [r3, #28]
 80085dc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085e6:	d003      	beq.n	80085f0 <HAL_I2S_Init+0x204>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d103      	bne.n	80085f8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80085f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085f4:	613b      	str	r3, [r7, #16]
 80085f6:	e001      	b.n	80085fc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80085f8:	2300      	movs	r3, #0
 80085fa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008606:	4313      	orrs	r3, r2
 8008608:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008610:	4313      	orrs	r3, r2
 8008612:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800861a:	4313      	orrs	r3, r2
 800861c:	b29a      	uxth	r2, r3
 800861e:	897b      	ldrh	r3, [r7, #10]
 8008620:	4313      	orrs	r3, r2
 8008622:	b29b      	uxth	r3, r3
 8008624:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008628:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a0d      	ldr	r2, [pc, #52]	; (8008664 <HAL_I2S_Init+0x278>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d101      	bne.n	8008638 <HAL_I2S_Init+0x24c>
 8008634:	4b0c      	ldr	r3, [pc, #48]	; (8008668 <HAL_I2S_Init+0x27c>)
 8008636:	e001      	b.n	800863c <HAL_I2S_Init+0x250>
 8008638:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800863c:	897a      	ldrh	r2, [r7, #10]
 800863e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2201      	movs	r2, #1
 800864a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3720      	adds	r7, #32
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	08008ef1 	.word	0x08008ef1
 800865c:	cccccccd 	.word	0xcccccccd
 8008660:	08009079 	.word	0x08009079
 8008664:	40003800 	.word	0x40003800
 8008668:	40003400 	.word	0x40003400

0800866c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b086      	sub	sp, #24
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	4613      	mov	r3, r2
 8008678:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <HAL_I2S_Transmit_DMA+0x1a>
 8008680:	88fb      	ldrh	r3, [r7, #6]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d101      	bne.n	800868a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	e08e      	b.n	80087a8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b01      	cmp	r3, #1
 8008694:	d101      	bne.n	800869a <HAL_I2S_Transmit_DMA+0x2e>
 8008696:	2302      	movs	r3, #2
 8008698:	e086      	b.n	80087a8 <HAL_I2S_Transmit_DMA+0x13c>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2201      	movs	r2, #1
 800869e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d005      	beq.n	80086ba <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80086b6:	2302      	movs	r3, #2
 80086b8:	e076      	b.n	80087a8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2203      	movs	r2, #3
 80086be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2200      	movs	r2, #0
 80086c6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	68ba      	ldr	r2, [r7, #8]
 80086cc:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	69db      	ldr	r3, [r3, #28]
 80086d4:	f003 0307 	and.w	r3, r3, #7
 80086d8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	2b03      	cmp	r3, #3
 80086de:	d002      	beq.n	80086e6 <HAL_I2S_Transmit_DMA+0x7a>
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	2b05      	cmp	r3, #5
 80086e4:	d10a      	bne.n	80086fc <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80086e6:	88fb      	ldrh	r3, [r7, #6]
 80086e8:	005b      	lsls	r3, r3, #1
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80086f0:	88fb      	ldrh	r3, [r7, #6]
 80086f2:	005b      	lsls	r3, r3, #1
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80086fa:	e005      	b.n	8008708 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	88fa      	ldrh	r2, [r7, #6]
 8008700:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	88fa      	ldrh	r2, [r7, #6]
 8008706:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870c:	4a28      	ldr	r2, [pc, #160]	; (80087b0 <HAL_I2S_Transmit_DMA+0x144>)
 800870e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008714:	4a27      	ldr	r2, [pc, #156]	; (80087b4 <HAL_I2S_Transmit_DMA+0x148>)
 8008716:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871c:	4a26      	ldr	r2, [pc, #152]	; (80087b8 <HAL_I2S_Transmit_DMA+0x14c>)
 800871e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8008728:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8008730:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008736:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8008738:	f7fd fede 	bl	80064f8 <HAL_DMA_Start_IT>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00f      	beq.n	8008762 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008746:	f043 0208 	orr.w	r2, r3, #8
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	e022      	b.n	80087a8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	69db      	ldr	r3, [r3, #28]
 8008768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800876c:	2b00      	cmp	r3, #0
 800876e:	d107      	bne.n	8008780 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	69da      	ldr	r2, [r3, #28]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800877e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f003 0302 	and.w	r3, r3, #2
 800878a:	2b00      	cmp	r3, #0
 800878c:	d107      	bne.n	800879e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	685a      	ldr	r2, [r3, #4]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f042 0202 	orr.w	r2, r2, #2
 800879c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3718      	adds	r7, #24
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	08008dcf 	.word	0x08008dcf
 80087b4:	08008d8d 	.word	0x08008d8d
 80087b8:	08008deb 	.word	0x08008deb

080087bc <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d101      	bne.n	80087d4 <HAL_I2S_DMAPause+0x18>
 80087d0:	2302      	movs	r3, #2
 80087d2:	e04a      	b.n	800886a <HAL_I2S_DMAPause+0xae>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	2b03      	cmp	r3, #3
 80087e6:	d108      	bne.n	80087fa <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f022 0202 	bic.w	r2, r2, #2
 80087f6:	605a      	str	r2, [r3, #4]
 80087f8:	e032      	b.n	8008860 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b04      	cmp	r3, #4
 8008804:	d108      	bne.n	8008818 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	685a      	ldr	r2, [r3, #4]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f022 0201 	bic.w	r2, r2, #1
 8008814:	605a      	str	r2, [r3, #4]
 8008816:	e023      	b.n	8008860 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800881e:	b2db      	uxtb	r3, r3
 8008820:	2b05      	cmp	r3, #5
 8008822:	d11d      	bne.n	8008860 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	685a      	ldr	r2, [r3, #4]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f022 0203 	bic.w	r2, r2, #3
 8008832:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a0f      	ldr	r2, [pc, #60]	; (8008878 <HAL_I2S_DMAPause+0xbc>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d101      	bne.n	8008842 <HAL_I2S_DMAPause+0x86>
 800883e:	4b0f      	ldr	r3, [pc, #60]	; (800887c <HAL_I2S_DMAPause+0xc0>)
 8008840:	e001      	b.n	8008846 <HAL_I2S_DMAPause+0x8a>
 8008842:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008846:	685a      	ldr	r2, [r3, #4]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	490a      	ldr	r1, [pc, #40]	; (8008878 <HAL_I2S_DMAPause+0xbc>)
 800884e:	428b      	cmp	r3, r1
 8008850:	d101      	bne.n	8008856 <HAL_I2S_DMAPause+0x9a>
 8008852:	4b0a      	ldr	r3, [pc, #40]	; (800887c <HAL_I2S_DMAPause+0xc0>)
 8008854:	e001      	b.n	800885a <HAL_I2S_DMAPause+0x9e>
 8008856:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800885a:	f022 0203 	bic.w	r2, r2, #3
 800885e:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	40003800 	.word	0x40003800
 800887c:	40003400 	.word	0x40003400

08008880 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800888e:	b2db      	uxtb	r3, r3
 8008890:	2b01      	cmp	r3, #1
 8008892:	d101      	bne.n	8008898 <HAL_I2S_DMAResume+0x18>
 8008894:	2302      	movs	r3, #2
 8008896:	e07d      	b.n	8008994 <HAL_I2S_DMAResume+0x114>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	2b03      	cmp	r3, #3
 80088aa:	d108      	bne.n	80088be <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	685a      	ldr	r2, [r3, #4]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f042 0202 	orr.w	r2, r2, #2
 80088ba:	605a      	str	r2, [r3, #4]
 80088bc:	e056      	b.n	800896c <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b04      	cmp	r3, #4
 80088c8:	d108      	bne.n	80088dc <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	685a      	ldr	r2, [r3, #4]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f042 0201 	orr.w	r2, r2, #1
 80088d8:	605a      	str	r2, [r3, #4]
 80088da:	e047      	b.n	800896c <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	2b05      	cmp	r3, #5
 80088e6:	d141      	bne.n	800896c <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	685a      	ldr	r2, [r3, #4]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f042 0203 	orr.w	r2, r2, #3
 80088f6:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a28      	ldr	r2, [pc, #160]	; (80089a0 <HAL_I2S_DMAResume+0x120>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d101      	bne.n	8008906 <HAL_I2S_DMAResume+0x86>
 8008902:	4b28      	ldr	r3, [pc, #160]	; (80089a4 <HAL_I2S_DMAResume+0x124>)
 8008904:	e001      	b.n	800890a <HAL_I2S_DMAResume+0x8a>
 8008906:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800890a:	685a      	ldr	r2, [r3, #4]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4923      	ldr	r1, [pc, #140]	; (80089a0 <HAL_I2S_DMAResume+0x120>)
 8008912:	428b      	cmp	r3, r1
 8008914:	d101      	bne.n	800891a <HAL_I2S_DMAResume+0x9a>
 8008916:	4b23      	ldr	r3, [pc, #140]	; (80089a4 <HAL_I2S_DMAResume+0x124>)
 8008918:	e001      	b.n	800891e <HAL_I2S_DMAResume+0x9e>
 800891a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800891e:	f042 0203 	orr.w	r2, r2, #3
 8008922:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a1d      	ldr	r2, [pc, #116]	; (80089a0 <HAL_I2S_DMAResume+0x120>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d101      	bne.n	8008932 <HAL_I2S_DMAResume+0xb2>
 800892e:	4b1d      	ldr	r3, [pc, #116]	; (80089a4 <HAL_I2S_DMAResume+0x124>)
 8008930:	e001      	b.n	8008936 <HAL_I2S_DMAResume+0xb6>
 8008932:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008936:	69db      	ldr	r3, [r3, #28]
 8008938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800893c:	2b00      	cmp	r3, #0
 800893e:	d115      	bne.n	800896c <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a16      	ldr	r2, [pc, #88]	; (80089a0 <HAL_I2S_DMAResume+0x120>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d101      	bne.n	800894e <HAL_I2S_DMAResume+0xce>
 800894a:	4b16      	ldr	r3, [pc, #88]	; (80089a4 <HAL_I2S_DMAResume+0x124>)
 800894c:	e001      	b.n	8008952 <HAL_I2S_DMAResume+0xd2>
 800894e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008952:	69da      	ldr	r2, [r3, #28]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4911      	ldr	r1, [pc, #68]	; (80089a0 <HAL_I2S_DMAResume+0x120>)
 800895a:	428b      	cmp	r3, r1
 800895c:	d101      	bne.n	8008962 <HAL_I2S_DMAResume+0xe2>
 800895e:	4b11      	ldr	r3, [pc, #68]	; (80089a4 <HAL_I2S_DMAResume+0x124>)
 8008960:	e001      	b.n	8008966 <HAL_I2S_DMAResume+0xe6>
 8008962:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008966:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800896a:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	69db      	ldr	r3, [r3, #28]
 8008972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008976:	2b00      	cmp	r3, #0
 8008978:	d107      	bne.n	800898a <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	69da      	ldr	r2, [r3, #28]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008988:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr
 80089a0:	40003800 	.word	0x40003800
 80089a4:	40003400 	.word	0x40003400

080089a8 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b088      	sub	sp, #32
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80089b0:	2300      	movs	r3, #0
 80089b2:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089bc:	d004      	beq.n	80089c8 <HAL_I2S_DMAStop+0x20>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f040 80d1 	bne.w	8008b6a <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00f      	beq.n	80089f0 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7fd fde7 	bl	80065a8 <HAL_DMA_Abort>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d007      	beq.n	80089f0 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089e4:	f043 0208 	orr.w	r2, r3, #8
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80089f0:	2364      	movs	r3, #100	; 0x64
 80089f2:	2201      	movs	r2, #1
 80089f4:	2102      	movs	r1, #2
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fb04 	bl	8009004 <I2S_WaitFlagStateUntilTimeout>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00b      	beq.n	8008a1a <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a06:	f043 0201 	orr.w	r2, r3, #1
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2201      	movs	r2, #1
 8008a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8008a1a:	2364      	movs	r3, #100	; 0x64
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	2180      	movs	r1, #128	; 0x80
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 faef 	bl	8009004 <I2S_WaitFlagStateUntilTimeout>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00b      	beq.n	8008a44 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a30:	f043 0201 	orr.w	r2, r3, #1
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	69da      	ldr	r2, [r3, #28]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a52:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008a54:	2300      	movs	r3, #0
 8008a56:	617b      	str	r3, [r7, #20]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	617b      	str	r3, [r7, #20]
 8008a60:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	685a      	ldr	r2, [r3, #4]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f022 0202 	bic.w	r2, r2, #2
 8008a70:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2b05      	cmp	r3, #5
 8008a7c:	f040 8165 	bne.w	8008d4a <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00f      	beq.n	8008aa8 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7fd fd8b 	bl	80065a8 <HAL_DMA_Abort>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d007      	beq.n	8008aa8 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a9c:	f043 0208 	orr.w	r2, r3, #8
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a8a      	ldr	r2, [pc, #552]	; (8008cd8 <HAL_I2S_DMAStop+0x330>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d101      	bne.n	8008ab6 <HAL_I2S_DMAStop+0x10e>
 8008ab2:	4b8a      	ldr	r3, [pc, #552]	; (8008cdc <HAL_I2S_DMAStop+0x334>)
 8008ab4:	e001      	b.n	8008aba <HAL_I2S_DMAStop+0x112>
 8008ab6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008aba:	69da      	ldr	r2, [r3, #28]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4985      	ldr	r1, [pc, #532]	; (8008cd8 <HAL_I2S_DMAStop+0x330>)
 8008ac2:	428b      	cmp	r3, r1
 8008ac4:	d101      	bne.n	8008aca <HAL_I2S_DMAStop+0x122>
 8008ac6:	4b85      	ldr	r3, [pc, #532]	; (8008cdc <HAL_I2S_DMAStop+0x334>)
 8008ac8:	e001      	b.n	8008ace <HAL_I2S_DMAStop+0x126>
 8008aca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ad2:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	613b      	str	r3, [r7, #16]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a7e      	ldr	r2, [pc, #504]	; (8008cd8 <HAL_I2S_DMAStop+0x330>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d101      	bne.n	8008ae6 <HAL_I2S_DMAStop+0x13e>
 8008ae2:	4b7e      	ldr	r3, [pc, #504]	; (8008cdc <HAL_I2S_DMAStop+0x334>)
 8008ae4:	e001      	b.n	8008aea <HAL_I2S_DMAStop+0x142>
 8008ae6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	613b      	str	r3, [r7, #16]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a79      	ldr	r2, [pc, #484]	; (8008cd8 <HAL_I2S_DMAStop+0x330>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d101      	bne.n	8008afc <HAL_I2S_DMAStop+0x154>
 8008af8:	4b78      	ldr	r3, [pc, #480]	; (8008cdc <HAL_I2S_DMAStop+0x334>)
 8008afa:	e001      	b.n	8008b00 <HAL_I2S_DMAStop+0x158>
 8008afc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	613b      	str	r3, [r7, #16]
 8008b04:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a73      	ldr	r2, [pc, #460]	; (8008cd8 <HAL_I2S_DMAStop+0x330>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d101      	bne.n	8008b14 <HAL_I2S_DMAStop+0x16c>
 8008b10:	4b72      	ldr	r3, [pc, #456]	; (8008cdc <HAL_I2S_DMAStop+0x334>)
 8008b12:	e001      	b.n	8008b18 <HAL_I2S_DMAStop+0x170>
 8008b14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008b18:	685a      	ldr	r2, [r3, #4]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	496e      	ldr	r1, [pc, #440]	; (8008cd8 <HAL_I2S_DMAStop+0x330>)
 8008b20:	428b      	cmp	r3, r1
 8008b22:	d101      	bne.n	8008b28 <HAL_I2S_DMAStop+0x180>
 8008b24:	4b6d      	ldr	r3, [pc, #436]	; (8008cdc <HAL_I2S_DMAStop+0x334>)
 8008b26:	e001      	b.n	8008b2c <HAL_I2S_DMAStop+0x184>
 8008b28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008b2c:	f022 0201 	bic.w	r2, r2, #1
 8008b30:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10c      	bne.n	8008b54 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8008b52:	e0fa      	b.n	8008d4a <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a5f      	ldr	r2, [pc, #380]	; (8008cd8 <HAL_I2S_DMAStop+0x330>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d101      	bne.n	8008b62 <HAL_I2S_DMAStop+0x1ba>
 8008b5e:	4b5f      	ldr	r3, [pc, #380]	; (8008cdc <HAL_I2S_DMAStop+0x334>)
 8008b60:	e001      	b.n	8008b66 <HAL_I2S_DMAStop+0x1be>
 8008b62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008b66:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8008b68:	e0ef      	b.n	8008d4a <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b72:	d005      	beq.n	8008b80 <HAL_I2S_DMAStop+0x1d8>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b7c:	f040 80e5 	bne.w	8008d4a <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00f      	beq.n	8008ba8 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7fd fd0b 	bl	80065a8 <HAL_DMA_Abort>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d007      	beq.n	8008ba8 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b9c:	f043 0208 	orr.w	r2, r3, #8
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	2b05      	cmp	r3, #5
 8008bb2:	f040 809a 	bne.w	8008cea <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00f      	beq.n	8008bde <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fd fcf0 	bl	80065a8 <HAL_DMA_Abort>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d007      	beq.n	8008bde <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bd2:	f043 0208 	orr.w	r2, r3, #8
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8008bde:	f7fd fa6d 	bl	80060bc <HAL_GetTick>
 8008be2:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8008be4:	e012      	b.n	8008c0c <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8008be6:	f7fd fa69 	bl	80060bc <HAL_GetTick>
 8008bea:	4602      	mov	r2, r0
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	2b64      	cmp	r3, #100	; 0x64
 8008bf2:	d90b      	bls.n	8008c0c <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bf8:	f043 0201 	orr.w	r2, r3, #1
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a31      	ldr	r2, [pc, #196]	; (8008cd8 <HAL_I2S_DMAStop+0x330>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d101      	bne.n	8008c1a <HAL_I2S_DMAStop+0x272>
 8008c16:	4b31      	ldr	r3, [pc, #196]	; (8008cdc <HAL_I2S_DMAStop+0x334>)
 8008c18:	e001      	b.n	8008c1e <HAL_I2S_DMAStop+0x276>
 8008c1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	f003 0302 	and.w	r3, r3, #2
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d1de      	bne.n	8008be6 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8008c28:	e012      	b.n	8008c50 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8008c2a:	f7fd fa47 	bl	80060bc <HAL_GetTick>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	1ad3      	subs	r3, r2, r3
 8008c34:	2b64      	cmp	r3, #100	; 0x64
 8008c36:	d90b      	bls.n	8008c50 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c3c:	f043 0201 	orr.w	r2, r3, #1
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a20      	ldr	r2, [pc, #128]	; (8008cd8 <HAL_I2S_DMAStop+0x330>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d101      	bne.n	8008c5e <HAL_I2S_DMAStop+0x2b6>
 8008c5a:	4b20      	ldr	r3, [pc, #128]	; (8008cdc <HAL_I2S_DMAStop+0x334>)
 8008c5c:	e001      	b.n	8008c62 <HAL_I2S_DMAStop+0x2ba>
 8008c5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c68:	2b80      	cmp	r3, #128	; 0x80
 8008c6a:	d0de      	beq.n	8008c2a <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a19      	ldr	r2, [pc, #100]	; (8008cd8 <HAL_I2S_DMAStop+0x330>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d101      	bne.n	8008c7a <HAL_I2S_DMAStop+0x2d2>
 8008c76:	4b19      	ldr	r3, [pc, #100]	; (8008cdc <HAL_I2S_DMAStop+0x334>)
 8008c78:	e001      	b.n	8008c7e <HAL_I2S_DMAStop+0x2d6>
 8008c7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008c7e:	69da      	ldr	r2, [r3, #28]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4914      	ldr	r1, [pc, #80]	; (8008cd8 <HAL_I2S_DMAStop+0x330>)
 8008c86:	428b      	cmp	r3, r1
 8008c88:	d101      	bne.n	8008c8e <HAL_I2S_DMAStop+0x2e6>
 8008c8a:	4b14      	ldr	r3, [pc, #80]	; (8008cdc <HAL_I2S_DMAStop+0x334>)
 8008c8c:	e001      	b.n	8008c92 <HAL_I2S_DMAStop+0x2ea>
 8008c8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c96:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8008c98:	2300      	movs	r3, #0
 8008c9a:	60fb      	str	r3, [r7, #12]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a0d      	ldr	r2, [pc, #52]	; (8008cd8 <HAL_I2S_DMAStop+0x330>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d101      	bne.n	8008caa <HAL_I2S_DMAStop+0x302>
 8008ca6:	4b0d      	ldr	r3, [pc, #52]	; (8008cdc <HAL_I2S_DMAStop+0x334>)
 8008ca8:	e001      	b.n	8008cae <HAL_I2S_DMAStop+0x306>
 8008caa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	60fb      	str	r3, [r7, #12]
 8008cb2:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a07      	ldr	r2, [pc, #28]	; (8008cd8 <HAL_I2S_DMAStop+0x330>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d101      	bne.n	8008cc2 <HAL_I2S_DMAStop+0x31a>
 8008cbe:	4b07      	ldr	r3, [pc, #28]	; (8008cdc <HAL_I2S_DMAStop+0x334>)
 8008cc0:	e001      	b.n	8008cc6 <HAL_I2S_DMAStop+0x31e>
 8008cc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008cc6:	685a      	ldr	r2, [r3, #4]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4902      	ldr	r1, [pc, #8]	; (8008cd8 <HAL_I2S_DMAStop+0x330>)
 8008cce:	428b      	cmp	r3, r1
 8008cd0:	d106      	bne.n	8008ce0 <HAL_I2S_DMAStop+0x338>
 8008cd2:	4b02      	ldr	r3, [pc, #8]	; (8008cdc <HAL_I2S_DMAStop+0x334>)
 8008cd4:	e006      	b.n	8008ce4 <HAL_I2S_DMAStop+0x33c>
 8008cd6:	bf00      	nop
 8008cd8:	40003800 	.word	0x40003800
 8008cdc:	40003400 	.word	0x40003400
 8008ce0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ce4:	f022 0202 	bic.w	r2, r2, #2
 8008ce8:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	69da      	ldr	r2, [r3, #28]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cf8:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	60bb      	str	r3, [r7, #8]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	60bb      	str	r3, [r7, #8]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	60bb      	str	r3, [r7, #8]
 8008d0e:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	685a      	ldr	r2, [r3, #4]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f022 0201 	bic.w	r2, r2, #1
 8008d1e:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d28:	d10c      	bne.n	8008d44 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	77fb      	strb	r3, [r7, #31]
 8008d42:	e002      	b.n	8008d4a <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8008d52:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3720      	adds	r7, #32
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d7e:	b2db      	uxtb	r3, r3
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d98:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	69db      	ldr	r3, [r3, #28]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d10e      	bne.n	8008dc0 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	685a      	ldr	r2, [r3, #4]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f022 0202 	bic.w	r2, r2, #2
 8008db0:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f7f7 fcc3 	bl	800074c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8008dc6:	bf00      	nop
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b084      	sub	sp, #16
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dda:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	f7f7 fcc7 	bl	8000770 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8008de2:	bf00      	nop
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b084      	sub	sp, #16
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	685a      	ldr	r2, [r3, #4]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f022 0203 	bic.w	r2, r2, #3
 8008e06:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2200      	movs	r2, #0
 8008e12:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e20:	f043 0208 	orr.w	r2, r3, #8
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f7f7 fe0d 	bl	8000a48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8008e2e:	bf00      	nop
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b082      	sub	sp, #8
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e42:	881a      	ldrh	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4e:	1c9a      	adds	r2, r3, #2
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d10e      	bne.n	8008e8a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	685a      	ldr	r2, [r3, #4]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008e7a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f7f7 fc61 	bl	800074c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008e8a:	bf00      	nop
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b082      	sub	sp, #8
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68da      	ldr	r2, [r3, #12]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea4:	b292      	uxth	r2, r2
 8008ea6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eac:	1c9a      	adds	r2, r3, #2
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d10e      	bne.n	8008ee8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	685a      	ldr	r2, [r3, #4]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008ed8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f7ff ff3a 	bl	8008d5c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008ee8:	bf00      	nop
 8008eea:	3708      	adds	r7, #8
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b086      	sub	sp, #24
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	2b04      	cmp	r3, #4
 8008f0a:	d13a      	bne.n	8008f82 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	f003 0301 	and.w	r3, r3, #1
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d109      	bne.n	8008f2a <I2S_IRQHandler+0x3a>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f20:	2b40      	cmp	r3, #64	; 0x40
 8008f22:	d102      	bne.n	8008f2a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f7ff ffb4 	bl	8008e92 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f30:	2b40      	cmp	r3, #64	; 0x40
 8008f32:	d126      	bne.n	8008f82 <I2S_IRQHandler+0x92>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	f003 0320 	and.w	r3, r3, #32
 8008f3e:	2b20      	cmp	r3, #32
 8008f40:	d11f      	bne.n	8008f82 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	685a      	ldr	r2, [r3, #4]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008f50:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008f52:	2300      	movs	r3, #0
 8008f54:	613b      	str	r3, [r7, #16]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	613b      	str	r3, [r7, #16]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	613b      	str	r3, [r7, #16]
 8008f66:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f74:	f043 0202 	orr.w	r2, r3, #2
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f7f7 fd63 	bl	8000a48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	2b03      	cmp	r3, #3
 8008f8c:	d136      	bne.n	8008ffc <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	f003 0302 	and.w	r3, r3, #2
 8008f94:	2b02      	cmp	r3, #2
 8008f96:	d109      	bne.n	8008fac <I2S_IRQHandler+0xbc>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fa2:	2b80      	cmp	r3, #128	; 0x80
 8008fa4:	d102      	bne.n	8008fac <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7ff ff45 	bl	8008e36 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	f003 0308 	and.w	r3, r3, #8
 8008fb2:	2b08      	cmp	r3, #8
 8008fb4:	d122      	bne.n	8008ffc <I2S_IRQHandler+0x10c>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	f003 0320 	and.w	r3, r3, #32
 8008fc0:	2b20      	cmp	r3, #32
 8008fc2:	d11b      	bne.n	8008ffc <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	685a      	ldr	r2, [r3, #4]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008fd2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	60fb      	str	r3, [r7, #12]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	60fb      	str	r3, [r7, #12]
 8008fe0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fee:	f043 0204 	orr.w	r2, r3, #4
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f7f7 fd26 	bl	8000a48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008ffc:	bf00      	nop
 8008ffe:	3718      	adds	r7, #24
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b086      	sub	sp, #24
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	603b      	str	r3, [r7, #0]
 8009010:	4613      	mov	r3, r2
 8009012:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8009014:	f7fd f852 	bl	80060bc <HAL_GetTick>
 8009018:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800901a:	e018      	b.n	800904e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009022:	d014      	beq.n	800904e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8009024:	f7fd f84a 	bl	80060bc <HAL_GetTick>
 8009028:	4602      	mov	r2, r0
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	429a      	cmp	r2, r3
 8009032:	d902      	bls.n	800903a <I2S_WaitFlagStateUntilTimeout+0x36>
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d109      	bne.n	800904e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2201      	movs	r2, #1
 800903e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2200      	movs	r2, #0
 8009046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800904a:	2303      	movs	r3, #3
 800904c:	e00f      	b.n	800906e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	689a      	ldr	r2, [r3, #8]
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	4013      	ands	r3, r2
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	429a      	cmp	r2, r3
 800905c:	bf0c      	ite	eq
 800905e:	2301      	moveq	r3, #1
 8009060:	2300      	movne	r3, #0
 8009062:	b2db      	uxtb	r3, r3
 8009064:	461a      	mov	r2, r3
 8009066:	79fb      	ldrb	r3, [r7, #7]
 8009068:	429a      	cmp	r2, r3
 800906a:	d1d7      	bne.n	800901c <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3718      	adds	r7, #24
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
	...

08009078 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b088      	sub	sp, #32
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a92      	ldr	r2, [pc, #584]	; (80092d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d101      	bne.n	8009096 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8009092:	4b92      	ldr	r3, [pc, #584]	; (80092dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009094:	e001      	b.n	800909a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8009096:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a8b      	ldr	r2, [pc, #556]	; (80092d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d101      	bne.n	80090b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80090b0:	4b8a      	ldr	r3, [pc, #552]	; (80092dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80090b2:	e001      	b.n	80090b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80090b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090c4:	d004      	beq.n	80090d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f040 8099 	bne.w	8009202 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	f003 0302 	and.w	r3, r3, #2
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d107      	bne.n	80090ea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d002      	beq.n	80090ea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 f925 	bl	8009334 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	f003 0301 	and.w	r3, r3, #1
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d107      	bne.n	8009104 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d002      	beq.n	8009104 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 f9c8 	bl	8009494 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800910a:	2b40      	cmp	r3, #64	; 0x40
 800910c:	d13a      	bne.n	8009184 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	f003 0320 	and.w	r3, r3, #32
 8009114:	2b00      	cmp	r3, #0
 8009116:	d035      	beq.n	8009184 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a6e      	ldr	r2, [pc, #440]	; (80092d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d101      	bne.n	8009126 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8009122:	4b6e      	ldr	r3, [pc, #440]	; (80092dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009124:	e001      	b.n	800912a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8009126:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800912a:	685a      	ldr	r2, [r3, #4]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4969      	ldr	r1, [pc, #420]	; (80092d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009132:	428b      	cmp	r3, r1
 8009134:	d101      	bne.n	800913a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8009136:	4b69      	ldr	r3, [pc, #420]	; (80092dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009138:	e001      	b.n	800913e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800913a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800913e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009142:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	685a      	ldr	r2, [r3, #4]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009152:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8009154:	2300      	movs	r3, #0
 8009156:	60fb      	str	r3, [r7, #12]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	60fb      	str	r3, [r7, #12]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	60fb      	str	r3, [r7, #12]
 8009168:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2201      	movs	r2, #1
 800916e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009176:	f043 0202 	orr.w	r2, r3, #2
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f7f7 fc62 	bl	8000a48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	f003 0308 	and.w	r3, r3, #8
 800918a:	2b08      	cmp	r3, #8
 800918c:	f040 80c3 	bne.w	8009316 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	f003 0320 	and.w	r3, r3, #32
 8009196:	2b00      	cmp	r3, #0
 8009198:	f000 80bd 	beq.w	8009316 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	685a      	ldr	r2, [r3, #4]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80091aa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a49      	ldr	r2, [pc, #292]	; (80092d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d101      	bne.n	80091ba <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80091b6:	4b49      	ldr	r3, [pc, #292]	; (80092dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80091b8:	e001      	b.n	80091be <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80091ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80091be:	685a      	ldr	r2, [r3, #4]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4944      	ldr	r1, [pc, #272]	; (80092d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80091c6:	428b      	cmp	r3, r1
 80091c8:	d101      	bne.n	80091ce <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80091ca:	4b44      	ldr	r3, [pc, #272]	; (80092dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80091cc:	e001      	b.n	80091d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80091ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80091d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80091d6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80091d8:	2300      	movs	r3, #0
 80091da:	60bb      	str	r3, [r7, #8]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	60bb      	str	r3, [r7, #8]
 80091e4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2201      	movs	r2, #1
 80091ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091f2:	f043 0204 	orr.w	r2, r3, #4
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7f7 fc24 	bl	8000a48 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009200:	e089      	b.n	8009316 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	f003 0302 	and.w	r3, r3, #2
 8009208:	2b02      	cmp	r3, #2
 800920a:	d107      	bne.n	800921c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009212:	2b00      	cmp	r3, #0
 8009214:	d002      	beq.n	800921c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f8be 	bl	8009398 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	f003 0301 	and.w	r3, r3, #1
 8009222:	2b01      	cmp	r3, #1
 8009224:	d107      	bne.n	8009236 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800922c:	2b00      	cmp	r3, #0
 800922e:	d002      	beq.n	8009236 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 f8fd 	bl	8009430 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800923c:	2b40      	cmp	r3, #64	; 0x40
 800923e:	d12f      	bne.n	80092a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	f003 0320 	and.w	r3, r3, #32
 8009246:	2b00      	cmp	r3, #0
 8009248:	d02a      	beq.n	80092a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	685a      	ldr	r2, [r3, #4]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009258:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a1e      	ldr	r2, [pc, #120]	; (80092d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d101      	bne.n	8009268 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8009264:	4b1d      	ldr	r3, [pc, #116]	; (80092dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009266:	e001      	b.n	800926c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8009268:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800926c:	685a      	ldr	r2, [r3, #4]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4919      	ldr	r1, [pc, #100]	; (80092d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009274:	428b      	cmp	r3, r1
 8009276:	d101      	bne.n	800927c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8009278:	4b18      	ldr	r3, [pc, #96]	; (80092dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800927a:	e001      	b.n	8009280 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800927c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009280:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009284:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2201      	movs	r2, #1
 800928a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009292:	f043 0202 	orr.w	r2, r3, #2
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f7f7 fbd4 	bl	8000a48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	f003 0308 	and.w	r3, r3, #8
 80092a6:	2b08      	cmp	r3, #8
 80092a8:	d136      	bne.n	8009318 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	f003 0320 	and.w	r3, r3, #32
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d031      	beq.n	8009318 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a07      	ldr	r2, [pc, #28]	; (80092d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d101      	bne.n	80092c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80092be:	4b07      	ldr	r3, [pc, #28]	; (80092dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80092c0:	e001      	b.n	80092c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80092c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80092c6:	685a      	ldr	r2, [r3, #4]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4902      	ldr	r1, [pc, #8]	; (80092d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80092ce:	428b      	cmp	r3, r1
 80092d0:	d106      	bne.n	80092e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80092d2:	4b02      	ldr	r3, [pc, #8]	; (80092dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80092d4:	e006      	b.n	80092e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80092d6:	bf00      	nop
 80092d8:	40003800 	.word	0x40003800
 80092dc:	40003400 	.word	0x40003400
 80092e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80092e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80092e8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	685a      	ldr	r2, [r3, #4]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80092f8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009306:	f043 0204 	orr.w	r2, r3, #4
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f7f7 fb9a 	bl	8000a48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009314:	e000      	b.n	8009318 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009316:	bf00      	nop
}
 8009318:	bf00      	nop
 800931a:	3720      	adds	r7, #32
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8009328:	bf00      	nop
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009340:	1c99      	adds	r1, r3, #2
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	6251      	str	r1, [r2, #36]	; 0x24
 8009346:	881a      	ldrh	r2, [r3, #0]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009352:	b29b      	uxth	r3, r3
 8009354:	3b01      	subs	r3, #1
 8009356:	b29a      	uxth	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009360:	b29b      	uxth	r3, r3
 8009362:	2b00      	cmp	r3, #0
 8009364:	d113      	bne.n	800938e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	685a      	ldr	r2, [r3, #4]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009374:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800937a:	b29b      	uxth	r3, r3
 800937c:	2b00      	cmp	r3, #0
 800937e:	d106      	bne.n	800938e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f7ff ffc9 	bl	8009320 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800938e:	bf00      	nop
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
	...

08009398 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a4:	1c99      	adds	r1, r3, #2
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	6251      	str	r1, [r2, #36]	; 0x24
 80093aa:	8819      	ldrh	r1, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a1d      	ldr	r2, [pc, #116]	; (8009428 <I2SEx_TxISR_I2SExt+0x90>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d101      	bne.n	80093ba <I2SEx_TxISR_I2SExt+0x22>
 80093b6:	4b1d      	ldr	r3, [pc, #116]	; (800942c <I2SEx_TxISR_I2SExt+0x94>)
 80093b8:	e001      	b.n	80093be <I2SEx_TxISR_I2SExt+0x26>
 80093ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80093be:	460a      	mov	r2, r1
 80093c0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	3b01      	subs	r3, #1
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d121      	bne.n	800941e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a12      	ldr	r2, [pc, #72]	; (8009428 <I2SEx_TxISR_I2SExt+0x90>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d101      	bne.n	80093e8 <I2SEx_TxISR_I2SExt+0x50>
 80093e4:	4b11      	ldr	r3, [pc, #68]	; (800942c <I2SEx_TxISR_I2SExt+0x94>)
 80093e6:	e001      	b.n	80093ec <I2SEx_TxISR_I2SExt+0x54>
 80093e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80093ec:	685a      	ldr	r2, [r3, #4]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	490d      	ldr	r1, [pc, #52]	; (8009428 <I2SEx_TxISR_I2SExt+0x90>)
 80093f4:	428b      	cmp	r3, r1
 80093f6:	d101      	bne.n	80093fc <I2SEx_TxISR_I2SExt+0x64>
 80093f8:	4b0c      	ldr	r3, [pc, #48]	; (800942c <I2SEx_TxISR_I2SExt+0x94>)
 80093fa:	e001      	b.n	8009400 <I2SEx_TxISR_I2SExt+0x68>
 80093fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009400:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009404:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800940a:	b29b      	uxth	r3, r3
 800940c:	2b00      	cmp	r3, #0
 800940e:	d106      	bne.n	800941e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f7ff ff81 	bl	8009320 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800941e:	bf00      	nop
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	40003800 	.word	0x40003800
 800942c:	40003400 	.word	0x40003400

08009430 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	68d8      	ldr	r0, [r3, #12]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009442:	1c99      	adds	r1, r3, #2
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	62d1      	str	r1, [r2, #44]	; 0x2c
 8009448:	b282      	uxth	r2, r0
 800944a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009450:	b29b      	uxth	r3, r3
 8009452:	3b01      	subs	r3, #1
 8009454:	b29a      	uxth	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800945e:	b29b      	uxth	r3, r3
 8009460:	2b00      	cmp	r3, #0
 8009462:	d113      	bne.n	800948c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	685a      	ldr	r2, [r3, #4]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009472:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009478:	b29b      	uxth	r3, r3
 800947a:	2b00      	cmp	r3, #0
 800947c:	d106      	bne.n	800948c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2201      	movs	r2, #1
 8009482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7ff ff4a 	bl	8009320 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800948c:	bf00      	nop
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a20      	ldr	r2, [pc, #128]	; (8009524 <I2SEx_RxISR_I2SExt+0x90>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d101      	bne.n	80094aa <I2SEx_RxISR_I2SExt+0x16>
 80094a6:	4b20      	ldr	r3, [pc, #128]	; (8009528 <I2SEx_RxISR_I2SExt+0x94>)
 80094a8:	e001      	b.n	80094ae <I2SEx_RxISR_I2SExt+0x1a>
 80094aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80094ae:	68d8      	ldr	r0, [r3, #12]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b4:	1c99      	adds	r1, r3, #2
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80094ba:	b282      	uxth	r2, r0
 80094bc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	3b01      	subs	r3, #1
 80094c6:	b29a      	uxth	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d121      	bne.n	800951a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a12      	ldr	r2, [pc, #72]	; (8009524 <I2SEx_RxISR_I2SExt+0x90>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d101      	bne.n	80094e4 <I2SEx_RxISR_I2SExt+0x50>
 80094e0:	4b11      	ldr	r3, [pc, #68]	; (8009528 <I2SEx_RxISR_I2SExt+0x94>)
 80094e2:	e001      	b.n	80094e8 <I2SEx_RxISR_I2SExt+0x54>
 80094e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	490d      	ldr	r1, [pc, #52]	; (8009524 <I2SEx_RxISR_I2SExt+0x90>)
 80094f0:	428b      	cmp	r3, r1
 80094f2:	d101      	bne.n	80094f8 <I2SEx_RxISR_I2SExt+0x64>
 80094f4:	4b0c      	ldr	r3, [pc, #48]	; (8009528 <I2SEx_RxISR_I2SExt+0x94>)
 80094f6:	e001      	b.n	80094fc <I2SEx_RxISR_I2SExt+0x68>
 80094f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80094fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009500:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009506:	b29b      	uxth	r3, r3
 8009508:	2b00      	cmp	r3, #0
 800950a:	d106      	bne.n	800951a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f7ff ff03 	bl	8009320 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800951a:	bf00      	nop
 800951c:	3708      	adds	r7, #8
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	40003800 	.word	0x40003800
 8009528:	40003400 	.word	0x40003400

0800952c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b086      	sub	sp, #24
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d101      	bne.n	800953e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	e267      	b.n	8009a0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f003 0301 	and.w	r3, r3, #1
 8009546:	2b00      	cmp	r3, #0
 8009548:	d075      	beq.n	8009636 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800954a:	4b88      	ldr	r3, [pc, #544]	; (800976c <HAL_RCC_OscConfig+0x240>)
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	f003 030c 	and.w	r3, r3, #12
 8009552:	2b04      	cmp	r3, #4
 8009554:	d00c      	beq.n	8009570 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009556:	4b85      	ldr	r3, [pc, #532]	; (800976c <HAL_RCC_OscConfig+0x240>)
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800955e:	2b08      	cmp	r3, #8
 8009560:	d112      	bne.n	8009588 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009562:	4b82      	ldr	r3, [pc, #520]	; (800976c <HAL_RCC_OscConfig+0x240>)
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800956a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800956e:	d10b      	bne.n	8009588 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009570:	4b7e      	ldr	r3, [pc, #504]	; (800976c <HAL_RCC_OscConfig+0x240>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009578:	2b00      	cmp	r3, #0
 800957a:	d05b      	beq.n	8009634 <HAL_RCC_OscConfig+0x108>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d157      	bne.n	8009634 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	e242      	b.n	8009a0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009590:	d106      	bne.n	80095a0 <HAL_RCC_OscConfig+0x74>
 8009592:	4b76      	ldr	r3, [pc, #472]	; (800976c <HAL_RCC_OscConfig+0x240>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a75      	ldr	r2, [pc, #468]	; (800976c <HAL_RCC_OscConfig+0x240>)
 8009598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800959c:	6013      	str	r3, [r2, #0]
 800959e:	e01d      	b.n	80095dc <HAL_RCC_OscConfig+0xb0>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80095a8:	d10c      	bne.n	80095c4 <HAL_RCC_OscConfig+0x98>
 80095aa:	4b70      	ldr	r3, [pc, #448]	; (800976c <HAL_RCC_OscConfig+0x240>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4a6f      	ldr	r2, [pc, #444]	; (800976c <HAL_RCC_OscConfig+0x240>)
 80095b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80095b4:	6013      	str	r3, [r2, #0]
 80095b6:	4b6d      	ldr	r3, [pc, #436]	; (800976c <HAL_RCC_OscConfig+0x240>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a6c      	ldr	r2, [pc, #432]	; (800976c <HAL_RCC_OscConfig+0x240>)
 80095bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095c0:	6013      	str	r3, [r2, #0]
 80095c2:	e00b      	b.n	80095dc <HAL_RCC_OscConfig+0xb0>
 80095c4:	4b69      	ldr	r3, [pc, #420]	; (800976c <HAL_RCC_OscConfig+0x240>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a68      	ldr	r2, [pc, #416]	; (800976c <HAL_RCC_OscConfig+0x240>)
 80095ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095ce:	6013      	str	r3, [r2, #0]
 80095d0:	4b66      	ldr	r3, [pc, #408]	; (800976c <HAL_RCC_OscConfig+0x240>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a65      	ldr	r2, [pc, #404]	; (800976c <HAL_RCC_OscConfig+0x240>)
 80095d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80095da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d013      	beq.n	800960c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095e4:	f7fc fd6a 	bl	80060bc <HAL_GetTick>
 80095e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095ea:	e008      	b.n	80095fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80095ec:	f7fc fd66 	bl	80060bc <HAL_GetTick>
 80095f0:	4602      	mov	r2, r0
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	1ad3      	subs	r3, r2, r3
 80095f6:	2b64      	cmp	r3, #100	; 0x64
 80095f8:	d901      	bls.n	80095fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80095fa:	2303      	movs	r3, #3
 80095fc:	e207      	b.n	8009a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095fe:	4b5b      	ldr	r3, [pc, #364]	; (800976c <HAL_RCC_OscConfig+0x240>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009606:	2b00      	cmp	r3, #0
 8009608:	d0f0      	beq.n	80095ec <HAL_RCC_OscConfig+0xc0>
 800960a:	e014      	b.n	8009636 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800960c:	f7fc fd56 	bl	80060bc <HAL_GetTick>
 8009610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009612:	e008      	b.n	8009626 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009614:	f7fc fd52 	bl	80060bc <HAL_GetTick>
 8009618:	4602      	mov	r2, r0
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	1ad3      	subs	r3, r2, r3
 800961e:	2b64      	cmp	r3, #100	; 0x64
 8009620:	d901      	bls.n	8009626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009622:	2303      	movs	r3, #3
 8009624:	e1f3      	b.n	8009a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009626:	4b51      	ldr	r3, [pc, #324]	; (800976c <HAL_RCC_OscConfig+0x240>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1f0      	bne.n	8009614 <HAL_RCC_OscConfig+0xe8>
 8009632:	e000      	b.n	8009636 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 0302 	and.w	r3, r3, #2
 800963e:	2b00      	cmp	r3, #0
 8009640:	d063      	beq.n	800970a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009642:	4b4a      	ldr	r3, [pc, #296]	; (800976c <HAL_RCC_OscConfig+0x240>)
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	f003 030c 	and.w	r3, r3, #12
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00b      	beq.n	8009666 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800964e:	4b47      	ldr	r3, [pc, #284]	; (800976c <HAL_RCC_OscConfig+0x240>)
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009656:	2b08      	cmp	r3, #8
 8009658:	d11c      	bne.n	8009694 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800965a:	4b44      	ldr	r3, [pc, #272]	; (800976c <HAL_RCC_OscConfig+0x240>)
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d116      	bne.n	8009694 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009666:	4b41      	ldr	r3, [pc, #260]	; (800976c <HAL_RCC_OscConfig+0x240>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f003 0302 	and.w	r3, r3, #2
 800966e:	2b00      	cmp	r3, #0
 8009670:	d005      	beq.n	800967e <HAL_RCC_OscConfig+0x152>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	2b01      	cmp	r3, #1
 8009678:	d001      	beq.n	800967e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	e1c7      	b.n	8009a0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800967e:	4b3b      	ldr	r3, [pc, #236]	; (800976c <HAL_RCC_OscConfig+0x240>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	00db      	lsls	r3, r3, #3
 800968c:	4937      	ldr	r1, [pc, #220]	; (800976c <HAL_RCC_OscConfig+0x240>)
 800968e:	4313      	orrs	r3, r2
 8009690:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009692:	e03a      	b.n	800970a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d020      	beq.n	80096de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800969c:	4b34      	ldr	r3, [pc, #208]	; (8009770 <HAL_RCC_OscConfig+0x244>)
 800969e:	2201      	movs	r2, #1
 80096a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096a2:	f7fc fd0b 	bl	80060bc <HAL_GetTick>
 80096a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096a8:	e008      	b.n	80096bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80096aa:	f7fc fd07 	bl	80060bc <HAL_GetTick>
 80096ae:	4602      	mov	r2, r0
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	1ad3      	subs	r3, r2, r3
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d901      	bls.n	80096bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80096b8:	2303      	movs	r3, #3
 80096ba:	e1a8      	b.n	8009a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096bc:	4b2b      	ldr	r3, [pc, #172]	; (800976c <HAL_RCC_OscConfig+0x240>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f003 0302 	and.w	r3, r3, #2
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d0f0      	beq.n	80096aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096c8:	4b28      	ldr	r3, [pc, #160]	; (800976c <HAL_RCC_OscConfig+0x240>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	691b      	ldr	r3, [r3, #16]
 80096d4:	00db      	lsls	r3, r3, #3
 80096d6:	4925      	ldr	r1, [pc, #148]	; (800976c <HAL_RCC_OscConfig+0x240>)
 80096d8:	4313      	orrs	r3, r2
 80096da:	600b      	str	r3, [r1, #0]
 80096dc:	e015      	b.n	800970a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80096de:	4b24      	ldr	r3, [pc, #144]	; (8009770 <HAL_RCC_OscConfig+0x244>)
 80096e0:	2200      	movs	r2, #0
 80096e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096e4:	f7fc fcea 	bl	80060bc <HAL_GetTick>
 80096e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80096ea:	e008      	b.n	80096fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80096ec:	f7fc fce6 	bl	80060bc <HAL_GetTick>
 80096f0:	4602      	mov	r2, r0
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	1ad3      	subs	r3, r2, r3
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d901      	bls.n	80096fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80096fa:	2303      	movs	r3, #3
 80096fc:	e187      	b.n	8009a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80096fe:	4b1b      	ldr	r3, [pc, #108]	; (800976c <HAL_RCC_OscConfig+0x240>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 0302 	and.w	r3, r3, #2
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1f0      	bne.n	80096ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 0308 	and.w	r3, r3, #8
 8009712:	2b00      	cmp	r3, #0
 8009714:	d036      	beq.n	8009784 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	695b      	ldr	r3, [r3, #20]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d016      	beq.n	800974c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800971e:	4b15      	ldr	r3, [pc, #84]	; (8009774 <HAL_RCC_OscConfig+0x248>)
 8009720:	2201      	movs	r2, #1
 8009722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009724:	f7fc fcca 	bl	80060bc <HAL_GetTick>
 8009728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800972a:	e008      	b.n	800973e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800972c:	f7fc fcc6 	bl	80060bc <HAL_GetTick>
 8009730:	4602      	mov	r2, r0
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	1ad3      	subs	r3, r2, r3
 8009736:	2b02      	cmp	r3, #2
 8009738:	d901      	bls.n	800973e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800973a:	2303      	movs	r3, #3
 800973c:	e167      	b.n	8009a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800973e:	4b0b      	ldr	r3, [pc, #44]	; (800976c <HAL_RCC_OscConfig+0x240>)
 8009740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009742:	f003 0302 	and.w	r3, r3, #2
 8009746:	2b00      	cmp	r3, #0
 8009748:	d0f0      	beq.n	800972c <HAL_RCC_OscConfig+0x200>
 800974a:	e01b      	b.n	8009784 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800974c:	4b09      	ldr	r3, [pc, #36]	; (8009774 <HAL_RCC_OscConfig+0x248>)
 800974e:	2200      	movs	r2, #0
 8009750:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009752:	f7fc fcb3 	bl	80060bc <HAL_GetTick>
 8009756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009758:	e00e      	b.n	8009778 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800975a:	f7fc fcaf 	bl	80060bc <HAL_GetTick>
 800975e:	4602      	mov	r2, r0
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	1ad3      	subs	r3, r2, r3
 8009764:	2b02      	cmp	r3, #2
 8009766:	d907      	bls.n	8009778 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009768:	2303      	movs	r3, #3
 800976a:	e150      	b.n	8009a0e <HAL_RCC_OscConfig+0x4e2>
 800976c:	40023800 	.word	0x40023800
 8009770:	42470000 	.word	0x42470000
 8009774:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009778:	4b88      	ldr	r3, [pc, #544]	; (800999c <HAL_RCC_OscConfig+0x470>)
 800977a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800977c:	f003 0302 	and.w	r3, r3, #2
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1ea      	bne.n	800975a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0304 	and.w	r3, r3, #4
 800978c:	2b00      	cmp	r3, #0
 800978e:	f000 8097 	beq.w	80098c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009792:	2300      	movs	r3, #0
 8009794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009796:	4b81      	ldr	r3, [pc, #516]	; (800999c <HAL_RCC_OscConfig+0x470>)
 8009798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10f      	bne.n	80097c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80097a2:	2300      	movs	r3, #0
 80097a4:	60bb      	str	r3, [r7, #8]
 80097a6:	4b7d      	ldr	r3, [pc, #500]	; (800999c <HAL_RCC_OscConfig+0x470>)
 80097a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097aa:	4a7c      	ldr	r2, [pc, #496]	; (800999c <HAL_RCC_OscConfig+0x470>)
 80097ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097b0:	6413      	str	r3, [r2, #64]	; 0x40
 80097b2:	4b7a      	ldr	r3, [pc, #488]	; (800999c <HAL_RCC_OscConfig+0x470>)
 80097b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097ba:	60bb      	str	r3, [r7, #8]
 80097bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80097be:	2301      	movs	r3, #1
 80097c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097c2:	4b77      	ldr	r3, [pc, #476]	; (80099a0 <HAL_RCC_OscConfig+0x474>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d118      	bne.n	8009800 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80097ce:	4b74      	ldr	r3, [pc, #464]	; (80099a0 <HAL_RCC_OscConfig+0x474>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a73      	ldr	r2, [pc, #460]	; (80099a0 <HAL_RCC_OscConfig+0x474>)
 80097d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80097da:	f7fc fc6f 	bl	80060bc <HAL_GetTick>
 80097de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097e0:	e008      	b.n	80097f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097e2:	f7fc fc6b 	bl	80060bc <HAL_GetTick>
 80097e6:	4602      	mov	r2, r0
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	1ad3      	subs	r3, r2, r3
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d901      	bls.n	80097f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80097f0:	2303      	movs	r3, #3
 80097f2:	e10c      	b.n	8009a0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097f4:	4b6a      	ldr	r3, [pc, #424]	; (80099a0 <HAL_RCC_OscConfig+0x474>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d0f0      	beq.n	80097e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	2b01      	cmp	r3, #1
 8009806:	d106      	bne.n	8009816 <HAL_RCC_OscConfig+0x2ea>
 8009808:	4b64      	ldr	r3, [pc, #400]	; (800999c <HAL_RCC_OscConfig+0x470>)
 800980a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800980c:	4a63      	ldr	r2, [pc, #396]	; (800999c <HAL_RCC_OscConfig+0x470>)
 800980e:	f043 0301 	orr.w	r3, r3, #1
 8009812:	6713      	str	r3, [r2, #112]	; 0x70
 8009814:	e01c      	b.n	8009850 <HAL_RCC_OscConfig+0x324>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	2b05      	cmp	r3, #5
 800981c:	d10c      	bne.n	8009838 <HAL_RCC_OscConfig+0x30c>
 800981e:	4b5f      	ldr	r3, [pc, #380]	; (800999c <HAL_RCC_OscConfig+0x470>)
 8009820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009822:	4a5e      	ldr	r2, [pc, #376]	; (800999c <HAL_RCC_OscConfig+0x470>)
 8009824:	f043 0304 	orr.w	r3, r3, #4
 8009828:	6713      	str	r3, [r2, #112]	; 0x70
 800982a:	4b5c      	ldr	r3, [pc, #368]	; (800999c <HAL_RCC_OscConfig+0x470>)
 800982c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800982e:	4a5b      	ldr	r2, [pc, #364]	; (800999c <HAL_RCC_OscConfig+0x470>)
 8009830:	f043 0301 	orr.w	r3, r3, #1
 8009834:	6713      	str	r3, [r2, #112]	; 0x70
 8009836:	e00b      	b.n	8009850 <HAL_RCC_OscConfig+0x324>
 8009838:	4b58      	ldr	r3, [pc, #352]	; (800999c <HAL_RCC_OscConfig+0x470>)
 800983a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800983c:	4a57      	ldr	r2, [pc, #348]	; (800999c <HAL_RCC_OscConfig+0x470>)
 800983e:	f023 0301 	bic.w	r3, r3, #1
 8009842:	6713      	str	r3, [r2, #112]	; 0x70
 8009844:	4b55      	ldr	r3, [pc, #340]	; (800999c <HAL_RCC_OscConfig+0x470>)
 8009846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009848:	4a54      	ldr	r2, [pc, #336]	; (800999c <HAL_RCC_OscConfig+0x470>)
 800984a:	f023 0304 	bic.w	r3, r3, #4
 800984e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d015      	beq.n	8009884 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009858:	f7fc fc30 	bl	80060bc <HAL_GetTick>
 800985c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800985e:	e00a      	b.n	8009876 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009860:	f7fc fc2c 	bl	80060bc <HAL_GetTick>
 8009864:	4602      	mov	r2, r0
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	f241 3288 	movw	r2, #5000	; 0x1388
 800986e:	4293      	cmp	r3, r2
 8009870:	d901      	bls.n	8009876 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009872:	2303      	movs	r3, #3
 8009874:	e0cb      	b.n	8009a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009876:	4b49      	ldr	r3, [pc, #292]	; (800999c <HAL_RCC_OscConfig+0x470>)
 8009878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800987a:	f003 0302 	and.w	r3, r3, #2
 800987e:	2b00      	cmp	r3, #0
 8009880:	d0ee      	beq.n	8009860 <HAL_RCC_OscConfig+0x334>
 8009882:	e014      	b.n	80098ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009884:	f7fc fc1a 	bl	80060bc <HAL_GetTick>
 8009888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800988a:	e00a      	b.n	80098a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800988c:	f7fc fc16 	bl	80060bc <HAL_GetTick>
 8009890:	4602      	mov	r2, r0
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	f241 3288 	movw	r2, #5000	; 0x1388
 800989a:	4293      	cmp	r3, r2
 800989c:	d901      	bls.n	80098a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800989e:	2303      	movs	r3, #3
 80098a0:	e0b5      	b.n	8009a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80098a2:	4b3e      	ldr	r3, [pc, #248]	; (800999c <HAL_RCC_OscConfig+0x470>)
 80098a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098a6:	f003 0302 	and.w	r3, r3, #2
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1ee      	bne.n	800988c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80098ae:	7dfb      	ldrb	r3, [r7, #23]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d105      	bne.n	80098c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80098b4:	4b39      	ldr	r3, [pc, #228]	; (800999c <HAL_RCC_OscConfig+0x470>)
 80098b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b8:	4a38      	ldr	r2, [pc, #224]	; (800999c <HAL_RCC_OscConfig+0x470>)
 80098ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f000 80a1 	beq.w	8009a0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80098ca:	4b34      	ldr	r3, [pc, #208]	; (800999c <HAL_RCC_OscConfig+0x470>)
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	f003 030c 	and.w	r3, r3, #12
 80098d2:	2b08      	cmp	r3, #8
 80098d4:	d05c      	beq.n	8009990 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	2b02      	cmp	r3, #2
 80098dc:	d141      	bne.n	8009962 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098de:	4b31      	ldr	r3, [pc, #196]	; (80099a4 <HAL_RCC_OscConfig+0x478>)
 80098e0:	2200      	movs	r2, #0
 80098e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098e4:	f7fc fbea 	bl	80060bc <HAL_GetTick>
 80098e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098ea:	e008      	b.n	80098fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098ec:	f7fc fbe6 	bl	80060bc <HAL_GetTick>
 80098f0:	4602      	mov	r2, r0
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	1ad3      	subs	r3, r2, r3
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	d901      	bls.n	80098fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80098fa:	2303      	movs	r3, #3
 80098fc:	e087      	b.n	8009a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098fe:	4b27      	ldr	r3, [pc, #156]	; (800999c <HAL_RCC_OscConfig+0x470>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1f0      	bne.n	80098ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	69da      	ldr	r2, [r3, #28]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	431a      	orrs	r2, r3
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009918:	019b      	lsls	r3, r3, #6
 800991a:	431a      	orrs	r2, r3
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009920:	085b      	lsrs	r3, r3, #1
 8009922:	3b01      	subs	r3, #1
 8009924:	041b      	lsls	r3, r3, #16
 8009926:	431a      	orrs	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800992c:	061b      	lsls	r3, r3, #24
 800992e:	491b      	ldr	r1, [pc, #108]	; (800999c <HAL_RCC_OscConfig+0x470>)
 8009930:	4313      	orrs	r3, r2
 8009932:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009934:	4b1b      	ldr	r3, [pc, #108]	; (80099a4 <HAL_RCC_OscConfig+0x478>)
 8009936:	2201      	movs	r2, #1
 8009938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800993a:	f7fc fbbf 	bl	80060bc <HAL_GetTick>
 800993e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009940:	e008      	b.n	8009954 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009942:	f7fc fbbb 	bl	80060bc <HAL_GetTick>
 8009946:	4602      	mov	r2, r0
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	1ad3      	subs	r3, r2, r3
 800994c:	2b02      	cmp	r3, #2
 800994e:	d901      	bls.n	8009954 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009950:	2303      	movs	r3, #3
 8009952:	e05c      	b.n	8009a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009954:	4b11      	ldr	r3, [pc, #68]	; (800999c <HAL_RCC_OscConfig+0x470>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800995c:	2b00      	cmp	r3, #0
 800995e:	d0f0      	beq.n	8009942 <HAL_RCC_OscConfig+0x416>
 8009960:	e054      	b.n	8009a0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009962:	4b10      	ldr	r3, [pc, #64]	; (80099a4 <HAL_RCC_OscConfig+0x478>)
 8009964:	2200      	movs	r2, #0
 8009966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009968:	f7fc fba8 	bl	80060bc <HAL_GetTick>
 800996c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800996e:	e008      	b.n	8009982 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009970:	f7fc fba4 	bl	80060bc <HAL_GetTick>
 8009974:	4602      	mov	r2, r0
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	1ad3      	subs	r3, r2, r3
 800997a:	2b02      	cmp	r3, #2
 800997c:	d901      	bls.n	8009982 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800997e:	2303      	movs	r3, #3
 8009980:	e045      	b.n	8009a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009982:	4b06      	ldr	r3, [pc, #24]	; (800999c <HAL_RCC_OscConfig+0x470>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1f0      	bne.n	8009970 <HAL_RCC_OscConfig+0x444>
 800998e:	e03d      	b.n	8009a0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	699b      	ldr	r3, [r3, #24]
 8009994:	2b01      	cmp	r3, #1
 8009996:	d107      	bne.n	80099a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	e038      	b.n	8009a0e <HAL_RCC_OscConfig+0x4e2>
 800999c:	40023800 	.word	0x40023800
 80099a0:	40007000 	.word	0x40007000
 80099a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80099a8:	4b1b      	ldr	r3, [pc, #108]	; (8009a18 <HAL_RCC_OscConfig+0x4ec>)
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	699b      	ldr	r3, [r3, #24]
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d028      	beq.n	8009a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d121      	bne.n	8009a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d11a      	bne.n	8009a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80099d8:	4013      	ands	r3, r2
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80099de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d111      	bne.n	8009a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ee:	085b      	lsrs	r3, r3, #1
 80099f0:	3b01      	subs	r3, #1
 80099f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d107      	bne.n	8009a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d001      	beq.n	8009a0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e000      	b.n	8009a0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3718      	adds	r7, #24
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	40023800 	.word	0x40023800

08009a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d101      	bne.n	8009a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e0cc      	b.n	8009bca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009a30:	4b68      	ldr	r3, [pc, #416]	; (8009bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f003 0307 	and.w	r3, r3, #7
 8009a38:	683a      	ldr	r2, [r7, #0]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d90c      	bls.n	8009a58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a3e:	4b65      	ldr	r3, [pc, #404]	; (8009bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8009a40:	683a      	ldr	r2, [r7, #0]
 8009a42:	b2d2      	uxtb	r2, r2
 8009a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a46:	4b63      	ldr	r3, [pc, #396]	; (8009bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f003 0307 	and.w	r3, r3, #7
 8009a4e:	683a      	ldr	r2, [r7, #0]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d001      	beq.n	8009a58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e0b8      	b.n	8009bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f003 0302 	and.w	r3, r3, #2
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d020      	beq.n	8009aa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f003 0304 	and.w	r3, r3, #4
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d005      	beq.n	8009a7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009a70:	4b59      	ldr	r3, [pc, #356]	; (8009bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	4a58      	ldr	r2, [pc, #352]	; (8009bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009a7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f003 0308 	and.w	r3, r3, #8
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d005      	beq.n	8009a94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009a88:	4b53      	ldr	r3, [pc, #332]	; (8009bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	4a52      	ldr	r2, [pc, #328]	; (8009bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009a92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a94:	4b50      	ldr	r3, [pc, #320]	; (8009bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	494d      	ldr	r1, [pc, #308]	; (8009bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f003 0301 	and.w	r3, r3, #1
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d044      	beq.n	8009b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d107      	bne.n	8009aca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009aba:	4b47      	ldr	r3, [pc, #284]	; (8009bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d119      	bne.n	8009afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e07f      	b.n	8009bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	2b02      	cmp	r3, #2
 8009ad0:	d003      	beq.n	8009ada <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009ad6:	2b03      	cmp	r3, #3
 8009ad8:	d107      	bne.n	8009aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ada:	4b3f      	ldr	r3, [pc, #252]	; (8009bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d109      	bne.n	8009afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e06f      	b.n	8009bca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009aea:	4b3b      	ldr	r3, [pc, #236]	; (8009bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f003 0302 	and.w	r3, r3, #2
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d101      	bne.n	8009afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	e067      	b.n	8009bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009afa:	4b37      	ldr	r3, [pc, #220]	; (8009bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	f023 0203 	bic.w	r2, r3, #3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	4934      	ldr	r1, [pc, #208]	; (8009bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009b0c:	f7fc fad6 	bl	80060bc <HAL_GetTick>
 8009b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b12:	e00a      	b.n	8009b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b14:	f7fc fad2 	bl	80060bc <HAL_GetTick>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	1ad3      	subs	r3, r2, r3
 8009b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d901      	bls.n	8009b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009b26:	2303      	movs	r3, #3
 8009b28:	e04f      	b.n	8009bca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b2a:	4b2b      	ldr	r3, [pc, #172]	; (8009bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	f003 020c 	and.w	r2, r3, #12
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d1eb      	bne.n	8009b14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009b3c:	4b25      	ldr	r3, [pc, #148]	; (8009bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f003 0307 	and.w	r3, r3, #7
 8009b44:	683a      	ldr	r2, [r7, #0]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d20c      	bcs.n	8009b64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b4a:	4b22      	ldr	r3, [pc, #136]	; (8009bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8009b4c:	683a      	ldr	r2, [r7, #0]
 8009b4e:	b2d2      	uxtb	r2, r2
 8009b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b52:	4b20      	ldr	r3, [pc, #128]	; (8009bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f003 0307 	and.w	r3, r3, #7
 8009b5a:	683a      	ldr	r2, [r7, #0]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d001      	beq.n	8009b64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	e032      	b.n	8009bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f003 0304 	and.w	r3, r3, #4
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d008      	beq.n	8009b82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009b70:	4b19      	ldr	r3, [pc, #100]	; (8009bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	68db      	ldr	r3, [r3, #12]
 8009b7c:	4916      	ldr	r1, [pc, #88]	; (8009bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f003 0308 	and.w	r3, r3, #8
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d009      	beq.n	8009ba2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009b8e:	4b12      	ldr	r3, [pc, #72]	; (8009bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	691b      	ldr	r3, [r3, #16]
 8009b9a:	00db      	lsls	r3, r3, #3
 8009b9c:	490e      	ldr	r1, [pc, #56]	; (8009bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009ba2:	f000 f821 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	4b0b      	ldr	r3, [pc, #44]	; (8009bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	091b      	lsrs	r3, r3, #4
 8009bae:	f003 030f 	and.w	r3, r3, #15
 8009bb2:	490a      	ldr	r1, [pc, #40]	; (8009bdc <HAL_RCC_ClockConfig+0x1c0>)
 8009bb4:	5ccb      	ldrb	r3, [r1, r3]
 8009bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8009bba:	4a09      	ldr	r2, [pc, #36]	; (8009be0 <HAL_RCC_ClockConfig+0x1c4>)
 8009bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009bbe:	4b09      	ldr	r3, [pc, #36]	; (8009be4 <HAL_RCC_ClockConfig+0x1c8>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7fb feca 	bl	800595c <HAL_InitTick>

  return HAL_OK;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	40023c00 	.word	0x40023c00
 8009bd8:	40023800 	.word	0x40023800
 8009bdc:	0800ea08 	.word	0x0800ea08
 8009be0:	20000054 	.word	0x20000054
 8009be4:	20000074 	.word	0x20000074

08009be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bec:	b094      	sub	sp, #80	; 0x50
 8009bee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009c00:	4b79      	ldr	r3, [pc, #484]	; (8009de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	f003 030c 	and.w	r3, r3, #12
 8009c08:	2b08      	cmp	r3, #8
 8009c0a:	d00d      	beq.n	8009c28 <HAL_RCC_GetSysClockFreq+0x40>
 8009c0c:	2b08      	cmp	r3, #8
 8009c0e:	f200 80e1 	bhi.w	8009dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d002      	beq.n	8009c1c <HAL_RCC_GetSysClockFreq+0x34>
 8009c16:	2b04      	cmp	r3, #4
 8009c18:	d003      	beq.n	8009c22 <HAL_RCC_GetSysClockFreq+0x3a>
 8009c1a:	e0db      	b.n	8009dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009c1c:	4b73      	ldr	r3, [pc, #460]	; (8009dec <HAL_RCC_GetSysClockFreq+0x204>)
 8009c1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009c20:	e0db      	b.n	8009dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009c22:	4b73      	ldr	r3, [pc, #460]	; (8009df0 <HAL_RCC_GetSysClockFreq+0x208>)
 8009c24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009c26:	e0d8      	b.n	8009dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009c28:	4b6f      	ldr	r3, [pc, #444]	; (8009de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009c32:	4b6d      	ldr	r3, [pc, #436]	; (8009de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d063      	beq.n	8009d06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009c3e:	4b6a      	ldr	r3, [pc, #424]	; (8009de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	099b      	lsrs	r3, r3, #6
 8009c44:	2200      	movs	r2, #0
 8009c46:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c50:	633b      	str	r3, [r7, #48]	; 0x30
 8009c52:	2300      	movs	r3, #0
 8009c54:	637b      	str	r3, [r7, #52]	; 0x34
 8009c56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009c5a:	4622      	mov	r2, r4
 8009c5c:	462b      	mov	r3, r5
 8009c5e:	f04f 0000 	mov.w	r0, #0
 8009c62:	f04f 0100 	mov.w	r1, #0
 8009c66:	0159      	lsls	r1, r3, #5
 8009c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009c6c:	0150      	lsls	r0, r2, #5
 8009c6e:	4602      	mov	r2, r0
 8009c70:	460b      	mov	r3, r1
 8009c72:	4621      	mov	r1, r4
 8009c74:	1a51      	subs	r1, r2, r1
 8009c76:	6139      	str	r1, [r7, #16]
 8009c78:	4629      	mov	r1, r5
 8009c7a:	eb63 0301 	sbc.w	r3, r3, r1
 8009c7e:	617b      	str	r3, [r7, #20]
 8009c80:	f04f 0200 	mov.w	r2, #0
 8009c84:	f04f 0300 	mov.w	r3, #0
 8009c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009c8c:	4659      	mov	r1, fp
 8009c8e:	018b      	lsls	r3, r1, #6
 8009c90:	4651      	mov	r1, sl
 8009c92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009c96:	4651      	mov	r1, sl
 8009c98:	018a      	lsls	r2, r1, #6
 8009c9a:	4651      	mov	r1, sl
 8009c9c:	ebb2 0801 	subs.w	r8, r2, r1
 8009ca0:	4659      	mov	r1, fp
 8009ca2:	eb63 0901 	sbc.w	r9, r3, r1
 8009ca6:	f04f 0200 	mov.w	r2, #0
 8009caa:	f04f 0300 	mov.w	r3, #0
 8009cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009cba:	4690      	mov	r8, r2
 8009cbc:	4699      	mov	r9, r3
 8009cbe:	4623      	mov	r3, r4
 8009cc0:	eb18 0303 	adds.w	r3, r8, r3
 8009cc4:	60bb      	str	r3, [r7, #8]
 8009cc6:	462b      	mov	r3, r5
 8009cc8:	eb49 0303 	adc.w	r3, r9, r3
 8009ccc:	60fb      	str	r3, [r7, #12]
 8009cce:	f04f 0200 	mov.w	r2, #0
 8009cd2:	f04f 0300 	mov.w	r3, #0
 8009cd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009cda:	4629      	mov	r1, r5
 8009cdc:	024b      	lsls	r3, r1, #9
 8009cde:	4621      	mov	r1, r4
 8009ce0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009ce4:	4621      	mov	r1, r4
 8009ce6:	024a      	lsls	r2, r1, #9
 8009ce8:	4610      	mov	r0, r2
 8009cea:	4619      	mov	r1, r3
 8009cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cee:	2200      	movs	r2, #0
 8009cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009cf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009cf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009cf8:	f7f6 fac2 	bl	8000280 <__aeabi_uldivmod>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	460b      	mov	r3, r1
 8009d00:	4613      	mov	r3, r2
 8009d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d04:	e058      	b.n	8009db8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d06:	4b38      	ldr	r3, [pc, #224]	; (8009de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	099b      	lsrs	r3, r3, #6
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	4618      	mov	r0, r3
 8009d10:	4611      	mov	r1, r2
 8009d12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009d16:	623b      	str	r3, [r7, #32]
 8009d18:	2300      	movs	r3, #0
 8009d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009d20:	4642      	mov	r2, r8
 8009d22:	464b      	mov	r3, r9
 8009d24:	f04f 0000 	mov.w	r0, #0
 8009d28:	f04f 0100 	mov.w	r1, #0
 8009d2c:	0159      	lsls	r1, r3, #5
 8009d2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009d32:	0150      	lsls	r0, r2, #5
 8009d34:	4602      	mov	r2, r0
 8009d36:	460b      	mov	r3, r1
 8009d38:	4641      	mov	r1, r8
 8009d3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8009d3e:	4649      	mov	r1, r9
 8009d40:	eb63 0b01 	sbc.w	fp, r3, r1
 8009d44:	f04f 0200 	mov.w	r2, #0
 8009d48:	f04f 0300 	mov.w	r3, #0
 8009d4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009d50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009d54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009d58:	ebb2 040a 	subs.w	r4, r2, sl
 8009d5c:	eb63 050b 	sbc.w	r5, r3, fp
 8009d60:	f04f 0200 	mov.w	r2, #0
 8009d64:	f04f 0300 	mov.w	r3, #0
 8009d68:	00eb      	lsls	r3, r5, #3
 8009d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009d6e:	00e2      	lsls	r2, r4, #3
 8009d70:	4614      	mov	r4, r2
 8009d72:	461d      	mov	r5, r3
 8009d74:	4643      	mov	r3, r8
 8009d76:	18e3      	adds	r3, r4, r3
 8009d78:	603b      	str	r3, [r7, #0]
 8009d7a:	464b      	mov	r3, r9
 8009d7c:	eb45 0303 	adc.w	r3, r5, r3
 8009d80:	607b      	str	r3, [r7, #4]
 8009d82:	f04f 0200 	mov.w	r2, #0
 8009d86:	f04f 0300 	mov.w	r3, #0
 8009d8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009d8e:	4629      	mov	r1, r5
 8009d90:	028b      	lsls	r3, r1, #10
 8009d92:	4621      	mov	r1, r4
 8009d94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009d98:	4621      	mov	r1, r4
 8009d9a:	028a      	lsls	r2, r1, #10
 8009d9c:	4610      	mov	r0, r2
 8009d9e:	4619      	mov	r1, r3
 8009da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009da2:	2200      	movs	r2, #0
 8009da4:	61bb      	str	r3, [r7, #24]
 8009da6:	61fa      	str	r2, [r7, #28]
 8009da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009dac:	f7f6 fa68 	bl	8000280 <__aeabi_uldivmod>
 8009db0:	4602      	mov	r2, r0
 8009db2:	460b      	mov	r3, r1
 8009db4:	4613      	mov	r3, r2
 8009db6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009db8:	4b0b      	ldr	r3, [pc, #44]	; (8009de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	0c1b      	lsrs	r3, r3, #16
 8009dbe:	f003 0303 	and.w	r3, r3, #3
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	005b      	lsls	r3, r3, #1
 8009dc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009dc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009dd2:	e002      	b.n	8009dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009dd4:	4b05      	ldr	r3, [pc, #20]	; (8009dec <HAL_RCC_GetSysClockFreq+0x204>)
 8009dd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3750      	adds	r7, #80	; 0x50
 8009de0:	46bd      	mov	sp, r7
 8009de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009de6:	bf00      	nop
 8009de8:	40023800 	.word	0x40023800
 8009dec:	00f42400 	.word	0x00f42400
 8009df0:	007a1200 	.word	0x007a1200

08009df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009df4:	b480      	push	{r7}
 8009df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009df8:	4b03      	ldr	r3, [pc, #12]	; (8009e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	20000054 	.word	0x20000054

08009e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009e10:	f7ff fff0 	bl	8009df4 <HAL_RCC_GetHCLKFreq>
 8009e14:	4602      	mov	r2, r0
 8009e16:	4b05      	ldr	r3, [pc, #20]	; (8009e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	0a9b      	lsrs	r3, r3, #10
 8009e1c:	f003 0307 	and.w	r3, r3, #7
 8009e20:	4903      	ldr	r1, [pc, #12]	; (8009e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009e22:	5ccb      	ldrb	r3, [r1, r3]
 8009e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	40023800 	.word	0x40023800
 8009e30:	0800ea18 	.word	0x0800ea18

08009e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009e38:	f7ff ffdc 	bl	8009df4 <HAL_RCC_GetHCLKFreq>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	4b05      	ldr	r3, [pc, #20]	; (8009e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	0b5b      	lsrs	r3, r3, #13
 8009e44:	f003 0307 	and.w	r3, r3, #7
 8009e48:	4903      	ldr	r1, [pc, #12]	; (8009e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009e4a:	5ccb      	ldrb	r3, [r1, r3]
 8009e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	40023800 	.word	0x40023800
 8009e58:	0800ea18 	.word	0x0800ea18

08009e5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	220f      	movs	r2, #15
 8009e6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009e6c:	4b12      	ldr	r3, [pc, #72]	; (8009eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	f003 0203 	and.w	r2, r3, #3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009e78:	4b0f      	ldr	r3, [pc, #60]	; (8009eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009e84:	4b0c      	ldr	r3, [pc, #48]	; (8009eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009e90:	4b09      	ldr	r3, [pc, #36]	; (8009eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	08db      	lsrs	r3, r3, #3
 8009e96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009e9e:	4b07      	ldr	r3, [pc, #28]	; (8009ebc <HAL_RCC_GetClockConfig+0x60>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f003 0207 	and.w	r2, r3, #7
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	601a      	str	r2, [r3, #0]
}
 8009eaa:	bf00      	nop
 8009eac:	370c      	adds	r7, #12
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr
 8009eb6:	bf00      	nop
 8009eb8:	40023800 	.word	0x40023800
 8009ebc:	40023c00 	.word	0x40023c00

08009ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b086      	sub	sp, #24
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f003 0301 	and.w	r3, r3, #1
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d105      	bne.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d035      	beq.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009ee8:	4b62      	ldr	r3, [pc, #392]	; (800a074 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009eea:	2200      	movs	r2, #0
 8009eec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009eee:	f7fc f8e5 	bl	80060bc <HAL_GetTick>
 8009ef2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009ef4:	e008      	b.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009ef6:	f7fc f8e1 	bl	80060bc <HAL_GetTick>
 8009efa:	4602      	mov	r2, r0
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	1ad3      	subs	r3, r2, r3
 8009f00:	2b02      	cmp	r3, #2
 8009f02:	d901      	bls.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009f04:	2303      	movs	r3, #3
 8009f06:	e0b0      	b.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009f08:	4b5b      	ldr	r3, [pc, #364]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1f0      	bne.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	019a      	lsls	r2, r3, #6
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	071b      	lsls	r3, r3, #28
 8009f20:	4955      	ldr	r1, [pc, #340]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009f22:	4313      	orrs	r3, r2
 8009f24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009f28:	4b52      	ldr	r3, [pc, #328]	; (800a074 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009f2e:	f7fc f8c5 	bl	80060bc <HAL_GetTick>
 8009f32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009f34:	e008      	b.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009f36:	f7fc f8c1 	bl	80060bc <HAL_GetTick>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	1ad3      	subs	r3, r2, r3
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d901      	bls.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009f44:	2303      	movs	r3, #3
 8009f46:	e090      	b.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009f48:	4b4b      	ldr	r3, [pc, #300]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d0f0      	beq.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f003 0302 	and.w	r3, r3, #2
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f000 8083 	beq.w	800a068 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009f62:	2300      	movs	r3, #0
 8009f64:	60fb      	str	r3, [r7, #12]
 8009f66:	4b44      	ldr	r3, [pc, #272]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f6a:	4a43      	ldr	r2, [pc, #268]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f70:	6413      	str	r3, [r2, #64]	; 0x40
 8009f72:	4b41      	ldr	r3, [pc, #260]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f7a:	60fb      	str	r3, [r7, #12]
 8009f7c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009f7e:	4b3f      	ldr	r3, [pc, #252]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a3e      	ldr	r2, [pc, #248]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f88:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009f8a:	f7fc f897 	bl	80060bc <HAL_GetTick>
 8009f8e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009f90:	e008      	b.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009f92:	f7fc f893 	bl	80060bc <HAL_GetTick>
 8009f96:	4602      	mov	r2, r0
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	1ad3      	subs	r3, r2, r3
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	d901      	bls.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8009fa0:	2303      	movs	r3, #3
 8009fa2:	e062      	b.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009fa4:	4b35      	ldr	r3, [pc, #212]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d0f0      	beq.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009fb0:	4b31      	ldr	r3, [pc, #196]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fb8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d02f      	beq.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fc8:	693a      	ldr	r2, [r7, #16]
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d028      	beq.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009fce:	4b2a      	ldr	r3, [pc, #168]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fd6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009fd8:	4b29      	ldr	r3, [pc, #164]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009fda:	2201      	movs	r2, #1
 8009fdc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009fde:	4b28      	ldr	r3, [pc, #160]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009fe4:	4a24      	ldr	r2, [pc, #144]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009fea:	4b23      	ldr	r3, [pc, #140]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fee:	f003 0301 	and.w	r3, r3, #1
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d114      	bne.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009ff6:	f7fc f861 	bl	80060bc <HAL_GetTick>
 8009ffa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ffc:	e00a      	b.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009ffe:	f7fc f85d 	bl	80060bc <HAL_GetTick>
 800a002:	4602      	mov	r2, r0
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	1ad3      	subs	r3, r2, r3
 800a008:	f241 3288 	movw	r2, #5000	; 0x1388
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d901      	bls.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800a010:	2303      	movs	r3, #3
 800a012:	e02a      	b.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a014:	4b18      	ldr	r3, [pc, #96]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a018:	f003 0302 	and.w	r3, r3, #2
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d0ee      	beq.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a028:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a02c:	d10d      	bne.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a02e:	4b12      	ldr	r3, [pc, #72]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	68db      	ldr	r3, [r3, #12]
 800a03a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a03e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a042:	490d      	ldr	r1, [pc, #52]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a044:	4313      	orrs	r3, r2
 800a046:	608b      	str	r3, [r1, #8]
 800a048:	e005      	b.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a04a:	4b0b      	ldr	r3, [pc, #44]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	4a0a      	ldr	r2, [pc, #40]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a050:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a054:	6093      	str	r3, [r2, #8]
 800a056:	4b08      	ldr	r3, [pc, #32]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a058:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a062:	4905      	ldr	r1, [pc, #20]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a064:	4313      	orrs	r3, r2
 800a066:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800a068:	2300      	movs	r3, #0
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3718      	adds	r7, #24
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	42470068 	.word	0x42470068
 800a078:	40023800 	.word	0x40023800
 800a07c:	40007000 	.word	0x40007000
 800a080:	42470e40 	.word	0x42470e40

0800a084 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a084:	b480      	push	{r7}
 800a086:	b085      	sub	sp, #20
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2203      	movs	r2, #3
 800a090:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800a092:	4b11      	ldr	r3, [pc, #68]	; (800a0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 800a094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a098:	099b      	lsrs	r3, r3, #6
 800a09a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a0a2:	4b0d      	ldr	r3, [pc, #52]	; (800a0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 800a0a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0a8:	0f1b      	lsrs	r3, r3, #28
 800a0aa:	f003 0207 	and.w	r2, r3, #7
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800a0b2:	4b09      	ldr	r3, [pc, #36]	; (800a0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a0ba:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800a0bc:	4b06      	ldr	r3, [pc, #24]	; (800a0d8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 800a0be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0c0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	431a      	orrs	r2, r3
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 800a0cc:	bf00      	nop
 800a0ce:	3714      	adds	r7, #20
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr
 800a0d8:	40023800 	.word	0x40023800

0800a0dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b087      	sub	sp, #28
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d13e      	bne.n	800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800a0fa:	4b23      	ldr	r3, [pc, #140]	; (800a188 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a102:	60fb      	str	r3, [r7, #12]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d005      	beq.n	800a116 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d12f      	bne.n	800a170 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800a110:	4b1e      	ldr	r3, [pc, #120]	; (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a112:	617b      	str	r3, [r7, #20]
          break;
 800a114:	e02f      	b.n	800a176 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800a116:	4b1c      	ldr	r3, [pc, #112]	; (800a188 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a11e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a122:	d108      	bne.n	800a136 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a124:	4b18      	ldr	r3, [pc, #96]	; (800a188 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a12c:	4a18      	ldr	r2, [pc, #96]	; (800a190 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800a12e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a132:	613b      	str	r3, [r7, #16]
 800a134:	e007      	b.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a136:	4b14      	ldr	r3, [pc, #80]	; (800a188 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a13e:	4a15      	ldr	r2, [pc, #84]	; (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800a140:	fbb2 f3f3 	udiv	r3, r2, r3
 800a144:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800a146:	4b10      	ldr	r3, [pc, #64]	; (800a188 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a14c:	099b      	lsrs	r3, r3, #6
 800a14e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	fb02 f303 	mul.w	r3, r2, r3
 800a158:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800a15a:	4b0b      	ldr	r3, [pc, #44]	; (800a188 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a15c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a160:	0f1b      	lsrs	r3, r3, #28
 800a162:	f003 0307 	and.w	r3, r3, #7
 800a166:	68ba      	ldr	r2, [r7, #8]
 800a168:	fbb2 f3f3 	udiv	r3, r2, r3
 800a16c:	617b      	str	r3, [r7, #20]
          break;
 800a16e:	e002      	b.n	800a176 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800a170:	2300      	movs	r3, #0
 800a172:	617b      	str	r3, [r7, #20]
          break;
 800a174:	bf00      	nop
        }
      }
      break;
 800a176:	bf00      	nop
    }
  }
  return frequency;
 800a178:	697b      	ldr	r3, [r7, #20]
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	371c      	adds	r7, #28
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr
 800a186:	bf00      	nop
 800a188:	40023800 	.word	0x40023800
 800a18c:	00bb8000 	.word	0x00bb8000
 800a190:	007a1200 	.word	0x007a1200
 800a194:	00f42400 	.word	0x00f42400

0800a198 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d101      	bne.n	800a1aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e07b      	b.n	800a2a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d108      	bne.n	800a1c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1ba:	d009      	beq.n	800a1d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	61da      	str	r2, [r3, #28]
 800a1c2:	e005      	b.n	800a1d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d106      	bne.n	800a1f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f7fb fb08 	bl	8005800 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2202      	movs	r2, #2
 800a1f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a206:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	689b      	ldr	r3, [r3, #8]
 800a214:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a218:	431a      	orrs	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a222:	431a      	orrs	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	691b      	ldr	r3, [r3, #16]
 800a228:	f003 0302 	and.w	r3, r3, #2
 800a22c:	431a      	orrs	r2, r3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	695b      	ldr	r3, [r3, #20]
 800a232:	f003 0301 	and.w	r3, r3, #1
 800a236:	431a      	orrs	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	699b      	ldr	r3, [r3, #24]
 800a23c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a240:	431a      	orrs	r2, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	69db      	ldr	r3, [r3, #28]
 800a246:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a24a:	431a      	orrs	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6a1b      	ldr	r3, [r3, #32]
 800a250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a254:	ea42 0103 	orr.w	r1, r2, r3
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a25c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	430a      	orrs	r2, r1
 800a266:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	699b      	ldr	r3, [r3, #24]
 800a26c:	0c1b      	lsrs	r3, r3, #16
 800a26e:	f003 0104 	and.w	r1, r3, #4
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a276:	f003 0210 	and.w	r2, r3, #16
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	430a      	orrs	r2, r1
 800a280:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	69da      	ldr	r2, [r3, #28]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a290:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a2a0:	2300      	movs	r3, #0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3708      	adds	r7, #8
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b082      	sub	sp, #8
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d101      	bne.n	800a2bc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e01a      	b.n	800a2f2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2202      	movs	r2, #2
 800a2c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2d2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f7fb fadb 	bl	8005890 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3708      	adds	r7, #8
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b08c      	sub	sp, #48	; 0x30
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	60f8      	str	r0, [r7, #12]
 800a302:	60b9      	str	r1, [r7, #8]
 800a304:	607a      	str	r2, [r7, #4]
 800a306:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a308:	2301      	movs	r3, #1
 800a30a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a30c:	2300      	movs	r3, #0
 800a30e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d101      	bne.n	800a320 <HAL_SPI_TransmitReceive+0x26>
 800a31c:	2302      	movs	r3, #2
 800a31e:	e18a      	b.n	800a636 <HAL_SPI_TransmitReceive+0x33c>
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2201      	movs	r2, #1
 800a324:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a328:	f7fb fec8 	bl	80060bc <HAL_GetTick>
 800a32c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a334:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a33e:	887b      	ldrh	r3, [r7, #2]
 800a340:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a342:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a346:	2b01      	cmp	r3, #1
 800a348:	d00f      	beq.n	800a36a <HAL_SPI_TransmitReceive+0x70>
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a350:	d107      	bne.n	800a362 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d103      	bne.n	800a362 <HAL_SPI_TransmitReceive+0x68>
 800a35a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a35e:	2b04      	cmp	r3, #4
 800a360:	d003      	beq.n	800a36a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a362:	2302      	movs	r3, #2
 800a364:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a368:	e15b      	b.n	800a622 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d005      	beq.n	800a37c <HAL_SPI_TransmitReceive+0x82>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d002      	beq.n	800a37c <HAL_SPI_TransmitReceive+0x82>
 800a376:	887b      	ldrh	r3, [r7, #2]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d103      	bne.n	800a384 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a382:	e14e      	b.n	800a622 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	2b04      	cmp	r3, #4
 800a38e:	d003      	beq.n	800a398 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2205      	movs	r2, #5
 800a394:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2200      	movs	r2, #0
 800a39c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	887a      	ldrh	r2, [r7, #2]
 800a3a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	887a      	ldrh	r2, [r7, #2]
 800a3ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	68ba      	ldr	r2, [r7, #8]
 800a3b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	887a      	ldrh	r2, [r7, #2]
 800a3ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	887a      	ldrh	r2, [r7, #2]
 800a3c0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3d8:	2b40      	cmp	r3, #64	; 0x40
 800a3da:	d007      	beq.n	800a3ec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	68db      	ldr	r3, [r3, #12]
 800a3f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3f4:	d178      	bne.n	800a4e8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d002      	beq.n	800a404 <HAL_SPI_TransmitReceive+0x10a>
 800a3fe:	8b7b      	ldrh	r3, [r7, #26]
 800a400:	2b01      	cmp	r3, #1
 800a402:	d166      	bne.n	800a4d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a408:	881a      	ldrh	r2, [r3, #0]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a414:	1c9a      	adds	r2, r3, #2
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a41e:	b29b      	uxth	r3, r3
 800a420:	3b01      	subs	r3, #1
 800a422:	b29a      	uxth	r2, r3
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a428:	e053      	b.n	800a4d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	f003 0302 	and.w	r3, r3, #2
 800a434:	2b02      	cmp	r3, #2
 800a436:	d11b      	bne.n	800a470 <HAL_SPI_TransmitReceive+0x176>
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d016      	beq.n	800a470 <HAL_SPI_TransmitReceive+0x176>
 800a442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a444:	2b01      	cmp	r3, #1
 800a446:	d113      	bne.n	800a470 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44c:	881a      	ldrh	r2, [r3, #0]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a458:	1c9a      	adds	r2, r3, #2
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a462:	b29b      	uxth	r3, r3
 800a464:	3b01      	subs	r3, #1
 800a466:	b29a      	uxth	r2, r3
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a46c:	2300      	movs	r3, #0
 800a46e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	f003 0301 	and.w	r3, r3, #1
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d119      	bne.n	800a4b2 <HAL_SPI_TransmitReceive+0x1b8>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a482:	b29b      	uxth	r3, r3
 800a484:	2b00      	cmp	r3, #0
 800a486:	d014      	beq.n	800a4b2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	68da      	ldr	r2, [r3, #12]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a492:	b292      	uxth	r2, r2
 800a494:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a49a:	1c9a      	adds	r2, r3, #2
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	b29a      	uxth	r2, r3
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a4b2:	f7fb fe03 	bl	80060bc <HAL_GetTick>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ba:	1ad3      	subs	r3, r2, r3
 800a4bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d807      	bhi.n	800a4d2 <HAL_SPI_TransmitReceive+0x1d8>
 800a4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4c8:	d003      	beq.n	800a4d2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a4d0:	e0a7      	b.n	800a622 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d1a6      	bne.n	800a42a <HAL_SPI_TransmitReceive+0x130>
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d1a1      	bne.n	800a42a <HAL_SPI_TransmitReceive+0x130>
 800a4e6:	e07c      	b.n	800a5e2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d002      	beq.n	800a4f6 <HAL_SPI_TransmitReceive+0x1fc>
 800a4f0:	8b7b      	ldrh	r3, [r7, #26]
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d16b      	bne.n	800a5ce <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	330c      	adds	r3, #12
 800a500:	7812      	ldrb	r2, [r2, #0]
 800a502:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a508:	1c5a      	adds	r2, r3, #1
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a512:	b29b      	uxth	r3, r3
 800a514:	3b01      	subs	r3, #1
 800a516:	b29a      	uxth	r2, r3
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a51c:	e057      	b.n	800a5ce <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	f003 0302 	and.w	r3, r3, #2
 800a528:	2b02      	cmp	r3, #2
 800a52a:	d11c      	bne.n	800a566 <HAL_SPI_TransmitReceive+0x26c>
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a530:	b29b      	uxth	r3, r3
 800a532:	2b00      	cmp	r3, #0
 800a534:	d017      	beq.n	800a566 <HAL_SPI_TransmitReceive+0x26c>
 800a536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d114      	bne.n	800a566 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	330c      	adds	r3, #12
 800a546:	7812      	ldrb	r2, [r2, #0]
 800a548:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a54e:	1c5a      	adds	r2, r3, #1
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a558:	b29b      	uxth	r3, r3
 800a55a:	3b01      	subs	r3, #1
 800a55c:	b29a      	uxth	r2, r3
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a562:	2300      	movs	r3, #0
 800a564:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	f003 0301 	and.w	r3, r3, #1
 800a570:	2b01      	cmp	r3, #1
 800a572:	d119      	bne.n	800a5a8 <HAL_SPI_TransmitReceive+0x2ae>
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a578:	b29b      	uxth	r3, r3
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d014      	beq.n	800a5a8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	68da      	ldr	r2, [r3, #12]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a588:	b2d2      	uxtb	r2, r2
 800a58a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a590:	1c5a      	adds	r2, r3, #1
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	3b01      	subs	r3, #1
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a5a8:	f7fb fd88 	bl	80060bc <HAL_GetTick>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b0:	1ad3      	subs	r3, r2, r3
 800a5b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d803      	bhi.n	800a5c0 <HAL_SPI_TransmitReceive+0x2c6>
 800a5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5be:	d102      	bne.n	800a5c6 <HAL_SPI_TransmitReceive+0x2cc>
 800a5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d103      	bne.n	800a5ce <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a5c6:	2303      	movs	r3, #3
 800a5c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a5cc:	e029      	b.n	800a622 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d1a2      	bne.n	800a51e <HAL_SPI_TransmitReceive+0x224>
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d19d      	bne.n	800a51e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a5e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	f000 f8b2 	bl	800a750 <SPI_EndRxTxTransaction>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d006      	beq.n	800a600 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2220      	movs	r2, #32
 800a5fc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a5fe:	e010      	b.n	800a622 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d10b      	bne.n	800a620 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a608:	2300      	movs	r3, #0
 800a60a:	617b      	str	r3, [r7, #20]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	617b      	str	r3, [r7, #20]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	617b      	str	r3, [r7, #20]
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	e000      	b.n	800a622 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a620:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2201      	movs	r2, #1
 800a626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a632:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a636:	4618      	mov	r0, r3
 800a638:	3730      	adds	r7, #48	; 0x30
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
	...

0800a640 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b088      	sub	sp, #32
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	60b9      	str	r1, [r7, #8]
 800a64a:	603b      	str	r3, [r7, #0]
 800a64c:	4613      	mov	r3, r2
 800a64e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a650:	f7fb fd34 	bl	80060bc <HAL_GetTick>
 800a654:	4602      	mov	r2, r0
 800a656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a658:	1a9b      	subs	r3, r3, r2
 800a65a:	683a      	ldr	r2, [r7, #0]
 800a65c:	4413      	add	r3, r2
 800a65e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a660:	f7fb fd2c 	bl	80060bc <HAL_GetTick>
 800a664:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a666:	4b39      	ldr	r3, [pc, #228]	; (800a74c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	015b      	lsls	r3, r3, #5
 800a66c:	0d1b      	lsrs	r3, r3, #20
 800a66e:	69fa      	ldr	r2, [r7, #28]
 800a670:	fb02 f303 	mul.w	r3, r2, r3
 800a674:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a676:	e054      	b.n	800a722 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a67e:	d050      	beq.n	800a722 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a680:	f7fb fd1c 	bl	80060bc <HAL_GetTick>
 800a684:	4602      	mov	r2, r0
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	1ad3      	subs	r3, r2, r3
 800a68a:	69fa      	ldr	r2, [r7, #28]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d902      	bls.n	800a696 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d13d      	bne.n	800a712 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	685a      	ldr	r2, [r3, #4]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a6a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6ae:	d111      	bne.n	800a6d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	689b      	ldr	r3, [r3, #8]
 800a6b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6b8:	d004      	beq.n	800a6c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6c2:	d107      	bne.n	800a6d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6dc:	d10f      	bne.n	800a6fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a6ec:	601a      	str	r2, [r3, #0]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2201      	movs	r2, #1
 800a702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2200      	movs	r2, #0
 800a70a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a70e:	2303      	movs	r3, #3
 800a710:	e017      	b.n	800a742 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d101      	bne.n	800a71c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a718:	2300      	movs	r3, #0
 800a71a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	3b01      	subs	r3, #1
 800a720:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	689a      	ldr	r2, [r3, #8]
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	4013      	ands	r3, r2
 800a72c:	68ba      	ldr	r2, [r7, #8]
 800a72e:	429a      	cmp	r2, r3
 800a730:	bf0c      	ite	eq
 800a732:	2301      	moveq	r3, #1
 800a734:	2300      	movne	r3, #0
 800a736:	b2db      	uxtb	r3, r3
 800a738:	461a      	mov	r2, r3
 800a73a:	79fb      	ldrb	r3, [r7, #7]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d19b      	bne.n	800a678 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a740:	2300      	movs	r3, #0
}
 800a742:	4618      	mov	r0, r3
 800a744:	3720      	adds	r7, #32
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	20000054 	.word	0x20000054

0800a750 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b088      	sub	sp, #32
 800a754:	af02      	add	r7, sp, #8
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a75c:	4b1b      	ldr	r3, [pc, #108]	; (800a7cc <SPI_EndRxTxTransaction+0x7c>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a1b      	ldr	r2, [pc, #108]	; (800a7d0 <SPI_EndRxTxTransaction+0x80>)
 800a762:	fba2 2303 	umull	r2, r3, r2, r3
 800a766:	0d5b      	lsrs	r3, r3, #21
 800a768:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a76c:	fb02 f303 	mul.w	r3, r2, r3
 800a770:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a77a:	d112      	bne.n	800a7a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	9300      	str	r3, [sp, #0]
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	2200      	movs	r2, #0
 800a784:	2180      	movs	r1, #128	; 0x80
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	f7ff ff5a 	bl	800a640 <SPI_WaitFlagStateUntilTimeout>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d016      	beq.n	800a7c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a796:	f043 0220 	orr.w	r2, r3, #32
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a79e:	2303      	movs	r3, #3
 800a7a0:	e00f      	b.n	800a7c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d00a      	beq.n	800a7be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	3b01      	subs	r3, #1
 800a7ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7b8:	2b80      	cmp	r3, #128	; 0x80
 800a7ba:	d0f2      	beq.n	800a7a2 <SPI_EndRxTxTransaction+0x52>
 800a7bc:	e000      	b.n	800a7c0 <SPI_EndRxTxTransaction+0x70>
        break;
 800a7be:	bf00      	nop
  }

  return HAL_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3718      	adds	r7, #24
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	20000054 	.word	0x20000054
 800a7d0:	165e9f81 	.word	0x165e9f81

0800a7d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d101      	bne.n	800a7e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e041      	b.n	800a86a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d106      	bne.n	800a800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 f839 	bl	800a872 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2202      	movs	r2, #2
 800a804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	3304      	adds	r3, #4
 800a810:	4619      	mov	r1, r3
 800a812:	4610      	mov	r0, r2
 800a814:	f000 f9d8 	bl	800abc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2201      	movs	r2, #1
 800a834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2201      	movs	r2, #1
 800a83c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2201      	movs	r2, #1
 800a854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2201      	movs	r2, #1
 800a85c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2201      	movs	r2, #1
 800a864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a872:	b480      	push	{r7}
 800a874:	b083      	sub	sp, #12
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a87a:	bf00      	nop
 800a87c:	370c      	adds	r7, #12
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr
	...

0800a888 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a896:	b2db      	uxtb	r3, r3
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d001      	beq.n	800a8a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	e04e      	b.n	800a93e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2202      	movs	r2, #2
 800a8a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	68da      	ldr	r2, [r3, #12]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f042 0201 	orr.w	r2, r2, #1
 800a8b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a23      	ldr	r2, [pc, #140]	; (800a94c <HAL_TIM_Base_Start_IT+0xc4>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d022      	beq.n	800a908 <HAL_TIM_Base_Start_IT+0x80>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8ca:	d01d      	beq.n	800a908 <HAL_TIM_Base_Start_IT+0x80>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a1f      	ldr	r2, [pc, #124]	; (800a950 <HAL_TIM_Base_Start_IT+0xc8>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d018      	beq.n	800a908 <HAL_TIM_Base_Start_IT+0x80>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a1e      	ldr	r2, [pc, #120]	; (800a954 <HAL_TIM_Base_Start_IT+0xcc>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d013      	beq.n	800a908 <HAL_TIM_Base_Start_IT+0x80>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a1c      	ldr	r2, [pc, #112]	; (800a958 <HAL_TIM_Base_Start_IT+0xd0>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d00e      	beq.n	800a908 <HAL_TIM_Base_Start_IT+0x80>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a1b      	ldr	r2, [pc, #108]	; (800a95c <HAL_TIM_Base_Start_IT+0xd4>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d009      	beq.n	800a908 <HAL_TIM_Base_Start_IT+0x80>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a19      	ldr	r2, [pc, #100]	; (800a960 <HAL_TIM_Base_Start_IT+0xd8>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d004      	beq.n	800a908 <HAL_TIM_Base_Start_IT+0x80>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a18      	ldr	r2, [pc, #96]	; (800a964 <HAL_TIM_Base_Start_IT+0xdc>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d111      	bne.n	800a92c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	689b      	ldr	r3, [r3, #8]
 800a90e:	f003 0307 	and.w	r3, r3, #7
 800a912:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2b06      	cmp	r3, #6
 800a918:	d010      	beq.n	800a93c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f042 0201 	orr.w	r2, r2, #1
 800a928:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a92a:	e007      	b.n	800a93c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f042 0201 	orr.w	r2, r2, #1
 800a93a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a93c:	2300      	movs	r3, #0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3714      	adds	r7, #20
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr
 800a94a:	bf00      	nop
 800a94c:	40010000 	.word	0x40010000
 800a950:	40000400 	.word	0x40000400
 800a954:	40000800 	.word	0x40000800
 800a958:	40000c00 	.word	0x40000c00
 800a95c:	40010400 	.word	0x40010400
 800a960:	40014000 	.word	0x40014000
 800a964:	40001800 	.word	0x40001800

0800a968 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	f003 0302 	and.w	r3, r3, #2
 800a97a:	2b02      	cmp	r3, #2
 800a97c:	d122      	bne.n	800a9c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	f003 0302 	and.w	r3, r3, #2
 800a988:	2b02      	cmp	r3, #2
 800a98a:	d11b      	bne.n	800a9c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f06f 0202 	mvn.w	r2, #2
 800a994:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2201      	movs	r2, #1
 800a99a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	699b      	ldr	r3, [r3, #24]
 800a9a2:	f003 0303 	and.w	r3, r3, #3
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d003      	beq.n	800a9b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 f8ee 	bl	800ab8c <HAL_TIM_IC_CaptureCallback>
 800a9b0:	e005      	b.n	800a9be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 f8e0 	bl	800ab78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 f8f1 	bl	800aba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	f003 0304 	and.w	r3, r3, #4
 800a9ce:	2b04      	cmp	r3, #4
 800a9d0:	d122      	bne.n	800aa18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	f003 0304 	and.w	r3, r3, #4
 800a9dc:	2b04      	cmp	r3, #4
 800a9de:	d11b      	bne.n	800aa18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f06f 0204 	mvn.w	r2, #4
 800a9e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2202      	movs	r2, #2
 800a9ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	699b      	ldr	r3, [r3, #24]
 800a9f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d003      	beq.n	800aa06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 f8c4 	bl	800ab8c <HAL_TIM_IC_CaptureCallback>
 800aa04:	e005      	b.n	800aa12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 f8b6 	bl	800ab78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 f8c7 	bl	800aba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2200      	movs	r2, #0
 800aa16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	691b      	ldr	r3, [r3, #16]
 800aa1e:	f003 0308 	and.w	r3, r3, #8
 800aa22:	2b08      	cmp	r3, #8
 800aa24:	d122      	bne.n	800aa6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	f003 0308 	and.w	r3, r3, #8
 800aa30:	2b08      	cmp	r3, #8
 800aa32:	d11b      	bne.n	800aa6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f06f 0208 	mvn.w	r2, #8
 800aa3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2204      	movs	r2, #4
 800aa42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	69db      	ldr	r3, [r3, #28]
 800aa4a:	f003 0303 	and.w	r3, r3, #3
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d003      	beq.n	800aa5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 f89a 	bl	800ab8c <HAL_TIM_IC_CaptureCallback>
 800aa58:	e005      	b.n	800aa66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 f88c 	bl	800ab78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 f89d 	bl	800aba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	691b      	ldr	r3, [r3, #16]
 800aa72:	f003 0310 	and.w	r3, r3, #16
 800aa76:	2b10      	cmp	r3, #16
 800aa78:	d122      	bne.n	800aac0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	f003 0310 	and.w	r3, r3, #16
 800aa84:	2b10      	cmp	r3, #16
 800aa86:	d11b      	bne.n	800aac0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f06f 0210 	mvn.w	r2, #16
 800aa90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2208      	movs	r2, #8
 800aa96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	69db      	ldr	r3, [r3, #28]
 800aa9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d003      	beq.n	800aaae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 f870 	bl	800ab8c <HAL_TIM_IC_CaptureCallback>
 800aaac:	e005      	b.n	800aaba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 f862 	bl	800ab78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 f873 	bl	800aba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2200      	movs	r2, #0
 800aabe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	691b      	ldr	r3, [r3, #16]
 800aac6:	f003 0301 	and.w	r3, r3, #1
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d10e      	bne.n	800aaec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	f003 0301 	and.w	r3, r3, #1
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d107      	bne.n	800aaec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f06f 0201 	mvn.w	r2, #1
 800aae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f7fa f950 	bl	8004d8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	691b      	ldr	r3, [r3, #16]
 800aaf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaf6:	2b80      	cmp	r3, #128	; 0x80
 800aaf8:	d10e      	bne.n	800ab18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab04:	2b80      	cmp	r3, #128	; 0x80
 800ab06:	d107      	bne.n	800ab18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ab10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 f902 	bl	800ad1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	691b      	ldr	r3, [r3, #16]
 800ab1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab22:	2b40      	cmp	r3, #64	; 0x40
 800ab24:	d10e      	bne.n	800ab44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab30:	2b40      	cmp	r3, #64	; 0x40
 800ab32:	d107      	bne.n	800ab44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 f838 	bl	800abb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	691b      	ldr	r3, [r3, #16]
 800ab4a:	f003 0320 	and.w	r3, r3, #32
 800ab4e:	2b20      	cmp	r3, #32
 800ab50:	d10e      	bne.n	800ab70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	f003 0320 	and.w	r3, r3, #32
 800ab5c:	2b20      	cmp	r3, #32
 800ab5e:	d107      	bne.n	800ab70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f06f 0220 	mvn.w	r2, #32
 800ab68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 f8cc 	bl	800ad08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab70:	bf00      	nop
 800ab72:	3708      	adds	r7, #8
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab80:	bf00      	nop
 800ab82:	370c      	adds	r7, #12
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b083      	sub	sp, #12
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab94:	bf00      	nop
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aba8:	bf00      	nop
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800abbc:	bf00      	nop
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	4a40      	ldr	r2, [pc, #256]	; (800acdc <TIM_Base_SetConfig+0x114>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d013      	beq.n	800ac08 <TIM_Base_SetConfig+0x40>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abe6:	d00f      	beq.n	800ac08 <TIM_Base_SetConfig+0x40>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	4a3d      	ldr	r2, [pc, #244]	; (800ace0 <TIM_Base_SetConfig+0x118>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d00b      	beq.n	800ac08 <TIM_Base_SetConfig+0x40>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4a3c      	ldr	r2, [pc, #240]	; (800ace4 <TIM_Base_SetConfig+0x11c>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d007      	beq.n	800ac08 <TIM_Base_SetConfig+0x40>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	4a3b      	ldr	r2, [pc, #236]	; (800ace8 <TIM_Base_SetConfig+0x120>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d003      	beq.n	800ac08 <TIM_Base_SetConfig+0x40>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	4a3a      	ldr	r2, [pc, #232]	; (800acec <TIM_Base_SetConfig+0x124>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d108      	bne.n	800ac1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4a2f      	ldr	r2, [pc, #188]	; (800acdc <TIM_Base_SetConfig+0x114>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d02b      	beq.n	800ac7a <TIM_Base_SetConfig+0xb2>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac28:	d027      	beq.n	800ac7a <TIM_Base_SetConfig+0xb2>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4a2c      	ldr	r2, [pc, #176]	; (800ace0 <TIM_Base_SetConfig+0x118>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d023      	beq.n	800ac7a <TIM_Base_SetConfig+0xb2>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	4a2b      	ldr	r2, [pc, #172]	; (800ace4 <TIM_Base_SetConfig+0x11c>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d01f      	beq.n	800ac7a <TIM_Base_SetConfig+0xb2>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	4a2a      	ldr	r2, [pc, #168]	; (800ace8 <TIM_Base_SetConfig+0x120>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d01b      	beq.n	800ac7a <TIM_Base_SetConfig+0xb2>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	4a29      	ldr	r2, [pc, #164]	; (800acec <TIM_Base_SetConfig+0x124>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d017      	beq.n	800ac7a <TIM_Base_SetConfig+0xb2>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	4a28      	ldr	r2, [pc, #160]	; (800acf0 <TIM_Base_SetConfig+0x128>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d013      	beq.n	800ac7a <TIM_Base_SetConfig+0xb2>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	4a27      	ldr	r2, [pc, #156]	; (800acf4 <TIM_Base_SetConfig+0x12c>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d00f      	beq.n	800ac7a <TIM_Base_SetConfig+0xb2>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	4a26      	ldr	r2, [pc, #152]	; (800acf8 <TIM_Base_SetConfig+0x130>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d00b      	beq.n	800ac7a <TIM_Base_SetConfig+0xb2>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	4a25      	ldr	r2, [pc, #148]	; (800acfc <TIM_Base_SetConfig+0x134>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d007      	beq.n	800ac7a <TIM_Base_SetConfig+0xb2>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	4a24      	ldr	r2, [pc, #144]	; (800ad00 <TIM_Base_SetConfig+0x138>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d003      	beq.n	800ac7a <TIM_Base_SetConfig+0xb2>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	4a23      	ldr	r2, [pc, #140]	; (800ad04 <TIM_Base_SetConfig+0x13c>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d108      	bne.n	800ac8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	68fa      	ldr	r2, [r7, #12]
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	695b      	ldr	r3, [r3, #20]
 800ac96:	4313      	orrs	r3, r2
 800ac98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	689a      	ldr	r2, [r3, #8]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4a0a      	ldr	r2, [pc, #40]	; (800acdc <TIM_Base_SetConfig+0x114>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d003      	beq.n	800acc0 <TIM_Base_SetConfig+0xf8>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	4a0c      	ldr	r2, [pc, #48]	; (800acec <TIM_Base_SetConfig+0x124>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d103      	bne.n	800acc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	691a      	ldr	r2, [r3, #16]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2201      	movs	r2, #1
 800accc:	615a      	str	r2, [r3, #20]
}
 800acce:	bf00      	nop
 800acd0:	3714      	adds	r7, #20
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop
 800acdc:	40010000 	.word	0x40010000
 800ace0:	40000400 	.word	0x40000400
 800ace4:	40000800 	.word	0x40000800
 800ace8:	40000c00 	.word	0x40000c00
 800acec:	40010400 	.word	0x40010400
 800acf0:	40014000 	.word	0x40014000
 800acf4:	40014400 	.word	0x40014400
 800acf8:	40014800 	.word	0x40014800
 800acfc:	40001800 	.word	0x40001800
 800ad00:	40001c00 	.word	0x40001c00
 800ad04:	40002000 	.word	0x40002000

0800ad08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad10:	bf00      	nop
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad24:	bf00      	nop
 800ad26:	370c      	adds	r7, #12
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d101      	bne.n	800ad42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e03f      	b.n	800adc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d106      	bne.n	800ad5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2200      	movs	r2, #0
 800ad52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f7fa fdb8 	bl	80058cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2224      	movs	r2, #36	; 0x24
 800ad60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	68da      	ldr	r2, [r3, #12]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ad72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f000 f929 	bl	800afcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	691a      	ldr	r2, [r3, #16]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	695a      	ldr	r2, [r3, #20]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	68da      	ldr	r2, [r3, #12]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ada8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2200      	movs	r2, #0
 800adae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2220      	movs	r2, #32
 800adb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2220      	movs	r2, #32
 800adbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3708      	adds	r7, #8
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800adca:	b580      	push	{r7, lr}
 800adcc:	b08a      	sub	sp, #40	; 0x28
 800adce:	af02      	add	r7, sp, #8
 800add0:	60f8      	str	r0, [r7, #12]
 800add2:	60b9      	str	r1, [r7, #8]
 800add4:	603b      	str	r3, [r7, #0]
 800add6:	4613      	mov	r3, r2
 800add8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800adda:	2300      	movs	r3, #0
 800addc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	2b20      	cmp	r3, #32
 800ade8:	d17c      	bne.n	800aee4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d002      	beq.n	800adf6 <HAL_UART_Transmit+0x2c>
 800adf0:	88fb      	ldrh	r3, [r7, #6]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d101      	bne.n	800adfa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800adf6:	2301      	movs	r3, #1
 800adf8:	e075      	b.n	800aee6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d101      	bne.n	800ae08 <HAL_UART_Transmit+0x3e>
 800ae04:	2302      	movs	r3, #2
 800ae06:	e06e      	b.n	800aee6 <HAL_UART_Transmit+0x11c>
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2200      	movs	r2, #0
 800ae14:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2221      	movs	r2, #33	; 0x21
 800ae1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ae1e:	f7fb f94d 	bl	80060bc <HAL_GetTick>
 800ae22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	88fa      	ldrh	r2, [r7, #6]
 800ae28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	88fa      	ldrh	r2, [r7, #6]
 800ae2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae38:	d108      	bne.n	800ae4c <HAL_UART_Transmit+0x82>
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	691b      	ldr	r3, [r3, #16]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d104      	bne.n	800ae4c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ae42:	2300      	movs	r3, #0
 800ae44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	61bb      	str	r3, [r7, #24]
 800ae4a:	e003      	b.n	800ae54 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae50:	2300      	movs	r3, #0
 800ae52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2200      	movs	r2, #0
 800ae58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800ae5c:	e02a      	b.n	800aeb4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	9300      	str	r3, [sp, #0]
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	2200      	movs	r2, #0
 800ae66:	2180      	movs	r1, #128	; 0x80
 800ae68:	68f8      	ldr	r0, [r7, #12]
 800ae6a:	f000 f840 	bl	800aeee <UART_WaitOnFlagUntilTimeout>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d001      	beq.n	800ae78 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ae74:	2303      	movs	r3, #3
 800ae76:	e036      	b.n	800aee6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d10b      	bne.n	800ae96 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ae7e:	69bb      	ldr	r3, [r7, #24]
 800ae80:	881b      	ldrh	r3, [r3, #0]
 800ae82:	461a      	mov	r2, r3
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ae8e:	69bb      	ldr	r3, [r7, #24]
 800ae90:	3302      	adds	r3, #2
 800ae92:	61bb      	str	r3, [r7, #24]
 800ae94:	e007      	b.n	800aea6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	781a      	ldrb	r2, [r3, #0]
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	3301      	adds	r3, #1
 800aea4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aeaa:	b29b      	uxth	r3, r3
 800aeac:	3b01      	subs	r3, #1
 800aeae:	b29a      	uxth	r2, r3
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d1cf      	bne.n	800ae5e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	9300      	str	r3, [sp, #0]
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	2200      	movs	r2, #0
 800aec6:	2140      	movs	r1, #64	; 0x40
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f000 f810 	bl	800aeee <UART_WaitOnFlagUntilTimeout>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d001      	beq.n	800aed8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800aed4:	2303      	movs	r3, #3
 800aed6:	e006      	b.n	800aee6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2220      	movs	r2, #32
 800aedc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800aee0:	2300      	movs	r3, #0
 800aee2:	e000      	b.n	800aee6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800aee4:	2302      	movs	r3, #2
  }
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3720      	adds	r7, #32
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b090      	sub	sp, #64	; 0x40
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	60f8      	str	r0, [r7, #12]
 800aef6:	60b9      	str	r1, [r7, #8]
 800aef8:	603b      	str	r3, [r7, #0]
 800aefa:	4613      	mov	r3, r2
 800aefc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aefe:	e050      	b.n	800afa2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af06:	d04c      	beq.n	800afa2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800af08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d007      	beq.n	800af1e <UART_WaitOnFlagUntilTimeout+0x30>
 800af0e:	f7fb f8d5 	bl	80060bc <HAL_GetTick>
 800af12:	4602      	mov	r2, r0
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	1ad3      	subs	r3, r2, r3
 800af18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d241      	bcs.n	800afa2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	330c      	adds	r3, #12
 800af24:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af28:	e853 3f00 	ldrex	r3, [r3]
 800af2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800af34:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	330c      	adds	r3, #12
 800af3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af3e:	637a      	str	r2, [r7, #52]	; 0x34
 800af40:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800af44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af46:	e841 2300 	strex	r3, r2, [r1]
 800af4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800af4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d1e5      	bne.n	800af1e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	3314      	adds	r3, #20
 800af58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	e853 3f00 	ldrex	r3, [r3]
 800af60:	613b      	str	r3, [r7, #16]
   return(result);
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	f023 0301 	bic.w	r3, r3, #1
 800af68:	63bb      	str	r3, [r7, #56]	; 0x38
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	3314      	adds	r3, #20
 800af70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af72:	623a      	str	r2, [r7, #32]
 800af74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af76:	69f9      	ldr	r1, [r7, #28]
 800af78:	6a3a      	ldr	r2, [r7, #32]
 800af7a:	e841 2300 	strex	r3, r2, [r1]
 800af7e:	61bb      	str	r3, [r7, #24]
   return(result);
 800af80:	69bb      	ldr	r3, [r7, #24]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d1e5      	bne.n	800af52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2220      	movs	r2, #32
 800af8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2220      	movs	r2, #32
 800af92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2200      	movs	r2, #0
 800af9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800af9e:	2303      	movs	r3, #3
 800afa0:	e00f      	b.n	800afc2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	4013      	ands	r3, r2
 800afac:	68ba      	ldr	r2, [r7, #8]
 800afae:	429a      	cmp	r2, r3
 800afb0:	bf0c      	ite	eq
 800afb2:	2301      	moveq	r3, #1
 800afb4:	2300      	movne	r3, #0
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	461a      	mov	r2, r3
 800afba:	79fb      	ldrb	r3, [r7, #7]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d09f      	beq.n	800af00 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800afc0:	2300      	movs	r3, #0
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3740      	adds	r7, #64	; 0x40
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
	...

0800afcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800afcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800afd0:	b0c0      	sub	sp, #256	; 0x100
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800afd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	691b      	ldr	r3, [r3, #16]
 800afe0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800afe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afe8:	68d9      	ldr	r1, [r3, #12]
 800afea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	ea40 0301 	orr.w	r3, r0, r1
 800aff4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800affa:	689a      	ldr	r2, [r3, #8]
 800affc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b000:	691b      	ldr	r3, [r3, #16]
 800b002:	431a      	orrs	r2, r3
 800b004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b008:	695b      	ldr	r3, [r3, #20]
 800b00a:	431a      	orrs	r2, r3
 800b00c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b010:	69db      	ldr	r3, [r3, #28]
 800b012:	4313      	orrs	r3, r2
 800b014:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b024:	f021 010c 	bic.w	r1, r1, #12
 800b028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b02c:	681a      	ldr	r2, [r3, #0]
 800b02e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b032:	430b      	orrs	r3, r1
 800b034:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	695b      	ldr	r3, [r3, #20]
 800b03e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b046:	6999      	ldr	r1, [r3, #24]
 800b048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b04c:	681a      	ldr	r2, [r3, #0]
 800b04e:	ea40 0301 	orr.w	r3, r0, r1
 800b052:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	4b8f      	ldr	r3, [pc, #572]	; (800b298 <UART_SetConfig+0x2cc>)
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d005      	beq.n	800b06c <UART_SetConfig+0xa0>
 800b060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b064:	681a      	ldr	r2, [r3, #0]
 800b066:	4b8d      	ldr	r3, [pc, #564]	; (800b29c <UART_SetConfig+0x2d0>)
 800b068:	429a      	cmp	r2, r3
 800b06a:	d104      	bne.n	800b076 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b06c:	f7fe fee2 	bl	8009e34 <HAL_RCC_GetPCLK2Freq>
 800b070:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b074:	e003      	b.n	800b07e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b076:	f7fe fec9 	bl	8009e0c <HAL_RCC_GetPCLK1Freq>
 800b07a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b07e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b082:	69db      	ldr	r3, [r3, #28]
 800b084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b088:	f040 810c 	bne.w	800b2a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b08c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b090:	2200      	movs	r2, #0
 800b092:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b096:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b09a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b09e:	4622      	mov	r2, r4
 800b0a0:	462b      	mov	r3, r5
 800b0a2:	1891      	adds	r1, r2, r2
 800b0a4:	65b9      	str	r1, [r7, #88]	; 0x58
 800b0a6:	415b      	adcs	r3, r3
 800b0a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b0aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b0ae:	4621      	mov	r1, r4
 800b0b0:	eb12 0801 	adds.w	r8, r2, r1
 800b0b4:	4629      	mov	r1, r5
 800b0b6:	eb43 0901 	adc.w	r9, r3, r1
 800b0ba:	f04f 0200 	mov.w	r2, #0
 800b0be:	f04f 0300 	mov.w	r3, #0
 800b0c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b0c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b0ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b0ce:	4690      	mov	r8, r2
 800b0d0:	4699      	mov	r9, r3
 800b0d2:	4623      	mov	r3, r4
 800b0d4:	eb18 0303 	adds.w	r3, r8, r3
 800b0d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b0dc:	462b      	mov	r3, r5
 800b0de:	eb49 0303 	adc.w	r3, r9, r3
 800b0e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b0e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b0f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b0f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	18db      	adds	r3, r3, r3
 800b0fe:	653b      	str	r3, [r7, #80]	; 0x50
 800b100:	4613      	mov	r3, r2
 800b102:	eb42 0303 	adc.w	r3, r2, r3
 800b106:	657b      	str	r3, [r7, #84]	; 0x54
 800b108:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b10c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b110:	f7f5 f8b6 	bl	8000280 <__aeabi_uldivmod>
 800b114:	4602      	mov	r2, r0
 800b116:	460b      	mov	r3, r1
 800b118:	4b61      	ldr	r3, [pc, #388]	; (800b2a0 <UART_SetConfig+0x2d4>)
 800b11a:	fba3 2302 	umull	r2, r3, r3, r2
 800b11e:	095b      	lsrs	r3, r3, #5
 800b120:	011c      	lsls	r4, r3, #4
 800b122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b126:	2200      	movs	r2, #0
 800b128:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b12c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b130:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b134:	4642      	mov	r2, r8
 800b136:	464b      	mov	r3, r9
 800b138:	1891      	adds	r1, r2, r2
 800b13a:	64b9      	str	r1, [r7, #72]	; 0x48
 800b13c:	415b      	adcs	r3, r3
 800b13e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b140:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b144:	4641      	mov	r1, r8
 800b146:	eb12 0a01 	adds.w	sl, r2, r1
 800b14a:	4649      	mov	r1, r9
 800b14c:	eb43 0b01 	adc.w	fp, r3, r1
 800b150:	f04f 0200 	mov.w	r2, #0
 800b154:	f04f 0300 	mov.w	r3, #0
 800b158:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b15c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b160:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b164:	4692      	mov	sl, r2
 800b166:	469b      	mov	fp, r3
 800b168:	4643      	mov	r3, r8
 800b16a:	eb1a 0303 	adds.w	r3, sl, r3
 800b16e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b172:	464b      	mov	r3, r9
 800b174:	eb4b 0303 	adc.w	r3, fp, r3
 800b178:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b17c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b188:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b18c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b190:	460b      	mov	r3, r1
 800b192:	18db      	adds	r3, r3, r3
 800b194:	643b      	str	r3, [r7, #64]	; 0x40
 800b196:	4613      	mov	r3, r2
 800b198:	eb42 0303 	adc.w	r3, r2, r3
 800b19c:	647b      	str	r3, [r7, #68]	; 0x44
 800b19e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b1a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b1a6:	f7f5 f86b 	bl	8000280 <__aeabi_uldivmod>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	4611      	mov	r1, r2
 800b1b0:	4b3b      	ldr	r3, [pc, #236]	; (800b2a0 <UART_SetConfig+0x2d4>)
 800b1b2:	fba3 2301 	umull	r2, r3, r3, r1
 800b1b6:	095b      	lsrs	r3, r3, #5
 800b1b8:	2264      	movs	r2, #100	; 0x64
 800b1ba:	fb02 f303 	mul.w	r3, r2, r3
 800b1be:	1acb      	subs	r3, r1, r3
 800b1c0:	00db      	lsls	r3, r3, #3
 800b1c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b1c6:	4b36      	ldr	r3, [pc, #216]	; (800b2a0 <UART_SetConfig+0x2d4>)
 800b1c8:	fba3 2302 	umull	r2, r3, r3, r2
 800b1cc:	095b      	lsrs	r3, r3, #5
 800b1ce:	005b      	lsls	r3, r3, #1
 800b1d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b1d4:	441c      	add	r4, r3
 800b1d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b1e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b1e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b1e8:	4642      	mov	r2, r8
 800b1ea:	464b      	mov	r3, r9
 800b1ec:	1891      	adds	r1, r2, r2
 800b1ee:	63b9      	str	r1, [r7, #56]	; 0x38
 800b1f0:	415b      	adcs	r3, r3
 800b1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b1f8:	4641      	mov	r1, r8
 800b1fa:	1851      	adds	r1, r2, r1
 800b1fc:	6339      	str	r1, [r7, #48]	; 0x30
 800b1fe:	4649      	mov	r1, r9
 800b200:	414b      	adcs	r3, r1
 800b202:	637b      	str	r3, [r7, #52]	; 0x34
 800b204:	f04f 0200 	mov.w	r2, #0
 800b208:	f04f 0300 	mov.w	r3, #0
 800b20c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b210:	4659      	mov	r1, fp
 800b212:	00cb      	lsls	r3, r1, #3
 800b214:	4651      	mov	r1, sl
 800b216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b21a:	4651      	mov	r1, sl
 800b21c:	00ca      	lsls	r2, r1, #3
 800b21e:	4610      	mov	r0, r2
 800b220:	4619      	mov	r1, r3
 800b222:	4603      	mov	r3, r0
 800b224:	4642      	mov	r2, r8
 800b226:	189b      	adds	r3, r3, r2
 800b228:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b22c:	464b      	mov	r3, r9
 800b22e:	460a      	mov	r2, r1
 800b230:	eb42 0303 	adc.w	r3, r2, r3
 800b234:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b244:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b248:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b24c:	460b      	mov	r3, r1
 800b24e:	18db      	adds	r3, r3, r3
 800b250:	62bb      	str	r3, [r7, #40]	; 0x28
 800b252:	4613      	mov	r3, r2
 800b254:	eb42 0303 	adc.w	r3, r2, r3
 800b258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b25a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b25e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b262:	f7f5 f80d 	bl	8000280 <__aeabi_uldivmod>
 800b266:	4602      	mov	r2, r0
 800b268:	460b      	mov	r3, r1
 800b26a:	4b0d      	ldr	r3, [pc, #52]	; (800b2a0 <UART_SetConfig+0x2d4>)
 800b26c:	fba3 1302 	umull	r1, r3, r3, r2
 800b270:	095b      	lsrs	r3, r3, #5
 800b272:	2164      	movs	r1, #100	; 0x64
 800b274:	fb01 f303 	mul.w	r3, r1, r3
 800b278:	1ad3      	subs	r3, r2, r3
 800b27a:	00db      	lsls	r3, r3, #3
 800b27c:	3332      	adds	r3, #50	; 0x32
 800b27e:	4a08      	ldr	r2, [pc, #32]	; (800b2a0 <UART_SetConfig+0x2d4>)
 800b280:	fba2 2303 	umull	r2, r3, r2, r3
 800b284:	095b      	lsrs	r3, r3, #5
 800b286:	f003 0207 	and.w	r2, r3, #7
 800b28a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4422      	add	r2, r4
 800b292:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b294:	e105      	b.n	800b4a2 <UART_SetConfig+0x4d6>
 800b296:	bf00      	nop
 800b298:	40011000 	.word	0x40011000
 800b29c:	40011400 	.word	0x40011400
 800b2a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b2a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b2ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b2b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b2b6:	4642      	mov	r2, r8
 800b2b8:	464b      	mov	r3, r9
 800b2ba:	1891      	adds	r1, r2, r2
 800b2bc:	6239      	str	r1, [r7, #32]
 800b2be:	415b      	adcs	r3, r3
 800b2c0:	627b      	str	r3, [r7, #36]	; 0x24
 800b2c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b2c6:	4641      	mov	r1, r8
 800b2c8:	1854      	adds	r4, r2, r1
 800b2ca:	4649      	mov	r1, r9
 800b2cc:	eb43 0501 	adc.w	r5, r3, r1
 800b2d0:	f04f 0200 	mov.w	r2, #0
 800b2d4:	f04f 0300 	mov.w	r3, #0
 800b2d8:	00eb      	lsls	r3, r5, #3
 800b2da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b2de:	00e2      	lsls	r2, r4, #3
 800b2e0:	4614      	mov	r4, r2
 800b2e2:	461d      	mov	r5, r3
 800b2e4:	4643      	mov	r3, r8
 800b2e6:	18e3      	adds	r3, r4, r3
 800b2e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b2ec:	464b      	mov	r3, r9
 800b2ee:	eb45 0303 	adc.w	r3, r5, r3
 800b2f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b2f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b302:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b306:	f04f 0200 	mov.w	r2, #0
 800b30a:	f04f 0300 	mov.w	r3, #0
 800b30e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b312:	4629      	mov	r1, r5
 800b314:	008b      	lsls	r3, r1, #2
 800b316:	4621      	mov	r1, r4
 800b318:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b31c:	4621      	mov	r1, r4
 800b31e:	008a      	lsls	r2, r1, #2
 800b320:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b324:	f7f4 ffac 	bl	8000280 <__aeabi_uldivmod>
 800b328:	4602      	mov	r2, r0
 800b32a:	460b      	mov	r3, r1
 800b32c:	4b60      	ldr	r3, [pc, #384]	; (800b4b0 <UART_SetConfig+0x4e4>)
 800b32e:	fba3 2302 	umull	r2, r3, r3, r2
 800b332:	095b      	lsrs	r3, r3, #5
 800b334:	011c      	lsls	r4, r3, #4
 800b336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b33a:	2200      	movs	r2, #0
 800b33c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b340:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b344:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b348:	4642      	mov	r2, r8
 800b34a:	464b      	mov	r3, r9
 800b34c:	1891      	adds	r1, r2, r2
 800b34e:	61b9      	str	r1, [r7, #24]
 800b350:	415b      	adcs	r3, r3
 800b352:	61fb      	str	r3, [r7, #28]
 800b354:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b358:	4641      	mov	r1, r8
 800b35a:	1851      	adds	r1, r2, r1
 800b35c:	6139      	str	r1, [r7, #16]
 800b35e:	4649      	mov	r1, r9
 800b360:	414b      	adcs	r3, r1
 800b362:	617b      	str	r3, [r7, #20]
 800b364:	f04f 0200 	mov.w	r2, #0
 800b368:	f04f 0300 	mov.w	r3, #0
 800b36c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b370:	4659      	mov	r1, fp
 800b372:	00cb      	lsls	r3, r1, #3
 800b374:	4651      	mov	r1, sl
 800b376:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b37a:	4651      	mov	r1, sl
 800b37c:	00ca      	lsls	r2, r1, #3
 800b37e:	4610      	mov	r0, r2
 800b380:	4619      	mov	r1, r3
 800b382:	4603      	mov	r3, r0
 800b384:	4642      	mov	r2, r8
 800b386:	189b      	adds	r3, r3, r2
 800b388:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b38c:	464b      	mov	r3, r9
 800b38e:	460a      	mov	r2, r1
 800b390:	eb42 0303 	adc.w	r3, r2, r3
 800b394:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	67bb      	str	r3, [r7, #120]	; 0x78
 800b3a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b3a4:	f04f 0200 	mov.w	r2, #0
 800b3a8:	f04f 0300 	mov.w	r3, #0
 800b3ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b3b0:	4649      	mov	r1, r9
 800b3b2:	008b      	lsls	r3, r1, #2
 800b3b4:	4641      	mov	r1, r8
 800b3b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b3ba:	4641      	mov	r1, r8
 800b3bc:	008a      	lsls	r2, r1, #2
 800b3be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b3c2:	f7f4 ff5d 	bl	8000280 <__aeabi_uldivmod>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	4b39      	ldr	r3, [pc, #228]	; (800b4b0 <UART_SetConfig+0x4e4>)
 800b3cc:	fba3 1302 	umull	r1, r3, r3, r2
 800b3d0:	095b      	lsrs	r3, r3, #5
 800b3d2:	2164      	movs	r1, #100	; 0x64
 800b3d4:	fb01 f303 	mul.w	r3, r1, r3
 800b3d8:	1ad3      	subs	r3, r2, r3
 800b3da:	011b      	lsls	r3, r3, #4
 800b3dc:	3332      	adds	r3, #50	; 0x32
 800b3de:	4a34      	ldr	r2, [pc, #208]	; (800b4b0 <UART_SetConfig+0x4e4>)
 800b3e0:	fba2 2303 	umull	r2, r3, r2, r3
 800b3e4:	095b      	lsrs	r3, r3, #5
 800b3e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b3ea:	441c      	add	r4, r3
 800b3ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	673b      	str	r3, [r7, #112]	; 0x70
 800b3f4:	677a      	str	r2, [r7, #116]	; 0x74
 800b3f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b3fa:	4642      	mov	r2, r8
 800b3fc:	464b      	mov	r3, r9
 800b3fe:	1891      	adds	r1, r2, r2
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	415b      	adcs	r3, r3
 800b404:	60fb      	str	r3, [r7, #12]
 800b406:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b40a:	4641      	mov	r1, r8
 800b40c:	1851      	adds	r1, r2, r1
 800b40e:	6039      	str	r1, [r7, #0]
 800b410:	4649      	mov	r1, r9
 800b412:	414b      	adcs	r3, r1
 800b414:	607b      	str	r3, [r7, #4]
 800b416:	f04f 0200 	mov.w	r2, #0
 800b41a:	f04f 0300 	mov.w	r3, #0
 800b41e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b422:	4659      	mov	r1, fp
 800b424:	00cb      	lsls	r3, r1, #3
 800b426:	4651      	mov	r1, sl
 800b428:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b42c:	4651      	mov	r1, sl
 800b42e:	00ca      	lsls	r2, r1, #3
 800b430:	4610      	mov	r0, r2
 800b432:	4619      	mov	r1, r3
 800b434:	4603      	mov	r3, r0
 800b436:	4642      	mov	r2, r8
 800b438:	189b      	adds	r3, r3, r2
 800b43a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b43c:	464b      	mov	r3, r9
 800b43e:	460a      	mov	r2, r1
 800b440:	eb42 0303 	adc.w	r3, r2, r3
 800b444:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	2200      	movs	r2, #0
 800b44e:	663b      	str	r3, [r7, #96]	; 0x60
 800b450:	667a      	str	r2, [r7, #100]	; 0x64
 800b452:	f04f 0200 	mov.w	r2, #0
 800b456:	f04f 0300 	mov.w	r3, #0
 800b45a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b45e:	4649      	mov	r1, r9
 800b460:	008b      	lsls	r3, r1, #2
 800b462:	4641      	mov	r1, r8
 800b464:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b468:	4641      	mov	r1, r8
 800b46a:	008a      	lsls	r2, r1, #2
 800b46c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b470:	f7f4 ff06 	bl	8000280 <__aeabi_uldivmod>
 800b474:	4602      	mov	r2, r0
 800b476:	460b      	mov	r3, r1
 800b478:	4b0d      	ldr	r3, [pc, #52]	; (800b4b0 <UART_SetConfig+0x4e4>)
 800b47a:	fba3 1302 	umull	r1, r3, r3, r2
 800b47e:	095b      	lsrs	r3, r3, #5
 800b480:	2164      	movs	r1, #100	; 0x64
 800b482:	fb01 f303 	mul.w	r3, r1, r3
 800b486:	1ad3      	subs	r3, r2, r3
 800b488:	011b      	lsls	r3, r3, #4
 800b48a:	3332      	adds	r3, #50	; 0x32
 800b48c:	4a08      	ldr	r2, [pc, #32]	; (800b4b0 <UART_SetConfig+0x4e4>)
 800b48e:	fba2 2303 	umull	r2, r3, r2, r3
 800b492:	095b      	lsrs	r3, r3, #5
 800b494:	f003 020f 	and.w	r2, r3, #15
 800b498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4422      	add	r2, r4
 800b4a0:	609a      	str	r2, [r3, #8]
}
 800b4a2:	bf00      	nop
 800b4a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b4ae:	bf00      	nop
 800b4b0:	51eb851f 	.word	0x51eb851f

0800b4b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f103 0208 	add.w	r2, r3, #8
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f103 0208 	add.w	r2, r3, #8
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f103 0208 	add.w	r2, r3, #8
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b4e8:	bf00      	nop
 800b4ea:	370c      	adds	r7, #12
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b502:	bf00      	nop
 800b504:	370c      	adds	r7, #12
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr

0800b50e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b50e:	b480      	push	{r7}
 800b510:	b085      	sub	sp, #20
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
 800b516:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	68fa      	ldr	r2, [r7, #12]
 800b522:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	689a      	ldr	r2, [r3, #8]
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	683a      	ldr	r2, [r7, #0]
 800b532:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	683a      	ldr	r2, [r7, #0]
 800b538:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	687a      	ldr	r2, [r7, #4]
 800b53e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	1c5a      	adds	r2, r3, #1
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	601a      	str	r2, [r3, #0]
}
 800b54a:	bf00      	nop
 800b54c:	3714      	adds	r7, #20
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr

0800b556 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b556:	b480      	push	{r7}
 800b558:	b085      	sub	sp, #20
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
 800b55e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b56c:	d103      	bne.n	800b576 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	691b      	ldr	r3, [r3, #16]
 800b572:	60fb      	str	r3, [r7, #12]
 800b574:	e00c      	b.n	800b590 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	3308      	adds	r3, #8
 800b57a:	60fb      	str	r3, [r7, #12]
 800b57c:	e002      	b.n	800b584 <vListInsert+0x2e>
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	60fb      	str	r3, [r7, #12]
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	68ba      	ldr	r2, [r7, #8]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d2f6      	bcs.n	800b57e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	685a      	ldr	r2, [r3, #4]
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	683a      	ldr	r2, [r7, #0]
 800b59e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	68fa      	ldr	r2, [r7, #12]
 800b5a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	683a      	ldr	r2, [r7, #0]
 800b5aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	1c5a      	adds	r2, r3, #1
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	601a      	str	r2, [r3, #0]
}
 800b5bc:	bf00      	nop
 800b5be:	3714      	adds	r7, #20
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b085      	sub	sp, #20
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	691b      	ldr	r3, [r3, #16]
 800b5d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	6892      	ldr	r2, [r2, #8]
 800b5de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	689b      	ldr	r3, [r3, #8]
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	6852      	ldr	r2, [r2, #4]
 800b5e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d103      	bne.n	800b5fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	689a      	ldr	r2, [r3, #8]
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2200      	movs	r2, #0
 800b600:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	1e5a      	subs	r2, r3, #1
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
}
 800b610:	4618      	mov	r0, r3
 800b612:	3714      	adds	r7, #20
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d10a      	bne.n	800b646 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b634:	f383 8811 	msr	BASEPRI, r3
 800b638:	f3bf 8f6f 	isb	sy
 800b63c:	f3bf 8f4f 	dsb	sy
 800b640:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b642:	bf00      	nop
 800b644:	e7fe      	b.n	800b644 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b646:	f001 ff25 	bl	800d494 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681a      	ldr	r2, [r3, #0]
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b652:	68f9      	ldr	r1, [r7, #12]
 800b654:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b656:	fb01 f303 	mul.w	r3, r1, r3
 800b65a:	441a      	add	r2, r3
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2200      	movs	r2, #0
 800b664:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b676:	3b01      	subs	r3, #1
 800b678:	68f9      	ldr	r1, [r7, #12]
 800b67a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b67c:	fb01 f303 	mul.w	r3, r1, r3
 800b680:	441a      	add	r2, r3
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	22ff      	movs	r2, #255	; 0xff
 800b68a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	22ff      	movs	r2, #255	; 0xff
 800b692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d114      	bne.n	800b6c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	691b      	ldr	r3, [r3, #16]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d01a      	beq.n	800b6da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	3310      	adds	r3, #16
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f001 f80d 	bl	800c6c8 <xTaskRemoveFromEventList>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d012      	beq.n	800b6da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b6b4:	4b0c      	ldr	r3, [pc, #48]	; (800b6e8 <xQueueGenericReset+0xcc>)
 800b6b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6ba:	601a      	str	r2, [r3, #0]
 800b6bc:	f3bf 8f4f 	dsb	sy
 800b6c0:	f3bf 8f6f 	isb	sy
 800b6c4:	e009      	b.n	800b6da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	3310      	adds	r3, #16
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7ff fef2 	bl	800b4b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	3324      	adds	r3, #36	; 0x24
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7ff feed 	bl	800b4b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b6da:	f001 ff0b 	bl	800d4f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b6de:	2301      	movs	r3, #1
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3710      	adds	r7, #16
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	e000ed04 	.word	0xe000ed04

0800b6ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b08a      	sub	sp, #40	; 0x28
 800b6f0:	af02      	add	r7, sp, #8
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d10a      	bne.n	800b716 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b704:	f383 8811 	msr	BASEPRI, r3
 800b708:	f3bf 8f6f 	isb	sy
 800b70c:	f3bf 8f4f 	dsb	sy
 800b710:	613b      	str	r3, [r7, #16]
}
 800b712:	bf00      	nop
 800b714:	e7fe      	b.n	800b714 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d102      	bne.n	800b722 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b71c:	2300      	movs	r3, #0
 800b71e:	61fb      	str	r3, [r7, #28]
 800b720:	e004      	b.n	800b72c <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	68ba      	ldr	r2, [r7, #8]
 800b726:	fb02 f303 	mul.w	r3, r2, r3
 800b72a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b72c:	69fb      	ldr	r3, [r7, #28]
 800b72e:	3350      	adds	r3, #80	; 0x50
 800b730:	4618      	mov	r0, r3
 800b732:	f001 ffd1 	bl	800d6d8 <pvPortMalloc>
 800b736:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d00d      	beq.n	800b75a <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b73e:	69bb      	ldr	r3, [r7, #24]
 800b740:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	3350      	adds	r3, #80	; 0x50
 800b746:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b748:	79fa      	ldrb	r2, [r7, #7]
 800b74a:	69bb      	ldr	r3, [r7, #24]
 800b74c:	9300      	str	r3, [sp, #0]
 800b74e:	4613      	mov	r3, r2
 800b750:	697a      	ldr	r2, [r7, #20]
 800b752:	68b9      	ldr	r1, [r7, #8]
 800b754:	68f8      	ldr	r0, [r7, #12]
 800b756:	f000 f805 	bl	800b764 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b75a:	69bb      	ldr	r3, [r7, #24]
	}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3720      	adds	r7, #32
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	60b9      	str	r1, [r7, #8]
 800b76e:	607a      	str	r2, [r7, #4]
 800b770:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d103      	bne.n	800b780 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	69ba      	ldr	r2, [r7, #24]
 800b77c:	601a      	str	r2, [r3, #0]
 800b77e:	e002      	b.n	800b786 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b786:	69bb      	ldr	r3, [r7, #24]
 800b788:	68fa      	ldr	r2, [r7, #12]
 800b78a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b78c:	69bb      	ldr	r3, [r7, #24]
 800b78e:	68ba      	ldr	r2, [r7, #8]
 800b790:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b792:	2101      	movs	r1, #1
 800b794:	69b8      	ldr	r0, [r7, #24]
 800b796:	f7ff ff41 	bl	800b61c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	78fa      	ldrb	r2, [r7, #3]
 800b79e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b7a2:	bf00      	nop
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
	...

0800b7ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b08e      	sub	sp, #56	; 0x38
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	607a      	str	r2, [r7, #4]
 800b7b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d10a      	bne.n	800b7de <xQueueGenericSend+0x32>
	__asm volatile
 800b7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7cc:	f383 8811 	msr	BASEPRI, r3
 800b7d0:	f3bf 8f6f 	isb	sy
 800b7d4:	f3bf 8f4f 	dsb	sy
 800b7d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b7da:	bf00      	nop
 800b7dc:	e7fe      	b.n	800b7dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d103      	bne.n	800b7ec <xQueueGenericSend+0x40>
 800b7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d101      	bne.n	800b7f0 <xQueueGenericSend+0x44>
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	e000      	b.n	800b7f2 <xQueueGenericSend+0x46>
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d10a      	bne.n	800b80c <xQueueGenericSend+0x60>
	__asm volatile
 800b7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7fa:	f383 8811 	msr	BASEPRI, r3
 800b7fe:	f3bf 8f6f 	isb	sy
 800b802:	f3bf 8f4f 	dsb	sy
 800b806:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b808:	bf00      	nop
 800b80a:	e7fe      	b.n	800b80a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	2b02      	cmp	r3, #2
 800b810:	d103      	bne.n	800b81a <xQueueGenericSend+0x6e>
 800b812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b816:	2b01      	cmp	r3, #1
 800b818:	d101      	bne.n	800b81e <xQueueGenericSend+0x72>
 800b81a:	2301      	movs	r3, #1
 800b81c:	e000      	b.n	800b820 <xQueueGenericSend+0x74>
 800b81e:	2300      	movs	r3, #0
 800b820:	2b00      	cmp	r3, #0
 800b822:	d10a      	bne.n	800b83a <xQueueGenericSend+0x8e>
	__asm volatile
 800b824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b828:	f383 8811 	msr	BASEPRI, r3
 800b82c:	f3bf 8f6f 	isb	sy
 800b830:	f3bf 8f4f 	dsb	sy
 800b834:	623b      	str	r3, [r7, #32]
}
 800b836:	bf00      	nop
 800b838:	e7fe      	b.n	800b838 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b83a:	f001 f8e1 	bl	800ca00 <xTaskGetSchedulerState>
 800b83e:	4603      	mov	r3, r0
 800b840:	2b00      	cmp	r3, #0
 800b842:	d102      	bne.n	800b84a <xQueueGenericSend+0x9e>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d101      	bne.n	800b84e <xQueueGenericSend+0xa2>
 800b84a:	2301      	movs	r3, #1
 800b84c:	e000      	b.n	800b850 <xQueueGenericSend+0xa4>
 800b84e:	2300      	movs	r3, #0
 800b850:	2b00      	cmp	r3, #0
 800b852:	d10a      	bne.n	800b86a <xQueueGenericSend+0xbe>
	__asm volatile
 800b854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b858:	f383 8811 	msr	BASEPRI, r3
 800b85c:	f3bf 8f6f 	isb	sy
 800b860:	f3bf 8f4f 	dsb	sy
 800b864:	61fb      	str	r3, [r7, #28]
}
 800b866:	bf00      	nop
 800b868:	e7fe      	b.n	800b868 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b86a:	f001 fe13 	bl	800d494 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b876:	429a      	cmp	r2, r3
 800b878:	d302      	bcc.n	800b880 <xQueueGenericSend+0xd4>
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	2b02      	cmp	r3, #2
 800b87e:	d129      	bne.n	800b8d4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b880:	683a      	ldr	r2, [r7, #0]
 800b882:	68b9      	ldr	r1, [r7, #8]
 800b884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b886:	f000 fa07 	bl	800bc98 <prvCopyDataToQueue>
 800b88a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b890:	2b00      	cmp	r3, #0
 800b892:	d010      	beq.n	800b8b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b896:	3324      	adds	r3, #36	; 0x24
 800b898:	4618      	mov	r0, r3
 800b89a:	f000 ff15 	bl	800c6c8 <xTaskRemoveFromEventList>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d013      	beq.n	800b8cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b8a4:	4b3f      	ldr	r3, [pc, #252]	; (800b9a4 <xQueueGenericSend+0x1f8>)
 800b8a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8aa:	601a      	str	r2, [r3, #0]
 800b8ac:	f3bf 8f4f 	dsb	sy
 800b8b0:	f3bf 8f6f 	isb	sy
 800b8b4:	e00a      	b.n	800b8cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d007      	beq.n	800b8cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b8bc:	4b39      	ldr	r3, [pc, #228]	; (800b9a4 <xQueueGenericSend+0x1f8>)
 800b8be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8c2:	601a      	str	r2, [r3, #0]
 800b8c4:	f3bf 8f4f 	dsb	sy
 800b8c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b8cc:	f001 fe12 	bl	800d4f4 <vPortExitCritical>
				return pdPASS;
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	e063      	b.n	800b99c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d103      	bne.n	800b8e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b8da:	f001 fe0b 	bl	800d4f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	e05c      	b.n	800b99c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b8e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d106      	bne.n	800b8f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b8e8:	f107 0314 	add.w	r3, r7, #20
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f000 ff4d 	bl	800c78c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b8f6:	f001 fdfd 	bl	800d4f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b8fa:	f000 fcc7 	bl	800c28c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b8fe:	f001 fdc9 	bl	800d494 <vPortEnterCritical>
 800b902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b904:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b908:	b25b      	sxtb	r3, r3
 800b90a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b90e:	d103      	bne.n	800b918 <xQueueGenericSend+0x16c>
 800b910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b912:	2200      	movs	r2, #0
 800b914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b91e:	b25b      	sxtb	r3, r3
 800b920:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b924:	d103      	bne.n	800b92e <xQueueGenericSend+0x182>
 800b926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b928:	2200      	movs	r2, #0
 800b92a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b92e:	f001 fde1 	bl	800d4f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b932:	1d3a      	adds	r2, r7, #4
 800b934:	f107 0314 	add.w	r3, r7, #20
 800b938:	4611      	mov	r1, r2
 800b93a:	4618      	mov	r0, r3
 800b93c:	f000 ff3c 	bl	800c7b8 <xTaskCheckForTimeOut>
 800b940:	4603      	mov	r3, r0
 800b942:	2b00      	cmp	r3, #0
 800b944:	d124      	bne.n	800b990 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b946:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b948:	f000 fa9e 	bl	800be88 <prvIsQueueFull>
 800b94c:	4603      	mov	r3, r0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d018      	beq.n	800b984 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b954:	3310      	adds	r3, #16
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	4611      	mov	r1, r2
 800b95a:	4618      	mov	r0, r3
 800b95c:	f000 fe64 	bl	800c628 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b962:	f000 fa29 	bl	800bdb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b966:	f000 fc9f 	bl	800c2a8 <xTaskResumeAll>
 800b96a:	4603      	mov	r3, r0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f47f af7c 	bne.w	800b86a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b972:	4b0c      	ldr	r3, [pc, #48]	; (800b9a4 <xQueueGenericSend+0x1f8>)
 800b974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b978:	601a      	str	r2, [r3, #0]
 800b97a:	f3bf 8f4f 	dsb	sy
 800b97e:	f3bf 8f6f 	isb	sy
 800b982:	e772      	b.n	800b86a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b986:	f000 fa17 	bl	800bdb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b98a:	f000 fc8d 	bl	800c2a8 <xTaskResumeAll>
 800b98e:	e76c      	b.n	800b86a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b992:	f000 fa11 	bl	800bdb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b996:	f000 fc87 	bl	800c2a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b99a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3738      	adds	r7, #56	; 0x38
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}
 800b9a4:	e000ed04 	.word	0xe000ed04

0800b9a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b08e      	sub	sp, #56	; 0x38
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	60f8      	str	r0, [r7, #12]
 800b9b0:	60b9      	str	r1, [r7, #8]
 800b9b2:	607a      	str	r2, [r7, #4]
 800b9b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d10a      	bne.n	800b9d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c4:	f383 8811 	msr	BASEPRI, r3
 800b9c8:	f3bf 8f6f 	isb	sy
 800b9cc:	f3bf 8f4f 	dsb	sy
 800b9d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b9d2:	bf00      	nop
 800b9d4:	e7fe      	b.n	800b9d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d103      	bne.n	800b9e4 <xQueueGenericSendFromISR+0x3c>
 800b9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d101      	bne.n	800b9e8 <xQueueGenericSendFromISR+0x40>
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	e000      	b.n	800b9ea <xQueueGenericSendFromISR+0x42>
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d10a      	bne.n	800ba04 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f2:	f383 8811 	msr	BASEPRI, r3
 800b9f6:	f3bf 8f6f 	isb	sy
 800b9fa:	f3bf 8f4f 	dsb	sy
 800b9fe:	623b      	str	r3, [r7, #32]
}
 800ba00:	bf00      	nop
 800ba02:	e7fe      	b.n	800ba02 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	2b02      	cmp	r3, #2
 800ba08:	d103      	bne.n	800ba12 <xQueueGenericSendFromISR+0x6a>
 800ba0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d101      	bne.n	800ba16 <xQueueGenericSendFromISR+0x6e>
 800ba12:	2301      	movs	r3, #1
 800ba14:	e000      	b.n	800ba18 <xQueueGenericSendFromISR+0x70>
 800ba16:	2300      	movs	r3, #0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d10a      	bne.n	800ba32 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ba1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba20:	f383 8811 	msr	BASEPRI, r3
 800ba24:	f3bf 8f6f 	isb	sy
 800ba28:	f3bf 8f4f 	dsb	sy
 800ba2c:	61fb      	str	r3, [r7, #28]
}
 800ba2e:	bf00      	nop
 800ba30:	e7fe      	b.n	800ba30 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba32:	f001 fe11 	bl	800d658 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ba36:	f3ef 8211 	mrs	r2, BASEPRI
 800ba3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3e:	f383 8811 	msr	BASEPRI, r3
 800ba42:	f3bf 8f6f 	isb	sy
 800ba46:	f3bf 8f4f 	dsb	sy
 800ba4a:	61ba      	str	r2, [r7, #24]
 800ba4c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ba4e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ba50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ba52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d302      	bcc.n	800ba64 <xQueueGenericSendFromISR+0xbc>
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	2b02      	cmp	r3, #2
 800ba62:	d12c      	bne.n	800babe <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ba64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba6e:	683a      	ldr	r2, [r7, #0]
 800ba70:	68b9      	ldr	r1, [r7, #8]
 800ba72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba74:	f000 f910 	bl	800bc98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ba78:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ba7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba80:	d112      	bne.n	800baa8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d016      	beq.n	800bab8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8c:	3324      	adds	r3, #36	; 0x24
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f000 fe1a 	bl	800c6c8 <xTaskRemoveFromEventList>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00e      	beq.n	800bab8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d00b      	beq.n	800bab8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2201      	movs	r2, #1
 800baa4:	601a      	str	r2, [r3, #0]
 800baa6:	e007      	b.n	800bab8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800baa8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800baac:	3301      	adds	r3, #1
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	b25a      	sxtb	r2, r3
 800bab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bab8:	2301      	movs	r3, #1
 800baba:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800babc:	e001      	b.n	800bac2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800babe:	2300      	movs	r3, #0
 800bac0:	637b      	str	r3, [r7, #52]	; 0x34
 800bac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bacc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3738      	adds	r7, #56	; 0x38
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b08c      	sub	sp, #48	; 0x30
 800badc:	af00      	add	r7, sp, #0
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bae4:	2300      	movs	r3, #0
 800bae6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800baec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d10a      	bne.n	800bb08 <xQueueReceive+0x30>
	__asm volatile
 800baf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf6:	f383 8811 	msr	BASEPRI, r3
 800bafa:	f3bf 8f6f 	isb	sy
 800bafe:	f3bf 8f4f 	dsb	sy
 800bb02:	623b      	str	r3, [r7, #32]
}
 800bb04:	bf00      	nop
 800bb06:	e7fe      	b.n	800bb06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d103      	bne.n	800bb16 <xQueueReceive+0x3e>
 800bb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d101      	bne.n	800bb1a <xQueueReceive+0x42>
 800bb16:	2301      	movs	r3, #1
 800bb18:	e000      	b.n	800bb1c <xQueueReceive+0x44>
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d10a      	bne.n	800bb36 <xQueueReceive+0x5e>
	__asm volatile
 800bb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb24:	f383 8811 	msr	BASEPRI, r3
 800bb28:	f3bf 8f6f 	isb	sy
 800bb2c:	f3bf 8f4f 	dsb	sy
 800bb30:	61fb      	str	r3, [r7, #28]
}
 800bb32:	bf00      	nop
 800bb34:	e7fe      	b.n	800bb34 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb36:	f000 ff63 	bl	800ca00 <xTaskGetSchedulerState>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d102      	bne.n	800bb46 <xQueueReceive+0x6e>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d101      	bne.n	800bb4a <xQueueReceive+0x72>
 800bb46:	2301      	movs	r3, #1
 800bb48:	e000      	b.n	800bb4c <xQueueReceive+0x74>
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d10a      	bne.n	800bb66 <xQueueReceive+0x8e>
	__asm volatile
 800bb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb54:	f383 8811 	msr	BASEPRI, r3
 800bb58:	f3bf 8f6f 	isb	sy
 800bb5c:	f3bf 8f4f 	dsb	sy
 800bb60:	61bb      	str	r3, [r7, #24]
}
 800bb62:	bf00      	nop
 800bb64:	e7fe      	b.n	800bb64 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb66:	f001 fc95 	bl	800d494 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb6e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d01f      	beq.n	800bbb6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bb76:	68b9      	ldr	r1, [r7, #8]
 800bb78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb7a:	f000 f8f7 	bl	800bd6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb80:	1e5a      	subs	r2, r3, #1
 800bb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb84:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb88:	691b      	ldr	r3, [r3, #16]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d00f      	beq.n	800bbae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb90:	3310      	adds	r3, #16
 800bb92:	4618      	mov	r0, r3
 800bb94:	f000 fd98 	bl	800c6c8 <xTaskRemoveFromEventList>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d007      	beq.n	800bbae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bb9e:	4b3d      	ldr	r3, [pc, #244]	; (800bc94 <xQueueReceive+0x1bc>)
 800bba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bba4:	601a      	str	r2, [r3, #0]
 800bba6:	f3bf 8f4f 	dsb	sy
 800bbaa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bbae:	f001 fca1 	bl	800d4f4 <vPortExitCritical>
				return pdPASS;
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e069      	b.n	800bc8a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d103      	bne.n	800bbc4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bbbc:	f001 fc9a 	bl	800d4f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	e062      	b.n	800bc8a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bbc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d106      	bne.n	800bbd8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bbca:	f107 0310 	add.w	r3, r7, #16
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f000 fddc 	bl	800c78c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bbd8:	f001 fc8c 	bl	800d4f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bbdc:	f000 fb56 	bl	800c28c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bbe0:	f001 fc58 	bl	800d494 <vPortEnterCritical>
 800bbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bbea:	b25b      	sxtb	r3, r3
 800bbec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbf0:	d103      	bne.n	800bbfa <xQueueReceive+0x122>
 800bbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc00:	b25b      	sxtb	r3, r3
 800bc02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc06:	d103      	bne.n	800bc10 <xQueueReceive+0x138>
 800bc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc10:	f001 fc70 	bl	800d4f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc14:	1d3a      	adds	r2, r7, #4
 800bc16:	f107 0310 	add.w	r3, r7, #16
 800bc1a:	4611      	mov	r1, r2
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f000 fdcb 	bl	800c7b8 <xTaskCheckForTimeOut>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d123      	bne.n	800bc70 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc2a:	f000 f917 	bl	800be5c <prvIsQueueEmpty>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d017      	beq.n	800bc64 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc36:	3324      	adds	r3, #36	; 0x24
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	4611      	mov	r1, r2
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f000 fcf3 	bl	800c628 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bc42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc44:	f000 f8b8 	bl	800bdb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bc48:	f000 fb2e 	bl	800c2a8 <xTaskResumeAll>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d189      	bne.n	800bb66 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bc52:	4b10      	ldr	r3, [pc, #64]	; (800bc94 <xQueueReceive+0x1bc>)
 800bc54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc58:	601a      	str	r2, [r3, #0]
 800bc5a:	f3bf 8f4f 	dsb	sy
 800bc5e:	f3bf 8f6f 	isb	sy
 800bc62:	e780      	b.n	800bb66 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bc64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc66:	f000 f8a7 	bl	800bdb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc6a:	f000 fb1d 	bl	800c2a8 <xTaskResumeAll>
 800bc6e:	e77a      	b.n	800bb66 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bc70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc72:	f000 f8a1 	bl	800bdb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc76:	f000 fb17 	bl	800c2a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc7c:	f000 f8ee 	bl	800be5c <prvIsQueueEmpty>
 800bc80:	4603      	mov	r3, r0
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	f43f af6f 	beq.w	800bb66 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bc88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3730      	adds	r7, #48	; 0x30
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	e000ed04 	.word	0xe000ed04

0800bc98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b086      	sub	sp, #24
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bca4:	2300      	movs	r3, #0
 800bca6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d10d      	bne.n	800bcd2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d14d      	bne.n	800bd5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	689b      	ldr	r3, [r3, #8]
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f000 feba 	bl	800ca3c <xTaskPriorityDisinherit>
 800bcc8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2200      	movs	r2, #0
 800bcce:	609a      	str	r2, [r3, #8]
 800bcd0:	e043      	b.n	800bd5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d119      	bne.n	800bd0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	6858      	ldr	r0, [r3, #4]
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce0:	461a      	mov	r2, r3
 800bce2:	68b9      	ldr	r1, [r7, #8]
 800bce4:	f001 fefc 	bl	800dae0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	685a      	ldr	r2, [r3, #4]
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcf0:	441a      	add	r2, r3
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	685a      	ldr	r2, [r3, #4]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	689b      	ldr	r3, [r3, #8]
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d32b      	bcc.n	800bd5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	605a      	str	r2, [r3, #4]
 800bd0a:	e026      	b.n	800bd5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	68d8      	ldr	r0, [r3, #12]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd14:	461a      	mov	r2, r3
 800bd16:	68b9      	ldr	r1, [r7, #8]
 800bd18:	f001 fee2 	bl	800dae0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	68da      	ldr	r2, [r3, #12]
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd24:	425b      	negs	r3, r3
 800bd26:	441a      	add	r2, r3
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	68da      	ldr	r2, [r3, #12]
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d207      	bcs.n	800bd48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	689a      	ldr	r2, [r3, #8]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd40:	425b      	negs	r3, r3
 800bd42:	441a      	add	r2, r3
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2b02      	cmp	r3, #2
 800bd4c:	d105      	bne.n	800bd5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d002      	beq.n	800bd5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	3b01      	subs	r3, #1
 800bd58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	1c5a      	adds	r2, r3, #1
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bd62:	697b      	ldr	r3, [r7, #20]
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3718      	adds	r7, #24
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d018      	beq.n	800bdb0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	68da      	ldr	r2, [r3, #12]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd86:	441a      	add	r2, r3
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	68da      	ldr	r2, [r3, #12]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	689b      	ldr	r3, [r3, #8]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d303      	bcc.n	800bda0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	68d9      	ldr	r1, [r3, #12]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bda8:	461a      	mov	r2, r3
 800bdaa:	6838      	ldr	r0, [r7, #0]
 800bdac:	f001 fe98 	bl	800dae0 <memcpy>
	}
}
 800bdb0:	bf00      	nop
 800bdb2:	3708      	adds	r7, #8
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}

0800bdb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bdc0:	f001 fb68 	bl	800d494 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bdca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bdcc:	e011      	b.n	800bdf2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d012      	beq.n	800bdfc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	3324      	adds	r3, #36	; 0x24
 800bdda:	4618      	mov	r0, r3
 800bddc:	f000 fc74 	bl	800c6c8 <xTaskRemoveFromEventList>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d001      	beq.n	800bdea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bde6:	f000 fd49 	bl	800c87c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bdea:	7bfb      	ldrb	r3, [r7, #15]
 800bdec:	3b01      	subs	r3, #1
 800bdee:	b2db      	uxtb	r3, r3
 800bdf0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bdf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	dce9      	bgt.n	800bdce <prvUnlockQueue+0x16>
 800bdfa:	e000      	b.n	800bdfe <prvUnlockQueue+0x46>
					break;
 800bdfc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	22ff      	movs	r2, #255	; 0xff
 800be02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800be06:	f001 fb75 	bl	800d4f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800be0a:	f001 fb43 	bl	800d494 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800be16:	e011      	b.n	800be3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	691b      	ldr	r3, [r3, #16]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d012      	beq.n	800be46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	3310      	adds	r3, #16
 800be24:	4618      	mov	r0, r3
 800be26:	f000 fc4f 	bl	800c6c8 <xTaskRemoveFromEventList>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d001      	beq.n	800be34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800be30:	f000 fd24 	bl	800c87c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800be34:	7bbb      	ldrb	r3, [r7, #14]
 800be36:	3b01      	subs	r3, #1
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800be3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be40:	2b00      	cmp	r3, #0
 800be42:	dce9      	bgt.n	800be18 <prvUnlockQueue+0x60>
 800be44:	e000      	b.n	800be48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800be46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	22ff      	movs	r2, #255	; 0xff
 800be4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800be50:	f001 fb50 	bl	800d4f4 <vPortExitCritical>
}
 800be54:	bf00      	nop
 800be56:	3710      	adds	r7, #16
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800be64:	f001 fb16 	bl	800d494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d102      	bne.n	800be76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800be70:	2301      	movs	r3, #1
 800be72:	60fb      	str	r3, [r7, #12]
 800be74:	e001      	b.n	800be7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800be76:	2300      	movs	r3, #0
 800be78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be7a:	f001 fb3b 	bl	800d4f4 <vPortExitCritical>

	return xReturn;
 800be7e:	68fb      	ldr	r3, [r7, #12]
}
 800be80:	4618      	mov	r0, r3
 800be82:	3710      	adds	r7, #16
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}

0800be88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800be90:	f001 fb00 	bl	800d494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be9c:	429a      	cmp	r2, r3
 800be9e:	d102      	bne.n	800bea6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bea0:	2301      	movs	r3, #1
 800bea2:	60fb      	str	r3, [r7, #12]
 800bea4:	e001      	b.n	800beaa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bea6:	2300      	movs	r3, #0
 800bea8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800beaa:	f001 fb23 	bl	800d4f4 <vPortExitCritical>

	return xReturn;
 800beae:	68fb      	ldr	r3, [r7, #12]
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3710      	adds	r7, #16
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800beb8:	b480      	push	{r7}
 800beba:	b085      	sub	sp, #20
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bec2:	2300      	movs	r3, #0
 800bec4:	60fb      	str	r3, [r7, #12]
 800bec6:	e014      	b.n	800bef2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bec8:	4a0f      	ldr	r2, [pc, #60]	; (800bf08 <vQueueAddToRegistry+0x50>)
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d10b      	bne.n	800beec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bed4:	490c      	ldr	r1, [pc, #48]	; (800bf08 <vQueueAddToRegistry+0x50>)
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	683a      	ldr	r2, [r7, #0]
 800beda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bede:	4a0a      	ldr	r2, [pc, #40]	; (800bf08 <vQueueAddToRegistry+0x50>)
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	00db      	lsls	r3, r3, #3
 800bee4:	4413      	add	r3, r2
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800beea:	e006      	b.n	800befa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	3301      	adds	r3, #1
 800bef0:	60fb      	str	r3, [r7, #12]
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2b07      	cmp	r3, #7
 800bef6:	d9e7      	bls.n	800bec8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bef8:	bf00      	nop
 800befa:	bf00      	nop
 800befc:	3714      	adds	r7, #20
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop
 800bf08:	20001ef8 	.word	0x20001ef8

0800bf0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b086      	sub	sp, #24
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	60f8      	str	r0, [r7, #12]
 800bf14:	60b9      	str	r1, [r7, #8]
 800bf16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bf1c:	f001 faba 	bl	800d494 <vPortEnterCritical>
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf26:	b25b      	sxtb	r3, r3
 800bf28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf2c:	d103      	bne.n	800bf36 <vQueueWaitForMessageRestricted+0x2a>
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	2200      	movs	r2, #0
 800bf32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf3c:	b25b      	sxtb	r3, r3
 800bf3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf42:	d103      	bne.n	800bf4c <vQueueWaitForMessageRestricted+0x40>
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	2200      	movs	r2, #0
 800bf48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf4c:	f001 fad2 	bl	800d4f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d106      	bne.n	800bf66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	3324      	adds	r3, #36	; 0x24
 800bf5c:	687a      	ldr	r2, [r7, #4]
 800bf5e:	68b9      	ldr	r1, [r7, #8]
 800bf60:	4618      	mov	r0, r3
 800bf62:	f000 fb85 	bl	800c670 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bf66:	6978      	ldr	r0, [r7, #20]
 800bf68:	f7ff ff26 	bl	800bdb8 <prvUnlockQueue>
	}
 800bf6c:	bf00      	nop
 800bf6e:	3718      	adds	r7, #24
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b08c      	sub	sp, #48	; 0x30
 800bf78:	af04      	add	r7, sp, #16
 800bf7a:	60f8      	str	r0, [r7, #12]
 800bf7c:	60b9      	str	r1, [r7, #8]
 800bf7e:	603b      	str	r3, [r7, #0]
 800bf80:	4613      	mov	r3, r2
 800bf82:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bf84:	88fb      	ldrh	r3, [r7, #6]
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f001 fba5 	bl	800d6d8 <pvPortMalloc>
 800bf8e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d00e      	beq.n	800bfb4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bf96:	2058      	movs	r0, #88	; 0x58
 800bf98:	f001 fb9e 	bl	800d6d8 <pvPortMalloc>
 800bf9c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bf9e:	69fb      	ldr	r3, [r7, #28]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d003      	beq.n	800bfac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	697a      	ldr	r2, [r7, #20]
 800bfa8:	631a      	str	r2, [r3, #48]	; 0x30
 800bfaa:	e005      	b.n	800bfb8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bfac:	6978      	ldr	r0, [r7, #20]
 800bfae:	f001 fc57 	bl	800d860 <vPortFree>
 800bfb2:	e001      	b.n	800bfb8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bfb8:	69fb      	ldr	r3, [r7, #28]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d013      	beq.n	800bfe6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bfbe:	88fa      	ldrh	r2, [r7, #6]
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	9303      	str	r3, [sp, #12]
 800bfc4:	69fb      	ldr	r3, [r7, #28]
 800bfc6:	9302      	str	r3, [sp, #8]
 800bfc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfca:	9301      	str	r3, [sp, #4]
 800bfcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfce:	9300      	str	r3, [sp, #0]
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	68b9      	ldr	r1, [r7, #8]
 800bfd4:	68f8      	ldr	r0, [r7, #12]
 800bfd6:	f000 f80e 	bl	800bff6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bfda:	69f8      	ldr	r0, [r7, #28]
 800bfdc:	f000 f89a 	bl	800c114 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	61bb      	str	r3, [r7, #24]
 800bfe4:	e002      	b.n	800bfec <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bfe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bfea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bfec:	69bb      	ldr	r3, [r7, #24]
	}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3720      	adds	r7, #32
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}

0800bff6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bff6:	b580      	push	{r7, lr}
 800bff8:	b088      	sub	sp, #32
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	60f8      	str	r0, [r7, #12]
 800bffe:	60b9      	str	r1, [r7, #8]
 800c000:	607a      	str	r2, [r7, #4]
 800c002:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c006:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	009b      	lsls	r3, r3, #2
 800c00c:	461a      	mov	r2, r3
 800c00e:	21a5      	movs	r1, #165	; 0xa5
 800c010:	f001 fd74 	bl	800dafc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c01e:	3b01      	subs	r3, #1
 800c020:	009b      	lsls	r3, r3, #2
 800c022:	4413      	add	r3, r2
 800c024:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	f023 0307 	bic.w	r3, r3, #7
 800c02c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c02e:	69bb      	ldr	r3, [r7, #24]
 800c030:	f003 0307 	and.w	r3, r3, #7
 800c034:	2b00      	cmp	r3, #0
 800c036:	d00a      	beq.n	800c04e <prvInitialiseNewTask+0x58>
	__asm volatile
 800c038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c03c:	f383 8811 	msr	BASEPRI, r3
 800c040:	f3bf 8f6f 	isb	sy
 800c044:	f3bf 8f4f 	dsb	sy
 800c048:	617b      	str	r3, [r7, #20]
}
 800c04a:	bf00      	nop
 800c04c:	e7fe      	b.n	800c04c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d01f      	beq.n	800c094 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c054:	2300      	movs	r3, #0
 800c056:	61fb      	str	r3, [r7, #28]
 800c058:	e012      	b.n	800c080 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c05a:	68ba      	ldr	r2, [r7, #8]
 800c05c:	69fb      	ldr	r3, [r7, #28]
 800c05e:	4413      	add	r3, r2
 800c060:	7819      	ldrb	r1, [r3, #0]
 800c062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	4413      	add	r3, r2
 800c068:	3334      	adds	r3, #52	; 0x34
 800c06a:	460a      	mov	r2, r1
 800c06c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c06e:	68ba      	ldr	r2, [r7, #8]
 800c070:	69fb      	ldr	r3, [r7, #28]
 800c072:	4413      	add	r3, r2
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d006      	beq.n	800c088 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c07a:	69fb      	ldr	r3, [r7, #28]
 800c07c:	3301      	adds	r3, #1
 800c07e:	61fb      	str	r3, [r7, #28]
 800c080:	69fb      	ldr	r3, [r7, #28]
 800c082:	2b09      	cmp	r3, #9
 800c084:	d9e9      	bls.n	800c05a <prvInitialiseNewTask+0x64>
 800c086:	e000      	b.n	800c08a <prvInitialiseNewTask+0x94>
			{
				break;
 800c088:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08c:	2200      	movs	r2, #0
 800c08e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800c092:	e003      	b.n	800c09c <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c096:	2200      	movs	r2, #0
 800c098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09e:	2b0f      	cmp	r3, #15
 800c0a0:	d901      	bls.n	800c0a6 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c0a2:	230f      	movs	r3, #15
 800c0a4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0aa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0b0:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 800c0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ba:	3304      	adds	r3, #4
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7ff fa19 	bl	800b4f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c4:	3318      	adds	r3, #24
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7ff fa14 	bl	800b4f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d4:	f1c3 0210 	rsb	r2, r3, #16
 800c0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0e0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c0f0:	683a      	ldr	r2, [r7, #0]
 800c0f2:	68f9      	ldr	r1, [r7, #12]
 800c0f4:	69b8      	ldr	r0, [r7, #24]
 800c0f6:	f001 f89f 	bl	800d238 <pxPortInitialiseStack>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c102:	2b00      	cmp	r3, #0
 800c104:	d002      	beq.n	800c10c <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c10a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c10c:	bf00      	nop
 800c10e:	3720      	adds	r7, #32
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b082      	sub	sp, #8
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c11c:	f001 f9ba 	bl	800d494 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c120:	4b2c      	ldr	r3, [pc, #176]	; (800c1d4 <prvAddNewTaskToReadyList+0xc0>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	3301      	adds	r3, #1
 800c126:	4a2b      	ldr	r2, [pc, #172]	; (800c1d4 <prvAddNewTaskToReadyList+0xc0>)
 800c128:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c12a:	4b2b      	ldr	r3, [pc, #172]	; (800c1d8 <prvAddNewTaskToReadyList+0xc4>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d109      	bne.n	800c146 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c132:	4a29      	ldr	r2, [pc, #164]	; (800c1d8 <prvAddNewTaskToReadyList+0xc4>)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c138:	4b26      	ldr	r3, [pc, #152]	; (800c1d4 <prvAddNewTaskToReadyList+0xc0>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d110      	bne.n	800c162 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c140:	f000 fbc0 	bl	800c8c4 <prvInitialiseTaskLists>
 800c144:	e00d      	b.n	800c162 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c146:	4b25      	ldr	r3, [pc, #148]	; (800c1dc <prvAddNewTaskToReadyList+0xc8>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d109      	bne.n	800c162 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c14e:	4b22      	ldr	r3, [pc, #136]	; (800c1d8 <prvAddNewTaskToReadyList+0xc4>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c158:	429a      	cmp	r2, r3
 800c15a:	d802      	bhi.n	800c162 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c15c:	4a1e      	ldr	r2, [pc, #120]	; (800c1d8 <prvAddNewTaskToReadyList+0xc4>)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c162:	4b1f      	ldr	r3, [pc, #124]	; (800c1e0 <prvAddNewTaskToReadyList+0xcc>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	3301      	adds	r3, #1
 800c168:	4a1d      	ldr	r2, [pc, #116]	; (800c1e0 <prvAddNewTaskToReadyList+0xcc>)
 800c16a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c16c:	4b1c      	ldr	r3, [pc, #112]	; (800c1e0 <prvAddNewTaskToReadyList+0xcc>)
 800c16e:	681a      	ldr	r2, [r3, #0]
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c178:	2201      	movs	r2, #1
 800c17a:	409a      	lsls	r2, r3
 800c17c:	4b19      	ldr	r3, [pc, #100]	; (800c1e4 <prvAddNewTaskToReadyList+0xd0>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4313      	orrs	r3, r2
 800c182:	4a18      	ldr	r2, [pc, #96]	; (800c1e4 <prvAddNewTaskToReadyList+0xd0>)
 800c184:	6013      	str	r3, [r2, #0]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c18a:	4613      	mov	r3, r2
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	4413      	add	r3, r2
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	4a15      	ldr	r2, [pc, #84]	; (800c1e8 <prvAddNewTaskToReadyList+0xd4>)
 800c194:	441a      	add	r2, r3
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	3304      	adds	r3, #4
 800c19a:	4619      	mov	r1, r3
 800c19c:	4610      	mov	r0, r2
 800c19e:	f7ff f9b6 	bl	800b50e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c1a2:	f001 f9a7 	bl	800d4f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c1a6:	4b0d      	ldr	r3, [pc, #52]	; (800c1dc <prvAddNewTaskToReadyList+0xc8>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d00e      	beq.n	800c1cc <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c1ae:	4b0a      	ldr	r3, [pc, #40]	; (800c1d8 <prvAddNewTaskToReadyList+0xc4>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d207      	bcs.n	800c1cc <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c1bc:	4b0b      	ldr	r3, [pc, #44]	; (800c1ec <prvAddNewTaskToReadyList+0xd8>)
 800c1be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1c2:	601a      	str	r2, [r3, #0]
 800c1c4:	f3bf 8f4f 	dsb	sy
 800c1c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1cc:	bf00      	nop
 800c1ce:	3708      	adds	r7, #8
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}
 800c1d4:	200020ec 	.word	0x200020ec
 800c1d8:	20001f38 	.word	0x20001f38
 800c1dc:	200020f8 	.word	0x200020f8
 800c1e0:	20002108 	.word	0x20002108
 800c1e4:	200020f4 	.word	0x200020f4
 800c1e8:	20001f3c 	.word	0x20001f3c
 800c1ec:	e000ed04 	.word	0xe000ed04

0800c1f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b086      	sub	sp, #24
 800c1f4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800c1f6:	4b1f      	ldr	r3, [pc, #124]	; (800c274 <vTaskStartScheduler+0x84>)
 800c1f8:	9301      	str	r3, [sp, #4]
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	9300      	str	r3, [sp, #0]
 800c1fe:	2300      	movs	r3, #0
 800c200:	2282      	movs	r2, #130	; 0x82
 800c202:	491d      	ldr	r1, [pc, #116]	; (800c278 <vTaskStartScheduler+0x88>)
 800c204:	481d      	ldr	r0, [pc, #116]	; (800c27c <vTaskStartScheduler+0x8c>)
 800c206:	f7ff feb5 	bl	800bf74 <xTaskCreate>
 800c20a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d102      	bne.n	800c218 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800c212:	f000 fcff 	bl	800cc14 <xTimerCreateTimerTask>
 800c216:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	d116      	bne.n	800c24c <vTaskStartScheduler+0x5c>
	__asm volatile
 800c21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c222:	f383 8811 	msr	BASEPRI, r3
 800c226:	f3bf 8f6f 	isb	sy
 800c22a:	f3bf 8f4f 	dsb	sy
 800c22e:	60bb      	str	r3, [r7, #8]
}
 800c230:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c232:	4b13      	ldr	r3, [pc, #76]	; (800c280 <vTaskStartScheduler+0x90>)
 800c234:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c238:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c23a:	4b12      	ldr	r3, [pc, #72]	; (800c284 <vTaskStartScheduler+0x94>)
 800c23c:	2201      	movs	r2, #1
 800c23e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c240:	4b11      	ldr	r3, [pc, #68]	; (800c288 <vTaskStartScheduler+0x98>)
 800c242:	2200      	movs	r2, #0
 800c244:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c246:	f001 f883 	bl	800d350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c24a:	e00e      	b.n	800c26a <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c252:	d10a      	bne.n	800c26a <vTaskStartScheduler+0x7a>
	__asm volatile
 800c254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c258:	f383 8811 	msr	BASEPRI, r3
 800c25c:	f3bf 8f6f 	isb	sy
 800c260:	f3bf 8f4f 	dsb	sy
 800c264:	607b      	str	r3, [r7, #4]
}
 800c266:	bf00      	nop
 800c268:	e7fe      	b.n	800c268 <vTaskStartScheduler+0x78>
}
 800c26a:	bf00      	nop
 800c26c:	3710      	adds	r7, #16
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}
 800c272:	bf00      	nop
 800c274:	20002110 	.word	0x20002110
 800c278:	0800e730 	.word	0x0800e730
 800c27c:	0800c895 	.word	0x0800c895
 800c280:	2000210c 	.word	0x2000210c
 800c284:	200020f8 	.word	0x200020f8
 800c288:	200020f0 	.word	0x200020f0

0800c28c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c28c:	b480      	push	{r7}
 800c28e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c290:	4b04      	ldr	r3, [pc, #16]	; (800c2a4 <vTaskSuspendAll+0x18>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	3301      	adds	r3, #1
 800c296:	4a03      	ldr	r2, [pc, #12]	; (800c2a4 <vTaskSuspendAll+0x18>)
 800c298:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c29a:	bf00      	nop
 800c29c:	46bd      	mov	sp, r7
 800c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a2:	4770      	bx	lr
 800c2a4:	20002114 	.word	0x20002114

0800c2a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c2b6:	4b41      	ldr	r3, [pc, #260]	; (800c3bc <xTaskResumeAll+0x114>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d10a      	bne.n	800c2d4 <xTaskResumeAll+0x2c>
	__asm volatile
 800c2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c2:	f383 8811 	msr	BASEPRI, r3
 800c2c6:	f3bf 8f6f 	isb	sy
 800c2ca:	f3bf 8f4f 	dsb	sy
 800c2ce:	603b      	str	r3, [r7, #0]
}
 800c2d0:	bf00      	nop
 800c2d2:	e7fe      	b.n	800c2d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c2d4:	f001 f8de 	bl	800d494 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c2d8:	4b38      	ldr	r3, [pc, #224]	; (800c3bc <xTaskResumeAll+0x114>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	3b01      	subs	r3, #1
 800c2de:	4a37      	ldr	r2, [pc, #220]	; (800c3bc <xTaskResumeAll+0x114>)
 800c2e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2e2:	4b36      	ldr	r3, [pc, #216]	; (800c3bc <xTaskResumeAll+0x114>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d161      	bne.n	800c3ae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c2ea:	4b35      	ldr	r3, [pc, #212]	; (800c3c0 <xTaskResumeAll+0x118>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d05d      	beq.n	800c3ae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c2f2:	e02e      	b.n	800c352 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2f4:	4b33      	ldr	r3, [pc, #204]	; (800c3c4 <xTaskResumeAll+0x11c>)
 800c2f6:	68db      	ldr	r3, [r3, #12]
 800c2f8:	68db      	ldr	r3, [r3, #12]
 800c2fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	3318      	adds	r3, #24
 800c300:	4618      	mov	r0, r3
 800c302:	f7ff f961 	bl	800b5c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	3304      	adds	r3, #4
 800c30a:	4618      	mov	r0, r3
 800c30c:	f7ff f95c 	bl	800b5c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c314:	2201      	movs	r2, #1
 800c316:	409a      	lsls	r2, r3
 800c318:	4b2b      	ldr	r3, [pc, #172]	; (800c3c8 <xTaskResumeAll+0x120>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4313      	orrs	r3, r2
 800c31e:	4a2a      	ldr	r2, [pc, #168]	; (800c3c8 <xTaskResumeAll+0x120>)
 800c320:	6013      	str	r3, [r2, #0]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c326:	4613      	mov	r3, r2
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	4413      	add	r3, r2
 800c32c:	009b      	lsls	r3, r3, #2
 800c32e:	4a27      	ldr	r2, [pc, #156]	; (800c3cc <xTaskResumeAll+0x124>)
 800c330:	441a      	add	r2, r3
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	3304      	adds	r3, #4
 800c336:	4619      	mov	r1, r3
 800c338:	4610      	mov	r0, r2
 800c33a:	f7ff f8e8 	bl	800b50e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c342:	4b23      	ldr	r3, [pc, #140]	; (800c3d0 <xTaskResumeAll+0x128>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c348:	429a      	cmp	r2, r3
 800c34a:	d302      	bcc.n	800c352 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c34c:	4b21      	ldr	r3, [pc, #132]	; (800c3d4 <xTaskResumeAll+0x12c>)
 800c34e:	2201      	movs	r2, #1
 800c350:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c352:	4b1c      	ldr	r3, [pc, #112]	; (800c3c4 <xTaskResumeAll+0x11c>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d1cc      	bne.n	800c2f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d001      	beq.n	800c364 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c360:	f000 fb2e 	bl	800c9c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c364:	4b1c      	ldr	r3, [pc, #112]	; (800c3d8 <xTaskResumeAll+0x130>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d010      	beq.n	800c392 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c370:	f000 f846 	bl	800c400 <xTaskIncrementTick>
 800c374:	4603      	mov	r3, r0
 800c376:	2b00      	cmp	r3, #0
 800c378:	d002      	beq.n	800c380 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c37a:	4b16      	ldr	r3, [pc, #88]	; (800c3d4 <xTaskResumeAll+0x12c>)
 800c37c:	2201      	movs	r2, #1
 800c37e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	3b01      	subs	r3, #1
 800c384:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d1f1      	bne.n	800c370 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800c38c:	4b12      	ldr	r3, [pc, #72]	; (800c3d8 <xTaskResumeAll+0x130>)
 800c38e:	2200      	movs	r2, #0
 800c390:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c392:	4b10      	ldr	r3, [pc, #64]	; (800c3d4 <xTaskResumeAll+0x12c>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d009      	beq.n	800c3ae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c39a:	2301      	movs	r3, #1
 800c39c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c39e:	4b0f      	ldr	r3, [pc, #60]	; (800c3dc <xTaskResumeAll+0x134>)
 800c3a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3a4:	601a      	str	r2, [r3, #0]
 800c3a6:	f3bf 8f4f 	dsb	sy
 800c3aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c3ae:	f001 f8a1 	bl	800d4f4 <vPortExitCritical>

	return xAlreadyYielded;
 800c3b2:	68bb      	ldr	r3, [r7, #8]
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3710      	adds	r7, #16
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	20002114 	.word	0x20002114
 800c3c0:	200020ec 	.word	0x200020ec
 800c3c4:	200020ac 	.word	0x200020ac
 800c3c8:	200020f4 	.word	0x200020f4
 800c3cc:	20001f3c 	.word	0x20001f3c
 800c3d0:	20001f38 	.word	0x20001f38
 800c3d4:	20002100 	.word	0x20002100
 800c3d8:	200020fc 	.word	0x200020fc
 800c3dc:	e000ed04 	.word	0xe000ed04

0800c3e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b083      	sub	sp, #12
 800c3e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c3e6:	4b05      	ldr	r3, [pc, #20]	; (800c3fc <xTaskGetTickCount+0x1c>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c3ec:	687b      	ldr	r3, [r7, #4]
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	370c      	adds	r7, #12
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f8:	4770      	bx	lr
 800c3fa:	bf00      	nop
 800c3fc:	200020f0 	.word	0x200020f0

0800c400 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b086      	sub	sp, #24
 800c404:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c406:	2300      	movs	r3, #0
 800c408:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c40a:	4b4e      	ldr	r3, [pc, #312]	; (800c544 <xTaskIncrementTick+0x144>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	f040 8088 	bne.w	800c524 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c414:	4b4c      	ldr	r3, [pc, #304]	; (800c548 <xTaskIncrementTick+0x148>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	3301      	adds	r3, #1
 800c41a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c41c:	4a4a      	ldr	r2, [pc, #296]	; (800c548 <xTaskIncrementTick+0x148>)
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d120      	bne.n	800c46a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c428:	4b48      	ldr	r3, [pc, #288]	; (800c54c <xTaskIncrementTick+0x14c>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d00a      	beq.n	800c448 <xTaskIncrementTick+0x48>
	__asm volatile
 800c432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c436:	f383 8811 	msr	BASEPRI, r3
 800c43a:	f3bf 8f6f 	isb	sy
 800c43e:	f3bf 8f4f 	dsb	sy
 800c442:	603b      	str	r3, [r7, #0]
}
 800c444:	bf00      	nop
 800c446:	e7fe      	b.n	800c446 <xTaskIncrementTick+0x46>
 800c448:	4b40      	ldr	r3, [pc, #256]	; (800c54c <xTaskIncrementTick+0x14c>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	60fb      	str	r3, [r7, #12]
 800c44e:	4b40      	ldr	r3, [pc, #256]	; (800c550 <xTaskIncrementTick+0x150>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4a3e      	ldr	r2, [pc, #248]	; (800c54c <xTaskIncrementTick+0x14c>)
 800c454:	6013      	str	r3, [r2, #0]
 800c456:	4a3e      	ldr	r2, [pc, #248]	; (800c550 <xTaskIncrementTick+0x150>)
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	6013      	str	r3, [r2, #0]
 800c45c:	4b3d      	ldr	r3, [pc, #244]	; (800c554 <xTaskIncrementTick+0x154>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	3301      	adds	r3, #1
 800c462:	4a3c      	ldr	r2, [pc, #240]	; (800c554 <xTaskIncrementTick+0x154>)
 800c464:	6013      	str	r3, [r2, #0]
 800c466:	f000 faab 	bl	800c9c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c46a:	4b3b      	ldr	r3, [pc, #236]	; (800c558 <xTaskIncrementTick+0x158>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	693a      	ldr	r2, [r7, #16]
 800c470:	429a      	cmp	r2, r3
 800c472:	d348      	bcc.n	800c506 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c474:	4b35      	ldr	r3, [pc, #212]	; (800c54c <xTaskIncrementTick+0x14c>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d104      	bne.n	800c488 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c47e:	4b36      	ldr	r3, [pc, #216]	; (800c558 <xTaskIncrementTick+0x158>)
 800c480:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c484:	601a      	str	r2, [r3, #0]
					break;
 800c486:	e03e      	b.n	800c506 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c488:	4b30      	ldr	r3, [pc, #192]	; (800c54c <xTaskIncrementTick+0x14c>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	68db      	ldr	r3, [r3, #12]
 800c48e:	68db      	ldr	r3, [r3, #12]
 800c490:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c498:	693a      	ldr	r2, [r7, #16]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d203      	bcs.n	800c4a8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c4a0:	4a2d      	ldr	r2, [pc, #180]	; (800c558 <xTaskIncrementTick+0x158>)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c4a6:	e02e      	b.n	800c506 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	3304      	adds	r3, #4
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f7ff f88b 	bl	800b5c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d004      	beq.n	800c4c4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	3318      	adds	r3, #24
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7ff f882 	bl	800b5c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	409a      	lsls	r2, r3
 800c4cc:	4b23      	ldr	r3, [pc, #140]	; (800c55c <xTaskIncrementTick+0x15c>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4313      	orrs	r3, r2
 800c4d2:	4a22      	ldr	r2, [pc, #136]	; (800c55c <xTaskIncrementTick+0x15c>)
 800c4d4:	6013      	str	r3, [r2, #0]
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4da:	4613      	mov	r3, r2
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	4413      	add	r3, r2
 800c4e0:	009b      	lsls	r3, r3, #2
 800c4e2:	4a1f      	ldr	r2, [pc, #124]	; (800c560 <xTaskIncrementTick+0x160>)
 800c4e4:	441a      	add	r2, r3
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	3304      	adds	r3, #4
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	4610      	mov	r0, r2
 800c4ee:	f7ff f80e 	bl	800b50e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4f6:	4b1b      	ldr	r3, [pc, #108]	; (800c564 <xTaskIncrementTick+0x164>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d3b9      	bcc.n	800c474 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c500:	2301      	movs	r3, #1
 800c502:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c504:	e7b6      	b.n	800c474 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c506:	4b17      	ldr	r3, [pc, #92]	; (800c564 <xTaskIncrementTick+0x164>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c50c:	4914      	ldr	r1, [pc, #80]	; (800c560 <xTaskIncrementTick+0x160>)
 800c50e:	4613      	mov	r3, r2
 800c510:	009b      	lsls	r3, r3, #2
 800c512:	4413      	add	r3, r2
 800c514:	009b      	lsls	r3, r3, #2
 800c516:	440b      	add	r3, r1
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d907      	bls.n	800c52e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800c51e:	2301      	movs	r3, #1
 800c520:	617b      	str	r3, [r7, #20]
 800c522:	e004      	b.n	800c52e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c524:	4b10      	ldr	r3, [pc, #64]	; (800c568 <xTaskIncrementTick+0x168>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	3301      	adds	r3, #1
 800c52a:	4a0f      	ldr	r2, [pc, #60]	; (800c568 <xTaskIncrementTick+0x168>)
 800c52c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c52e:	4b0f      	ldr	r3, [pc, #60]	; (800c56c <xTaskIncrementTick+0x16c>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d001      	beq.n	800c53a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800c536:	2301      	movs	r3, #1
 800c538:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c53a:	697b      	ldr	r3, [r7, #20]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3718      	adds	r7, #24
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}
 800c544:	20002114 	.word	0x20002114
 800c548:	200020f0 	.word	0x200020f0
 800c54c:	200020a4 	.word	0x200020a4
 800c550:	200020a8 	.word	0x200020a8
 800c554:	20002104 	.word	0x20002104
 800c558:	2000210c 	.word	0x2000210c
 800c55c:	200020f4 	.word	0x200020f4
 800c560:	20001f3c 	.word	0x20001f3c
 800c564:	20001f38 	.word	0x20001f38
 800c568:	200020fc 	.word	0x200020fc
 800c56c:	20002100 	.word	0x20002100

0800c570 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c570:	b480      	push	{r7}
 800c572:	b087      	sub	sp, #28
 800c574:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c576:	4b27      	ldr	r3, [pc, #156]	; (800c614 <vTaskSwitchContext+0xa4>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d003      	beq.n	800c586 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c57e:	4b26      	ldr	r3, [pc, #152]	; (800c618 <vTaskSwitchContext+0xa8>)
 800c580:	2201      	movs	r2, #1
 800c582:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c584:	e03f      	b.n	800c606 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800c586:	4b24      	ldr	r3, [pc, #144]	; (800c618 <vTaskSwitchContext+0xa8>)
 800c588:	2200      	movs	r2, #0
 800c58a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c58c:	4b23      	ldr	r3, [pc, #140]	; (800c61c <vTaskSwitchContext+0xac>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	fab3 f383 	clz	r3, r3
 800c598:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c59a:	7afb      	ldrb	r3, [r7, #11]
 800c59c:	f1c3 031f 	rsb	r3, r3, #31
 800c5a0:	617b      	str	r3, [r7, #20]
 800c5a2:	491f      	ldr	r1, [pc, #124]	; (800c620 <vTaskSwitchContext+0xb0>)
 800c5a4:	697a      	ldr	r2, [r7, #20]
 800c5a6:	4613      	mov	r3, r2
 800c5a8:	009b      	lsls	r3, r3, #2
 800c5aa:	4413      	add	r3, r2
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	440b      	add	r3, r1
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d10a      	bne.n	800c5cc <vTaskSwitchContext+0x5c>
	__asm volatile
 800c5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ba:	f383 8811 	msr	BASEPRI, r3
 800c5be:	f3bf 8f6f 	isb	sy
 800c5c2:	f3bf 8f4f 	dsb	sy
 800c5c6:	607b      	str	r3, [r7, #4]
}
 800c5c8:	bf00      	nop
 800c5ca:	e7fe      	b.n	800c5ca <vTaskSwitchContext+0x5a>
 800c5cc:	697a      	ldr	r2, [r7, #20]
 800c5ce:	4613      	mov	r3, r2
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	4413      	add	r3, r2
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	4a12      	ldr	r2, [pc, #72]	; (800c620 <vTaskSwitchContext+0xb0>)
 800c5d8:	4413      	add	r3, r2
 800c5da:	613b      	str	r3, [r7, #16]
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	685a      	ldr	r2, [r3, #4]
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	605a      	str	r2, [r3, #4]
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	685a      	ldr	r2, [r3, #4]
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	3308      	adds	r3, #8
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d104      	bne.n	800c5fc <vTaskSwitchContext+0x8c>
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	685a      	ldr	r2, [r3, #4]
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	605a      	str	r2, [r3, #4]
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	68db      	ldr	r3, [r3, #12]
 800c602:	4a08      	ldr	r2, [pc, #32]	; (800c624 <vTaskSwitchContext+0xb4>)
 800c604:	6013      	str	r3, [r2, #0]
}
 800c606:	bf00      	nop
 800c608:	371c      	adds	r7, #28
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop
 800c614:	20002114 	.word	0x20002114
 800c618:	20002100 	.word	0x20002100
 800c61c:	200020f4 	.word	0x200020f4
 800c620:	20001f3c 	.word	0x20001f3c
 800c624:	20001f38 	.word	0x20001f38

0800c628 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b084      	sub	sp, #16
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d10a      	bne.n	800c64e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c63c:	f383 8811 	msr	BASEPRI, r3
 800c640:	f3bf 8f6f 	isb	sy
 800c644:	f3bf 8f4f 	dsb	sy
 800c648:	60fb      	str	r3, [r7, #12]
}
 800c64a:	bf00      	nop
 800c64c:	e7fe      	b.n	800c64c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c64e:	4b07      	ldr	r3, [pc, #28]	; (800c66c <vTaskPlaceOnEventList+0x44>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	3318      	adds	r3, #24
 800c654:	4619      	mov	r1, r3
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f7fe ff7d 	bl	800b556 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c65c:	2101      	movs	r1, #1
 800c65e:	6838      	ldr	r0, [r7, #0]
 800c660:	f000 fa72 	bl	800cb48 <prvAddCurrentTaskToDelayedList>
}
 800c664:	bf00      	nop
 800c666:	3710      	adds	r7, #16
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}
 800c66c:	20001f38 	.word	0x20001f38

0800c670 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c670:	b580      	push	{r7, lr}
 800c672:	b086      	sub	sp, #24
 800c674:	af00      	add	r7, sp, #0
 800c676:	60f8      	str	r0, [r7, #12]
 800c678:	60b9      	str	r1, [r7, #8]
 800c67a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d10a      	bne.n	800c698 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c686:	f383 8811 	msr	BASEPRI, r3
 800c68a:	f3bf 8f6f 	isb	sy
 800c68e:	f3bf 8f4f 	dsb	sy
 800c692:	617b      	str	r3, [r7, #20]
}
 800c694:	bf00      	nop
 800c696:	e7fe      	b.n	800c696 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c698:	4b0a      	ldr	r3, [pc, #40]	; (800c6c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	3318      	adds	r3, #24
 800c69e:	4619      	mov	r1, r3
 800c6a0:	68f8      	ldr	r0, [r7, #12]
 800c6a2:	f7fe ff34 	bl	800b50e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d002      	beq.n	800c6b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c6ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c6b2:	6879      	ldr	r1, [r7, #4]
 800c6b4:	68b8      	ldr	r0, [r7, #8]
 800c6b6:	f000 fa47 	bl	800cb48 <prvAddCurrentTaskToDelayedList>
	}
 800c6ba:	bf00      	nop
 800c6bc:	3718      	adds	r7, #24
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	20001f38 	.word	0x20001f38

0800c6c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b086      	sub	sp, #24
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	68db      	ldr	r3, [r3, #12]
 800c6d4:	68db      	ldr	r3, [r3, #12]
 800c6d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d10a      	bne.n	800c6f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e2:	f383 8811 	msr	BASEPRI, r3
 800c6e6:	f3bf 8f6f 	isb	sy
 800c6ea:	f3bf 8f4f 	dsb	sy
 800c6ee:	60fb      	str	r3, [r7, #12]
}
 800c6f0:	bf00      	nop
 800c6f2:	e7fe      	b.n	800c6f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	3318      	adds	r3, #24
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7fe ff65 	bl	800b5c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6fe:	4b1d      	ldr	r3, [pc, #116]	; (800c774 <xTaskRemoveFromEventList+0xac>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d11c      	bne.n	800c740 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	3304      	adds	r3, #4
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7fe ff5c 	bl	800b5c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c714:	2201      	movs	r2, #1
 800c716:	409a      	lsls	r2, r3
 800c718:	4b17      	ldr	r3, [pc, #92]	; (800c778 <xTaskRemoveFromEventList+0xb0>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4313      	orrs	r3, r2
 800c71e:	4a16      	ldr	r2, [pc, #88]	; (800c778 <xTaskRemoveFromEventList+0xb0>)
 800c720:	6013      	str	r3, [r2, #0]
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c726:	4613      	mov	r3, r2
 800c728:	009b      	lsls	r3, r3, #2
 800c72a:	4413      	add	r3, r2
 800c72c:	009b      	lsls	r3, r3, #2
 800c72e:	4a13      	ldr	r2, [pc, #76]	; (800c77c <xTaskRemoveFromEventList+0xb4>)
 800c730:	441a      	add	r2, r3
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	3304      	adds	r3, #4
 800c736:	4619      	mov	r1, r3
 800c738:	4610      	mov	r0, r2
 800c73a:	f7fe fee8 	bl	800b50e <vListInsertEnd>
 800c73e:	e005      	b.n	800c74c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	3318      	adds	r3, #24
 800c744:	4619      	mov	r1, r3
 800c746:	480e      	ldr	r0, [pc, #56]	; (800c780 <xTaskRemoveFromEventList+0xb8>)
 800c748:	f7fe fee1 	bl	800b50e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c750:	4b0c      	ldr	r3, [pc, #48]	; (800c784 <xTaskRemoveFromEventList+0xbc>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c756:	429a      	cmp	r2, r3
 800c758:	d905      	bls.n	800c766 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c75a:	2301      	movs	r3, #1
 800c75c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c75e:	4b0a      	ldr	r3, [pc, #40]	; (800c788 <xTaskRemoveFromEventList+0xc0>)
 800c760:	2201      	movs	r2, #1
 800c762:	601a      	str	r2, [r3, #0]
 800c764:	e001      	b.n	800c76a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c766:	2300      	movs	r3, #0
 800c768:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c76a:	697b      	ldr	r3, [r7, #20]
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3718      	adds	r7, #24
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}
 800c774:	20002114 	.word	0x20002114
 800c778:	200020f4 	.word	0x200020f4
 800c77c:	20001f3c 	.word	0x20001f3c
 800c780:	200020ac 	.word	0x200020ac
 800c784:	20001f38 	.word	0x20001f38
 800c788:	20002100 	.word	0x20002100

0800c78c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c78c:	b480      	push	{r7}
 800c78e:	b083      	sub	sp, #12
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c794:	4b06      	ldr	r3, [pc, #24]	; (800c7b0 <vTaskInternalSetTimeOutState+0x24>)
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c79c:	4b05      	ldr	r3, [pc, #20]	; (800c7b4 <vTaskInternalSetTimeOutState+0x28>)
 800c79e:	681a      	ldr	r2, [r3, #0]
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	605a      	str	r2, [r3, #4]
}
 800c7a4:	bf00      	nop
 800c7a6:	370c      	adds	r7, #12
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr
 800c7b0:	20002104 	.word	0x20002104
 800c7b4:	200020f0 	.word	0x200020f0

0800c7b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b088      	sub	sp, #32
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d10a      	bne.n	800c7de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7cc:	f383 8811 	msr	BASEPRI, r3
 800c7d0:	f3bf 8f6f 	isb	sy
 800c7d4:	f3bf 8f4f 	dsb	sy
 800c7d8:	613b      	str	r3, [r7, #16]
}
 800c7da:	bf00      	nop
 800c7dc:	e7fe      	b.n	800c7dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d10a      	bne.n	800c7fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e8:	f383 8811 	msr	BASEPRI, r3
 800c7ec:	f3bf 8f6f 	isb	sy
 800c7f0:	f3bf 8f4f 	dsb	sy
 800c7f4:	60fb      	str	r3, [r7, #12]
}
 800c7f6:	bf00      	nop
 800c7f8:	e7fe      	b.n	800c7f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c7fa:	f000 fe4b 	bl	800d494 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c7fe:	4b1d      	ldr	r3, [pc, #116]	; (800c874 <xTaskCheckForTimeOut+0xbc>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	69ba      	ldr	r2, [r7, #24]
 800c80a:	1ad3      	subs	r3, r2, r3
 800c80c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c816:	d102      	bne.n	800c81e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c818:	2300      	movs	r3, #0
 800c81a:	61fb      	str	r3, [r7, #28]
 800c81c:	e023      	b.n	800c866 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	4b15      	ldr	r3, [pc, #84]	; (800c878 <xTaskCheckForTimeOut+0xc0>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	429a      	cmp	r2, r3
 800c828:	d007      	beq.n	800c83a <xTaskCheckForTimeOut+0x82>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	685b      	ldr	r3, [r3, #4]
 800c82e:	69ba      	ldr	r2, [r7, #24]
 800c830:	429a      	cmp	r2, r3
 800c832:	d302      	bcc.n	800c83a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c834:	2301      	movs	r3, #1
 800c836:	61fb      	str	r3, [r7, #28]
 800c838:	e015      	b.n	800c866 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	697a      	ldr	r2, [r7, #20]
 800c840:	429a      	cmp	r2, r3
 800c842:	d20b      	bcs.n	800c85c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	1ad2      	subs	r2, r2, r3
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f7ff ff9b 	bl	800c78c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c856:	2300      	movs	r3, #0
 800c858:	61fb      	str	r3, [r7, #28]
 800c85a:	e004      	b.n	800c866 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	2200      	movs	r2, #0
 800c860:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c862:	2301      	movs	r3, #1
 800c864:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c866:	f000 fe45 	bl	800d4f4 <vPortExitCritical>

	return xReturn;
 800c86a:	69fb      	ldr	r3, [r7, #28]
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3720      	adds	r7, #32
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}
 800c874:	200020f0 	.word	0x200020f0
 800c878:	20002104 	.word	0x20002104

0800c87c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c87c:	b480      	push	{r7}
 800c87e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c880:	4b03      	ldr	r3, [pc, #12]	; (800c890 <vTaskMissedYield+0x14>)
 800c882:	2201      	movs	r2, #1
 800c884:	601a      	str	r2, [r3, #0]
}
 800c886:	bf00      	nop
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr
 800c890:	20002100 	.word	0x20002100

0800c894 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b082      	sub	sp, #8
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c89c:	f000 f852 	bl	800c944 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c8a0:	4b06      	ldr	r3, [pc, #24]	; (800c8bc <prvIdleTask+0x28>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d9f9      	bls.n	800c89c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c8a8:	4b05      	ldr	r3, [pc, #20]	; (800c8c0 <prvIdleTask+0x2c>)
 800c8aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8ae:	601a      	str	r2, [r3, #0]
 800c8b0:	f3bf 8f4f 	dsb	sy
 800c8b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c8b8:	e7f0      	b.n	800c89c <prvIdleTask+0x8>
 800c8ba:	bf00      	nop
 800c8bc:	20001f3c 	.word	0x20001f3c
 800c8c0:	e000ed04 	.word	0xe000ed04

0800c8c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b082      	sub	sp, #8
 800c8c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	607b      	str	r3, [r7, #4]
 800c8ce:	e00c      	b.n	800c8ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	4613      	mov	r3, r2
 800c8d4:	009b      	lsls	r3, r3, #2
 800c8d6:	4413      	add	r3, r2
 800c8d8:	009b      	lsls	r3, r3, #2
 800c8da:	4a12      	ldr	r2, [pc, #72]	; (800c924 <prvInitialiseTaskLists+0x60>)
 800c8dc:	4413      	add	r3, r2
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7fe fde8 	bl	800b4b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	607b      	str	r3, [r7, #4]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2b0f      	cmp	r3, #15
 800c8ee:	d9ef      	bls.n	800c8d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c8f0:	480d      	ldr	r0, [pc, #52]	; (800c928 <prvInitialiseTaskLists+0x64>)
 800c8f2:	f7fe fddf 	bl	800b4b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c8f6:	480d      	ldr	r0, [pc, #52]	; (800c92c <prvInitialiseTaskLists+0x68>)
 800c8f8:	f7fe fddc 	bl	800b4b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c8fc:	480c      	ldr	r0, [pc, #48]	; (800c930 <prvInitialiseTaskLists+0x6c>)
 800c8fe:	f7fe fdd9 	bl	800b4b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c902:	480c      	ldr	r0, [pc, #48]	; (800c934 <prvInitialiseTaskLists+0x70>)
 800c904:	f7fe fdd6 	bl	800b4b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c908:	480b      	ldr	r0, [pc, #44]	; (800c938 <prvInitialiseTaskLists+0x74>)
 800c90a:	f7fe fdd3 	bl	800b4b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c90e:	4b0b      	ldr	r3, [pc, #44]	; (800c93c <prvInitialiseTaskLists+0x78>)
 800c910:	4a05      	ldr	r2, [pc, #20]	; (800c928 <prvInitialiseTaskLists+0x64>)
 800c912:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c914:	4b0a      	ldr	r3, [pc, #40]	; (800c940 <prvInitialiseTaskLists+0x7c>)
 800c916:	4a05      	ldr	r2, [pc, #20]	; (800c92c <prvInitialiseTaskLists+0x68>)
 800c918:	601a      	str	r2, [r3, #0]
}
 800c91a:	bf00      	nop
 800c91c:	3708      	adds	r7, #8
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop
 800c924:	20001f3c 	.word	0x20001f3c
 800c928:	2000207c 	.word	0x2000207c
 800c92c:	20002090 	.word	0x20002090
 800c930:	200020ac 	.word	0x200020ac
 800c934:	200020c0 	.word	0x200020c0
 800c938:	200020d8 	.word	0x200020d8
 800c93c:	200020a4 	.word	0x200020a4
 800c940:	200020a8 	.word	0x200020a8

0800c944 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b082      	sub	sp, #8
 800c948:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c94a:	e019      	b.n	800c980 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c94c:	f000 fda2 	bl	800d494 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c950:	4b10      	ldr	r3, [pc, #64]	; (800c994 <prvCheckTasksWaitingTermination+0x50>)
 800c952:	68db      	ldr	r3, [r3, #12]
 800c954:	68db      	ldr	r3, [r3, #12]
 800c956:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	3304      	adds	r3, #4
 800c95c:	4618      	mov	r0, r3
 800c95e:	f7fe fe33 	bl	800b5c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c962:	4b0d      	ldr	r3, [pc, #52]	; (800c998 <prvCheckTasksWaitingTermination+0x54>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	3b01      	subs	r3, #1
 800c968:	4a0b      	ldr	r2, [pc, #44]	; (800c998 <prvCheckTasksWaitingTermination+0x54>)
 800c96a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c96c:	4b0b      	ldr	r3, [pc, #44]	; (800c99c <prvCheckTasksWaitingTermination+0x58>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	3b01      	subs	r3, #1
 800c972:	4a0a      	ldr	r2, [pc, #40]	; (800c99c <prvCheckTasksWaitingTermination+0x58>)
 800c974:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c976:	f000 fdbd 	bl	800d4f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f000 f810 	bl	800c9a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c980:	4b06      	ldr	r3, [pc, #24]	; (800c99c <prvCheckTasksWaitingTermination+0x58>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d1e1      	bne.n	800c94c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c988:	bf00      	nop
 800c98a:	bf00      	nop
 800c98c:	3708      	adds	r7, #8
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}
 800c992:	bf00      	nop
 800c994:	200020c0 	.word	0x200020c0
 800c998:	200020ec 	.word	0x200020ec
 800c99c:	200020d4 	.word	0x200020d4

0800c9a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b082      	sub	sp, #8
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f000 ff57 	bl	800d860 <vPortFree>
			vPortFree( pxTCB );
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 ff54 	bl	800d860 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c9b8:	bf00      	nop
 800c9ba:	3708      	adds	r7, #8
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b083      	sub	sp, #12
 800c9c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9c6:	4b0c      	ldr	r3, [pc, #48]	; (800c9f8 <prvResetNextTaskUnblockTime+0x38>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d104      	bne.n	800c9da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c9d0:	4b0a      	ldr	r3, [pc, #40]	; (800c9fc <prvResetNextTaskUnblockTime+0x3c>)
 800c9d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c9d8:	e008      	b.n	800c9ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9da:	4b07      	ldr	r3, [pc, #28]	; (800c9f8 <prvResetNextTaskUnblockTime+0x38>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	68db      	ldr	r3, [r3, #12]
 800c9e0:	68db      	ldr	r3, [r3, #12]
 800c9e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	4a04      	ldr	r2, [pc, #16]	; (800c9fc <prvResetNextTaskUnblockTime+0x3c>)
 800c9ea:	6013      	str	r3, [r2, #0]
}
 800c9ec:	bf00      	nop
 800c9ee:	370c      	adds	r7, #12
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr
 800c9f8:	200020a4 	.word	0x200020a4
 800c9fc:	2000210c 	.word	0x2000210c

0800ca00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ca00:	b480      	push	{r7}
 800ca02:	b083      	sub	sp, #12
 800ca04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ca06:	4b0b      	ldr	r3, [pc, #44]	; (800ca34 <xTaskGetSchedulerState+0x34>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d102      	bne.n	800ca14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ca0e:	2301      	movs	r3, #1
 800ca10:	607b      	str	r3, [r7, #4]
 800ca12:	e008      	b.n	800ca26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca14:	4b08      	ldr	r3, [pc, #32]	; (800ca38 <xTaskGetSchedulerState+0x38>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d102      	bne.n	800ca22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ca1c:	2302      	movs	r3, #2
 800ca1e:	607b      	str	r3, [r7, #4]
 800ca20:	e001      	b.n	800ca26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ca22:	2300      	movs	r3, #0
 800ca24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ca26:	687b      	ldr	r3, [r7, #4]
	}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	370c      	adds	r7, #12
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr
 800ca34:	200020f8 	.word	0x200020f8
 800ca38:	20002114 	.word	0x20002114

0800ca3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b086      	sub	sp, #24
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d06e      	beq.n	800cb30 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ca52:	4b3a      	ldr	r3, [pc, #232]	; (800cb3c <xTaskPriorityDisinherit+0x100>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	693a      	ldr	r2, [r7, #16]
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	d00a      	beq.n	800ca72 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ca5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca60:	f383 8811 	msr	BASEPRI, r3
 800ca64:	f3bf 8f6f 	isb	sy
 800ca68:	f3bf 8f4f 	dsb	sy
 800ca6c:	60fb      	str	r3, [r7, #12]
}
 800ca6e:	bf00      	nop
 800ca70:	e7fe      	b.n	800ca70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d10a      	bne.n	800ca90 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ca7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca7e:	f383 8811 	msr	BASEPRI, r3
 800ca82:	f3bf 8f6f 	isb	sy
 800ca86:	f3bf 8f4f 	dsb	sy
 800ca8a:	60bb      	str	r3, [r7, #8]
}
 800ca8c:	bf00      	nop
 800ca8e:	e7fe      	b.n	800ca8e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca94:	1e5a      	subs	r2, r3, #1
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d044      	beq.n	800cb30 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d140      	bne.n	800cb30 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	3304      	adds	r3, #4
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7fe fd88 	bl	800b5c8 <uxListRemove>
 800cab8:	4603      	mov	r3, r0
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d115      	bne.n	800caea <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cac2:	491f      	ldr	r1, [pc, #124]	; (800cb40 <xTaskPriorityDisinherit+0x104>)
 800cac4:	4613      	mov	r3, r2
 800cac6:	009b      	lsls	r3, r3, #2
 800cac8:	4413      	add	r3, r2
 800caca:	009b      	lsls	r3, r3, #2
 800cacc:	440b      	add	r3, r1
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d10a      	bne.n	800caea <xTaskPriorityDisinherit+0xae>
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad8:	2201      	movs	r2, #1
 800cada:	fa02 f303 	lsl.w	r3, r2, r3
 800cade:	43da      	mvns	r2, r3
 800cae0:	4b18      	ldr	r3, [pc, #96]	; (800cb44 <xTaskPriorityDisinherit+0x108>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4013      	ands	r3, r2
 800cae6:	4a17      	ldr	r2, [pc, #92]	; (800cb44 <xTaskPriorityDisinherit+0x108>)
 800cae8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caf6:	f1c3 0210 	rsb	r2, r3, #16
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb02:	2201      	movs	r2, #1
 800cb04:	409a      	lsls	r2, r3
 800cb06:	4b0f      	ldr	r3, [pc, #60]	; (800cb44 <xTaskPriorityDisinherit+0x108>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	4a0d      	ldr	r2, [pc, #52]	; (800cb44 <xTaskPriorityDisinherit+0x108>)
 800cb0e:	6013      	str	r3, [r2, #0]
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb14:	4613      	mov	r3, r2
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	4413      	add	r3, r2
 800cb1a:	009b      	lsls	r3, r3, #2
 800cb1c:	4a08      	ldr	r2, [pc, #32]	; (800cb40 <xTaskPriorityDisinherit+0x104>)
 800cb1e:	441a      	add	r2, r3
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	3304      	adds	r3, #4
 800cb24:	4619      	mov	r1, r3
 800cb26:	4610      	mov	r0, r2
 800cb28:	f7fe fcf1 	bl	800b50e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cb30:	697b      	ldr	r3, [r7, #20]
	}
 800cb32:	4618      	mov	r0, r3
 800cb34:	3718      	adds	r7, #24
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
 800cb3a:	bf00      	nop
 800cb3c:	20001f38 	.word	0x20001f38
 800cb40:	20001f3c 	.word	0x20001f3c
 800cb44:	200020f4 	.word	0x200020f4

0800cb48 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cb52:	4b29      	ldr	r3, [pc, #164]	; (800cbf8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb58:	4b28      	ldr	r3, [pc, #160]	; (800cbfc <prvAddCurrentTaskToDelayedList+0xb4>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	3304      	adds	r3, #4
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7fe fd32 	bl	800b5c8 <uxListRemove>
 800cb64:	4603      	mov	r3, r0
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d10b      	bne.n	800cb82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cb6a:	4b24      	ldr	r3, [pc, #144]	; (800cbfc <prvAddCurrentTaskToDelayedList+0xb4>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb70:	2201      	movs	r2, #1
 800cb72:	fa02 f303 	lsl.w	r3, r2, r3
 800cb76:	43da      	mvns	r2, r3
 800cb78:	4b21      	ldr	r3, [pc, #132]	; (800cc00 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	4013      	ands	r3, r2
 800cb7e:	4a20      	ldr	r2, [pc, #128]	; (800cc00 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cb80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb88:	d10a      	bne.n	800cba0 <prvAddCurrentTaskToDelayedList+0x58>
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d007      	beq.n	800cba0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb90:	4b1a      	ldr	r3, [pc, #104]	; (800cbfc <prvAddCurrentTaskToDelayedList+0xb4>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	3304      	adds	r3, #4
 800cb96:	4619      	mov	r1, r3
 800cb98:	481a      	ldr	r0, [pc, #104]	; (800cc04 <prvAddCurrentTaskToDelayedList+0xbc>)
 800cb9a:	f7fe fcb8 	bl	800b50e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cb9e:	e026      	b.n	800cbee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cba0:	68fa      	ldr	r2, [r7, #12]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	4413      	add	r3, r2
 800cba6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cba8:	4b14      	ldr	r3, [pc, #80]	; (800cbfc <prvAddCurrentTaskToDelayedList+0xb4>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	68ba      	ldr	r2, [r7, #8]
 800cbae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cbb0:	68ba      	ldr	r2, [r7, #8]
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d209      	bcs.n	800cbcc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbb8:	4b13      	ldr	r3, [pc, #76]	; (800cc08 <prvAddCurrentTaskToDelayedList+0xc0>)
 800cbba:	681a      	ldr	r2, [r3, #0]
 800cbbc:	4b0f      	ldr	r3, [pc, #60]	; (800cbfc <prvAddCurrentTaskToDelayedList+0xb4>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	3304      	adds	r3, #4
 800cbc2:	4619      	mov	r1, r3
 800cbc4:	4610      	mov	r0, r2
 800cbc6:	f7fe fcc6 	bl	800b556 <vListInsert>
}
 800cbca:	e010      	b.n	800cbee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbcc:	4b0f      	ldr	r3, [pc, #60]	; (800cc0c <prvAddCurrentTaskToDelayedList+0xc4>)
 800cbce:	681a      	ldr	r2, [r3, #0]
 800cbd0:	4b0a      	ldr	r3, [pc, #40]	; (800cbfc <prvAddCurrentTaskToDelayedList+0xb4>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	3304      	adds	r3, #4
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	4610      	mov	r0, r2
 800cbda:	f7fe fcbc 	bl	800b556 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cbde:	4b0c      	ldr	r3, [pc, #48]	; (800cc10 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	68ba      	ldr	r2, [r7, #8]
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d202      	bcs.n	800cbee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cbe8:	4a09      	ldr	r2, [pc, #36]	; (800cc10 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	6013      	str	r3, [r2, #0]
}
 800cbee:	bf00      	nop
 800cbf0:	3710      	adds	r7, #16
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	200020f0 	.word	0x200020f0
 800cbfc:	20001f38 	.word	0x20001f38
 800cc00:	200020f4 	.word	0x200020f4
 800cc04:	200020d8 	.word	0x200020d8
 800cc08:	200020a8 	.word	0x200020a8
 800cc0c:	200020a4 	.word	0x200020a4
 800cc10:	2000210c 	.word	0x2000210c

0800cc14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cc1e:	f000 fad5 	bl	800d1cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cc22:	4b11      	ldr	r3, [pc, #68]	; (800cc68 <xTimerCreateTimerTask+0x54>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d00b      	beq.n	800cc42 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800cc2a:	4b10      	ldr	r3, [pc, #64]	; (800cc6c <xTimerCreateTimerTask+0x58>)
 800cc2c:	9301      	str	r3, [sp, #4]
 800cc2e:	2302      	movs	r3, #2
 800cc30:	9300      	str	r3, [sp, #0]
 800cc32:	2300      	movs	r3, #0
 800cc34:	f44f 7282 	mov.w	r2, #260	; 0x104
 800cc38:	490d      	ldr	r1, [pc, #52]	; (800cc70 <xTimerCreateTimerTask+0x5c>)
 800cc3a:	480e      	ldr	r0, [pc, #56]	; (800cc74 <xTimerCreateTimerTask+0x60>)
 800cc3c:	f7ff f99a 	bl	800bf74 <xTaskCreate>
 800cc40:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d10a      	bne.n	800cc5e <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800cc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc4c:	f383 8811 	msr	BASEPRI, r3
 800cc50:	f3bf 8f6f 	isb	sy
 800cc54:	f3bf 8f4f 	dsb	sy
 800cc58:	603b      	str	r3, [r7, #0]
}
 800cc5a:	bf00      	nop
 800cc5c:	e7fe      	b.n	800cc5c <xTimerCreateTimerTask+0x48>
	return xReturn;
 800cc5e:	687b      	ldr	r3, [r7, #4]
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3708      	adds	r7, #8
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}
 800cc68:	20002148 	.word	0x20002148
 800cc6c:	2000214c 	.word	0x2000214c
 800cc70:	0800e738 	.word	0x0800e738
 800cc74:	0800cdad 	.word	0x0800cdad

0800cc78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b08a      	sub	sp, #40	; 0x28
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	60b9      	str	r1, [r7, #8]
 800cc82:	607a      	str	r2, [r7, #4]
 800cc84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cc86:	2300      	movs	r3, #0
 800cc88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d10a      	bne.n	800cca6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800cc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc94:	f383 8811 	msr	BASEPRI, r3
 800cc98:	f3bf 8f6f 	isb	sy
 800cc9c:	f3bf 8f4f 	dsb	sy
 800cca0:	623b      	str	r3, [r7, #32]
}
 800cca2:	bf00      	nop
 800cca4:	e7fe      	b.n	800cca4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cca6:	4b1a      	ldr	r3, [pc, #104]	; (800cd10 <xTimerGenericCommand+0x98>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d02a      	beq.n	800cd04 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	2b05      	cmp	r3, #5
 800ccbe:	dc18      	bgt.n	800ccf2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ccc0:	f7ff fe9e 	bl	800ca00 <xTaskGetSchedulerState>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	2b02      	cmp	r3, #2
 800ccc8:	d109      	bne.n	800ccde <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ccca:	4b11      	ldr	r3, [pc, #68]	; (800cd10 <xTimerGenericCommand+0x98>)
 800cccc:	6818      	ldr	r0, [r3, #0]
 800ccce:	f107 0114 	add.w	r1, r7, #20
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccd6:	f7fe fd69 	bl	800b7ac <xQueueGenericSend>
 800ccda:	6278      	str	r0, [r7, #36]	; 0x24
 800ccdc:	e012      	b.n	800cd04 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ccde:	4b0c      	ldr	r3, [pc, #48]	; (800cd10 <xTimerGenericCommand+0x98>)
 800cce0:	6818      	ldr	r0, [r3, #0]
 800cce2:	f107 0114 	add.w	r1, r7, #20
 800cce6:	2300      	movs	r3, #0
 800cce8:	2200      	movs	r2, #0
 800ccea:	f7fe fd5f 	bl	800b7ac <xQueueGenericSend>
 800ccee:	6278      	str	r0, [r7, #36]	; 0x24
 800ccf0:	e008      	b.n	800cd04 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ccf2:	4b07      	ldr	r3, [pc, #28]	; (800cd10 <xTimerGenericCommand+0x98>)
 800ccf4:	6818      	ldr	r0, [r3, #0]
 800ccf6:	f107 0114 	add.w	r1, r7, #20
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	683a      	ldr	r2, [r7, #0]
 800ccfe:	f7fe fe53 	bl	800b9a8 <xQueueGenericSendFromISR>
 800cd02:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3728      	adds	r7, #40	; 0x28
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	20002148 	.word	0x20002148

0800cd14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b088      	sub	sp, #32
 800cd18:	af02      	add	r7, sp, #8
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd1e:	4b22      	ldr	r3, [pc, #136]	; (800cda8 <prvProcessExpiredTimer+0x94>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	68db      	ldr	r3, [r3, #12]
 800cd24:	68db      	ldr	r3, [r3, #12]
 800cd26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	3304      	adds	r3, #4
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7fe fc4b 	bl	800b5c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd38:	f003 0304 	and.w	r3, r3, #4
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d022      	beq.n	800cd86 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	699a      	ldr	r2, [r3, #24]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	18d1      	adds	r1, r2, r3
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	683a      	ldr	r2, [r7, #0]
 800cd4c:	6978      	ldr	r0, [r7, #20]
 800cd4e:	f000 f8d1 	bl	800cef4 <prvInsertTimerInActiveList>
 800cd52:	4603      	mov	r3, r0
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d01f      	beq.n	800cd98 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cd58:	2300      	movs	r3, #0
 800cd5a:	9300      	str	r3, [sp, #0]
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	2100      	movs	r1, #0
 800cd62:	6978      	ldr	r0, [r7, #20]
 800cd64:	f7ff ff88 	bl	800cc78 <xTimerGenericCommand>
 800cd68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d113      	bne.n	800cd98 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd74:	f383 8811 	msr	BASEPRI, r3
 800cd78:	f3bf 8f6f 	isb	sy
 800cd7c:	f3bf 8f4f 	dsb	sy
 800cd80:	60fb      	str	r3, [r7, #12]
}
 800cd82:	bf00      	nop
 800cd84:	e7fe      	b.n	800cd84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd8c:	f023 0301 	bic.w	r3, r3, #1
 800cd90:	b2da      	uxtb	r2, r3
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	6a1b      	ldr	r3, [r3, #32]
 800cd9c:	6978      	ldr	r0, [r7, #20]
 800cd9e:	4798      	blx	r3
}
 800cda0:	bf00      	nop
 800cda2:	3718      	adds	r7, #24
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	20002140 	.word	0x20002140

0800cdac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b084      	sub	sp, #16
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cdb4:	f107 0308 	add.w	r3, r7, #8
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f000 f857 	bl	800ce6c <prvGetNextExpireTime>
 800cdbe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	4619      	mov	r1, r3
 800cdc4:	68f8      	ldr	r0, [r7, #12]
 800cdc6:	f000 f803 	bl	800cdd0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cdca:	f000 f8d5 	bl	800cf78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cdce:	e7f1      	b.n	800cdb4 <prvTimerTask+0x8>

0800cdd0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b084      	sub	sp, #16
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cdda:	f7ff fa57 	bl	800c28c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cdde:	f107 0308 	add.w	r3, r7, #8
 800cde2:	4618      	mov	r0, r3
 800cde4:	f000 f866 	bl	800ceb4 <prvSampleTimeNow>
 800cde8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d130      	bne.n	800ce52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d10a      	bne.n	800ce0c <prvProcessTimerOrBlockTask+0x3c>
 800cdf6:	687a      	ldr	r2, [r7, #4]
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d806      	bhi.n	800ce0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cdfe:	f7ff fa53 	bl	800c2a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ce02:	68f9      	ldr	r1, [r7, #12]
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f7ff ff85 	bl	800cd14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ce0a:	e024      	b.n	800ce56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d008      	beq.n	800ce24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ce12:	4b13      	ldr	r3, [pc, #76]	; (800ce60 <prvProcessTimerOrBlockTask+0x90>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d101      	bne.n	800ce20 <prvProcessTimerOrBlockTask+0x50>
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	e000      	b.n	800ce22 <prvProcessTimerOrBlockTask+0x52>
 800ce20:	2300      	movs	r3, #0
 800ce22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ce24:	4b0f      	ldr	r3, [pc, #60]	; (800ce64 <prvProcessTimerOrBlockTask+0x94>)
 800ce26:	6818      	ldr	r0, [r3, #0]
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	1ad3      	subs	r3, r2, r3
 800ce2e:	683a      	ldr	r2, [r7, #0]
 800ce30:	4619      	mov	r1, r3
 800ce32:	f7ff f86b 	bl	800bf0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ce36:	f7ff fa37 	bl	800c2a8 <xTaskResumeAll>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d10a      	bne.n	800ce56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ce40:	4b09      	ldr	r3, [pc, #36]	; (800ce68 <prvProcessTimerOrBlockTask+0x98>)
 800ce42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce46:	601a      	str	r2, [r3, #0]
 800ce48:	f3bf 8f4f 	dsb	sy
 800ce4c:	f3bf 8f6f 	isb	sy
}
 800ce50:	e001      	b.n	800ce56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ce52:	f7ff fa29 	bl	800c2a8 <xTaskResumeAll>
}
 800ce56:	bf00      	nop
 800ce58:	3710      	adds	r7, #16
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}
 800ce5e:	bf00      	nop
 800ce60:	20002144 	.word	0x20002144
 800ce64:	20002148 	.word	0x20002148
 800ce68:	e000ed04 	.word	0xe000ed04

0800ce6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b085      	sub	sp, #20
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ce74:	4b0e      	ldr	r3, [pc, #56]	; (800ceb0 <prvGetNextExpireTime+0x44>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d101      	bne.n	800ce82 <prvGetNextExpireTime+0x16>
 800ce7e:	2201      	movs	r2, #1
 800ce80:	e000      	b.n	800ce84 <prvGetNextExpireTime+0x18>
 800ce82:	2200      	movs	r2, #0
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d105      	bne.n	800ce9c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ce90:	4b07      	ldr	r3, [pc, #28]	; (800ceb0 <prvGetNextExpireTime+0x44>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	68db      	ldr	r3, [r3, #12]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	60fb      	str	r3, [r7, #12]
 800ce9a:	e001      	b.n	800cea0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cea0:	68fb      	ldr	r3, [r7, #12]
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3714      	adds	r7, #20
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr
 800ceae:	bf00      	nop
 800ceb0:	20002140 	.word	0x20002140

0800ceb4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b084      	sub	sp, #16
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cebc:	f7ff fa90 	bl	800c3e0 <xTaskGetTickCount>
 800cec0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cec2:	4b0b      	ldr	r3, [pc, #44]	; (800cef0 <prvSampleTimeNow+0x3c>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	68fa      	ldr	r2, [r7, #12]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d205      	bcs.n	800ced8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cecc:	f000 f91a 	bl	800d104 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2201      	movs	r2, #1
 800ced4:	601a      	str	r2, [r3, #0]
 800ced6:	e002      	b.n	800cede <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2200      	movs	r2, #0
 800cedc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cede:	4a04      	ldr	r2, [pc, #16]	; (800cef0 <prvSampleTimeNow+0x3c>)
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cee4:	68fb      	ldr	r3, [r7, #12]
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3710      	adds	r7, #16
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}
 800ceee:	bf00      	nop
 800cef0:	20002150 	.word	0x20002150

0800cef4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b086      	sub	sp, #24
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	60f8      	str	r0, [r7, #12]
 800cefc:	60b9      	str	r1, [r7, #8]
 800cefe:	607a      	str	r2, [r7, #4]
 800cf00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cf02:	2300      	movs	r3, #0
 800cf04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	68ba      	ldr	r2, [r7, #8]
 800cf0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	68fa      	ldr	r2, [r7, #12]
 800cf10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cf12:	68ba      	ldr	r2, [r7, #8]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d812      	bhi.n	800cf40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	1ad2      	subs	r2, r2, r3
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	699b      	ldr	r3, [r3, #24]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d302      	bcc.n	800cf2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cf28:	2301      	movs	r3, #1
 800cf2a:	617b      	str	r3, [r7, #20]
 800cf2c:	e01b      	b.n	800cf66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cf2e:	4b10      	ldr	r3, [pc, #64]	; (800cf70 <prvInsertTimerInActiveList+0x7c>)
 800cf30:	681a      	ldr	r2, [r3, #0]
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	3304      	adds	r3, #4
 800cf36:	4619      	mov	r1, r3
 800cf38:	4610      	mov	r0, r2
 800cf3a:	f7fe fb0c 	bl	800b556 <vListInsert>
 800cf3e:	e012      	b.n	800cf66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cf40:	687a      	ldr	r2, [r7, #4]
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d206      	bcs.n	800cf56 <prvInsertTimerInActiveList+0x62>
 800cf48:	68ba      	ldr	r2, [r7, #8]
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d302      	bcc.n	800cf56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cf50:	2301      	movs	r3, #1
 800cf52:	617b      	str	r3, [r7, #20]
 800cf54:	e007      	b.n	800cf66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf56:	4b07      	ldr	r3, [pc, #28]	; (800cf74 <prvInsertTimerInActiveList+0x80>)
 800cf58:	681a      	ldr	r2, [r3, #0]
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	3304      	adds	r3, #4
 800cf5e:	4619      	mov	r1, r3
 800cf60:	4610      	mov	r0, r2
 800cf62:	f7fe faf8 	bl	800b556 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cf66:	697b      	ldr	r3, [r7, #20]
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3718      	adds	r7, #24
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}
 800cf70:	20002144 	.word	0x20002144
 800cf74:	20002140 	.word	0x20002140

0800cf78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b08c      	sub	sp, #48	; 0x30
 800cf7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cf7e:	e0ae      	b.n	800d0de <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	f2c0 80aa 	blt.w	800d0dc <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cf8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8e:	695b      	ldr	r3, [r3, #20]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d004      	beq.n	800cf9e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf96:	3304      	adds	r3, #4
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7fe fb15 	bl	800b5c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cf9e:	1d3b      	adds	r3, r7, #4
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f7ff ff87 	bl	800ceb4 <prvSampleTimeNow>
 800cfa6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	2b09      	cmp	r3, #9
 800cfac:	f200 8097 	bhi.w	800d0de <prvProcessReceivedCommands+0x166>
 800cfb0:	a201      	add	r2, pc, #4	; (adr r2, 800cfb8 <prvProcessReceivedCommands+0x40>)
 800cfb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfb6:	bf00      	nop
 800cfb8:	0800cfe1 	.word	0x0800cfe1
 800cfbc:	0800cfe1 	.word	0x0800cfe1
 800cfc0:	0800cfe1 	.word	0x0800cfe1
 800cfc4:	0800d055 	.word	0x0800d055
 800cfc8:	0800d069 	.word	0x0800d069
 800cfcc:	0800d0b3 	.word	0x0800d0b3
 800cfd0:	0800cfe1 	.word	0x0800cfe1
 800cfd4:	0800cfe1 	.word	0x0800cfe1
 800cfd8:	0800d055 	.word	0x0800d055
 800cfdc:	0800d069 	.word	0x0800d069
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfe6:	f043 0301 	orr.w	r3, r3, #1
 800cfea:	b2da      	uxtb	r2, r3
 800cfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cff2:	68fa      	ldr	r2, [r7, #12]
 800cff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff6:	699b      	ldr	r3, [r3, #24]
 800cff8:	18d1      	adds	r1, r2, r3
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	6a3a      	ldr	r2, [r7, #32]
 800cffe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d000:	f7ff ff78 	bl	800cef4 <prvInsertTimerInActiveList>
 800d004:	4603      	mov	r3, r0
 800d006:	2b00      	cmp	r3, #0
 800d008:	d069      	beq.n	800d0de <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d00c:	6a1b      	ldr	r3, [r3, #32]
 800d00e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d010:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d014:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d018:	f003 0304 	and.w	r3, r3, #4
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d05e      	beq.n	800d0de <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d020:	68fa      	ldr	r2, [r7, #12]
 800d022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d024:	699b      	ldr	r3, [r3, #24]
 800d026:	441a      	add	r2, r3
 800d028:	2300      	movs	r3, #0
 800d02a:	9300      	str	r3, [sp, #0]
 800d02c:	2300      	movs	r3, #0
 800d02e:	2100      	movs	r1, #0
 800d030:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d032:	f7ff fe21 	bl	800cc78 <xTimerGenericCommand>
 800d036:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800d038:	69fb      	ldr	r3, [r7, #28]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d14f      	bne.n	800d0de <prvProcessReceivedCommands+0x166>
	__asm volatile
 800d03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d042:	f383 8811 	msr	BASEPRI, r3
 800d046:	f3bf 8f6f 	isb	sy
 800d04a:	f3bf 8f4f 	dsb	sy
 800d04e:	61bb      	str	r3, [r7, #24]
}
 800d050:	bf00      	nop
 800d052:	e7fe      	b.n	800d052 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d056:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d05a:	f023 0301 	bic.w	r3, r3, #1
 800d05e:	b2da      	uxtb	r2, r3
 800d060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d062:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d066:	e03a      	b.n	800d0de <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d06e:	f043 0301 	orr.w	r3, r3, #1
 800d072:	b2da      	uxtb	r2, r3
 800d074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d076:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d07a:	68fa      	ldr	r2, [r7, #12]
 800d07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d07e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d082:	699b      	ldr	r3, [r3, #24]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d10a      	bne.n	800d09e <prvProcessReceivedCommands+0x126>
	__asm volatile
 800d088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d08c:	f383 8811 	msr	BASEPRI, r3
 800d090:	f3bf 8f6f 	isb	sy
 800d094:	f3bf 8f4f 	dsb	sy
 800d098:	617b      	str	r3, [r7, #20]
}
 800d09a:	bf00      	nop
 800d09c:	e7fe      	b.n	800d09c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a0:	699a      	ldr	r2, [r3, #24]
 800d0a2:	6a3b      	ldr	r3, [r7, #32]
 800d0a4:	18d1      	adds	r1, r2, r3
 800d0a6:	6a3b      	ldr	r3, [r7, #32]
 800d0a8:	6a3a      	ldr	r2, [r7, #32]
 800d0aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d0ac:	f7ff ff22 	bl	800cef4 <prvInsertTimerInActiveList>
					break;
 800d0b0:	e015      	b.n	800d0de <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0b8:	f003 0302 	and.w	r3, r3, #2
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d103      	bne.n	800d0c8 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800d0c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d0c2:	f000 fbcd 	bl	800d860 <vPortFree>
 800d0c6:	e00a      	b.n	800d0de <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0ce:	f023 0301 	bic.w	r3, r3, #1
 800d0d2:	b2da      	uxtb	r2, r3
 800d0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d0da:	e000      	b.n	800d0de <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d0dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d0de:	4b08      	ldr	r3, [pc, #32]	; (800d100 <prvProcessReceivedCommands+0x188>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f107 0108 	add.w	r1, r7, #8
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f7fe fcf5 	bl	800bad8 <xQueueReceive>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	f47f af45 	bne.w	800cf80 <prvProcessReceivedCommands+0x8>
	}
}
 800d0f6:	bf00      	nop
 800d0f8:	bf00      	nop
 800d0fa:	3728      	adds	r7, #40	; 0x28
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}
 800d100:	20002148 	.word	0x20002148

0800d104 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b088      	sub	sp, #32
 800d108:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d10a:	e048      	b.n	800d19e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d10c:	4b2d      	ldr	r3, [pc, #180]	; (800d1c4 <prvSwitchTimerLists+0xc0>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	68db      	ldr	r3, [r3, #12]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d116:	4b2b      	ldr	r3, [pc, #172]	; (800d1c4 <prvSwitchTimerLists+0xc0>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	68db      	ldr	r3, [r3, #12]
 800d11c:	68db      	ldr	r3, [r3, #12]
 800d11e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	3304      	adds	r3, #4
 800d124:	4618      	mov	r0, r3
 800d126:	f7fe fa4f 	bl	800b5c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	6a1b      	ldr	r3, [r3, #32]
 800d12e:	68f8      	ldr	r0, [r7, #12]
 800d130:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d138:	f003 0304 	and.w	r3, r3, #4
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d02e      	beq.n	800d19e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	699b      	ldr	r3, [r3, #24]
 800d144:	693a      	ldr	r2, [r7, #16]
 800d146:	4413      	add	r3, r2
 800d148:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d14a:	68ba      	ldr	r2, [r7, #8]
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	429a      	cmp	r2, r3
 800d150:	d90e      	bls.n	800d170 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	68ba      	ldr	r2, [r7, #8]
 800d156:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	68fa      	ldr	r2, [r7, #12]
 800d15c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d15e:	4b19      	ldr	r3, [pc, #100]	; (800d1c4 <prvSwitchTimerLists+0xc0>)
 800d160:	681a      	ldr	r2, [r3, #0]
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	3304      	adds	r3, #4
 800d166:	4619      	mov	r1, r3
 800d168:	4610      	mov	r0, r2
 800d16a:	f7fe f9f4 	bl	800b556 <vListInsert>
 800d16e:	e016      	b.n	800d19e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d170:	2300      	movs	r3, #0
 800d172:	9300      	str	r3, [sp, #0]
 800d174:	2300      	movs	r3, #0
 800d176:	693a      	ldr	r2, [r7, #16]
 800d178:	2100      	movs	r1, #0
 800d17a:	68f8      	ldr	r0, [r7, #12]
 800d17c:	f7ff fd7c 	bl	800cc78 <xTimerGenericCommand>
 800d180:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d10a      	bne.n	800d19e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18c:	f383 8811 	msr	BASEPRI, r3
 800d190:	f3bf 8f6f 	isb	sy
 800d194:	f3bf 8f4f 	dsb	sy
 800d198:	603b      	str	r3, [r7, #0]
}
 800d19a:	bf00      	nop
 800d19c:	e7fe      	b.n	800d19c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d19e:	4b09      	ldr	r3, [pc, #36]	; (800d1c4 <prvSwitchTimerLists+0xc0>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d1b1      	bne.n	800d10c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d1a8:	4b06      	ldr	r3, [pc, #24]	; (800d1c4 <prvSwitchTimerLists+0xc0>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d1ae:	4b06      	ldr	r3, [pc, #24]	; (800d1c8 <prvSwitchTimerLists+0xc4>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	4a04      	ldr	r2, [pc, #16]	; (800d1c4 <prvSwitchTimerLists+0xc0>)
 800d1b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d1b6:	4a04      	ldr	r2, [pc, #16]	; (800d1c8 <prvSwitchTimerLists+0xc4>)
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	6013      	str	r3, [r2, #0]
}
 800d1bc:	bf00      	nop
 800d1be:	3718      	adds	r7, #24
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}
 800d1c4:	20002140 	.word	0x20002140
 800d1c8:	20002144 	.word	0x20002144

0800d1cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d1d0:	f000 f960 	bl	800d494 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d1d4:	4b12      	ldr	r3, [pc, #72]	; (800d220 <prvCheckForValidListAndQueue+0x54>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d11d      	bne.n	800d218 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800d1dc:	4811      	ldr	r0, [pc, #68]	; (800d224 <prvCheckForValidListAndQueue+0x58>)
 800d1de:	f7fe f969 	bl	800b4b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d1e2:	4811      	ldr	r0, [pc, #68]	; (800d228 <prvCheckForValidListAndQueue+0x5c>)
 800d1e4:	f7fe f966 	bl	800b4b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d1e8:	4b10      	ldr	r3, [pc, #64]	; (800d22c <prvCheckForValidListAndQueue+0x60>)
 800d1ea:	4a0e      	ldr	r2, [pc, #56]	; (800d224 <prvCheckForValidListAndQueue+0x58>)
 800d1ec:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d1ee:	4b10      	ldr	r3, [pc, #64]	; (800d230 <prvCheckForValidListAndQueue+0x64>)
 800d1f0:	4a0d      	ldr	r2, [pc, #52]	; (800d228 <prvCheckForValidListAndQueue+0x5c>)
 800d1f2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	210c      	movs	r1, #12
 800d1f8:	200a      	movs	r0, #10
 800d1fa:	f7fe fa77 	bl	800b6ec <xQueueGenericCreate>
 800d1fe:	4603      	mov	r3, r0
 800d200:	4a07      	ldr	r2, [pc, #28]	; (800d220 <prvCheckForValidListAndQueue+0x54>)
 800d202:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d204:	4b06      	ldr	r3, [pc, #24]	; (800d220 <prvCheckForValidListAndQueue+0x54>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d005      	beq.n	800d218 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d20c:	4b04      	ldr	r3, [pc, #16]	; (800d220 <prvCheckForValidListAndQueue+0x54>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4908      	ldr	r1, [pc, #32]	; (800d234 <prvCheckForValidListAndQueue+0x68>)
 800d212:	4618      	mov	r0, r3
 800d214:	f7fe fe50 	bl	800beb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d218:	f000 f96c 	bl	800d4f4 <vPortExitCritical>
}
 800d21c:	bf00      	nop
 800d21e:	bd80      	pop	{r7, pc}
 800d220:	20002148 	.word	0x20002148
 800d224:	20002118 	.word	0x20002118
 800d228:	2000212c 	.word	0x2000212c
 800d22c:	20002140 	.word	0x20002140
 800d230:	20002144 	.word	0x20002144
 800d234:	0800e740 	.word	0x0800e740

0800d238 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d238:	b480      	push	{r7}
 800d23a:	b085      	sub	sp, #20
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	60f8      	str	r0, [r7, #12]
 800d240:	60b9      	str	r1, [r7, #8]
 800d242:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	3b04      	subs	r3, #4
 800d248:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d250:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	3b04      	subs	r3, #4
 800d256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	f023 0201 	bic.w	r2, r3, #1
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	3b04      	subs	r3, #4
 800d266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d268:	4a0c      	ldr	r2, [pc, #48]	; (800d29c <pxPortInitialiseStack+0x64>)
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	3b14      	subs	r3, #20
 800d272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d274:	687a      	ldr	r2, [r7, #4]
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	3b04      	subs	r3, #4
 800d27e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	f06f 0202 	mvn.w	r2, #2
 800d286:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	3b20      	subs	r3, #32
 800d28c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d28e:	68fb      	ldr	r3, [r7, #12]
}
 800d290:	4618      	mov	r0, r3
 800d292:	3714      	adds	r7, #20
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr
 800d29c:	0800d2a1 	.word	0x0800d2a1

0800d2a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b085      	sub	sp, #20
 800d2a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d2aa:	4b12      	ldr	r3, [pc, #72]	; (800d2f4 <prvTaskExitError+0x54>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d2b2:	d00a      	beq.n	800d2ca <prvTaskExitError+0x2a>
	__asm volatile
 800d2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b8:	f383 8811 	msr	BASEPRI, r3
 800d2bc:	f3bf 8f6f 	isb	sy
 800d2c0:	f3bf 8f4f 	dsb	sy
 800d2c4:	60fb      	str	r3, [r7, #12]
}
 800d2c6:	bf00      	nop
 800d2c8:	e7fe      	b.n	800d2c8 <prvTaskExitError+0x28>
	__asm volatile
 800d2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ce:	f383 8811 	msr	BASEPRI, r3
 800d2d2:	f3bf 8f6f 	isb	sy
 800d2d6:	f3bf 8f4f 	dsb	sy
 800d2da:	60bb      	str	r3, [r7, #8]
}
 800d2dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d2de:	bf00      	nop
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d0fc      	beq.n	800d2e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d2e6:	bf00      	nop
 800d2e8:	bf00      	nop
 800d2ea:	3714      	adds	r7, #20
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr
 800d2f4:	2000007c 	.word	0x2000007c
	...

0800d300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d300:	4b07      	ldr	r3, [pc, #28]	; (800d320 <pxCurrentTCBConst2>)
 800d302:	6819      	ldr	r1, [r3, #0]
 800d304:	6808      	ldr	r0, [r1, #0]
 800d306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d30a:	f380 8809 	msr	PSP, r0
 800d30e:	f3bf 8f6f 	isb	sy
 800d312:	f04f 0000 	mov.w	r0, #0
 800d316:	f380 8811 	msr	BASEPRI, r0
 800d31a:	4770      	bx	lr
 800d31c:	f3af 8000 	nop.w

0800d320 <pxCurrentTCBConst2>:
 800d320:	20001f38 	.word	0x20001f38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d324:	bf00      	nop
 800d326:	bf00      	nop

0800d328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d328:	4808      	ldr	r0, [pc, #32]	; (800d34c <prvPortStartFirstTask+0x24>)
 800d32a:	6800      	ldr	r0, [r0, #0]
 800d32c:	6800      	ldr	r0, [r0, #0]
 800d32e:	f380 8808 	msr	MSP, r0
 800d332:	f04f 0000 	mov.w	r0, #0
 800d336:	f380 8814 	msr	CONTROL, r0
 800d33a:	b662      	cpsie	i
 800d33c:	b661      	cpsie	f
 800d33e:	f3bf 8f4f 	dsb	sy
 800d342:	f3bf 8f6f 	isb	sy
 800d346:	df00      	svc	0
 800d348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d34a:	bf00      	nop
 800d34c:	e000ed08 	.word	0xe000ed08

0800d350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b086      	sub	sp, #24
 800d354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d356:	4b46      	ldr	r3, [pc, #280]	; (800d470 <xPortStartScheduler+0x120>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	4a46      	ldr	r2, [pc, #280]	; (800d474 <xPortStartScheduler+0x124>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d10a      	bne.n	800d376 <xPortStartScheduler+0x26>
	__asm volatile
 800d360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d364:	f383 8811 	msr	BASEPRI, r3
 800d368:	f3bf 8f6f 	isb	sy
 800d36c:	f3bf 8f4f 	dsb	sy
 800d370:	613b      	str	r3, [r7, #16]
}
 800d372:	bf00      	nop
 800d374:	e7fe      	b.n	800d374 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d376:	4b3e      	ldr	r3, [pc, #248]	; (800d470 <xPortStartScheduler+0x120>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	4a3f      	ldr	r2, [pc, #252]	; (800d478 <xPortStartScheduler+0x128>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d10a      	bne.n	800d396 <xPortStartScheduler+0x46>
	__asm volatile
 800d380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d384:	f383 8811 	msr	BASEPRI, r3
 800d388:	f3bf 8f6f 	isb	sy
 800d38c:	f3bf 8f4f 	dsb	sy
 800d390:	60fb      	str	r3, [r7, #12]
}
 800d392:	bf00      	nop
 800d394:	e7fe      	b.n	800d394 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d396:	4b39      	ldr	r3, [pc, #228]	; (800d47c <xPortStartScheduler+0x12c>)
 800d398:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	b2db      	uxtb	r3, r3
 800d3a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	22ff      	movs	r2, #255	; 0xff
 800d3a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	781b      	ldrb	r3, [r3, #0]
 800d3ac:	b2db      	uxtb	r3, r3
 800d3ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d3b0:	78fb      	ldrb	r3, [r7, #3]
 800d3b2:	b2db      	uxtb	r3, r3
 800d3b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d3b8:	b2da      	uxtb	r2, r3
 800d3ba:	4b31      	ldr	r3, [pc, #196]	; (800d480 <xPortStartScheduler+0x130>)
 800d3bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d3be:	4b31      	ldr	r3, [pc, #196]	; (800d484 <xPortStartScheduler+0x134>)
 800d3c0:	2207      	movs	r2, #7
 800d3c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d3c4:	e009      	b.n	800d3da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d3c6:	4b2f      	ldr	r3, [pc, #188]	; (800d484 <xPortStartScheduler+0x134>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	3b01      	subs	r3, #1
 800d3cc:	4a2d      	ldr	r2, [pc, #180]	; (800d484 <xPortStartScheduler+0x134>)
 800d3ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d3d0:	78fb      	ldrb	r3, [r7, #3]
 800d3d2:	b2db      	uxtb	r3, r3
 800d3d4:	005b      	lsls	r3, r3, #1
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d3da:	78fb      	ldrb	r3, [r7, #3]
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3e2:	2b80      	cmp	r3, #128	; 0x80
 800d3e4:	d0ef      	beq.n	800d3c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d3e6:	4b27      	ldr	r3, [pc, #156]	; (800d484 <xPortStartScheduler+0x134>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f1c3 0307 	rsb	r3, r3, #7
 800d3ee:	2b04      	cmp	r3, #4
 800d3f0:	d00a      	beq.n	800d408 <xPortStartScheduler+0xb8>
	__asm volatile
 800d3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f6:	f383 8811 	msr	BASEPRI, r3
 800d3fa:	f3bf 8f6f 	isb	sy
 800d3fe:	f3bf 8f4f 	dsb	sy
 800d402:	60bb      	str	r3, [r7, #8]
}
 800d404:	bf00      	nop
 800d406:	e7fe      	b.n	800d406 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d408:	4b1e      	ldr	r3, [pc, #120]	; (800d484 <xPortStartScheduler+0x134>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	021b      	lsls	r3, r3, #8
 800d40e:	4a1d      	ldr	r2, [pc, #116]	; (800d484 <xPortStartScheduler+0x134>)
 800d410:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d412:	4b1c      	ldr	r3, [pc, #112]	; (800d484 <xPortStartScheduler+0x134>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d41a:	4a1a      	ldr	r2, [pc, #104]	; (800d484 <xPortStartScheduler+0x134>)
 800d41c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	b2da      	uxtb	r2, r3
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d426:	4b18      	ldr	r3, [pc, #96]	; (800d488 <xPortStartScheduler+0x138>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	4a17      	ldr	r2, [pc, #92]	; (800d488 <xPortStartScheduler+0x138>)
 800d42c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d430:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d432:	4b15      	ldr	r3, [pc, #84]	; (800d488 <xPortStartScheduler+0x138>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	4a14      	ldr	r2, [pc, #80]	; (800d488 <xPortStartScheduler+0x138>)
 800d438:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d43c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d43e:	f000 f8dd 	bl	800d5fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d442:	4b12      	ldr	r3, [pc, #72]	; (800d48c <xPortStartScheduler+0x13c>)
 800d444:	2200      	movs	r2, #0
 800d446:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d448:	f000 f8fc 	bl	800d644 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d44c:	4b10      	ldr	r3, [pc, #64]	; (800d490 <xPortStartScheduler+0x140>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4a0f      	ldr	r2, [pc, #60]	; (800d490 <xPortStartScheduler+0x140>)
 800d452:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d456:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d458:	f7ff ff66 	bl	800d328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d45c:	f7ff f888 	bl	800c570 <vTaskSwitchContext>
	prvTaskExitError();
 800d460:	f7ff ff1e 	bl	800d2a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d464:	2300      	movs	r3, #0
}
 800d466:	4618      	mov	r0, r3
 800d468:	3718      	adds	r7, #24
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop
 800d470:	e000ed00 	.word	0xe000ed00
 800d474:	410fc271 	.word	0x410fc271
 800d478:	410fc270 	.word	0x410fc270
 800d47c:	e000e400 	.word	0xe000e400
 800d480:	20002154 	.word	0x20002154
 800d484:	20002158 	.word	0x20002158
 800d488:	e000ed20 	.word	0xe000ed20
 800d48c:	2000007c 	.word	0x2000007c
 800d490:	e000ef34 	.word	0xe000ef34

0800d494 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d494:	b480      	push	{r7}
 800d496:	b083      	sub	sp, #12
 800d498:	af00      	add	r7, sp, #0
	__asm volatile
 800d49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d49e:	f383 8811 	msr	BASEPRI, r3
 800d4a2:	f3bf 8f6f 	isb	sy
 800d4a6:	f3bf 8f4f 	dsb	sy
 800d4aa:	607b      	str	r3, [r7, #4]
}
 800d4ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d4ae:	4b0f      	ldr	r3, [pc, #60]	; (800d4ec <vPortEnterCritical+0x58>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	3301      	adds	r3, #1
 800d4b4:	4a0d      	ldr	r2, [pc, #52]	; (800d4ec <vPortEnterCritical+0x58>)
 800d4b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d4b8:	4b0c      	ldr	r3, [pc, #48]	; (800d4ec <vPortEnterCritical+0x58>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	d10f      	bne.n	800d4e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d4c0:	4b0b      	ldr	r3, [pc, #44]	; (800d4f0 <vPortEnterCritical+0x5c>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	b2db      	uxtb	r3, r3
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d00a      	beq.n	800d4e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ce:	f383 8811 	msr	BASEPRI, r3
 800d4d2:	f3bf 8f6f 	isb	sy
 800d4d6:	f3bf 8f4f 	dsb	sy
 800d4da:	603b      	str	r3, [r7, #0]
}
 800d4dc:	bf00      	nop
 800d4de:	e7fe      	b.n	800d4de <vPortEnterCritical+0x4a>
	}
}
 800d4e0:	bf00      	nop
 800d4e2:	370c      	adds	r7, #12
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr
 800d4ec:	2000007c 	.word	0x2000007c
 800d4f0:	e000ed04 	.word	0xe000ed04

0800d4f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b083      	sub	sp, #12
 800d4f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d4fa:	4b12      	ldr	r3, [pc, #72]	; (800d544 <vPortExitCritical+0x50>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d10a      	bne.n	800d518 <vPortExitCritical+0x24>
	__asm volatile
 800d502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d506:	f383 8811 	msr	BASEPRI, r3
 800d50a:	f3bf 8f6f 	isb	sy
 800d50e:	f3bf 8f4f 	dsb	sy
 800d512:	607b      	str	r3, [r7, #4]
}
 800d514:	bf00      	nop
 800d516:	e7fe      	b.n	800d516 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d518:	4b0a      	ldr	r3, [pc, #40]	; (800d544 <vPortExitCritical+0x50>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	3b01      	subs	r3, #1
 800d51e:	4a09      	ldr	r2, [pc, #36]	; (800d544 <vPortExitCritical+0x50>)
 800d520:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d522:	4b08      	ldr	r3, [pc, #32]	; (800d544 <vPortExitCritical+0x50>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d105      	bne.n	800d536 <vPortExitCritical+0x42>
 800d52a:	2300      	movs	r3, #0
 800d52c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	f383 8811 	msr	BASEPRI, r3
}
 800d534:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d536:	bf00      	nop
 800d538:	370c      	adds	r7, #12
 800d53a:	46bd      	mov	sp, r7
 800d53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d540:	4770      	bx	lr
 800d542:	bf00      	nop
 800d544:	2000007c 	.word	0x2000007c
	...

0800d550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d550:	f3ef 8009 	mrs	r0, PSP
 800d554:	f3bf 8f6f 	isb	sy
 800d558:	4b15      	ldr	r3, [pc, #84]	; (800d5b0 <pxCurrentTCBConst>)
 800d55a:	681a      	ldr	r2, [r3, #0]
 800d55c:	f01e 0f10 	tst.w	lr, #16
 800d560:	bf08      	it	eq
 800d562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d56a:	6010      	str	r0, [r2, #0]
 800d56c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d570:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d574:	f380 8811 	msr	BASEPRI, r0
 800d578:	f3bf 8f4f 	dsb	sy
 800d57c:	f3bf 8f6f 	isb	sy
 800d580:	f7fe fff6 	bl	800c570 <vTaskSwitchContext>
 800d584:	f04f 0000 	mov.w	r0, #0
 800d588:	f380 8811 	msr	BASEPRI, r0
 800d58c:	bc09      	pop	{r0, r3}
 800d58e:	6819      	ldr	r1, [r3, #0]
 800d590:	6808      	ldr	r0, [r1, #0]
 800d592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d596:	f01e 0f10 	tst.w	lr, #16
 800d59a:	bf08      	it	eq
 800d59c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d5a0:	f380 8809 	msr	PSP, r0
 800d5a4:	f3bf 8f6f 	isb	sy
 800d5a8:	4770      	bx	lr
 800d5aa:	bf00      	nop
 800d5ac:	f3af 8000 	nop.w

0800d5b0 <pxCurrentTCBConst>:
 800d5b0:	20001f38 	.word	0x20001f38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d5b4:	bf00      	nop
 800d5b6:	bf00      	nop

0800d5b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b082      	sub	sp, #8
 800d5bc:	af00      	add	r7, sp, #0
	__asm volatile
 800d5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c2:	f383 8811 	msr	BASEPRI, r3
 800d5c6:	f3bf 8f6f 	isb	sy
 800d5ca:	f3bf 8f4f 	dsb	sy
 800d5ce:	607b      	str	r3, [r7, #4]
}
 800d5d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d5d2:	f7fe ff15 	bl	800c400 <xTaskIncrementTick>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d003      	beq.n	800d5e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d5dc:	4b06      	ldr	r3, [pc, #24]	; (800d5f8 <SysTick_Handler+0x40>)
 800d5de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5e2:	601a      	str	r2, [r3, #0]
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	f383 8811 	msr	BASEPRI, r3
}
 800d5ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d5f0:	bf00      	nop
 800d5f2:	3708      	adds	r7, #8
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}
 800d5f8:	e000ed04 	.word	0xe000ed04

0800d5fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d600:	4b0b      	ldr	r3, [pc, #44]	; (800d630 <vPortSetupTimerInterrupt+0x34>)
 800d602:	2200      	movs	r2, #0
 800d604:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d606:	4b0b      	ldr	r3, [pc, #44]	; (800d634 <vPortSetupTimerInterrupt+0x38>)
 800d608:	2200      	movs	r2, #0
 800d60a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d60c:	4b0a      	ldr	r3, [pc, #40]	; (800d638 <vPortSetupTimerInterrupt+0x3c>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	4a0a      	ldr	r2, [pc, #40]	; (800d63c <vPortSetupTimerInterrupt+0x40>)
 800d612:	fba2 2303 	umull	r2, r3, r2, r3
 800d616:	099b      	lsrs	r3, r3, #6
 800d618:	4a09      	ldr	r2, [pc, #36]	; (800d640 <vPortSetupTimerInterrupt+0x44>)
 800d61a:	3b01      	subs	r3, #1
 800d61c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d61e:	4b04      	ldr	r3, [pc, #16]	; (800d630 <vPortSetupTimerInterrupt+0x34>)
 800d620:	2207      	movs	r2, #7
 800d622:	601a      	str	r2, [r3, #0]
}
 800d624:	bf00      	nop
 800d626:	46bd      	mov	sp, r7
 800d628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62c:	4770      	bx	lr
 800d62e:	bf00      	nop
 800d630:	e000e010 	.word	0xe000e010
 800d634:	e000e018 	.word	0xe000e018
 800d638:	20000054 	.word	0x20000054
 800d63c:	10624dd3 	.word	0x10624dd3
 800d640:	e000e014 	.word	0xe000e014

0800d644 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d644:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d654 <vPortEnableVFP+0x10>
 800d648:	6801      	ldr	r1, [r0, #0]
 800d64a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d64e:	6001      	str	r1, [r0, #0]
 800d650:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d652:	bf00      	nop
 800d654:	e000ed88 	.word	0xe000ed88

0800d658 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d658:	b480      	push	{r7}
 800d65a:	b085      	sub	sp, #20
 800d65c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d65e:	f3ef 8305 	mrs	r3, IPSR
 800d662:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2b0f      	cmp	r3, #15
 800d668:	d914      	bls.n	800d694 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d66a:	4a17      	ldr	r2, [pc, #92]	; (800d6c8 <vPortValidateInterruptPriority+0x70>)
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	4413      	add	r3, r2
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d674:	4b15      	ldr	r3, [pc, #84]	; (800d6cc <vPortValidateInterruptPriority+0x74>)
 800d676:	781b      	ldrb	r3, [r3, #0]
 800d678:	7afa      	ldrb	r2, [r7, #11]
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d20a      	bcs.n	800d694 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d682:	f383 8811 	msr	BASEPRI, r3
 800d686:	f3bf 8f6f 	isb	sy
 800d68a:	f3bf 8f4f 	dsb	sy
 800d68e:	607b      	str	r3, [r7, #4]
}
 800d690:	bf00      	nop
 800d692:	e7fe      	b.n	800d692 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d694:	4b0e      	ldr	r3, [pc, #56]	; (800d6d0 <vPortValidateInterruptPriority+0x78>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d69c:	4b0d      	ldr	r3, [pc, #52]	; (800d6d4 <vPortValidateInterruptPriority+0x7c>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d90a      	bls.n	800d6ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a8:	f383 8811 	msr	BASEPRI, r3
 800d6ac:	f3bf 8f6f 	isb	sy
 800d6b0:	f3bf 8f4f 	dsb	sy
 800d6b4:	603b      	str	r3, [r7, #0]
}
 800d6b6:	bf00      	nop
 800d6b8:	e7fe      	b.n	800d6b8 <vPortValidateInterruptPriority+0x60>
	}
 800d6ba:	bf00      	nop
 800d6bc:	3714      	adds	r7, #20
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c4:	4770      	bx	lr
 800d6c6:	bf00      	nop
 800d6c8:	e000e3f0 	.word	0xe000e3f0
 800d6cc:	20002154 	.word	0x20002154
 800d6d0:	e000ed0c 	.word	0xe000ed0c
 800d6d4:	20002158 	.word	0x20002158

0800d6d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b08a      	sub	sp, #40	; 0x28
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d6e4:	f7fe fdd2 	bl	800c28c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d6e8:	4b58      	ldr	r3, [pc, #352]	; (800d84c <pvPortMalloc+0x174>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d101      	bne.n	800d6f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d6f0:	f000 f910 	bl	800d914 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d6f4:	4b56      	ldr	r3, [pc, #344]	; (800d850 <pvPortMalloc+0x178>)
 800d6f6:	681a      	ldr	r2, [r3, #0]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	4013      	ands	r3, r2
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	f040 808e 	bne.w	800d81e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d01d      	beq.n	800d744 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d708:	2208      	movs	r2, #8
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	4413      	add	r3, r2
 800d70e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f003 0307 	and.w	r3, r3, #7
 800d716:	2b00      	cmp	r3, #0
 800d718:	d014      	beq.n	800d744 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f023 0307 	bic.w	r3, r3, #7
 800d720:	3308      	adds	r3, #8
 800d722:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f003 0307 	and.w	r3, r3, #7
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d00a      	beq.n	800d744 <pvPortMalloc+0x6c>
	__asm volatile
 800d72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d732:	f383 8811 	msr	BASEPRI, r3
 800d736:	f3bf 8f6f 	isb	sy
 800d73a:	f3bf 8f4f 	dsb	sy
 800d73e:	617b      	str	r3, [r7, #20]
}
 800d740:	bf00      	nop
 800d742:	e7fe      	b.n	800d742 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d069      	beq.n	800d81e <pvPortMalloc+0x146>
 800d74a:	4b42      	ldr	r3, [pc, #264]	; (800d854 <pvPortMalloc+0x17c>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	687a      	ldr	r2, [r7, #4]
 800d750:	429a      	cmp	r2, r3
 800d752:	d864      	bhi.n	800d81e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d754:	4b40      	ldr	r3, [pc, #256]	; (800d858 <pvPortMalloc+0x180>)
 800d756:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d758:	4b3f      	ldr	r3, [pc, #252]	; (800d858 <pvPortMalloc+0x180>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d75e:	e004      	b.n	800d76a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d762:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76c:	685b      	ldr	r3, [r3, #4]
 800d76e:	687a      	ldr	r2, [r7, #4]
 800d770:	429a      	cmp	r2, r3
 800d772:	d903      	bls.n	800d77c <pvPortMalloc+0xa4>
 800d774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d1f1      	bne.n	800d760 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d77c:	4b33      	ldr	r3, [pc, #204]	; (800d84c <pvPortMalloc+0x174>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d782:	429a      	cmp	r2, r3
 800d784:	d04b      	beq.n	800d81e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d786:	6a3b      	ldr	r3, [r7, #32]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	2208      	movs	r2, #8
 800d78c:	4413      	add	r3, r2
 800d78e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d792:	681a      	ldr	r2, [r3, #0]
 800d794:	6a3b      	ldr	r3, [r7, #32]
 800d796:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79a:	685a      	ldr	r2, [r3, #4]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	1ad2      	subs	r2, r2, r3
 800d7a0:	2308      	movs	r3, #8
 800d7a2:	005b      	lsls	r3, r3, #1
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d91f      	bls.n	800d7e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d7a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	4413      	add	r3, r2
 800d7ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7b0:	69bb      	ldr	r3, [r7, #24]
 800d7b2:	f003 0307 	and.w	r3, r3, #7
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d00a      	beq.n	800d7d0 <pvPortMalloc+0xf8>
	__asm volatile
 800d7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7be:	f383 8811 	msr	BASEPRI, r3
 800d7c2:	f3bf 8f6f 	isb	sy
 800d7c6:	f3bf 8f4f 	dsb	sy
 800d7ca:	613b      	str	r3, [r7, #16]
}
 800d7cc:	bf00      	nop
 800d7ce:	e7fe      	b.n	800d7ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d2:	685a      	ldr	r2, [r3, #4]
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	1ad2      	subs	r2, r2, r3
 800d7d8:	69bb      	ldr	r3, [r7, #24]
 800d7da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7de:	687a      	ldr	r2, [r7, #4]
 800d7e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d7e2:	69b8      	ldr	r0, [r7, #24]
 800d7e4:	f000 f8f8 	bl	800d9d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d7e8:	4b1a      	ldr	r3, [pc, #104]	; (800d854 <pvPortMalloc+0x17c>)
 800d7ea:	681a      	ldr	r2, [r3, #0]
 800d7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ee:	685b      	ldr	r3, [r3, #4]
 800d7f0:	1ad3      	subs	r3, r2, r3
 800d7f2:	4a18      	ldr	r2, [pc, #96]	; (800d854 <pvPortMalloc+0x17c>)
 800d7f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d7f6:	4b17      	ldr	r3, [pc, #92]	; (800d854 <pvPortMalloc+0x17c>)
 800d7f8:	681a      	ldr	r2, [r3, #0]
 800d7fa:	4b18      	ldr	r3, [pc, #96]	; (800d85c <pvPortMalloc+0x184>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d203      	bcs.n	800d80a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d802:	4b14      	ldr	r3, [pc, #80]	; (800d854 <pvPortMalloc+0x17c>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	4a15      	ldr	r2, [pc, #84]	; (800d85c <pvPortMalloc+0x184>)
 800d808:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d80c:	685a      	ldr	r2, [r3, #4]
 800d80e:	4b10      	ldr	r3, [pc, #64]	; (800d850 <pvPortMalloc+0x178>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	431a      	orrs	r2, r3
 800d814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d816:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d81a:	2200      	movs	r2, #0
 800d81c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d81e:	f7fe fd43 	bl	800c2a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d822:	69fb      	ldr	r3, [r7, #28]
 800d824:	f003 0307 	and.w	r3, r3, #7
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d00a      	beq.n	800d842 <pvPortMalloc+0x16a>
	__asm volatile
 800d82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d830:	f383 8811 	msr	BASEPRI, r3
 800d834:	f3bf 8f6f 	isb	sy
 800d838:	f3bf 8f4f 	dsb	sy
 800d83c:	60fb      	str	r3, [r7, #12]
}
 800d83e:	bf00      	nop
 800d840:	e7fe      	b.n	800d840 <pvPortMalloc+0x168>
	return pvReturn;
 800d842:	69fb      	ldr	r3, [r7, #28]
}
 800d844:	4618      	mov	r0, r3
 800d846:	3728      	adds	r7, #40	; 0x28
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}
 800d84c:	20014d64 	.word	0x20014d64
 800d850:	20014d70 	.word	0x20014d70
 800d854:	20014d68 	.word	0x20014d68
 800d858:	20014d5c 	.word	0x20014d5c
 800d85c:	20014d6c 	.word	0x20014d6c

0800d860 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b086      	sub	sp, #24
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d048      	beq.n	800d904 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d872:	2308      	movs	r3, #8
 800d874:	425b      	negs	r3, r3
 800d876:	697a      	ldr	r2, [r7, #20]
 800d878:	4413      	add	r3, r2
 800d87a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	685a      	ldr	r2, [r3, #4]
 800d884:	4b21      	ldr	r3, [pc, #132]	; (800d90c <vPortFree+0xac>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	4013      	ands	r3, r2
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d10a      	bne.n	800d8a4 <vPortFree+0x44>
	__asm volatile
 800d88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d892:	f383 8811 	msr	BASEPRI, r3
 800d896:	f3bf 8f6f 	isb	sy
 800d89a:	f3bf 8f4f 	dsb	sy
 800d89e:	60fb      	str	r3, [r7, #12]
}
 800d8a0:	bf00      	nop
 800d8a2:	e7fe      	b.n	800d8a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d8a4:	693b      	ldr	r3, [r7, #16]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d00a      	beq.n	800d8c2 <vPortFree+0x62>
	__asm volatile
 800d8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b0:	f383 8811 	msr	BASEPRI, r3
 800d8b4:	f3bf 8f6f 	isb	sy
 800d8b8:	f3bf 8f4f 	dsb	sy
 800d8bc:	60bb      	str	r3, [r7, #8]
}
 800d8be:	bf00      	nop
 800d8c0:	e7fe      	b.n	800d8c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	685a      	ldr	r2, [r3, #4]
 800d8c6:	4b11      	ldr	r3, [pc, #68]	; (800d90c <vPortFree+0xac>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	4013      	ands	r3, r2
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d019      	beq.n	800d904 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d115      	bne.n	800d904 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	685a      	ldr	r2, [r3, #4]
 800d8dc:	4b0b      	ldr	r3, [pc, #44]	; (800d90c <vPortFree+0xac>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	43db      	mvns	r3, r3
 800d8e2:	401a      	ands	r2, r3
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d8e8:	f7fe fcd0 	bl	800c28c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	685a      	ldr	r2, [r3, #4]
 800d8f0:	4b07      	ldr	r3, [pc, #28]	; (800d910 <vPortFree+0xb0>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4413      	add	r3, r2
 800d8f6:	4a06      	ldr	r2, [pc, #24]	; (800d910 <vPortFree+0xb0>)
 800d8f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d8fa:	6938      	ldr	r0, [r7, #16]
 800d8fc:	f000 f86c 	bl	800d9d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d900:	f7fe fcd2 	bl	800c2a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d904:	bf00      	nop
 800d906:	3718      	adds	r7, #24
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}
 800d90c:	20014d70 	.word	0x20014d70
 800d910:	20014d68 	.word	0x20014d68

0800d914 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d914:	b480      	push	{r7}
 800d916:	b085      	sub	sp, #20
 800d918:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d91a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800d91e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d920:	4b27      	ldr	r3, [pc, #156]	; (800d9c0 <prvHeapInit+0xac>)
 800d922:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f003 0307 	and.w	r3, r3, #7
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d00c      	beq.n	800d948 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	3307      	adds	r3, #7
 800d932:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f023 0307 	bic.w	r3, r3, #7
 800d93a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d93c:	68ba      	ldr	r2, [r7, #8]
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	1ad3      	subs	r3, r2, r3
 800d942:	4a1f      	ldr	r2, [pc, #124]	; (800d9c0 <prvHeapInit+0xac>)
 800d944:	4413      	add	r3, r2
 800d946:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d94c:	4a1d      	ldr	r2, [pc, #116]	; (800d9c4 <prvHeapInit+0xb0>)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d952:	4b1c      	ldr	r3, [pc, #112]	; (800d9c4 <prvHeapInit+0xb0>)
 800d954:	2200      	movs	r2, #0
 800d956:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	68ba      	ldr	r2, [r7, #8]
 800d95c:	4413      	add	r3, r2
 800d95e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d960:	2208      	movs	r2, #8
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	1a9b      	subs	r3, r3, r2
 800d966:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f023 0307 	bic.w	r3, r3, #7
 800d96e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	4a15      	ldr	r2, [pc, #84]	; (800d9c8 <prvHeapInit+0xb4>)
 800d974:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d976:	4b14      	ldr	r3, [pc, #80]	; (800d9c8 <prvHeapInit+0xb4>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	2200      	movs	r2, #0
 800d97c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d97e:	4b12      	ldr	r3, [pc, #72]	; (800d9c8 <prvHeapInit+0xb4>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	2200      	movs	r2, #0
 800d984:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	68fa      	ldr	r2, [r7, #12]
 800d98e:	1ad2      	subs	r2, r2, r3
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d994:	4b0c      	ldr	r3, [pc, #48]	; (800d9c8 <prvHeapInit+0xb4>)
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	685b      	ldr	r3, [r3, #4]
 800d9a0:	4a0a      	ldr	r2, [pc, #40]	; (800d9cc <prvHeapInit+0xb8>)
 800d9a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	4a09      	ldr	r2, [pc, #36]	; (800d9d0 <prvHeapInit+0xbc>)
 800d9aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d9ac:	4b09      	ldr	r3, [pc, #36]	; (800d9d4 <prvHeapInit+0xc0>)
 800d9ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d9b2:	601a      	str	r2, [r3, #0]
}
 800d9b4:	bf00      	nop
 800d9b6:	3714      	adds	r7, #20
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9be:	4770      	bx	lr
 800d9c0:	2000215c 	.word	0x2000215c
 800d9c4:	20014d5c 	.word	0x20014d5c
 800d9c8:	20014d64 	.word	0x20014d64
 800d9cc:	20014d6c 	.word	0x20014d6c
 800d9d0:	20014d68 	.word	0x20014d68
 800d9d4:	20014d70 	.word	0x20014d70

0800d9d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b085      	sub	sp, #20
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d9e0:	4b28      	ldr	r3, [pc, #160]	; (800da84 <prvInsertBlockIntoFreeList+0xac>)
 800d9e2:	60fb      	str	r3, [r7, #12]
 800d9e4:	e002      	b.n	800d9ec <prvInsertBlockIntoFreeList+0x14>
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	60fb      	str	r3, [r7, #12]
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	687a      	ldr	r2, [r7, #4]
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d8f7      	bhi.n	800d9e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	685b      	ldr	r3, [r3, #4]
 800d9fe:	68ba      	ldr	r2, [r7, #8]
 800da00:	4413      	add	r3, r2
 800da02:	687a      	ldr	r2, [r7, #4]
 800da04:	429a      	cmp	r2, r3
 800da06:	d108      	bne.n	800da1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	685a      	ldr	r2, [r3, #4]
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	685b      	ldr	r3, [r3, #4]
 800da10:	441a      	add	r2, r3
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	685b      	ldr	r3, [r3, #4]
 800da22:	68ba      	ldr	r2, [r7, #8]
 800da24:	441a      	add	r2, r3
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d118      	bne.n	800da60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	681a      	ldr	r2, [r3, #0]
 800da32:	4b15      	ldr	r3, [pc, #84]	; (800da88 <prvInsertBlockIntoFreeList+0xb0>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	429a      	cmp	r2, r3
 800da38:	d00d      	beq.n	800da56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	685a      	ldr	r2, [r3, #4]
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	685b      	ldr	r3, [r3, #4]
 800da44:	441a      	add	r2, r3
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	681a      	ldr	r2, [r3, #0]
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	601a      	str	r2, [r3, #0]
 800da54:	e008      	b.n	800da68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800da56:	4b0c      	ldr	r3, [pc, #48]	; (800da88 <prvInsertBlockIntoFreeList+0xb0>)
 800da58:	681a      	ldr	r2, [r3, #0]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	601a      	str	r2, [r3, #0]
 800da5e:	e003      	b.n	800da68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	681a      	ldr	r2, [r3, #0]
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800da68:	68fa      	ldr	r2, [r7, #12]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d002      	beq.n	800da76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da76:	bf00      	nop
 800da78:	3714      	adds	r7, #20
 800da7a:	46bd      	mov	sp, r7
 800da7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da80:	4770      	bx	lr
 800da82:	bf00      	nop
 800da84:	20014d5c 	.word	0x20014d5c
 800da88:	20014d64 	.word	0x20014d64

0800da8c <__errno>:
 800da8c:	4b01      	ldr	r3, [pc, #4]	; (800da94 <__errno+0x8>)
 800da8e:	6818      	ldr	r0, [r3, #0]
 800da90:	4770      	bx	lr
 800da92:	bf00      	nop
 800da94:	20000080 	.word	0x20000080

0800da98 <__libc_init_array>:
 800da98:	b570      	push	{r4, r5, r6, lr}
 800da9a:	4d0d      	ldr	r5, [pc, #52]	; (800dad0 <__libc_init_array+0x38>)
 800da9c:	4c0d      	ldr	r4, [pc, #52]	; (800dad4 <__libc_init_array+0x3c>)
 800da9e:	1b64      	subs	r4, r4, r5
 800daa0:	10a4      	asrs	r4, r4, #2
 800daa2:	2600      	movs	r6, #0
 800daa4:	42a6      	cmp	r6, r4
 800daa6:	d109      	bne.n	800dabc <__libc_init_array+0x24>
 800daa8:	4d0b      	ldr	r5, [pc, #44]	; (800dad8 <__libc_init_array+0x40>)
 800daaa:	4c0c      	ldr	r4, [pc, #48]	; (800dadc <__libc_init_array+0x44>)
 800daac:	f000 fcb6 	bl	800e41c <_init>
 800dab0:	1b64      	subs	r4, r4, r5
 800dab2:	10a4      	asrs	r4, r4, #2
 800dab4:	2600      	movs	r6, #0
 800dab6:	42a6      	cmp	r6, r4
 800dab8:	d105      	bne.n	800dac6 <__libc_init_array+0x2e>
 800daba:	bd70      	pop	{r4, r5, r6, pc}
 800dabc:	f855 3b04 	ldr.w	r3, [r5], #4
 800dac0:	4798      	blx	r3
 800dac2:	3601      	adds	r6, #1
 800dac4:	e7ee      	b.n	800daa4 <__libc_init_array+0xc>
 800dac6:	f855 3b04 	ldr.w	r3, [r5], #4
 800daca:	4798      	blx	r3
 800dacc:	3601      	adds	r6, #1
 800dace:	e7f2      	b.n	800dab6 <__libc_init_array+0x1e>
 800dad0:	0800ea64 	.word	0x0800ea64
 800dad4:	0800ea64 	.word	0x0800ea64
 800dad8:	0800ea64 	.word	0x0800ea64
 800dadc:	0800ea68 	.word	0x0800ea68

0800dae0 <memcpy>:
 800dae0:	440a      	add	r2, r1
 800dae2:	4291      	cmp	r1, r2
 800dae4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800dae8:	d100      	bne.n	800daec <memcpy+0xc>
 800daea:	4770      	bx	lr
 800daec:	b510      	push	{r4, lr}
 800daee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800daf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800daf6:	4291      	cmp	r1, r2
 800daf8:	d1f9      	bne.n	800daee <memcpy+0xe>
 800dafa:	bd10      	pop	{r4, pc}

0800dafc <memset>:
 800dafc:	4402      	add	r2, r0
 800dafe:	4603      	mov	r3, r0
 800db00:	4293      	cmp	r3, r2
 800db02:	d100      	bne.n	800db06 <memset+0xa>
 800db04:	4770      	bx	lr
 800db06:	f803 1b01 	strb.w	r1, [r3], #1
 800db0a:	e7f9      	b.n	800db00 <memset+0x4>

0800db0c <siprintf>:
 800db0c:	b40e      	push	{r1, r2, r3}
 800db0e:	b500      	push	{lr}
 800db10:	b09c      	sub	sp, #112	; 0x70
 800db12:	ab1d      	add	r3, sp, #116	; 0x74
 800db14:	9002      	str	r0, [sp, #8]
 800db16:	9006      	str	r0, [sp, #24]
 800db18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800db1c:	4809      	ldr	r0, [pc, #36]	; (800db44 <siprintf+0x38>)
 800db1e:	9107      	str	r1, [sp, #28]
 800db20:	9104      	str	r1, [sp, #16]
 800db22:	4909      	ldr	r1, [pc, #36]	; (800db48 <siprintf+0x3c>)
 800db24:	f853 2b04 	ldr.w	r2, [r3], #4
 800db28:	9105      	str	r1, [sp, #20]
 800db2a:	6800      	ldr	r0, [r0, #0]
 800db2c:	9301      	str	r3, [sp, #4]
 800db2e:	a902      	add	r1, sp, #8
 800db30:	f000 f890 	bl	800dc54 <_svfiprintf_r>
 800db34:	9b02      	ldr	r3, [sp, #8]
 800db36:	2200      	movs	r2, #0
 800db38:	701a      	strb	r2, [r3, #0]
 800db3a:	b01c      	add	sp, #112	; 0x70
 800db3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800db40:	b003      	add	sp, #12
 800db42:	4770      	bx	lr
 800db44:	20000080 	.word	0x20000080
 800db48:	ffff0208 	.word	0xffff0208

0800db4c <strncpy>:
 800db4c:	b510      	push	{r4, lr}
 800db4e:	3901      	subs	r1, #1
 800db50:	4603      	mov	r3, r0
 800db52:	b132      	cbz	r2, 800db62 <strncpy+0x16>
 800db54:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800db58:	f803 4b01 	strb.w	r4, [r3], #1
 800db5c:	3a01      	subs	r2, #1
 800db5e:	2c00      	cmp	r4, #0
 800db60:	d1f7      	bne.n	800db52 <strncpy+0x6>
 800db62:	441a      	add	r2, r3
 800db64:	2100      	movs	r1, #0
 800db66:	4293      	cmp	r3, r2
 800db68:	d100      	bne.n	800db6c <strncpy+0x20>
 800db6a:	bd10      	pop	{r4, pc}
 800db6c:	f803 1b01 	strb.w	r1, [r3], #1
 800db70:	e7f9      	b.n	800db66 <strncpy+0x1a>

0800db72 <strstr>:
 800db72:	780a      	ldrb	r2, [r1, #0]
 800db74:	b570      	push	{r4, r5, r6, lr}
 800db76:	b96a      	cbnz	r2, 800db94 <strstr+0x22>
 800db78:	bd70      	pop	{r4, r5, r6, pc}
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d109      	bne.n	800db92 <strstr+0x20>
 800db7e:	460c      	mov	r4, r1
 800db80:	4605      	mov	r5, r0
 800db82:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800db86:	2b00      	cmp	r3, #0
 800db88:	d0f6      	beq.n	800db78 <strstr+0x6>
 800db8a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800db8e:	429e      	cmp	r6, r3
 800db90:	d0f7      	beq.n	800db82 <strstr+0x10>
 800db92:	3001      	adds	r0, #1
 800db94:	7803      	ldrb	r3, [r0, #0]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d1ef      	bne.n	800db7a <strstr+0x8>
 800db9a:	4618      	mov	r0, r3
 800db9c:	e7ec      	b.n	800db78 <strstr+0x6>

0800db9e <__ssputs_r>:
 800db9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dba2:	688e      	ldr	r6, [r1, #8]
 800dba4:	429e      	cmp	r6, r3
 800dba6:	4682      	mov	sl, r0
 800dba8:	460c      	mov	r4, r1
 800dbaa:	4690      	mov	r8, r2
 800dbac:	461f      	mov	r7, r3
 800dbae:	d838      	bhi.n	800dc22 <__ssputs_r+0x84>
 800dbb0:	898a      	ldrh	r2, [r1, #12]
 800dbb2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dbb6:	d032      	beq.n	800dc1e <__ssputs_r+0x80>
 800dbb8:	6825      	ldr	r5, [r4, #0]
 800dbba:	6909      	ldr	r1, [r1, #16]
 800dbbc:	eba5 0901 	sub.w	r9, r5, r1
 800dbc0:	6965      	ldr	r5, [r4, #20]
 800dbc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dbc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dbca:	3301      	adds	r3, #1
 800dbcc:	444b      	add	r3, r9
 800dbce:	106d      	asrs	r5, r5, #1
 800dbd0:	429d      	cmp	r5, r3
 800dbd2:	bf38      	it	cc
 800dbd4:	461d      	movcc	r5, r3
 800dbd6:	0553      	lsls	r3, r2, #21
 800dbd8:	d531      	bpl.n	800dc3e <__ssputs_r+0xa0>
 800dbda:	4629      	mov	r1, r5
 800dbdc:	f000 fb54 	bl	800e288 <_malloc_r>
 800dbe0:	4606      	mov	r6, r0
 800dbe2:	b950      	cbnz	r0, 800dbfa <__ssputs_r+0x5c>
 800dbe4:	230c      	movs	r3, #12
 800dbe6:	f8ca 3000 	str.w	r3, [sl]
 800dbea:	89a3      	ldrh	r3, [r4, #12]
 800dbec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbf0:	81a3      	strh	r3, [r4, #12]
 800dbf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dbf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbfa:	6921      	ldr	r1, [r4, #16]
 800dbfc:	464a      	mov	r2, r9
 800dbfe:	f7ff ff6f 	bl	800dae0 <memcpy>
 800dc02:	89a3      	ldrh	r3, [r4, #12]
 800dc04:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dc08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc0c:	81a3      	strh	r3, [r4, #12]
 800dc0e:	6126      	str	r6, [r4, #16]
 800dc10:	6165      	str	r5, [r4, #20]
 800dc12:	444e      	add	r6, r9
 800dc14:	eba5 0509 	sub.w	r5, r5, r9
 800dc18:	6026      	str	r6, [r4, #0]
 800dc1a:	60a5      	str	r5, [r4, #8]
 800dc1c:	463e      	mov	r6, r7
 800dc1e:	42be      	cmp	r6, r7
 800dc20:	d900      	bls.n	800dc24 <__ssputs_r+0x86>
 800dc22:	463e      	mov	r6, r7
 800dc24:	6820      	ldr	r0, [r4, #0]
 800dc26:	4632      	mov	r2, r6
 800dc28:	4641      	mov	r1, r8
 800dc2a:	f000 faa7 	bl	800e17c <memmove>
 800dc2e:	68a3      	ldr	r3, [r4, #8]
 800dc30:	1b9b      	subs	r3, r3, r6
 800dc32:	60a3      	str	r3, [r4, #8]
 800dc34:	6823      	ldr	r3, [r4, #0]
 800dc36:	4433      	add	r3, r6
 800dc38:	6023      	str	r3, [r4, #0]
 800dc3a:	2000      	movs	r0, #0
 800dc3c:	e7db      	b.n	800dbf6 <__ssputs_r+0x58>
 800dc3e:	462a      	mov	r2, r5
 800dc40:	f000 fb96 	bl	800e370 <_realloc_r>
 800dc44:	4606      	mov	r6, r0
 800dc46:	2800      	cmp	r0, #0
 800dc48:	d1e1      	bne.n	800dc0e <__ssputs_r+0x70>
 800dc4a:	6921      	ldr	r1, [r4, #16]
 800dc4c:	4650      	mov	r0, sl
 800dc4e:	f000 faaf 	bl	800e1b0 <_free_r>
 800dc52:	e7c7      	b.n	800dbe4 <__ssputs_r+0x46>

0800dc54 <_svfiprintf_r>:
 800dc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc58:	4698      	mov	r8, r3
 800dc5a:	898b      	ldrh	r3, [r1, #12]
 800dc5c:	061b      	lsls	r3, r3, #24
 800dc5e:	b09d      	sub	sp, #116	; 0x74
 800dc60:	4607      	mov	r7, r0
 800dc62:	460d      	mov	r5, r1
 800dc64:	4614      	mov	r4, r2
 800dc66:	d50e      	bpl.n	800dc86 <_svfiprintf_r+0x32>
 800dc68:	690b      	ldr	r3, [r1, #16]
 800dc6a:	b963      	cbnz	r3, 800dc86 <_svfiprintf_r+0x32>
 800dc6c:	2140      	movs	r1, #64	; 0x40
 800dc6e:	f000 fb0b 	bl	800e288 <_malloc_r>
 800dc72:	6028      	str	r0, [r5, #0]
 800dc74:	6128      	str	r0, [r5, #16]
 800dc76:	b920      	cbnz	r0, 800dc82 <_svfiprintf_r+0x2e>
 800dc78:	230c      	movs	r3, #12
 800dc7a:	603b      	str	r3, [r7, #0]
 800dc7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc80:	e0d1      	b.n	800de26 <_svfiprintf_r+0x1d2>
 800dc82:	2340      	movs	r3, #64	; 0x40
 800dc84:	616b      	str	r3, [r5, #20]
 800dc86:	2300      	movs	r3, #0
 800dc88:	9309      	str	r3, [sp, #36]	; 0x24
 800dc8a:	2320      	movs	r3, #32
 800dc8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc90:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc94:	2330      	movs	r3, #48	; 0x30
 800dc96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800de40 <_svfiprintf_r+0x1ec>
 800dc9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc9e:	f04f 0901 	mov.w	r9, #1
 800dca2:	4623      	mov	r3, r4
 800dca4:	469a      	mov	sl, r3
 800dca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcaa:	b10a      	cbz	r2, 800dcb0 <_svfiprintf_r+0x5c>
 800dcac:	2a25      	cmp	r2, #37	; 0x25
 800dcae:	d1f9      	bne.n	800dca4 <_svfiprintf_r+0x50>
 800dcb0:	ebba 0b04 	subs.w	fp, sl, r4
 800dcb4:	d00b      	beq.n	800dcce <_svfiprintf_r+0x7a>
 800dcb6:	465b      	mov	r3, fp
 800dcb8:	4622      	mov	r2, r4
 800dcba:	4629      	mov	r1, r5
 800dcbc:	4638      	mov	r0, r7
 800dcbe:	f7ff ff6e 	bl	800db9e <__ssputs_r>
 800dcc2:	3001      	adds	r0, #1
 800dcc4:	f000 80aa 	beq.w	800de1c <_svfiprintf_r+0x1c8>
 800dcc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcca:	445a      	add	r2, fp
 800dccc:	9209      	str	r2, [sp, #36]	; 0x24
 800dcce:	f89a 3000 	ldrb.w	r3, [sl]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	f000 80a2 	beq.w	800de1c <_svfiprintf_r+0x1c8>
 800dcd8:	2300      	movs	r3, #0
 800dcda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dcde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dce2:	f10a 0a01 	add.w	sl, sl, #1
 800dce6:	9304      	str	r3, [sp, #16]
 800dce8:	9307      	str	r3, [sp, #28]
 800dcea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dcee:	931a      	str	r3, [sp, #104]	; 0x68
 800dcf0:	4654      	mov	r4, sl
 800dcf2:	2205      	movs	r2, #5
 800dcf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcf8:	4851      	ldr	r0, [pc, #324]	; (800de40 <_svfiprintf_r+0x1ec>)
 800dcfa:	f7f2 fa71 	bl	80001e0 <memchr>
 800dcfe:	9a04      	ldr	r2, [sp, #16]
 800dd00:	b9d8      	cbnz	r0, 800dd3a <_svfiprintf_r+0xe6>
 800dd02:	06d0      	lsls	r0, r2, #27
 800dd04:	bf44      	itt	mi
 800dd06:	2320      	movmi	r3, #32
 800dd08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd0c:	0711      	lsls	r1, r2, #28
 800dd0e:	bf44      	itt	mi
 800dd10:	232b      	movmi	r3, #43	; 0x2b
 800dd12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd16:	f89a 3000 	ldrb.w	r3, [sl]
 800dd1a:	2b2a      	cmp	r3, #42	; 0x2a
 800dd1c:	d015      	beq.n	800dd4a <_svfiprintf_r+0xf6>
 800dd1e:	9a07      	ldr	r2, [sp, #28]
 800dd20:	4654      	mov	r4, sl
 800dd22:	2000      	movs	r0, #0
 800dd24:	f04f 0c0a 	mov.w	ip, #10
 800dd28:	4621      	mov	r1, r4
 800dd2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd2e:	3b30      	subs	r3, #48	; 0x30
 800dd30:	2b09      	cmp	r3, #9
 800dd32:	d94e      	bls.n	800ddd2 <_svfiprintf_r+0x17e>
 800dd34:	b1b0      	cbz	r0, 800dd64 <_svfiprintf_r+0x110>
 800dd36:	9207      	str	r2, [sp, #28]
 800dd38:	e014      	b.n	800dd64 <_svfiprintf_r+0x110>
 800dd3a:	eba0 0308 	sub.w	r3, r0, r8
 800dd3e:	fa09 f303 	lsl.w	r3, r9, r3
 800dd42:	4313      	orrs	r3, r2
 800dd44:	9304      	str	r3, [sp, #16]
 800dd46:	46a2      	mov	sl, r4
 800dd48:	e7d2      	b.n	800dcf0 <_svfiprintf_r+0x9c>
 800dd4a:	9b03      	ldr	r3, [sp, #12]
 800dd4c:	1d19      	adds	r1, r3, #4
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	9103      	str	r1, [sp, #12]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	bfbb      	ittet	lt
 800dd56:	425b      	neglt	r3, r3
 800dd58:	f042 0202 	orrlt.w	r2, r2, #2
 800dd5c:	9307      	strge	r3, [sp, #28]
 800dd5e:	9307      	strlt	r3, [sp, #28]
 800dd60:	bfb8      	it	lt
 800dd62:	9204      	strlt	r2, [sp, #16]
 800dd64:	7823      	ldrb	r3, [r4, #0]
 800dd66:	2b2e      	cmp	r3, #46	; 0x2e
 800dd68:	d10c      	bne.n	800dd84 <_svfiprintf_r+0x130>
 800dd6a:	7863      	ldrb	r3, [r4, #1]
 800dd6c:	2b2a      	cmp	r3, #42	; 0x2a
 800dd6e:	d135      	bne.n	800dddc <_svfiprintf_r+0x188>
 800dd70:	9b03      	ldr	r3, [sp, #12]
 800dd72:	1d1a      	adds	r2, r3, #4
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	9203      	str	r2, [sp, #12]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	bfb8      	it	lt
 800dd7c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dd80:	3402      	adds	r4, #2
 800dd82:	9305      	str	r3, [sp, #20]
 800dd84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800de50 <_svfiprintf_r+0x1fc>
 800dd88:	7821      	ldrb	r1, [r4, #0]
 800dd8a:	2203      	movs	r2, #3
 800dd8c:	4650      	mov	r0, sl
 800dd8e:	f7f2 fa27 	bl	80001e0 <memchr>
 800dd92:	b140      	cbz	r0, 800dda6 <_svfiprintf_r+0x152>
 800dd94:	2340      	movs	r3, #64	; 0x40
 800dd96:	eba0 000a 	sub.w	r0, r0, sl
 800dd9a:	fa03 f000 	lsl.w	r0, r3, r0
 800dd9e:	9b04      	ldr	r3, [sp, #16]
 800dda0:	4303      	orrs	r3, r0
 800dda2:	3401      	adds	r4, #1
 800dda4:	9304      	str	r3, [sp, #16]
 800dda6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddaa:	4826      	ldr	r0, [pc, #152]	; (800de44 <_svfiprintf_r+0x1f0>)
 800ddac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ddb0:	2206      	movs	r2, #6
 800ddb2:	f7f2 fa15 	bl	80001e0 <memchr>
 800ddb6:	2800      	cmp	r0, #0
 800ddb8:	d038      	beq.n	800de2c <_svfiprintf_r+0x1d8>
 800ddba:	4b23      	ldr	r3, [pc, #140]	; (800de48 <_svfiprintf_r+0x1f4>)
 800ddbc:	bb1b      	cbnz	r3, 800de06 <_svfiprintf_r+0x1b2>
 800ddbe:	9b03      	ldr	r3, [sp, #12]
 800ddc0:	3307      	adds	r3, #7
 800ddc2:	f023 0307 	bic.w	r3, r3, #7
 800ddc6:	3308      	adds	r3, #8
 800ddc8:	9303      	str	r3, [sp, #12]
 800ddca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddcc:	4433      	add	r3, r6
 800ddce:	9309      	str	r3, [sp, #36]	; 0x24
 800ddd0:	e767      	b.n	800dca2 <_svfiprintf_r+0x4e>
 800ddd2:	fb0c 3202 	mla	r2, ip, r2, r3
 800ddd6:	460c      	mov	r4, r1
 800ddd8:	2001      	movs	r0, #1
 800ddda:	e7a5      	b.n	800dd28 <_svfiprintf_r+0xd4>
 800dddc:	2300      	movs	r3, #0
 800ddde:	3401      	adds	r4, #1
 800dde0:	9305      	str	r3, [sp, #20]
 800dde2:	4619      	mov	r1, r3
 800dde4:	f04f 0c0a 	mov.w	ip, #10
 800dde8:	4620      	mov	r0, r4
 800ddea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddee:	3a30      	subs	r2, #48	; 0x30
 800ddf0:	2a09      	cmp	r2, #9
 800ddf2:	d903      	bls.n	800ddfc <_svfiprintf_r+0x1a8>
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d0c5      	beq.n	800dd84 <_svfiprintf_r+0x130>
 800ddf8:	9105      	str	r1, [sp, #20]
 800ddfa:	e7c3      	b.n	800dd84 <_svfiprintf_r+0x130>
 800ddfc:	fb0c 2101 	mla	r1, ip, r1, r2
 800de00:	4604      	mov	r4, r0
 800de02:	2301      	movs	r3, #1
 800de04:	e7f0      	b.n	800dde8 <_svfiprintf_r+0x194>
 800de06:	ab03      	add	r3, sp, #12
 800de08:	9300      	str	r3, [sp, #0]
 800de0a:	462a      	mov	r2, r5
 800de0c:	4b0f      	ldr	r3, [pc, #60]	; (800de4c <_svfiprintf_r+0x1f8>)
 800de0e:	a904      	add	r1, sp, #16
 800de10:	4638      	mov	r0, r7
 800de12:	f3af 8000 	nop.w
 800de16:	1c42      	adds	r2, r0, #1
 800de18:	4606      	mov	r6, r0
 800de1a:	d1d6      	bne.n	800ddca <_svfiprintf_r+0x176>
 800de1c:	89ab      	ldrh	r3, [r5, #12]
 800de1e:	065b      	lsls	r3, r3, #25
 800de20:	f53f af2c 	bmi.w	800dc7c <_svfiprintf_r+0x28>
 800de24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de26:	b01d      	add	sp, #116	; 0x74
 800de28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de2c:	ab03      	add	r3, sp, #12
 800de2e:	9300      	str	r3, [sp, #0]
 800de30:	462a      	mov	r2, r5
 800de32:	4b06      	ldr	r3, [pc, #24]	; (800de4c <_svfiprintf_r+0x1f8>)
 800de34:	a904      	add	r1, sp, #16
 800de36:	4638      	mov	r0, r7
 800de38:	f000 f87a 	bl	800df30 <_printf_i>
 800de3c:	e7eb      	b.n	800de16 <_svfiprintf_r+0x1c2>
 800de3e:	bf00      	nop
 800de40:	0800ea28 	.word	0x0800ea28
 800de44:	0800ea32 	.word	0x0800ea32
 800de48:	00000000 	.word	0x00000000
 800de4c:	0800db9f 	.word	0x0800db9f
 800de50:	0800ea2e 	.word	0x0800ea2e

0800de54 <_printf_common>:
 800de54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de58:	4616      	mov	r6, r2
 800de5a:	4699      	mov	r9, r3
 800de5c:	688a      	ldr	r2, [r1, #8]
 800de5e:	690b      	ldr	r3, [r1, #16]
 800de60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800de64:	4293      	cmp	r3, r2
 800de66:	bfb8      	it	lt
 800de68:	4613      	movlt	r3, r2
 800de6a:	6033      	str	r3, [r6, #0]
 800de6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800de70:	4607      	mov	r7, r0
 800de72:	460c      	mov	r4, r1
 800de74:	b10a      	cbz	r2, 800de7a <_printf_common+0x26>
 800de76:	3301      	adds	r3, #1
 800de78:	6033      	str	r3, [r6, #0]
 800de7a:	6823      	ldr	r3, [r4, #0]
 800de7c:	0699      	lsls	r1, r3, #26
 800de7e:	bf42      	ittt	mi
 800de80:	6833      	ldrmi	r3, [r6, #0]
 800de82:	3302      	addmi	r3, #2
 800de84:	6033      	strmi	r3, [r6, #0]
 800de86:	6825      	ldr	r5, [r4, #0]
 800de88:	f015 0506 	ands.w	r5, r5, #6
 800de8c:	d106      	bne.n	800de9c <_printf_common+0x48>
 800de8e:	f104 0a19 	add.w	sl, r4, #25
 800de92:	68e3      	ldr	r3, [r4, #12]
 800de94:	6832      	ldr	r2, [r6, #0]
 800de96:	1a9b      	subs	r3, r3, r2
 800de98:	42ab      	cmp	r3, r5
 800de9a:	dc26      	bgt.n	800deea <_printf_common+0x96>
 800de9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dea0:	1e13      	subs	r3, r2, #0
 800dea2:	6822      	ldr	r2, [r4, #0]
 800dea4:	bf18      	it	ne
 800dea6:	2301      	movne	r3, #1
 800dea8:	0692      	lsls	r2, r2, #26
 800deaa:	d42b      	bmi.n	800df04 <_printf_common+0xb0>
 800deac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800deb0:	4649      	mov	r1, r9
 800deb2:	4638      	mov	r0, r7
 800deb4:	47c0      	blx	r8
 800deb6:	3001      	adds	r0, #1
 800deb8:	d01e      	beq.n	800def8 <_printf_common+0xa4>
 800deba:	6823      	ldr	r3, [r4, #0]
 800debc:	68e5      	ldr	r5, [r4, #12]
 800debe:	6832      	ldr	r2, [r6, #0]
 800dec0:	f003 0306 	and.w	r3, r3, #6
 800dec4:	2b04      	cmp	r3, #4
 800dec6:	bf08      	it	eq
 800dec8:	1aad      	subeq	r5, r5, r2
 800deca:	68a3      	ldr	r3, [r4, #8]
 800decc:	6922      	ldr	r2, [r4, #16]
 800dece:	bf0c      	ite	eq
 800ded0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ded4:	2500      	movne	r5, #0
 800ded6:	4293      	cmp	r3, r2
 800ded8:	bfc4      	itt	gt
 800deda:	1a9b      	subgt	r3, r3, r2
 800dedc:	18ed      	addgt	r5, r5, r3
 800dede:	2600      	movs	r6, #0
 800dee0:	341a      	adds	r4, #26
 800dee2:	42b5      	cmp	r5, r6
 800dee4:	d11a      	bne.n	800df1c <_printf_common+0xc8>
 800dee6:	2000      	movs	r0, #0
 800dee8:	e008      	b.n	800defc <_printf_common+0xa8>
 800deea:	2301      	movs	r3, #1
 800deec:	4652      	mov	r2, sl
 800deee:	4649      	mov	r1, r9
 800def0:	4638      	mov	r0, r7
 800def2:	47c0      	blx	r8
 800def4:	3001      	adds	r0, #1
 800def6:	d103      	bne.n	800df00 <_printf_common+0xac>
 800def8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800defc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df00:	3501      	adds	r5, #1
 800df02:	e7c6      	b.n	800de92 <_printf_common+0x3e>
 800df04:	18e1      	adds	r1, r4, r3
 800df06:	1c5a      	adds	r2, r3, #1
 800df08:	2030      	movs	r0, #48	; 0x30
 800df0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800df0e:	4422      	add	r2, r4
 800df10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800df14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800df18:	3302      	adds	r3, #2
 800df1a:	e7c7      	b.n	800deac <_printf_common+0x58>
 800df1c:	2301      	movs	r3, #1
 800df1e:	4622      	mov	r2, r4
 800df20:	4649      	mov	r1, r9
 800df22:	4638      	mov	r0, r7
 800df24:	47c0      	blx	r8
 800df26:	3001      	adds	r0, #1
 800df28:	d0e6      	beq.n	800def8 <_printf_common+0xa4>
 800df2a:	3601      	adds	r6, #1
 800df2c:	e7d9      	b.n	800dee2 <_printf_common+0x8e>
	...

0800df30 <_printf_i>:
 800df30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df34:	7e0f      	ldrb	r7, [r1, #24]
 800df36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800df38:	2f78      	cmp	r7, #120	; 0x78
 800df3a:	4691      	mov	r9, r2
 800df3c:	4680      	mov	r8, r0
 800df3e:	460c      	mov	r4, r1
 800df40:	469a      	mov	sl, r3
 800df42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800df46:	d807      	bhi.n	800df58 <_printf_i+0x28>
 800df48:	2f62      	cmp	r7, #98	; 0x62
 800df4a:	d80a      	bhi.n	800df62 <_printf_i+0x32>
 800df4c:	2f00      	cmp	r7, #0
 800df4e:	f000 80d8 	beq.w	800e102 <_printf_i+0x1d2>
 800df52:	2f58      	cmp	r7, #88	; 0x58
 800df54:	f000 80a3 	beq.w	800e09e <_printf_i+0x16e>
 800df58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800df5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800df60:	e03a      	b.n	800dfd8 <_printf_i+0xa8>
 800df62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800df66:	2b15      	cmp	r3, #21
 800df68:	d8f6      	bhi.n	800df58 <_printf_i+0x28>
 800df6a:	a101      	add	r1, pc, #4	; (adr r1, 800df70 <_printf_i+0x40>)
 800df6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800df70:	0800dfc9 	.word	0x0800dfc9
 800df74:	0800dfdd 	.word	0x0800dfdd
 800df78:	0800df59 	.word	0x0800df59
 800df7c:	0800df59 	.word	0x0800df59
 800df80:	0800df59 	.word	0x0800df59
 800df84:	0800df59 	.word	0x0800df59
 800df88:	0800dfdd 	.word	0x0800dfdd
 800df8c:	0800df59 	.word	0x0800df59
 800df90:	0800df59 	.word	0x0800df59
 800df94:	0800df59 	.word	0x0800df59
 800df98:	0800df59 	.word	0x0800df59
 800df9c:	0800e0e9 	.word	0x0800e0e9
 800dfa0:	0800e00d 	.word	0x0800e00d
 800dfa4:	0800e0cb 	.word	0x0800e0cb
 800dfa8:	0800df59 	.word	0x0800df59
 800dfac:	0800df59 	.word	0x0800df59
 800dfb0:	0800e10b 	.word	0x0800e10b
 800dfb4:	0800df59 	.word	0x0800df59
 800dfb8:	0800e00d 	.word	0x0800e00d
 800dfbc:	0800df59 	.word	0x0800df59
 800dfc0:	0800df59 	.word	0x0800df59
 800dfc4:	0800e0d3 	.word	0x0800e0d3
 800dfc8:	682b      	ldr	r3, [r5, #0]
 800dfca:	1d1a      	adds	r2, r3, #4
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	602a      	str	r2, [r5, #0]
 800dfd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dfd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dfd8:	2301      	movs	r3, #1
 800dfda:	e0a3      	b.n	800e124 <_printf_i+0x1f4>
 800dfdc:	6820      	ldr	r0, [r4, #0]
 800dfde:	6829      	ldr	r1, [r5, #0]
 800dfe0:	0606      	lsls	r6, r0, #24
 800dfe2:	f101 0304 	add.w	r3, r1, #4
 800dfe6:	d50a      	bpl.n	800dffe <_printf_i+0xce>
 800dfe8:	680e      	ldr	r6, [r1, #0]
 800dfea:	602b      	str	r3, [r5, #0]
 800dfec:	2e00      	cmp	r6, #0
 800dfee:	da03      	bge.n	800dff8 <_printf_i+0xc8>
 800dff0:	232d      	movs	r3, #45	; 0x2d
 800dff2:	4276      	negs	r6, r6
 800dff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dff8:	485e      	ldr	r0, [pc, #376]	; (800e174 <_printf_i+0x244>)
 800dffa:	230a      	movs	r3, #10
 800dffc:	e019      	b.n	800e032 <_printf_i+0x102>
 800dffe:	680e      	ldr	r6, [r1, #0]
 800e000:	602b      	str	r3, [r5, #0]
 800e002:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e006:	bf18      	it	ne
 800e008:	b236      	sxthne	r6, r6
 800e00a:	e7ef      	b.n	800dfec <_printf_i+0xbc>
 800e00c:	682b      	ldr	r3, [r5, #0]
 800e00e:	6820      	ldr	r0, [r4, #0]
 800e010:	1d19      	adds	r1, r3, #4
 800e012:	6029      	str	r1, [r5, #0]
 800e014:	0601      	lsls	r1, r0, #24
 800e016:	d501      	bpl.n	800e01c <_printf_i+0xec>
 800e018:	681e      	ldr	r6, [r3, #0]
 800e01a:	e002      	b.n	800e022 <_printf_i+0xf2>
 800e01c:	0646      	lsls	r6, r0, #25
 800e01e:	d5fb      	bpl.n	800e018 <_printf_i+0xe8>
 800e020:	881e      	ldrh	r6, [r3, #0]
 800e022:	4854      	ldr	r0, [pc, #336]	; (800e174 <_printf_i+0x244>)
 800e024:	2f6f      	cmp	r7, #111	; 0x6f
 800e026:	bf0c      	ite	eq
 800e028:	2308      	moveq	r3, #8
 800e02a:	230a      	movne	r3, #10
 800e02c:	2100      	movs	r1, #0
 800e02e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e032:	6865      	ldr	r5, [r4, #4]
 800e034:	60a5      	str	r5, [r4, #8]
 800e036:	2d00      	cmp	r5, #0
 800e038:	bfa2      	ittt	ge
 800e03a:	6821      	ldrge	r1, [r4, #0]
 800e03c:	f021 0104 	bicge.w	r1, r1, #4
 800e040:	6021      	strge	r1, [r4, #0]
 800e042:	b90e      	cbnz	r6, 800e048 <_printf_i+0x118>
 800e044:	2d00      	cmp	r5, #0
 800e046:	d04d      	beq.n	800e0e4 <_printf_i+0x1b4>
 800e048:	4615      	mov	r5, r2
 800e04a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e04e:	fb03 6711 	mls	r7, r3, r1, r6
 800e052:	5dc7      	ldrb	r7, [r0, r7]
 800e054:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e058:	4637      	mov	r7, r6
 800e05a:	42bb      	cmp	r3, r7
 800e05c:	460e      	mov	r6, r1
 800e05e:	d9f4      	bls.n	800e04a <_printf_i+0x11a>
 800e060:	2b08      	cmp	r3, #8
 800e062:	d10b      	bne.n	800e07c <_printf_i+0x14c>
 800e064:	6823      	ldr	r3, [r4, #0]
 800e066:	07de      	lsls	r6, r3, #31
 800e068:	d508      	bpl.n	800e07c <_printf_i+0x14c>
 800e06a:	6923      	ldr	r3, [r4, #16]
 800e06c:	6861      	ldr	r1, [r4, #4]
 800e06e:	4299      	cmp	r1, r3
 800e070:	bfde      	ittt	le
 800e072:	2330      	movle	r3, #48	; 0x30
 800e074:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e078:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e07c:	1b52      	subs	r2, r2, r5
 800e07e:	6122      	str	r2, [r4, #16]
 800e080:	f8cd a000 	str.w	sl, [sp]
 800e084:	464b      	mov	r3, r9
 800e086:	aa03      	add	r2, sp, #12
 800e088:	4621      	mov	r1, r4
 800e08a:	4640      	mov	r0, r8
 800e08c:	f7ff fee2 	bl	800de54 <_printf_common>
 800e090:	3001      	adds	r0, #1
 800e092:	d14c      	bne.n	800e12e <_printf_i+0x1fe>
 800e094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e098:	b004      	add	sp, #16
 800e09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e09e:	4835      	ldr	r0, [pc, #212]	; (800e174 <_printf_i+0x244>)
 800e0a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e0a4:	6829      	ldr	r1, [r5, #0]
 800e0a6:	6823      	ldr	r3, [r4, #0]
 800e0a8:	f851 6b04 	ldr.w	r6, [r1], #4
 800e0ac:	6029      	str	r1, [r5, #0]
 800e0ae:	061d      	lsls	r5, r3, #24
 800e0b0:	d514      	bpl.n	800e0dc <_printf_i+0x1ac>
 800e0b2:	07df      	lsls	r7, r3, #31
 800e0b4:	bf44      	itt	mi
 800e0b6:	f043 0320 	orrmi.w	r3, r3, #32
 800e0ba:	6023      	strmi	r3, [r4, #0]
 800e0bc:	b91e      	cbnz	r6, 800e0c6 <_printf_i+0x196>
 800e0be:	6823      	ldr	r3, [r4, #0]
 800e0c0:	f023 0320 	bic.w	r3, r3, #32
 800e0c4:	6023      	str	r3, [r4, #0]
 800e0c6:	2310      	movs	r3, #16
 800e0c8:	e7b0      	b.n	800e02c <_printf_i+0xfc>
 800e0ca:	6823      	ldr	r3, [r4, #0]
 800e0cc:	f043 0320 	orr.w	r3, r3, #32
 800e0d0:	6023      	str	r3, [r4, #0]
 800e0d2:	2378      	movs	r3, #120	; 0x78
 800e0d4:	4828      	ldr	r0, [pc, #160]	; (800e178 <_printf_i+0x248>)
 800e0d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e0da:	e7e3      	b.n	800e0a4 <_printf_i+0x174>
 800e0dc:	0659      	lsls	r1, r3, #25
 800e0de:	bf48      	it	mi
 800e0e0:	b2b6      	uxthmi	r6, r6
 800e0e2:	e7e6      	b.n	800e0b2 <_printf_i+0x182>
 800e0e4:	4615      	mov	r5, r2
 800e0e6:	e7bb      	b.n	800e060 <_printf_i+0x130>
 800e0e8:	682b      	ldr	r3, [r5, #0]
 800e0ea:	6826      	ldr	r6, [r4, #0]
 800e0ec:	6961      	ldr	r1, [r4, #20]
 800e0ee:	1d18      	adds	r0, r3, #4
 800e0f0:	6028      	str	r0, [r5, #0]
 800e0f2:	0635      	lsls	r5, r6, #24
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	d501      	bpl.n	800e0fc <_printf_i+0x1cc>
 800e0f8:	6019      	str	r1, [r3, #0]
 800e0fa:	e002      	b.n	800e102 <_printf_i+0x1d2>
 800e0fc:	0670      	lsls	r0, r6, #25
 800e0fe:	d5fb      	bpl.n	800e0f8 <_printf_i+0x1c8>
 800e100:	8019      	strh	r1, [r3, #0]
 800e102:	2300      	movs	r3, #0
 800e104:	6123      	str	r3, [r4, #16]
 800e106:	4615      	mov	r5, r2
 800e108:	e7ba      	b.n	800e080 <_printf_i+0x150>
 800e10a:	682b      	ldr	r3, [r5, #0]
 800e10c:	1d1a      	adds	r2, r3, #4
 800e10e:	602a      	str	r2, [r5, #0]
 800e110:	681d      	ldr	r5, [r3, #0]
 800e112:	6862      	ldr	r2, [r4, #4]
 800e114:	2100      	movs	r1, #0
 800e116:	4628      	mov	r0, r5
 800e118:	f7f2 f862 	bl	80001e0 <memchr>
 800e11c:	b108      	cbz	r0, 800e122 <_printf_i+0x1f2>
 800e11e:	1b40      	subs	r0, r0, r5
 800e120:	6060      	str	r0, [r4, #4]
 800e122:	6863      	ldr	r3, [r4, #4]
 800e124:	6123      	str	r3, [r4, #16]
 800e126:	2300      	movs	r3, #0
 800e128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e12c:	e7a8      	b.n	800e080 <_printf_i+0x150>
 800e12e:	6923      	ldr	r3, [r4, #16]
 800e130:	462a      	mov	r2, r5
 800e132:	4649      	mov	r1, r9
 800e134:	4640      	mov	r0, r8
 800e136:	47d0      	blx	sl
 800e138:	3001      	adds	r0, #1
 800e13a:	d0ab      	beq.n	800e094 <_printf_i+0x164>
 800e13c:	6823      	ldr	r3, [r4, #0]
 800e13e:	079b      	lsls	r3, r3, #30
 800e140:	d413      	bmi.n	800e16a <_printf_i+0x23a>
 800e142:	68e0      	ldr	r0, [r4, #12]
 800e144:	9b03      	ldr	r3, [sp, #12]
 800e146:	4298      	cmp	r0, r3
 800e148:	bfb8      	it	lt
 800e14a:	4618      	movlt	r0, r3
 800e14c:	e7a4      	b.n	800e098 <_printf_i+0x168>
 800e14e:	2301      	movs	r3, #1
 800e150:	4632      	mov	r2, r6
 800e152:	4649      	mov	r1, r9
 800e154:	4640      	mov	r0, r8
 800e156:	47d0      	blx	sl
 800e158:	3001      	adds	r0, #1
 800e15a:	d09b      	beq.n	800e094 <_printf_i+0x164>
 800e15c:	3501      	adds	r5, #1
 800e15e:	68e3      	ldr	r3, [r4, #12]
 800e160:	9903      	ldr	r1, [sp, #12]
 800e162:	1a5b      	subs	r3, r3, r1
 800e164:	42ab      	cmp	r3, r5
 800e166:	dcf2      	bgt.n	800e14e <_printf_i+0x21e>
 800e168:	e7eb      	b.n	800e142 <_printf_i+0x212>
 800e16a:	2500      	movs	r5, #0
 800e16c:	f104 0619 	add.w	r6, r4, #25
 800e170:	e7f5      	b.n	800e15e <_printf_i+0x22e>
 800e172:	bf00      	nop
 800e174:	0800ea39 	.word	0x0800ea39
 800e178:	0800ea4a 	.word	0x0800ea4a

0800e17c <memmove>:
 800e17c:	4288      	cmp	r0, r1
 800e17e:	b510      	push	{r4, lr}
 800e180:	eb01 0402 	add.w	r4, r1, r2
 800e184:	d902      	bls.n	800e18c <memmove+0x10>
 800e186:	4284      	cmp	r4, r0
 800e188:	4623      	mov	r3, r4
 800e18a:	d807      	bhi.n	800e19c <memmove+0x20>
 800e18c:	1e43      	subs	r3, r0, #1
 800e18e:	42a1      	cmp	r1, r4
 800e190:	d008      	beq.n	800e1a4 <memmove+0x28>
 800e192:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e196:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e19a:	e7f8      	b.n	800e18e <memmove+0x12>
 800e19c:	4402      	add	r2, r0
 800e19e:	4601      	mov	r1, r0
 800e1a0:	428a      	cmp	r2, r1
 800e1a2:	d100      	bne.n	800e1a6 <memmove+0x2a>
 800e1a4:	bd10      	pop	{r4, pc}
 800e1a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e1aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e1ae:	e7f7      	b.n	800e1a0 <memmove+0x24>

0800e1b0 <_free_r>:
 800e1b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1b2:	2900      	cmp	r1, #0
 800e1b4:	d044      	beq.n	800e240 <_free_r+0x90>
 800e1b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1ba:	9001      	str	r0, [sp, #4]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	f1a1 0404 	sub.w	r4, r1, #4
 800e1c2:	bfb8      	it	lt
 800e1c4:	18e4      	addlt	r4, r4, r3
 800e1c6:	f000 f913 	bl	800e3f0 <__malloc_lock>
 800e1ca:	4a1e      	ldr	r2, [pc, #120]	; (800e244 <_free_r+0x94>)
 800e1cc:	9801      	ldr	r0, [sp, #4]
 800e1ce:	6813      	ldr	r3, [r2, #0]
 800e1d0:	b933      	cbnz	r3, 800e1e0 <_free_r+0x30>
 800e1d2:	6063      	str	r3, [r4, #4]
 800e1d4:	6014      	str	r4, [r2, #0]
 800e1d6:	b003      	add	sp, #12
 800e1d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e1dc:	f000 b90e 	b.w	800e3fc <__malloc_unlock>
 800e1e0:	42a3      	cmp	r3, r4
 800e1e2:	d908      	bls.n	800e1f6 <_free_r+0x46>
 800e1e4:	6825      	ldr	r5, [r4, #0]
 800e1e6:	1961      	adds	r1, r4, r5
 800e1e8:	428b      	cmp	r3, r1
 800e1ea:	bf01      	itttt	eq
 800e1ec:	6819      	ldreq	r1, [r3, #0]
 800e1ee:	685b      	ldreq	r3, [r3, #4]
 800e1f0:	1949      	addeq	r1, r1, r5
 800e1f2:	6021      	streq	r1, [r4, #0]
 800e1f4:	e7ed      	b.n	800e1d2 <_free_r+0x22>
 800e1f6:	461a      	mov	r2, r3
 800e1f8:	685b      	ldr	r3, [r3, #4]
 800e1fa:	b10b      	cbz	r3, 800e200 <_free_r+0x50>
 800e1fc:	42a3      	cmp	r3, r4
 800e1fe:	d9fa      	bls.n	800e1f6 <_free_r+0x46>
 800e200:	6811      	ldr	r1, [r2, #0]
 800e202:	1855      	adds	r5, r2, r1
 800e204:	42a5      	cmp	r5, r4
 800e206:	d10b      	bne.n	800e220 <_free_r+0x70>
 800e208:	6824      	ldr	r4, [r4, #0]
 800e20a:	4421      	add	r1, r4
 800e20c:	1854      	adds	r4, r2, r1
 800e20e:	42a3      	cmp	r3, r4
 800e210:	6011      	str	r1, [r2, #0]
 800e212:	d1e0      	bne.n	800e1d6 <_free_r+0x26>
 800e214:	681c      	ldr	r4, [r3, #0]
 800e216:	685b      	ldr	r3, [r3, #4]
 800e218:	6053      	str	r3, [r2, #4]
 800e21a:	4421      	add	r1, r4
 800e21c:	6011      	str	r1, [r2, #0]
 800e21e:	e7da      	b.n	800e1d6 <_free_r+0x26>
 800e220:	d902      	bls.n	800e228 <_free_r+0x78>
 800e222:	230c      	movs	r3, #12
 800e224:	6003      	str	r3, [r0, #0]
 800e226:	e7d6      	b.n	800e1d6 <_free_r+0x26>
 800e228:	6825      	ldr	r5, [r4, #0]
 800e22a:	1961      	adds	r1, r4, r5
 800e22c:	428b      	cmp	r3, r1
 800e22e:	bf04      	itt	eq
 800e230:	6819      	ldreq	r1, [r3, #0]
 800e232:	685b      	ldreq	r3, [r3, #4]
 800e234:	6063      	str	r3, [r4, #4]
 800e236:	bf04      	itt	eq
 800e238:	1949      	addeq	r1, r1, r5
 800e23a:	6021      	streq	r1, [r4, #0]
 800e23c:	6054      	str	r4, [r2, #4]
 800e23e:	e7ca      	b.n	800e1d6 <_free_r+0x26>
 800e240:	b003      	add	sp, #12
 800e242:	bd30      	pop	{r4, r5, pc}
 800e244:	20014d74 	.word	0x20014d74

0800e248 <sbrk_aligned>:
 800e248:	b570      	push	{r4, r5, r6, lr}
 800e24a:	4e0e      	ldr	r6, [pc, #56]	; (800e284 <sbrk_aligned+0x3c>)
 800e24c:	460c      	mov	r4, r1
 800e24e:	6831      	ldr	r1, [r6, #0]
 800e250:	4605      	mov	r5, r0
 800e252:	b911      	cbnz	r1, 800e25a <sbrk_aligned+0x12>
 800e254:	f000 f8bc 	bl	800e3d0 <_sbrk_r>
 800e258:	6030      	str	r0, [r6, #0]
 800e25a:	4621      	mov	r1, r4
 800e25c:	4628      	mov	r0, r5
 800e25e:	f000 f8b7 	bl	800e3d0 <_sbrk_r>
 800e262:	1c43      	adds	r3, r0, #1
 800e264:	d00a      	beq.n	800e27c <sbrk_aligned+0x34>
 800e266:	1cc4      	adds	r4, r0, #3
 800e268:	f024 0403 	bic.w	r4, r4, #3
 800e26c:	42a0      	cmp	r0, r4
 800e26e:	d007      	beq.n	800e280 <sbrk_aligned+0x38>
 800e270:	1a21      	subs	r1, r4, r0
 800e272:	4628      	mov	r0, r5
 800e274:	f000 f8ac 	bl	800e3d0 <_sbrk_r>
 800e278:	3001      	adds	r0, #1
 800e27a:	d101      	bne.n	800e280 <sbrk_aligned+0x38>
 800e27c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e280:	4620      	mov	r0, r4
 800e282:	bd70      	pop	{r4, r5, r6, pc}
 800e284:	20014d78 	.word	0x20014d78

0800e288 <_malloc_r>:
 800e288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e28c:	1ccd      	adds	r5, r1, #3
 800e28e:	f025 0503 	bic.w	r5, r5, #3
 800e292:	3508      	adds	r5, #8
 800e294:	2d0c      	cmp	r5, #12
 800e296:	bf38      	it	cc
 800e298:	250c      	movcc	r5, #12
 800e29a:	2d00      	cmp	r5, #0
 800e29c:	4607      	mov	r7, r0
 800e29e:	db01      	blt.n	800e2a4 <_malloc_r+0x1c>
 800e2a0:	42a9      	cmp	r1, r5
 800e2a2:	d905      	bls.n	800e2b0 <_malloc_r+0x28>
 800e2a4:	230c      	movs	r3, #12
 800e2a6:	603b      	str	r3, [r7, #0]
 800e2a8:	2600      	movs	r6, #0
 800e2aa:	4630      	mov	r0, r6
 800e2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2b0:	4e2e      	ldr	r6, [pc, #184]	; (800e36c <_malloc_r+0xe4>)
 800e2b2:	f000 f89d 	bl	800e3f0 <__malloc_lock>
 800e2b6:	6833      	ldr	r3, [r6, #0]
 800e2b8:	461c      	mov	r4, r3
 800e2ba:	bb34      	cbnz	r4, 800e30a <_malloc_r+0x82>
 800e2bc:	4629      	mov	r1, r5
 800e2be:	4638      	mov	r0, r7
 800e2c0:	f7ff ffc2 	bl	800e248 <sbrk_aligned>
 800e2c4:	1c43      	adds	r3, r0, #1
 800e2c6:	4604      	mov	r4, r0
 800e2c8:	d14d      	bne.n	800e366 <_malloc_r+0xde>
 800e2ca:	6834      	ldr	r4, [r6, #0]
 800e2cc:	4626      	mov	r6, r4
 800e2ce:	2e00      	cmp	r6, #0
 800e2d0:	d140      	bne.n	800e354 <_malloc_r+0xcc>
 800e2d2:	6823      	ldr	r3, [r4, #0]
 800e2d4:	4631      	mov	r1, r6
 800e2d6:	4638      	mov	r0, r7
 800e2d8:	eb04 0803 	add.w	r8, r4, r3
 800e2dc:	f000 f878 	bl	800e3d0 <_sbrk_r>
 800e2e0:	4580      	cmp	r8, r0
 800e2e2:	d13a      	bne.n	800e35a <_malloc_r+0xd2>
 800e2e4:	6821      	ldr	r1, [r4, #0]
 800e2e6:	3503      	adds	r5, #3
 800e2e8:	1a6d      	subs	r5, r5, r1
 800e2ea:	f025 0503 	bic.w	r5, r5, #3
 800e2ee:	3508      	adds	r5, #8
 800e2f0:	2d0c      	cmp	r5, #12
 800e2f2:	bf38      	it	cc
 800e2f4:	250c      	movcc	r5, #12
 800e2f6:	4629      	mov	r1, r5
 800e2f8:	4638      	mov	r0, r7
 800e2fa:	f7ff ffa5 	bl	800e248 <sbrk_aligned>
 800e2fe:	3001      	adds	r0, #1
 800e300:	d02b      	beq.n	800e35a <_malloc_r+0xd2>
 800e302:	6823      	ldr	r3, [r4, #0]
 800e304:	442b      	add	r3, r5
 800e306:	6023      	str	r3, [r4, #0]
 800e308:	e00e      	b.n	800e328 <_malloc_r+0xa0>
 800e30a:	6822      	ldr	r2, [r4, #0]
 800e30c:	1b52      	subs	r2, r2, r5
 800e30e:	d41e      	bmi.n	800e34e <_malloc_r+0xc6>
 800e310:	2a0b      	cmp	r2, #11
 800e312:	d916      	bls.n	800e342 <_malloc_r+0xba>
 800e314:	1961      	adds	r1, r4, r5
 800e316:	42a3      	cmp	r3, r4
 800e318:	6025      	str	r5, [r4, #0]
 800e31a:	bf18      	it	ne
 800e31c:	6059      	strne	r1, [r3, #4]
 800e31e:	6863      	ldr	r3, [r4, #4]
 800e320:	bf08      	it	eq
 800e322:	6031      	streq	r1, [r6, #0]
 800e324:	5162      	str	r2, [r4, r5]
 800e326:	604b      	str	r3, [r1, #4]
 800e328:	4638      	mov	r0, r7
 800e32a:	f104 060b 	add.w	r6, r4, #11
 800e32e:	f000 f865 	bl	800e3fc <__malloc_unlock>
 800e332:	f026 0607 	bic.w	r6, r6, #7
 800e336:	1d23      	adds	r3, r4, #4
 800e338:	1af2      	subs	r2, r6, r3
 800e33a:	d0b6      	beq.n	800e2aa <_malloc_r+0x22>
 800e33c:	1b9b      	subs	r3, r3, r6
 800e33e:	50a3      	str	r3, [r4, r2]
 800e340:	e7b3      	b.n	800e2aa <_malloc_r+0x22>
 800e342:	6862      	ldr	r2, [r4, #4]
 800e344:	42a3      	cmp	r3, r4
 800e346:	bf0c      	ite	eq
 800e348:	6032      	streq	r2, [r6, #0]
 800e34a:	605a      	strne	r2, [r3, #4]
 800e34c:	e7ec      	b.n	800e328 <_malloc_r+0xa0>
 800e34e:	4623      	mov	r3, r4
 800e350:	6864      	ldr	r4, [r4, #4]
 800e352:	e7b2      	b.n	800e2ba <_malloc_r+0x32>
 800e354:	4634      	mov	r4, r6
 800e356:	6876      	ldr	r6, [r6, #4]
 800e358:	e7b9      	b.n	800e2ce <_malloc_r+0x46>
 800e35a:	230c      	movs	r3, #12
 800e35c:	603b      	str	r3, [r7, #0]
 800e35e:	4638      	mov	r0, r7
 800e360:	f000 f84c 	bl	800e3fc <__malloc_unlock>
 800e364:	e7a1      	b.n	800e2aa <_malloc_r+0x22>
 800e366:	6025      	str	r5, [r4, #0]
 800e368:	e7de      	b.n	800e328 <_malloc_r+0xa0>
 800e36a:	bf00      	nop
 800e36c:	20014d74 	.word	0x20014d74

0800e370 <_realloc_r>:
 800e370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e374:	4680      	mov	r8, r0
 800e376:	4614      	mov	r4, r2
 800e378:	460e      	mov	r6, r1
 800e37a:	b921      	cbnz	r1, 800e386 <_realloc_r+0x16>
 800e37c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e380:	4611      	mov	r1, r2
 800e382:	f7ff bf81 	b.w	800e288 <_malloc_r>
 800e386:	b92a      	cbnz	r2, 800e394 <_realloc_r+0x24>
 800e388:	f7ff ff12 	bl	800e1b0 <_free_r>
 800e38c:	4625      	mov	r5, r4
 800e38e:	4628      	mov	r0, r5
 800e390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e394:	f000 f838 	bl	800e408 <_malloc_usable_size_r>
 800e398:	4284      	cmp	r4, r0
 800e39a:	4607      	mov	r7, r0
 800e39c:	d802      	bhi.n	800e3a4 <_realloc_r+0x34>
 800e39e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e3a2:	d812      	bhi.n	800e3ca <_realloc_r+0x5a>
 800e3a4:	4621      	mov	r1, r4
 800e3a6:	4640      	mov	r0, r8
 800e3a8:	f7ff ff6e 	bl	800e288 <_malloc_r>
 800e3ac:	4605      	mov	r5, r0
 800e3ae:	2800      	cmp	r0, #0
 800e3b0:	d0ed      	beq.n	800e38e <_realloc_r+0x1e>
 800e3b2:	42bc      	cmp	r4, r7
 800e3b4:	4622      	mov	r2, r4
 800e3b6:	4631      	mov	r1, r6
 800e3b8:	bf28      	it	cs
 800e3ba:	463a      	movcs	r2, r7
 800e3bc:	f7ff fb90 	bl	800dae0 <memcpy>
 800e3c0:	4631      	mov	r1, r6
 800e3c2:	4640      	mov	r0, r8
 800e3c4:	f7ff fef4 	bl	800e1b0 <_free_r>
 800e3c8:	e7e1      	b.n	800e38e <_realloc_r+0x1e>
 800e3ca:	4635      	mov	r5, r6
 800e3cc:	e7df      	b.n	800e38e <_realloc_r+0x1e>
	...

0800e3d0 <_sbrk_r>:
 800e3d0:	b538      	push	{r3, r4, r5, lr}
 800e3d2:	4d06      	ldr	r5, [pc, #24]	; (800e3ec <_sbrk_r+0x1c>)
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	4604      	mov	r4, r0
 800e3d8:	4608      	mov	r0, r1
 800e3da:	602b      	str	r3, [r5, #0]
 800e3dc:	f7f7 fb66 	bl	8005aac <_sbrk>
 800e3e0:	1c43      	adds	r3, r0, #1
 800e3e2:	d102      	bne.n	800e3ea <_sbrk_r+0x1a>
 800e3e4:	682b      	ldr	r3, [r5, #0]
 800e3e6:	b103      	cbz	r3, 800e3ea <_sbrk_r+0x1a>
 800e3e8:	6023      	str	r3, [r4, #0]
 800e3ea:	bd38      	pop	{r3, r4, r5, pc}
 800e3ec:	20014d7c 	.word	0x20014d7c

0800e3f0 <__malloc_lock>:
 800e3f0:	4801      	ldr	r0, [pc, #4]	; (800e3f8 <__malloc_lock+0x8>)
 800e3f2:	f000 b811 	b.w	800e418 <__retarget_lock_acquire_recursive>
 800e3f6:	bf00      	nop
 800e3f8:	20014d80 	.word	0x20014d80

0800e3fc <__malloc_unlock>:
 800e3fc:	4801      	ldr	r0, [pc, #4]	; (800e404 <__malloc_unlock+0x8>)
 800e3fe:	f000 b80c 	b.w	800e41a <__retarget_lock_release_recursive>
 800e402:	bf00      	nop
 800e404:	20014d80 	.word	0x20014d80

0800e408 <_malloc_usable_size_r>:
 800e408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e40c:	1f18      	subs	r0, r3, #4
 800e40e:	2b00      	cmp	r3, #0
 800e410:	bfbc      	itt	lt
 800e412:	580b      	ldrlt	r3, [r1, r0]
 800e414:	18c0      	addlt	r0, r0, r3
 800e416:	4770      	bx	lr

0800e418 <__retarget_lock_acquire_recursive>:
 800e418:	4770      	bx	lr

0800e41a <__retarget_lock_release_recursive>:
 800e41a:	4770      	bx	lr

0800e41c <_init>:
 800e41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e41e:	bf00      	nop
 800e420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e422:	bc08      	pop	{r3}
 800e424:	469e      	mov	lr, r3
 800e426:	4770      	bx	lr

0800e428 <_fini>:
 800e428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e42a:	bf00      	nop
 800e42c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e42e:	bc08      	pop	{r3}
 800e430:	469e      	mov	lr, r3
 800e432:	4770      	bx	lr
